
controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c04  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08003ea8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003ea8  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c08c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab4  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002db80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002e528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159dc  00000000  00000000  0002ee50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c99e  00000000  00000000  0004482c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872b3  00000000  00000000  000511ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d847d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e8  00000000  00000000  000d84d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003d84 	.word	0x08003d84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003d84 	.word	0x08003d84

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <lcdSetCursor>:
  // Set Cursor - 0xFE 0x45
  // row 0: 0x00 - 0x13 Mode: Manual/Autonomous
  // row 1: 0x40 - 0x53 Direction: F/L/R/B/S
  // row 2: 0x14 - 0x27
  // row 3: 0x54 - 0x67 Location: (x, y), N/E/S/W
  void lcdSetCursor(int row, int col){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	  uint8_t cmd_buf[3];
	  cmd_buf[0] = 0xFE;
 80004e6:	23fe      	movs	r3, #254	; 0xfe
 80004e8:	733b      	strb	r3, [r7, #12]
	  cmd_buf[1] = 0x45;
 80004ea:	2345      	movs	r3, #69	; 0x45
 80004ec:	737b      	strb	r3, [r7, #13]
	  switch(row){
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d849      	bhi.n	8000588 <lcdSetCursor+0xac>
 80004f4:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <lcdSetCursor+0x20>)
 80004f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fa:	bf00      	nop
 80004fc:	0800050d 	.word	0x0800050d
 8000500:	08000529 	.word	0x08000529
 8000504:	08000549 	.word	0x08000549
 8000508:	08000569 	.word	0x08000569
	  case 0:
		  cmd_buf[2] = 0x00 + col;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	73bb      	strb	r3, [r7, #14]
		  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 2000);
 8000512:	f107 020c 	add.w	r2, r7, #12
 8000516:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2303      	movs	r3, #3
 800051e:	2150      	movs	r1, #80	; 0x50
 8000520:	481b      	ldr	r0, [pc, #108]	; (8000590 <lcdSetCursor+0xb4>)
 8000522:	f001 fbeb 	bl	8001cfc <HAL_I2C_Master_Transmit>
		  break;
 8000526:	e02f      	b.n	8000588 <lcdSetCursor+0xac>

	  case 1:
	  		  cmd_buf[2] = 0x40 + col;
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	3340      	adds	r3, #64	; 0x40
 800052e:	b2db      	uxtb	r3, r3
 8000530:	73bb      	strb	r3, [r7, #14]
	  		  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 1000);
 8000532:	f107 020c 	add.w	r2, r7, #12
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2303      	movs	r3, #3
 800053e:	2150      	movs	r1, #80	; 0x50
 8000540:	4813      	ldr	r0, [pc, #76]	; (8000590 <lcdSetCursor+0xb4>)
 8000542:	f001 fbdb 	bl	8001cfc <HAL_I2C_Master_Transmit>
	  		  break;
 8000546:	e01f      	b.n	8000588 <lcdSetCursor+0xac>

	  case 2:
	  		  cmd_buf[2] = 0x14 + col;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	3314      	adds	r3, #20
 800054e:	b2db      	uxtb	r3, r3
 8000550:	73bb      	strb	r3, [r7, #14]
	  		  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 1000);
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2303      	movs	r3, #3
 800055e:	2150      	movs	r1, #80	; 0x50
 8000560:	480b      	ldr	r0, [pc, #44]	; (8000590 <lcdSetCursor+0xb4>)
 8000562:	f001 fbcb 	bl	8001cfc <HAL_I2C_Master_Transmit>
	  		  break;
 8000566:	e00f      	b.n	8000588 <lcdSetCursor+0xac>

	  case 3:
	  		  cmd_buf[2] = 0x54 + col;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	3354      	adds	r3, #84	; 0x54
 800056e:	b2db      	uxtb	r3, r3
 8000570:	73bb      	strb	r3, [r7, #14]
	  		  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 1000);
 8000572:	f107 020c 	add.w	r2, r7, #12
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2303      	movs	r3, #3
 800057e:	2150      	movs	r1, #80	; 0x50
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <lcdSetCursor+0xb4>)
 8000582:	f001 fbbb 	bl	8001cfc <HAL_I2C_Master_Transmit>
	  		  break;
 8000586:	bf00      	nop

		  break;
	  }
  }
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000028 	.word	0x20000028

08000594 <lcdWrite>:

  // Takes in character array
  void lcdWrite(uint8_t* word, uint8_t len){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af02      	add	r7, sp, #8
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, word, len, 2000);
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005a8:	9200      	str	r2, [sp, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	2150      	movs	r1, #80	; 0x50
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <lcdWrite+0x28>)
 80005b0:	f001 fba4 	bl	8001cfc <HAL_I2C_Master_Transmit>
  }
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000028 	.word	0x20000028

080005c0 <lcdClearScreen>:

  // Clear Screen - 0xFE 0x51
  void lcdClearScreen(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
	  uint8_t cmd_buf[2];
		cmd_buf[0] = 0xFE;
 80005c6:	23fe      	movs	r3, #254	; 0xfe
 80005c8:	713b      	strb	r3, [r7, #4]
		cmd_buf[1] = 0x51;
 80005ca:	2351      	movs	r3, #81	; 0x51
 80005cc:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 1000);
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2302      	movs	r3, #2
 80005d8:	2150      	movs	r1, #80	; 0x50
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <lcdClearScreen+0x28>)
 80005dc:	f001 fb8e 	bl	8001cfc <HAL_I2C_Master_Transmit>
  }
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000028 	.word	0x20000028

080005ec <lcdDrawMenu>:

  // Creates custom lcd menu
  void lcdDrawMenu(){
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
	  lcdClearScreen();
 80005f2:	f7ff ffe5 	bl	80005c0 <lcdClearScreen>
	  uint8_t mode[] = {'M', 'O', 'D', 'E', ':'};
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <lcdDrawMenu+0xa4>)
 80005f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	7019      	strb	r1, [r3, #0]
	  uint8_t direction[] = {'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', ':'};
 8000606:	4a23      	ldr	r2, [pc, #140]	; (8000694 <lcdDrawMenu+0xa8>)
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	ca07      	ldmia	r2, {r0, r1, r2}
 800060e:	c303      	stmia	r3!, {r0, r1}
 8000610:	801a      	strh	r2, [r3, #0]
	  uint8_t location[] = {'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', ':'};
 8000612:	4a21      	ldr	r2, [pc, #132]	; (8000698 <lcdDrawMenu+0xac>)
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	ca07      	ldmia	r2, {r0, r1, r2}
 800061a:	c303      	stmia	r3!, {r0, r1}
 800061c:	701a      	strb	r2, [r3, #0]
	  uint8_t format[] = {'L', 'E', 'F', 'T', ' ', ' ', 'F', 'R', 'O', 'N', 'T', ' ', ' ', 'R', 'I', 'G', 'H', 'T', ' '};
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <lcdDrawMenu+0xb0>)
 8000620:	1d3c      	adds	r4, r7, #4
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	682b      	ldr	r3, [r5, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	8022      	strh	r2, [r4, #0]
 800062e:	3402      	adds	r4, #2
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	7023      	strb	r3, [r4, #0]


	  HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f000 fe9f 	bl	8001378 <HAL_Delay>
	  lcdSetCursor(0, 0);
 800063a:	2100      	movs	r1, #0
 800063c:	2000      	movs	r0, #0
 800063e:	f7ff ff4d 	bl	80004dc <lcdSetCursor>
	  lcdWrite(&mode, sizeof(mode));
 8000642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000646:	2105      	movs	r1, #5
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa3 	bl	8000594 <lcdWrite>
//	  lcdWrite(&(mode[4]));

	  lcdSetCursor(1, 0);
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff ff43 	bl	80004dc <lcdSetCursor>
	  lcdWrite(&direction, sizeof(direction));
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	210a      	movs	r1, #10
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff99 	bl	8000594 <lcdWrite>

	  lcdSetCursor(2, 0);
 8000662:	2100      	movs	r1, #0
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff39 	bl	80004dc <lcdSetCursor>
	  lcdWrite(&location, sizeof(location));
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2109      	movs	r1, #9
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff8f 	bl	8000594 <lcdWrite>

	  lcdSetCursor(3, 0);
 8000676:	2100      	movs	r1, #0
 8000678:	2003      	movs	r0, #3
 800067a:	f7ff ff2f 	bl	80004dc <lcdSetCursor>
	  lcdWrite(&format, sizeof(format));
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2113      	movs	r1, #19
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff86 	bl	8000594 <lcdWrite>

  }
 8000688:	bf00      	nop
 800068a:	3738      	adds	r7, #56	; 0x38
 800068c:	46bd      	mov	sp, r7
 800068e:	bdb0      	pop	{r4, r5, r7, pc}
 8000690:	08003d9c 	.word	0x08003d9c
 8000694:	08003da4 	.word	0x08003da4
 8000698:	08003db0 	.word	0x08003db0
 800069c:	08003dbc 	.word	0x08003dbc

080006a0 <lcdSetBrightness>:

// backlight brightness - 0xFE 0x53
  // inputs are values 1-8, 8 being brightest
  void lcdSetBrightness(uint8_t brightness){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	  uint8_t cmd_buf[3];
	  cmd_buf[0] = 0xFE;
 80006aa:	23fe      	movs	r3, #254	; 0xfe
 80006ac:	733b      	strb	r3, [r7, #12]
	  cmd_buf[1] = 0x53;
 80006ae:	2353      	movs	r3, #83	; 0x53
 80006b0:	737b      	strb	r3, [r7, #13]
	  cmd_buf[2] = brightness;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	73bb      	strb	r3, [r7, #14]
	  HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, cmd_buf, sizeof(cmd_buf), 1000);
 80006b6:	f107 020c 	add.w	r2, r7, #12
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2303      	movs	r3, #3
 80006c2:	2150      	movs	r1, #80	; 0x50
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <lcdSetBrightness+0x34>)
 80006c6:	f001 fb19 	bl	8001cfc <HAL_I2C_Master_Transmit>
  }
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028

080006d8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	// received_data[0] = UART6_rxBuffer[0];
	memcpy(received_data, UART6_rxBuffer, UART_buffer_size);
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_UART_RxCpltCallback+0x2c>)
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_UART_RxCpltCallback+0x30>)
 80006e4:	4614      	mov	r4, r2
 80006e6:	461d      	mov	r5, r3
 80006e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ec:	682b      	ldr	r3, [r5, #0]
 80006ee:	6023      	str	r3, [r4, #0]
    HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80006f0:	2214      	movs	r2, #20
 80006f2:	4905      	ldr	r1, [pc, #20]	; (8000708 <HAL_UART_RxCpltCallback+0x30>)
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_RxCpltCallback+0x34>)
 80006f6:	f002 fb80 	bl	8002dfa <HAL_UART_Receive_IT>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdb0      	pop	{r4, r5, r7, pc}
 8000702:	bf00      	nop
 8000704:	20000118 	.word	0x20000118
 8000708:	20000104 	.word	0x20000104
 800070c:	200000c0 	.word	0x200000c0

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b0ba      	sub	sp, #232	; 0xe8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fdbd 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 faa1 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 fb8b 	bl	8000e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000722:	f000 fb35 	bl	8000d90 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000726:	f000 fb05 	bl	8000d34 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 800072a:	f000 fb5b 	bl	8000de4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 800072e:	2214      	movs	r2, #20
 8000730:	49d6      	ldr	r1, [pc, #856]	; (8000a8c <main+0x37c>)
 8000732:	48d7      	ldr	r0, [pc, #860]	; (8000a90 <main+0x380>)
 8000734:	f002 fb61 	bl	8002dfa <HAL_UART_Receive_IT>

  lcdSetBrightness(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f7ff ffb1 	bl	80006a0 <lcdSetBrightness>
  lcdDrawMenu();
 800073e:	f7ff ff55 	bl	80005ec <lcdDrawMenu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t forward[] = {'F', 'O', 'R', 'W', 'A', 'R', 'D', ' '};
 8000742:	4ad4      	ldr	r2, [pc, #848]	; (8000a94 <main+0x384>)
 8000744:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t backward[] = {'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D'};
 8000750:	4ad1      	ldr	r2, [pc, #836]	; (8000a98 <main+0x388>)
 8000752:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t left[] = {'L', 'E', 'F', 'T', ' ', ' ', ' ', ' '};
 800075e:	4acf      	ldr	r2, [pc, #828]	; (8000a9c <main+0x38c>)
 8000760:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000768:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t right[] = {'R', 'I', 'G', 'H', 'T', ' ', ' ', ' '};
 800076c:	4acc      	ldr	r2, [pc, #816]	; (8000aa0 <main+0x390>)
 800076e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000776:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t stopped[] = {'S', 'T', 'O', 'P', 'P', 'E', 'D', ' '};
 800077a:	4aca      	ldr	r2, [pc, #808]	; (8000aa4 <main+0x394>)
 800077c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000784:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manual[] = {'M', 'A', 'N', 'U', 'A', 'L', ' ', ' ', ' ', ' '};
 8000788:	4ac7      	ldr	r2, [pc, #796]	; (8000aa8 <main+0x398>)
 800078a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800078e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	801a      	strh	r2, [r3, #0]
  uint8_t autonomous[] = {'A', 'U', 'T', 'O', 'N', 'O', 'M', 'O', 'U', 'S'};
 8000794:	4ac5      	ldr	r2, [pc, #788]	; (8000aac <main+0x39c>)
 8000796:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800079a:	ca07      	ldmia	r2, {r0, r1, r2}
 800079c:	c303      	stmia	r3!, {r0, r1}
 800079e:	801a      	strh	r2, [r3, #0]
  uint8_t completed[] = {'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', 'D', ' '};
 80007a0:	4ac3      	ldr	r2, [pc, #780]	; (8000ab0 <main+0x3a0>)
 80007a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]

  uint8_t blankline[] = {' ', ' ', ' ', ' ', ' ', ' ', ' '};
 80007ac:	4ac1      	ldr	r2, [pc, #772]	; (8000ab4 <main+0x3a4>)
 80007ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80007b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b6:	6018      	str	r0, [r3, #0]
 80007b8:	3304      	adds	r3, #4
 80007ba:	8019      	strh	r1, [r3, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	0c0a      	lsrs	r2, r1, #16
 80007c0:	701a      	strb	r2, [r3, #0]

  uint32_t row_ports[] = {ROW0_GPIO_Port, ROW1_GPIO_Port, ROW2_GPIO_Port, ROW3_GPIO_Port};
 80007c2:	4bbd      	ldr	r3, [pc, #756]	; (8000ab8 <main+0x3a8>)
 80007c4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80007c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t row_pins[] = {ROW0_Pin, ROW1_Pin, ROW2_Pin, ROW3_Pin};
 80007ce:	4bbb      	ldr	r3, [pc, #748]	; (8000abc <main+0x3ac>)
 80007d0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint32_t col_ports[] = {COL0_GPIO_Port, COL1_GPIO_Port, COL2_GPIO_Port, COL3_GPIO_Port};
 80007da:	4bb9      	ldr	r3, [pc, #740]	; (8000ac0 <main+0x3b0>)
 80007dc:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80007e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t col_pins[] = {COL0_Pin, COL1_Pin, COL2_Pin, COL3_Pin};
 80007e6:	4bb7      	ldr	r3, [pc, #732]	; (8000ac4 <main+0x3b4>)
 80007e8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t button = '*';
 80007f2:	232a      	movs	r3, #42	; 0x2a
 80007f4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

	  // NOTE: With this method, you cannot press the same button twice.
	  // keypad loop

	  // steady state
	  for(uint8_t i = 0; i < 4; i++){
 80007f8:	2300      	movs	r3, #0
 80007fa:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 80007fe:	e018      	b.n	8000832 <main+0x122>
		  HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_SET);
 8000800:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	33e8      	adds	r3, #232	; 0xe8
 8000808:	443b      	add	r3, r7
 800080a:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 800080e:	4618      	mov	r0, r3
 8000810:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	33e8      	adds	r3, #232	; 0xe8
 8000818:	443b      	add	r3, r7
 800081a:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 800081e:	b29b      	uxth	r3, r3
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	f001 f90c 	bl	8001a40 <HAL_GPIO_WritePin>
	  for(uint8_t i = 0; i < 4; i++){
 8000828:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800082c:	3301      	adds	r3, #1
 800082e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
 8000832:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8000836:	2b03      	cmp	r3, #3
 8000838:	d9e2      	bls.n	8000800 <main+0xf0>
	  }
	  // read if any input pins are high
	  uint8_t active_row = 5;
 800083a:	2305      	movs	r3, #5
 800083c:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	  for(uint8_t i = 0; i < 4; i++){
 8000840:	2300      	movs	r3, #0
 8000842:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8000846:	e01f      	b.n	8000888 <main+0x178>
		  if(HAL_GPIO_ReadPin(row_ports[i], row_pins[i])){
 8000848:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	33e8      	adds	r3, #232	; 0xe8
 8000850:	443b      	add	r3, r7
 8000852:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8000856:	461a      	mov	r2, r3
 8000858:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	33e8      	adds	r3, #232	; 0xe8
 8000860:	443b      	add	r3, r7
 8000862:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	4610      	mov	r0, r2
 800086c:	f001 f8d0 	bl	8001a10 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d003      	beq.n	800087e <main+0x16e>
			  active_row = i;
 8000876:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800087a:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	  for(uint8_t i = 0; i < 4; i++){
 800087e:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8000882:	3301      	adds	r3, #1
 8000884:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8000888:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800088c:	2b03      	cmp	r3, #3
 800088e:	d9db      	bls.n	8000848 <main+0x138>
		  }
	  }

	  // only continue if a button is pressed
	  if(active_row < 5){
 8000890:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8000894:	2b04      	cmp	r3, #4
 8000896:	f200 8087 	bhi.w	80009a8 <main+0x298>
		  // read and check activated rows
		  // do this by outputting 1-hot on col pins
		  uint8_t active_col = 5;
 800089a:	2305      	movs	r3, #5
 800089c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		  for(uint8_t i = 0; i < 4; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80008a6:	e058      	b.n	800095a <main+0x24a>
			  // set all col pins to 0
			  for(int j = 0; j < 4; j++){
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80008ae:	e018      	b.n	80008e2 <main+0x1d2>
				  HAL_GPIO_WritePin(col_ports[j], col_pins[j], GPIO_PIN_RESET);
 80008b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	33e8      	adds	r3, #232	; 0xe8
 80008b8:	443b      	add	r3, r7
 80008ba:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80008be:	4618      	mov	r0, r3
 80008c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	33e8      	adds	r3, #232	; 0xe8
 80008c8:	443b      	add	r3, r7
 80008ca:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	f001 f8b4 	bl	8001a40 <HAL_GPIO_WritePin>
			  for(int j = 0; j < 4; j++){
 80008d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008dc:	3301      	adds	r3, #1
 80008de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80008e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	dde2      	ble.n	80008b0 <main+0x1a0>
			  }
			  HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_SET);
 80008ea:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	33e8      	adds	r3, #232	; 0xe8
 80008f2:	443b      	add	r3, r7
 80008f4:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	33e8      	adds	r3, #232	; 0xe8
 8000902:	443b      	add	r3, r7
 8000904:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 8000908:	b29b      	uxth	r3, r3
 800090a:	2201      	movs	r2, #1
 800090c:	4619      	mov	r1, r3
 800090e:	f001 f897 	bl	8001a40 <HAL_GPIO_WritePin>

			  // if corresponding column is pressed, the active row will be active again
			  uint8_t col = HAL_GPIO_ReadPin(row_ports[active_row], row_pins[active_row]);
 8000912:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	33e8      	adds	r3, #232	; 0xe8
 800091a:	443b      	add	r3, r7
 800091c:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8000920:	461a      	mov	r2, r3
 8000922:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	33e8      	adds	r3, #232	; 0xe8
 800092a:	443b      	add	r3, r7
 800092c:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f001 f86b 	bl	8001a10 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
			  if(col){
 8000940:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <main+0x240>
				  active_col = i;
 8000948:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800094c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		  for(uint8_t i = 0; i < 4; i++){
 8000950:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8000954:	3301      	adds	r3, #1
 8000956:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800095a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800095e:	2b03      	cmp	r3, #3
 8000960:	d9a2      	bls.n	80008a8 <main+0x198>
			  }
		  }

		  // now we have the active row and column, we know the button pressed.
		  uint8_t buttons[4][4] = {{'1', '2', '3', 'A'}, {'4', '5', '6', 'B'}, {'7', '8', '9', 'C'}, {'*', '0', '#', 'D'}};
 8000962:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <main+0x3b8>)
 8000964:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  uint8_t new_button = buttons[active_row][active_col];
 800096e:	f897 20e5 	ldrb.w	r2, [r7, #229]	; 0xe5
 8000972:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	32e8      	adds	r2, #232	; 0xe8
 800097a:	443a      	add	r2, r7
 800097c:	4413      	add	r3, r2
 800097e:	3bc0      	subs	r3, #192	; 0xc0
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if(new_button != button){
 8000986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800098a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800098e:	429a      	cmp	r2, r3
 8000990:	d00a      	beq.n	80009a8 <main+0x298>
			  HAL_UART_Transmit(&huart6, &new_button, sizeof(new_button), 200);
 8000992:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000996:	23c8      	movs	r3, #200	; 0xc8
 8000998:	2201      	movs	r2, #1
 800099a:	483d      	ldr	r0, [pc, #244]	; (8000a90 <main+0x380>)
 800099c:	f002 f99b 	bl	8002cd6 <HAL_UART_Transmit>
			  button = new_button;
 80009a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7

	  }
	  // end keypad loop


	  char tag = received_data[0];
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <main+0x3bc>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

	  switch(tag){
 80009b0:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80009b4:	3b24      	subs	r3, #36	; 0x24
 80009b6:	2b1c      	cmp	r3, #28
 80009b8:	f200 8142 	bhi.w	8000c40 <main+0x530>
 80009bc:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <main+0x2b4>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	08000a39 	.word	0x08000a39
 80009c8:	08000bd3 	.word	0x08000bd3
 80009cc:	08000aff 	.word	0x08000aff
 80009d0:	08000c41 	.word	0x08000c41
 80009d4:	08000c41 	.word	0x08000c41
 80009d8:	08000c41 	.word	0x08000c41
 80009dc:	08000c41 	.word	0x08000c41
 80009e0:	08000c41 	.word	0x08000c41
 80009e4:	08000c41 	.word	0x08000c41
 80009e8:	08000c41 	.word	0x08000c41
 80009ec:	08000c41 	.word	0x08000c41
 80009f0:	08000c41 	.word	0x08000c41
 80009f4:	08000c41 	.word	0x08000c41
 80009f8:	08000c41 	.word	0x08000c41
 80009fc:	08000c41 	.word	0x08000c41
 8000a00:	08000c41 	.word	0x08000c41
 8000a04:	08000c41 	.word	0x08000c41
 8000a08:	08000c41 	.word	0x08000c41
 8000a0c:	08000c41 	.word	0x08000c41
 8000a10:	08000c41 	.word	0x08000c41
 8000a14:	08000c41 	.word	0x08000c41
 8000a18:	08000c41 	.word	0x08000c41
 8000a1c:	08000c41 	.word	0x08000c41
 8000a20:	08000c41 	.word	0x08000c41
 8000a24:	08000c41 	.word	0x08000c41
 8000a28:	08000c41 	.word	0x08000c41
 8000a2c:	08000c41 	.word	0x08000c41
 8000a30:	08000c41 	.word	0x08000c41
 8000a34:	08000b65 	.word	0x08000b65

	  	  // Handle Direction line
	  	  case '$':
	  		  lcdSetCursor(1, 11);
 8000a38:	210b      	movs	r1, #11
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fd4e 	bl	80004dc <lcdSetCursor>
	  		  char direction = received_data[1];
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <main+0x3bc>)
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd

	  		  if(direction == 'L'){
 8000a48:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000a4c:	2b4c      	cmp	r3, #76	; 0x4c
 8000a4e:	d106      	bne.n	8000a5e <main+0x34e>
	  			lcdWrite(&left, sizeof(left));
 8000a50:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000a54:	2108      	movs	r1, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd9c 	bl	8000594 <lcdWrite>
	  			lcdWrite(&backward, sizeof(backward));
	  		  }
	  		  else if(direction == 'S'){
	  			lcdWrite(&stopped, sizeof(stopped));
	   		  }
	  		  break;
 8000a5c:	e0f2      	b.n	8000c44 <main+0x534>
	  	  	  else if(direction == 'R'){
 8000a5e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000a62:	2b52      	cmp	r3, #82	; 0x52
 8000a64:	d106      	bne.n	8000a74 <main+0x364>
	  	  		lcdWrite(&right, sizeof(right));
 8000a66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd91 	bl	8000594 <lcdWrite>
	  		  break;
 8000a72:	e0e7      	b.n	8000c44 <main+0x534>
	  		  else if(direction == 'F'){
 8000a74:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000a78:	2b46      	cmp	r3, #70	; 0x46
 8000a7a:	d129      	bne.n	8000ad0 <main+0x3c0>
	  			lcdWrite(&forward, sizeof(forward));
 8000a7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a80:	2108      	movs	r1, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd86 	bl	8000594 <lcdWrite>
	  		  break;
 8000a88:	e0dc      	b.n	8000c44 <main+0x534>
 8000a8a:	bf00      	nop
 8000a8c:	20000104 	.word	0x20000104
 8000a90:	200000c0 	.word	0x200000c0
 8000a94:	08003dd0 	.word	0x08003dd0
 8000a98:	08003dd8 	.word	0x08003dd8
 8000a9c:	08003de0 	.word	0x08003de0
 8000aa0:	08003de8 	.word	0x08003de8
 8000aa4:	08003df0 	.word	0x08003df0
 8000aa8:	08003df8 	.word	0x08003df8
 8000aac:	08003e04 	.word	0x08003e04
 8000ab0:	08003e10 	.word	0x08003e10
 8000ab4:	08003e1c 	.word	0x08003e1c
 8000ab8:	08003e24 	.word	0x08003e24
 8000abc:	08003e34 	.word	0x08003e34
 8000ac0:	08003e44 	.word	0x08003e44
 8000ac4:	08003e54 	.word	0x08003e54
 8000ac8:	08003e64 	.word	0x08003e64
 8000acc:	20000118 	.word	0x20000118
	  		  else if(direction == 'B'){
 8000ad0:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000ad4:	2b42      	cmp	r3, #66	; 0x42
 8000ad6:	d106      	bne.n	8000ae6 <main+0x3d6>
	  			lcdWrite(&backward, sizeof(backward));
 8000ad8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000adc:	2108      	movs	r1, #8
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd58 	bl	8000594 <lcdWrite>
	  		  break;
 8000ae4:	e0ae      	b.n	8000c44 <main+0x534>
	  		  else if(direction == 'S'){
 8000ae6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000aea:	2b53      	cmp	r3, #83	; 0x53
 8000aec:	f040 80aa 	bne.w	8000c44 <main+0x534>
	  			lcdWrite(&stopped, sizeof(stopped));
 8000af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af4:	2108      	movs	r1, #8
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd4c 	bl	8000594 <lcdWrite>
	  		  break;
 8000afc:	e0a2      	b.n	8000c44 <main+0x534>

	  	  // Handle Mode line
	  	  case '&':
	  		  	 lcdSetCursor(0,7);
 8000afe:	2107      	movs	r1, #7
 8000b00:	2000      	movs	r0, #0
 8000b02:	f7ff fceb 	bl	80004dc <lcdSetCursor>
	  		  	 char mode = received_data[1];
 8000b06:	4b54      	ldr	r3, [pc, #336]	; (8000c58 <main+0x548>)
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	  		  	 if(mode == 'M'){
 8000b0e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000b12:	2b4d      	cmp	r3, #77	; 0x4d
 8000b14:	d110      	bne.n	8000b38 <main+0x428>
	  		  		 lcdWrite(&manual, sizeof(manual));
 8000b16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b1a:	210a      	movs	r1, #10
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd39 	bl	8000594 <lcdWrite>
	  		  		 // Clear location
	  		  		 lcdSetCursor(2, 10);
 8000b22:	210a      	movs	r1, #10
 8000b24:	2002      	movs	r0, #2
 8000b26:	f7ff fcd9 	bl	80004dc <lcdSetCursor>
	  		  		 lcdWrite(&blankline, sizeof(blankline));
 8000b2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000b2e:	2107      	movs	r1, #7
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd2f 	bl	8000594 <lcdWrite>
	  		  		 lcdWrite(&autonomous, sizeof(autonomous));
	  		  	 }
	  		  	 else if(mode == 'C'){
	  		  		 lcdWrite(&completed, sizeof(completed));
	  		  	 }
	  		  break;
 8000b36:	e087      	b.n	8000c48 <main+0x538>
	  		  	 else if(mode == 'A'){
 8000b38:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000b3c:	2b41      	cmp	r3, #65	; 0x41
 8000b3e:	d106      	bne.n	8000b4e <main+0x43e>
	  		  		 lcdWrite(&autonomous, sizeof(autonomous));
 8000b40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b44:	210a      	movs	r1, #10
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fd24 	bl	8000594 <lcdWrite>
	  		  break;
 8000b4c:	e07c      	b.n	8000c48 <main+0x538>
	  		  	 else if(mode == 'C'){
 8000b4e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000b52:	2b43      	cmp	r3, #67	; 0x43
 8000b54:	d178      	bne.n	8000c48 <main+0x538>
	  		  		 lcdWrite(&completed, sizeof(completed));
 8000b56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff fd19 	bl	8000594 <lcdWrite>
	  		  break;
 8000b62:	e071      	b.n	8000c48 <main+0x538>

	  	  // Handle Location line
	  	  case '@':
	  		  lcdSetCursor(2, 10);
 8000b64:	210a      	movs	r1, #10
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff fcb8 	bl	80004dc <lcdSetCursor>
	  		  uint8_t buf[20];
	  		  memcpy(buf, received_data, sizeof(received_data));
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <main+0x548>)
 8000b6e:	f107 0410 	add.w	r4, r7, #16
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	6023      	str	r3, [r4, #0]
	  		  uint8_t x = buf[1];
 8000b7c:	7c7b      	ldrb	r3, [r7, #17]
 8000b7e:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
	  		  uint8_t y = buf[3];
 8000b82:	7cfb      	ldrb	r3, [r7, #19]
 8000b84:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
	  		  uint8_t facing = buf[5];
 8000b88:	7d7b      	ldrb	r3, [r7, #21]
 8000b8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	  		  uint8_t dir[4] = {'N', 'E', 'S', 'W'};
 8000b8e:	4b33      	ldr	r3, [pc, #204]	; (8000c5c <main+0x54c>)
 8000b90:	60fb      	str	r3, [r7, #12]
	  		  int index = facing - '0';
 8000b92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8000b96:	3b30      	subs	r3, #48	; 0x30
 8000b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  		  uint8_t location[] = {'(', x, ',', y, ')', ' ', dir[index]};
 8000b9c:	2328      	movs	r3, #40	; 0x28
 8000b9e:	713b      	strb	r3, [r7, #4]
 8000ba0:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8000ba4:	717b      	strb	r3, [r7, #5]
 8000ba6:	232c      	movs	r3, #44	; 0x2c
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	2329      	movs	r3, #41	; 0x29
 8000bb2:	723b      	strb	r3, [r7, #8]
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	727b      	strb	r3, [r7, #9]
 8000bb8:	f107 020c 	add.w	r2, r7, #12
 8000bbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	72bb      	strb	r3, [r7, #10]
	  		  lcdWrite(&location, sizeof(location));
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2107      	movs	r1, #7
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fce2 	bl	8000594 <lcdWrite>
	  		  break;
 8000bd0:	e03d      	b.n	8000c4e <main+0x53e>

	  	  // Handle wall detection line
	  	  case '%': ; //empty statement
	  		char d = received_data[1];
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <main+0x548>)
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	  		char di[] = {received_data[6]};
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <main+0x548>)
 8000bdc:	799b      	ldrb	r3, [r3, #6]
 8000bde:	703b      	strb	r3, [r7, #0]
	  		  if(d == 'L'){
 8000be0:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000be4:	2b4c      	cmp	r3, #76	; 0x4c
 8000be6:	d109      	bne.n	8000bfc <main+0x4ec>
	  			lcdSetCursor(3,4);
 8000be8:	2104      	movs	r1, #4
 8000bea:	2003      	movs	r0, #3
 8000bec:	f7ff fc76 	bl	80004dc <lcdSetCursor>
	  			lcdWrite(&di, sizeof(di));
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fccd 	bl	8000594 <lcdWrite>
	  		  else if(d == 'R'){
	  			lcdSetCursor(3,18);
	  			di[0] = received_data[7];
	  			lcdWrite(&di, sizeof(di));
	  		  }
	  		  break;
 8000bfa:	e027      	b.n	8000c4c <main+0x53c>
	  		  else if(d == 'F'){
 8000bfc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000c00:	2b46      	cmp	r3, #70	; 0x46
 8000c02:	d10c      	bne.n	8000c1e <main+0x50e>
	  			lcdSetCursor(3,11);
 8000c04:	210b      	movs	r1, #11
 8000c06:	2003      	movs	r0, #3
 8000c08:	f7ff fc68 	bl	80004dc <lcdSetCursor>
	  			di[0] = received_data[7];
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <main+0x548>)
 8000c0e:	79db      	ldrb	r3, [r3, #7]
 8000c10:	703b      	strb	r3, [r7, #0]
	  			lcdWrite(&di, sizeof(di));
 8000c12:	463b      	mov	r3, r7
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fcbc 	bl	8000594 <lcdWrite>
	  		  break;
 8000c1c:	e016      	b.n	8000c4c <main+0x53c>
	  		  else if(d == 'R'){
 8000c1e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000c22:	2b52      	cmp	r3, #82	; 0x52
 8000c24:	d112      	bne.n	8000c4c <main+0x53c>
	  			lcdSetCursor(3,18);
 8000c26:	2112      	movs	r1, #18
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f7ff fc57 	bl	80004dc <lcdSetCursor>
	  			di[0] = received_data[7];
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <main+0x548>)
 8000c30:	79db      	ldrb	r3, [r3, #7]
 8000c32:	703b      	strb	r3, [r7, #0]
	  			lcdWrite(&di, sizeof(di));
 8000c34:	463b      	mov	r3, r7
 8000c36:	2101      	movs	r1, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fcab 	bl	8000594 <lcdWrite>
	  		  break;
 8000c3e:	e005      	b.n	8000c4c <main+0x53c>

	  	  default:
	  		  break;
 8000c40:	bf00      	nop
 8000c42:	e004      	b.n	8000c4e <main+0x53e>
	  		  break;
 8000c44:	bf00      	nop
 8000c46:	e002      	b.n	8000c4e <main+0x53e>
	  		  break;
 8000c48:	bf00      	nop
 8000c4a:	e000      	b.n	8000c4e <main+0x53e>
	  		  break;
 8000c4c:	bf00      	nop

	  }

	  // 50Hz
	  HAL_Delay(20);
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f000 fb92 	bl	8001378 <HAL_Delay>
  {
 8000c54:	e5d0      	b.n	80007f8 <main+0xe8>
 8000c56:	bf00      	nop
 8000c58:	20000118 	.word	0x20000118
 8000c5c:	5753454e 	.word	0x5753454e

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2230      	movs	r2, #48	; 0x30
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f880 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <SystemClock_Config+0xcc>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <SystemClock_Config+0xcc>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <SystemClock_Config+0xcc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <SystemClock_Config+0xd0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <SystemClock_Config+0xd0>)
 8000caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <SystemClock_Config+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fb10 	bl	800230c <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cf2:	f000 f933 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fd72 	bl	80027fc <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d1e:	f000 f91d 	bl	8000f5c <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3750      	adds	r7, #80	; 0x50
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40007000 	.word	0x40007000

08000d34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d3a:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <MX_I2C2_Init+0x58>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 30000;
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d40:	f247 5230 	movw	r2, #30000	; 0x7530
 8000d44:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d74:	f000 fe7e 	bl	8001a74 <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000d7e:	f000 f8ed 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	40005800 	.word	0x40005800

08000d90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_USART2_UART_Init+0x50>)
 8000d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000db6:	220c      	movs	r2, #12
 8000db8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f001 ff38 	bl	8002c3c <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dd2:	f000 f8c3 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000007c 	.word	0x2000007c
 8000de0:	40004400 	.word	0x40004400

08000de4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART6_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART6_UART_Init+0x4c>)
 8000e1c:	f001 ff0e 	bl	8002c3c <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f899 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000c0 	.word	0x200000c0
 8000e34:	40011400 	.word	0x40011400

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a3e      	ldr	r2, [pc, #248]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b38      	ldr	r3, [pc, #224]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a37      	ldr	r2, [pc, #220]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a30      	ldr	r2, [pc, #192]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b2e      	ldr	r3, [pc, #184]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a29      	ldr	r2, [pc, #164]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_GPIO_Init+0x118>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COL0_Pin, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ec4:	4823      	ldr	r0, [pc, #140]	; (8000f54 <MX_GPIO_Init+0x11c>)
 8000ec6:	f000 fdbb 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000ed0:	4821      	ldr	r0, [pc, #132]	; (8000f58 <MX_GPIO_Init+0x120>)
 8000ed2:	f000 fdb5 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000edc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	481a      	ldr	r0, [pc, #104]	; (8000f58 <MX_GPIO_Init+0x120>)
 8000eee:	f000 fc0b 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000ef2:	230f      	movs	r3, #15
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <MX_GPIO_Init+0x120>)
 8000f06:	f000 fbff 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COL0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COL0_Pin;
 8000f0a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_GPIO_Init+0x11c>)
 8000f24:	f000 fbf0 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 8000f28:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_GPIO_Init+0x120>)
 8000f42:	f000 fbe1 	bl	8001708 <HAL_GPIO_Init>

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020800 	.word	0x40020800

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x4c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fa6:	2007      	movs	r0, #7
 8000fa8:	f000 fada 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a22      	ldr	r2, [pc, #136]	; (8001060 <HAL_I2C_MspInit+0xa8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d13d      	bne.n	8001056 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <HAL_I2C_MspInit+0xac>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_I2C_MspInit+0xac>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HAL_I2C_MspInit+0xac>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001008:	2304      	movs	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4815      	ldr	r0, [pc, #84]	; (8001068 <HAL_I2C_MspInit+0xb0>)
 8001014:	f000 fb78 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800102a:	2309      	movs	r3, #9
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_I2C_MspInit+0xb0>)
 8001036:	f000 fb67 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_I2C_MspInit+0xac>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_I2C_MspInit+0xac>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_I2C_MspInit+0xac>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3728      	adds	r7, #40	; 0x28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40005800 	.word	0x40005800
 8001064:	40023800 	.word	0x40023800
 8001068:	40020400 	.word	0x40020400

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a45      	ldr	r2, [pc, #276]	; (80011a0 <HAL_UART_MspInit+0x134>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a43      	ldr	r2, [pc, #268]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a3c      	ldr	r2, [pc, #240]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010c6:	230c      	movs	r3, #12
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d6:	2307      	movs	r3, #7
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4831      	ldr	r0, [pc, #196]	; (80011a8 <HAL_UART_MspInit+0x13c>)
 80010e2:	f000 fb11 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80010e6:	e057      	b.n	8001198 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <HAL_UART_MspInit+0x140>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d152      	bne.n	8001198 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <HAL_UART_MspInit+0x138>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a23      	ldr	r2, [pc, #140]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_UART_MspInit+0x138>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_UART_MspInit+0x138>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001146:	2340      	movs	r3, #64	; 0x40
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001156:	2308      	movs	r3, #8
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <HAL_UART_MspInit+0x144>)
 8001162:	f000 fad1 	bl	8001708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001178:	2308      	movs	r3, #8
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4809      	ldr	r0, [pc, #36]	; (80011a8 <HAL_UART_MspInit+0x13c>)
 8001184:	f000 fac0 	bl	8001708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2047      	movs	r0, #71	; 0x47
 800118e:	f000 f9f2 	bl	8001576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001192:	2047      	movs	r0, #71	; 0x47
 8001194:	f000 fa0b 	bl	80015ae <HAL_NVIC_EnableIRQ>
}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40020800 	.word	0x40020800

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f89a 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <USART6_IRQHandler+0x10>)
 800120e:	f001 fe25 	bl	8002e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000c0 	.word	0x200000c0

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800125c:	4c0b      	ldr	r4, [pc, #44]	; (800128c <LoopFillZerobss+0x26>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126a:	f7ff ffd7 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126e:	f002 fd5d 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001272:	f7ff fa4d 	bl	8000710 <main>
  bx  lr    
 8001276:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001278:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001284:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8001288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800128c:	20000130 	.word	0x20000130

08001290 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC_IRQHandler>
	...

08001294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <HAL_Init+0x40>)
 800129e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_Init+0x40>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x40>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f94f 	bl	8001560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff fe4e 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023c00 	.word	0x40023c00

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f967 	bl	80015ca <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f000 f92f 	bl	8001576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000000 	.word	0x20000000
 8001330:	20000008 	.word	0x20000008
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000008 	.word	0x20000008
 800135c:	2000012c 	.word	0x2000012c

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	2000012c 	.word	0x2000012c

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000008 	.word	0x20000008

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60d3      	str	r3, [r2, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db0b      	blt.n	800144e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 021f 	and.w	r2, r3, #31
 800143c:	4907      	ldr	r1, [pc, #28]	; (800145c <__NVIC_EnableIRQ+0x38>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	2001      	movs	r0, #1
 8001446:	fa00 f202 	lsl.w	r2, r0, r2
 800144a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	db0a      	blt.n	800148a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <__NVIC_SetPriority+0x4c>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001488:	e00a      	b.n	80014a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <__NVIC_SetPriority+0x50>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	3b04      	subs	r3, #4
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	440b      	add	r3, r1
 800149e:	761a      	strb	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f1c3 0307 	rsb	r3, r3, #7
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	bf28      	it	cs
 80014d2:	2304      	movcs	r3, #4
 80014d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3304      	adds	r3, #4
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d902      	bls.n	80014e4 <NVIC_EncodePriority+0x30>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3b03      	subs	r3, #3
 80014e2:	e000      	b.n	80014e6 <NVIC_EncodePriority+0x32>
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	401a      	ands	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4313      	orrs	r3, r2
         );
}
 800150e:	4618      	mov	r0, r3
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800152c:	d301      	bcc.n	8001532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152e:	2301      	movs	r3, #1
 8001530:	e00f      	b.n	8001552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <SysTick_Config+0x40>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153a:	210f      	movs	r1, #15
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f7ff ff8e 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <SysTick_Config+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <SysTick_Config+0x40>)
 800154c:	2207      	movs	r2, #7
 800154e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff29 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001576:	b580      	push	{r7, lr}
 8001578:	b086      	sub	sp, #24
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001588:	f7ff ff3e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800158c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff ff8e 	bl	80014b4 <NVIC_EncodePriority>
 8001598:	4602      	mov	r2, r0
 800159a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159e:	4611      	mov	r1, r2
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff31 	bl	8001424 <__NVIC_EnableIRQ>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff ffa2 	bl	800151c <SysTick_Config>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff feb6 	bl	8001360 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d008      	beq.n	8001614 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e052      	b.n	80016ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0216 	bic.w	r2, r2, #22
 8001622:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001632:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <HAL_DMA_Abort+0x62>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	2b00      	cmp	r3, #0
 8001642:	d007      	beq.n	8001654 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0208 	bic.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001664:	e013      	b.n	800168e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001666:	f7ff fe7b 	bl	8001360 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b05      	cmp	r3, #5
 8001672:	d90c      	bls.n	800168e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e015      	b.n	80016ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e4      	bne.n	8001666 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	223f      	movs	r2, #63	; 0x3f
 80016a2:	409a      	lsls	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e00c      	b.n	80016fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2205      	movs	r2, #5
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e159      	b.n	80019d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 8148 	bne.w	80019d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d005      	beq.n	800175a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	2b02      	cmp	r3, #2
 8001758:	d130      	bne.n	80017bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d017      	beq.n	80017f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a2 	beq.w	80019d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <HAL_GPIO_Init+0x2f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x202>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2f4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1fe>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_GPIO_Init+0x2f8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1fa>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_GPIO_Init+0x2fc>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1f6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x300>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1f2>
 80018f6:	2304      	movs	r3, #4
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x204>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x204>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x204>
 800190a:	2300      	movs	r3, #0
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191c:	4935      	ldr	r1, [pc, #212]	; (80019f4 <HAL_GPIO_Init+0x2ec>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x304>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194e:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001954:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <HAL_GPIO_Init+0x304>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_GPIO_Init+0x304>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a2:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	f67f aea2 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40013800 	.word	0x40013800
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400
 8001a00:	40020800 	.word	0x40020800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e12b      	b.n	8001cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fa8c 	bl	8000fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad8:	f001 f888 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8001adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a81      	ldr	r2, [pc, #516]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d807      	bhi.n	8001af8 <HAL_I2C_Init+0x84>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_I2C_Init+0x278>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e006      	b.n	8001b06 <HAL_I2C_Init+0x92>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a7d      	ldr	r2, [pc, #500]	; (8001cf0 <HAL_I2C_Init+0x27c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e7      	b.n	8001cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a78      	ldr	r2, [pc, #480]	; (8001cf4 <HAL_I2C_Init+0x280>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d802      	bhi.n	8001b48 <HAL_I2C_Init+0xd4>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	e009      	b.n	8001b5c <HAL_I2C_Init+0xe8>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_I2C_Init+0x284>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	099b      	lsrs	r3, r3, #6
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	495c      	ldr	r1, [pc, #368]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	d819      	bhi.n	8001bb0 <HAL_I2C_Init+0x13c>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e59      	subs	r1, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b90:	400b      	ands	r3, r1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_I2C_Init+0x138>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e59      	subs	r1, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001baa:	e051      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e04f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <HAL_I2C_Init+0x168>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e012      	b.n	8001c02 <HAL_I2C_Init+0x18e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x196>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e022      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10e      	bne.n	8001c30 <HAL_I2C_Init+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e58      	subs	r0, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	6809      	ldr	r1, [r1, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6911      	ldr	r1, [r2, #16]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	000186a0 	.word	0x000186a0
 8001cec:	001e847f 	.word	0x001e847f
 8001cf0:	003d08ff 	.word	0x003d08ff
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	461a      	mov	r2, r3
 8001d08:	460b      	mov	r3, r1
 8001d0a:	817b      	strh	r3, [r7, #10]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fb26 	bl	8001360 <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	f040 80e0 	bne.w	8001ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2319      	movs	r3, #25
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4970      	ldr	r1, [pc, #448]	; (8001ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f964 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0d3      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x50>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0cc      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d007      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2221      	movs	r2, #33	; 0x21
 8001d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2210      	movs	r2, #16
 8001d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	893a      	ldrh	r2, [r7, #8]
 8001da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a50      	ldr	r2, [pc, #320]	; (8001ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001db4:	8979      	ldrh	r1, [r7, #10]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	6a3a      	ldr	r2, [r7, #32]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 f89c 	bl	8001ef8 <I2C_MasterRequestWrite>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08d      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001de0:	e066      	b.n	8001eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	6a39      	ldr	r1, [r7, #32]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f9de 	bl	80021a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d107      	bne.n	8001e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_I2C_Master_Transmit+0x188>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d017      	beq.n	8001e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	6a39      	ldr	r1, [r7, #32]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f9ce 	bl	800222a <I2C_WaitOnBTFFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e01a      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d194      	bne.n	8001de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ee4:	2302      	movs	r3, #2
  }
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00100002 	.word	0x00100002
 8001ef4:	ffff0000 	.word	0xffff0000

08001ef8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	460b      	mov	r3, r1
 8001f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d006      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d003      	beq.n	8001f22 <I2C_MasterRequestWrite+0x2a>
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e00b      	b.n	8001f4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d107      	bne.n	8001f4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f84f 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d103      	bne.n	8001f7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e035      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f88:	d108      	bne.n	8001f9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f8a:	897b      	ldrh	r3, [r7, #10]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	e01b      	b.n	8001fd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f9c:	897b      	ldrh	r3, [r7, #10]
 8001f9e:	11db      	asrs	r3, r3, #7
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 0306 	and.w	r3, r3, #6
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f063 030f 	orn	r3, r3, #15
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <I2C_MasterRequestWrite+0xfc>)
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f875 	bl	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e010      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fca:	897b      	ldrh	r3, [r7, #10]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4907      	ldr	r1, [pc, #28]	; (8001ff8 <I2C_MasterRequestWrite+0x100>)
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f865 	bl	80020aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	00010008 	.word	0x00010008
 8001ff8:	00010002 	.word	0x00010002

08001ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200c:	e025      	b.n	800205a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d021      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7ff f9a3 	bl	8001360 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d302      	bcc.n	800202c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d116      	bne.n	800205a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e023      	b.n	80020a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10d      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4013      	ands	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	e00c      	b.n	800209a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4013      	ands	r3, r2
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf0c      	ite	eq
 8002092:	2301      	moveq	r3, #1
 8002094:	2300      	movne	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	429a      	cmp	r2, r3
 800209e:	d0b6      	beq.n	800200e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b8:	e051      	b.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c8:	d123      	bne.n	8002112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f043 0204 	orr.w	r2, r3, #4
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e046      	b.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d021      	beq.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f921 	bl	8001360 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d116      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e020      	b.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10c      	bne.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf14      	ite	ne
 800217a:	2301      	movne	r3, #1
 800217c:	2300      	moveq	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e00b      	b.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	43da      	mvns	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d18d      	bne.n	80020ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021b4:	e02d      	b.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f878 	bl	80022ac <I2C_IsAcknowledgeFailed>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e02d      	b.n	8002222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d021      	beq.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ce:	f7ff f8c7 	bl	8001360 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d116      	bne.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e007      	b.n	8002222 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d1ca      	bne.n	80021b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002236:	e02d      	b.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f837 	bl	80022ac <I2C_IsAcknowledgeFailed>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e02d      	b.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d021      	beq.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002250:	f7ff f886 	bl	8001360 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d302      	bcc.n	8002266 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e007      	b.n	80022a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d1ca      	bne.n	8002238 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c2:	d11b      	bne.n	80022fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e267      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d075      	beq.n	8002416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232a:	4b88      	ldr	r3, [pc, #544]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b04      	cmp	r3, #4
 8002334:	d00c      	beq.n	8002350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4b85      	ldr	r3, [pc, #532]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233e:	2b08      	cmp	r3, #8
 8002340:	d112      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002342:	4b82      	ldr	r3, [pc, #520]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234e:	d10b      	bne.n	8002368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	4b7e      	ldr	r3, [pc, #504]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d05b      	beq.n	8002414 <HAL_RCC_OscConfig+0x108>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d157      	bne.n	8002414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e242      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x74>
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e01d      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002388:	d10c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x98>
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6f      	ldr	r2, [pc, #444]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b6d      	ldr	r3, [pc, #436]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a6c      	ldr	r2, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e00b      	b.n	80023bc <HAL_RCC_OscConfig+0xb0>
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a68      	ldr	r2, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a65      	ldr	r2, [pc, #404]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe ffcc 	bl	8001360 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe ffc8 	bl	8001360 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e207      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0xc0>
 80023ea:	e014      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ffb8 	bl	8001360 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe ffb4 	bl	8001360 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1f3      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0xe8>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002422:	4b4a      	ldr	r3, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002436:	2b08      	cmp	r3, #8
 8002438:	d11c      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800243a:	4b44      	ldr	r3, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d116      	bne.n	8002474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e1c7      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4937      	ldr	r1, [pc, #220]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247c:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x244>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7fe ff6d 	bl	8001360 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248a:	f7fe ff69 	bl	8001360 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1a8      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
 80024bc:	e015      	b.n	80024ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x244>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe ff4c 	bl	8001360 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024cc:	f7fe ff48 	bl	8001360 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e187      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	4b1b      	ldr	r3, [pc, #108]	; (800254c <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d036      	beq.n	8002564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d016      	beq.n	800252c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x248>)
 8002500:	2201      	movs	r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe ff2c 	bl	8001360 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe ff28 	bl	8001360 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e167      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_OscConfig+0x240>)
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x200>
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x248>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe ff15 	bl	8001360 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	e00e      	b.n	8002558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800253a:	f7fe ff11 	bl	8001360 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d907      	bls.n	8002558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e150      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
 800254c:	40023800 	.word	0x40023800
 8002550:	42470000 	.word	0x42470000
 8002554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002558:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800255a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ea      	bne.n	800253a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 8097 	beq.w	80026a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002576:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b7d      	ldr	r3, [pc, #500]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	4a7c      	ldr	r2, [pc, #496]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
 8002592:	4b7a      	ldr	r3, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b77      	ldr	r3, [pc, #476]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a73      	ldr	r2, [pc, #460]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fed1 	bl	8001360 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7fe fecd 	bl	8001360 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e10c      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_OscConfig+0x474>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x2ea>
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e01c      	b.n	8002630 <HAL_RCC_OscConfig+0x324>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x30c>
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a5e      	ldr	r2, [pc, #376]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a5b      	ldr	r2, [pc, #364]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x324>
 8002618:	4b58      	ldr	r3, [pc, #352]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b55      	ldr	r3, [pc, #340]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fe92 	bl	8001360 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fe8e 	bl	8001360 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e0cb      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x334>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe fe7c 	bl	8001360 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	e00a      	b.n	8002682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fe78 	bl	8001360 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0b5      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002682:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ee      	bne.n	800266c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002694:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x470>)
 800269a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a1 	beq.w	80027ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d05c      	beq.n	8002770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d141      	bne.n	8002742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe4c 	bl	8001360 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fe48 	bl	8001360 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e087      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x470>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	019b      	lsls	r3, r3, #6
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	041b      	lsls	r3, r3, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	491b      	ldr	r1, [pc, #108]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7fe fe21 	bl	8001360 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002722:	f7fe fe1d 	bl	8001360 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e05c      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x416>
 8002740:	e054      	b.n	80027ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b10      	ldr	r3, [pc, #64]	; (8002784 <HAL_RCC_OscConfig+0x478>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7fe fe0a 	bl	8001360 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fe06 	bl	8001360 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e045      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_RCC_OscConfig+0x470>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x444>
 800276e:	e03d      	b.n	80027ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d107      	bne.n	8002788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e038      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000
 8002784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <HAL_RCC_OscConfig+0x4ec>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d028      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d121      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d11a      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027b8:	4013      	ands	r3, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d111      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0cc      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d90c      	bls.n	8002838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b65      	ldr	r3, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d044      	beq.n	800291c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e06f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e067      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ec:	f7fe fd38 	bl	8001360 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fd34 	bl	8001360 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d20c      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f821 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002986:	4602      	mov	r2, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	490a      	ldr	r1, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	5ccb      	ldrb	r3, [r1, r3]
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fc98 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08003e74 	.word	0x08003e74
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b094      	sub	sp, #80	; 0x50
 80029ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
 80029d4:	2300      	movs	r3, #0
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d8:	2300      	movs	r3, #0
 80029da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e0:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x40>
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	f200 80e1 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x34>
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fa:	e0db      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 80029fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a00:	e0db      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a02:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a06:	e0d8      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4b6f      	ldr	r3, [pc, #444]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	2200      	movs	r2, #0
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	633b      	str	r3, [r7, #48]	; 0x30
 8002a32:	2300      	movs	r3, #0
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
 8002a36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	462b      	mov	r3, r5
 8002a3e:	f04f 0000 	mov.w	r0, #0
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	0159      	lsls	r1, r3, #5
 8002a48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4c:	0150      	lsls	r0, r2, #5
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4621      	mov	r1, r4
 8002a54:	1a51      	subs	r1, r2, r1
 8002a56:	6139      	str	r1, [r7, #16]
 8002a58:	4629      	mov	r1, r5
 8002a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	018b      	lsls	r3, r1, #6
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a76:	4651      	mov	r1, sl
 8002a78:	018a      	lsls	r2, r1, #6
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a80:	4659      	mov	r1, fp
 8002a82:	eb63 0901 	sbc.w	r9, r3, r1
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	eb18 0303 	adds.w	r3, r8, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	eb49 0303 	adc.w	r3, r9, r3
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aba:	4629      	mov	r1, r5
 8002abc:	024b      	lsls	r3, r1, #9
 8002abe:	4621      	mov	r1, r4
 8002ac0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	024a      	lsls	r2, r1, #9
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad8:	f7fd fb7e 	bl	80001d8 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae4:	e058      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	2200      	movs	r2, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	4611      	mov	r1, r2
 8002af2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002af6:	623b      	str	r3, [r7, #32]
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	0159      	lsls	r1, r3, #5
 8002b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b12:	0150      	lsls	r0, r2, #5
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4641      	mov	r1, r8
 8002b1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b1e:	4649      	mov	r1, r9
 8002b20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b38:	ebb2 040a 	subs.w	r4, r2, sl
 8002b3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	00eb      	lsls	r3, r5, #3
 8002b4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4e:	00e2      	lsls	r2, r4, #3
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	18e3      	adds	r3, r4, r3
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	eb45 0303 	adc.w	r3, r5, r3
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6e:	4629      	mov	r1, r5
 8002b70:	028b      	lsls	r3, r1, #10
 8002b72:	4621      	mov	r1, r4
 8002b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b78:	4621      	mov	r1, r4
 8002b7a:	028a      	lsls	r2, r1, #10
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	61fa      	str	r2, [r7, #28]
 8002b88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8c:	f7fd fb24 	bl	80001d8 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x204>)
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3750      	adds	r7, #80	; 0x50
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a9b      	lsrs	r3, r3, #10
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08003e84 	.word	0x08003e84

08002c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c18:	f7ff ffdc 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0b5b      	lsrs	r3, r3, #13
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08003e84 	.word	0x08003e84

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e03f      	b.n	8002cce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fa02 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fddf 	bl	8003844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af02      	add	r7, sp, #8
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d17c      	bne.n	8002df0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_UART_Transmit+0x2c>
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e075      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x3e>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e06e      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2221      	movs	r2, #33	; 0x21
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fb19 	bl	8001360 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d108      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e003      	b.n	8002d60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d68:	e02a      	b.n	8002dc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fb1f 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e036      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e007      	b.n	8002db2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1cf      	bne.n	8002d6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 faef 	bl	80033b8 <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e006      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e000      	b.n	8002df2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
  }
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b084      	sub	sp, #16
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d11d      	bne.n	8002e50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_UART_Receive_IT+0x26>
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e016      	b.n	8002e52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Receive_IT+0x38>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e00f      	b.n	8002e52 <HAL_UART_Receive_IT+0x58>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fb24 	bl	8003494 <UART_Start_Receive_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	e000      	b.n	8002e52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0ba      	sub	sp, #232	; 0xe8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x66>
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fc07 	bl	80036ce <UART_Receive_IT>
      return;
 8002ec0:	e256      	b.n	8003370 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 80de 	beq.w	8003088 <HAL_UART_IRQHandler+0x22c>
 8002ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002edc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80d1 	beq.w	8003088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_UART_IRQHandler+0xae>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_UART_IRQHandler+0xd2>
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f043 0202 	orr.w	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_UART_IRQHandler+0xf6>
 8002f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d011      	beq.n	8002f82 <HAL_UART_IRQHandler+0x126>
 8002f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f043 0208 	orr.w	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 81ed 	beq.w	8003366 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_UART_IRQHandler+0x14e>
 8002f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb92 	bl	80036ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_UART_IRQHandler+0x17a>
 8002fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d04f      	beq.n	8003076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fa9a 	bl	8003510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d141      	bne.n	800306e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003016:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800301a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800302e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1d9      	bne.n	8002fea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	2b00      	cmp	r3, #0
 800303c:	d013      	beq.n	8003066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	4a7d      	ldr	r2, [pc, #500]	; (8003238 <HAL_UART_IRQHandler+0x3dc>)
 8003044:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fb39 	bl	80016c2 <HAL_DMA_Abort_IT>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d016      	beq.n	8003084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003060:	4610      	mov	r0, r2
 8003062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	e00e      	b.n	8003084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f990 	bl	800338c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800306c:	e00a      	b.n	8003084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f98c 	bl	800338c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	e006      	b.n	8003084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f988 	bl	800338c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003082:	e170      	b.n	8003366 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003084:	bf00      	nop
    return;
 8003086:	e16e      	b.n	8003366 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	f040 814a 	bne.w	8003326 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8143 	beq.w	8003326 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 813c 	beq.w	8003326 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ae:	2300      	movs	r3, #0
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	f040 80b4 	bne.w	800323c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8140 	beq.w	800336a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030f2:	429a      	cmp	r2, r3
 80030f4:	f080 8139 	bcs.w	800336a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310a:	f000 8088 	beq.w	800321e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800313a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003146:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1d9      	bne.n	800310e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800316a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800317e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003182:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003184:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003186:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e1      	bne.n	800315a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3314      	adds	r3, #20
 80031b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003200:	65ba      	str	r2, [r7, #88]	; 0x58
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800320e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e3      	bne.n	80031dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f9e2 	bl	80015e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003226:	b29b      	uxth	r3, r3
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	b29b      	uxth	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8b6 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003234:	e099      	b.n	800336a <HAL_UART_IRQHandler+0x50e>
 8003236:	bf00      	nop
 8003238:	080035d7 	.word	0x080035d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003244:	b29b      	uxth	r3, r3
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 808b 	beq.w	800336e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8086 	beq.w	800336e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003286:	647a      	str	r2, [r7, #68]	; 0x44
 8003288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800328c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e3      	bne.n	8003262 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	623b      	str	r3, [r7, #32]
   return(result);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032be:	633a      	str	r2, [r7, #48]	; 0x30
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003304:	61fa      	str	r2, [r7, #28]
 8003306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	69b9      	ldr	r1, [r7, #24]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	617b      	str	r3, [r7, #20]
   return(result);
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f83e 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003324:	e023      	b.n	800336e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_UART_IRQHandler+0x4ea>
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f95d 	bl	80035fe <UART_Transmit_IT>
    return;
 8003344:	e014      	b.n	8003370 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <HAL_UART_IRQHandler+0x514>
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f99d 	bl	800369e <UART_EndTransmit_IT>
    return;
 8003364:	e004      	b.n	8003370 <HAL_UART_IRQHandler+0x514>
    return;
 8003366:	bf00      	nop
 8003368:	e002      	b.n	8003370 <HAL_UART_IRQHandler+0x514>
      return;
 800336a:	bf00      	nop
 800336c:	e000      	b.n	8003370 <HAL_UART_IRQHandler+0x514>
      return;
 800336e:	bf00      	nop
  }
}
 8003370:	37e8      	adds	r7, #232	; 0xe8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop

08003378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b090      	sub	sp, #64	; 0x40
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c8:	e050      	b.n	800346c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d04c      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d8:	f7fd ffc2 	bl	8001360 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d241      	bcs.n	800346c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003408:	637a      	str	r2, [r7, #52]	; 0x34
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800340e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	613b      	str	r3, [r7, #16]
   return(result);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800343c:	623a      	str	r2, [r7, #32]
 800343e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69f9      	ldr	r1, [r7, #28]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	61bb      	str	r3, [r7, #24]
   return(result);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e00f      	b.n	800348c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d09f      	beq.n	80033ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3740      	adds	r7, #64	; 0x40
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2222      	movs	r2, #34	; 0x22
 80034be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b095      	sub	sp, #84	; 0x54
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003538:	643a      	str	r2, [r7, #64]	; 0x40
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800353e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e5      	bne.n	8003518 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	61fb      	str	r3, [r7, #28]
   return(result);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	64bb      	str	r3, [r7, #72]	; 0x48
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800356e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e5      	bne.n	800354c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	2b01      	cmp	r3, #1
 8003586:	d119      	bne.n	80035bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60bb      	str	r3, [r7, #8]
   return(result);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	330c      	adds	r3, #12
 80035a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035a8:	61ba      	str	r2, [r7, #24]
 80035aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	613b      	str	r3, [r7, #16]
   return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e5      	bne.n	8003588 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035ca:	bf00      	nop
 80035cc:	3754      	adds	r7, #84	; 0x54
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fecb 	bl	800338c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b21      	cmp	r3, #33	; 0x21
 8003610:	d13e      	bne.n	8003690 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361a:	d114      	bne.n	8003646 <UART_Transmit_IT+0x48>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d110      	bne.n	8003646 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003638:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	1c9a      	adds	r2, r3, #2
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]
 8003644:	e008      	b.n	8003658 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	1c59      	adds	r1, r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6211      	str	r1, [r2, #32]
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29b      	uxth	r3, r3
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4619      	mov	r1, r3
 8003666:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10f      	bne.n	800368c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800367a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe5a 	bl	8003378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b08c      	sub	sp, #48	; 0x30
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b22      	cmp	r3, #34	; 0x22
 80036e0:	f040 80ab 	bne.w	800383a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ec:	d117      	bne.n	800371e <UART_Receive_IT+0x50>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d113      	bne.n	800371e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370c:	b29a      	uxth	r2, r3
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	1c9a      	adds	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
 800371c:	e026      	b.n	800376c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	d007      	beq.n	8003742 <UART_Receive_IT+0x74>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <UART_Receive_IT+0x82>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e008      	b.n	8003762 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800375c:	b2da      	uxtb	r2, r3
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4619      	mov	r1, r3
 800377a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800377c:	2b00      	cmp	r3, #0
 800377e:	d15a      	bne.n	8003836 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0220 	bic.w	r2, r2, #32
 800378e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800379e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695a      	ldr	r2, [r3, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d135      	bne.n	800382c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	613b      	str	r3, [r7, #16]
   return(result);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f023 0310 	bic.w	r3, r3, #16
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e6:	623a      	str	r2, [r7, #32]
 80037e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	69f9      	ldr	r1, [r7, #28]
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b10      	cmp	r3, #16
 8003806:	d10a      	bne.n	800381e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fdbb 	bl	80033a0 <HAL_UARTEx_RxEventCallback>
 800382a:	e002      	b.n	8003832 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7fc ff53 	bl	80006d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e002      	b.n	800383c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e000      	b.n	800383c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	3730      	adds	r7, #48	; 0x30
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003848:	b0c0      	sub	sp, #256	; 0x100
 800384a:	af00      	add	r7, sp, #0
 800384c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	68d9      	ldr	r1, [r3, #12]
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	ea40 0301 	orr.w	r3, r0, r1
 800386c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800389c:	f021 010c 	bic.w	r1, r1, #12
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038aa:	430b      	orrs	r3, r1
 80038ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	6999      	ldr	r1, [r3, #24]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	ea40 0301 	orr.w	r3, r0, r1
 80038ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b8f      	ldr	r3, [pc, #572]	; (8003b10 <UART_SetConfig+0x2cc>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d005      	beq.n	80038e4 <UART_SetConfig+0xa0>
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b8d      	ldr	r3, [pc, #564]	; (8003b14 <UART_SetConfig+0x2d0>)
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d104      	bne.n	80038ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7ff f996 	bl	8002c14 <HAL_RCC_GetPCLK2Freq>
 80038e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038ec:	e003      	b.n	80038f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038ee:	f7ff f97d 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80038f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003900:	f040 810c 	bne.w	8003b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800390e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	1891      	adds	r1, r2, r2
 800391c:	65b9      	str	r1, [r7, #88]	; 0x58
 800391e:	415b      	adcs	r3, r3
 8003920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003926:	4621      	mov	r1, r4
 8003928:	eb12 0801 	adds.w	r8, r2, r1
 800392c:	4629      	mov	r1, r5
 800392e:	eb43 0901 	adc.w	r9, r3, r1
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800393e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003946:	4690      	mov	r8, r2
 8003948:	4699      	mov	r9, r3
 800394a:	4623      	mov	r3, r4
 800394c:	eb18 0303 	adds.w	r3, r8, r3
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003954:	462b      	mov	r3, r5
 8003956:	eb49 0303 	adc.w	r3, r9, r3
 800395a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800396a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800396e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003972:	460b      	mov	r3, r1
 8003974:	18db      	adds	r3, r3, r3
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
 8003978:	4613      	mov	r3, r2
 800397a:	eb42 0303 	adc.w	r3, r2, r3
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
 8003980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003988:	f7fc fc26 	bl	80001d8 <__aeabi_uldivmod>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003992:	fba3 2302 	umull	r2, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	011c      	lsls	r4, r3, #4
 800399a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039ac:	4642      	mov	r2, r8
 80039ae:	464b      	mov	r3, r9
 80039b0:	1891      	adds	r1, r2, r2
 80039b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80039b4:	415b      	adcs	r3, r3
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039bc:	4641      	mov	r1, r8
 80039be:	eb12 0a01 	adds.w	sl, r2, r1
 80039c2:	4649      	mov	r1, r9
 80039c4:	eb43 0b01 	adc.w	fp, r3, r1
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039dc:	4692      	mov	sl, r2
 80039de:	469b      	mov	fp, r3
 80039e0:	4643      	mov	r3, r8
 80039e2:	eb1a 0303 	adds.w	r3, sl, r3
 80039e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb4b 0303 	adc.w	r3, fp, r3
 80039f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	18db      	adds	r3, r3, r3
 8003a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a0e:	4613      	mov	r3, r2
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a1e:	f7fc fbdb 	bl	80001d8 <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4611      	mov	r1, r2
 8003a28:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	2264      	movs	r2, #100	; 0x64
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
 8003a36:	1acb      	subs	r3, r1, r3
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003a40:	fba3 2302 	umull	r2, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a4c:	441c      	add	r4, r3
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a60:	4642      	mov	r2, r8
 8003a62:	464b      	mov	r3, r9
 8003a64:	1891      	adds	r1, r2, r2
 8003a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a68:	415b      	adcs	r3, r3
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a70:	4641      	mov	r1, r8
 8003a72:	1851      	adds	r1, r2, r1
 8003a74:	6339      	str	r1, [r7, #48]	; 0x30
 8003a76:	4649      	mov	r1, r9
 8003a78:	414b      	adcs	r3, r1
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a88:	4659      	mov	r1, fp
 8003a8a:	00cb      	lsls	r3, r1, #3
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a92:	4651      	mov	r1, sl
 8003a94:	00ca      	lsls	r2, r1, #3
 8003a96:	4610      	mov	r0, r2
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	189b      	adds	r3, r3, r2
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003abc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	18db      	adds	r3, r3, r3
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aca:	4613      	mov	r3, r2
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ada:	f7fc fb7d 	bl	80001d8 <__aeabi_uldivmod>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	2164      	movs	r1, #100	; 0x64
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	3332      	adds	r3, #50	; 0x32
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <UART_SetConfig+0x2d4>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	f003 0207 	and.w	r2, r3, #7
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4422      	add	r2, r4
 8003b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b0c:	e105      	b.n	8003d1a <UART_SetConfig+0x4d6>
 8003b0e:	bf00      	nop
 8003b10:	40011000 	.word	0x40011000
 8003b14:	40011400 	.word	0x40011400
 8003b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b2e:	4642      	mov	r2, r8
 8003b30:	464b      	mov	r3, r9
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	6239      	str	r1, [r7, #32]
 8003b36:	415b      	adcs	r3, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b3e:	4641      	mov	r1, r8
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	4649      	mov	r1, r9
 8003b44:	eb43 0501 	adc.w	r5, r3, r1
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	00eb      	lsls	r3, r5, #3
 8003b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b56:	00e2      	lsls	r2, r4, #3
 8003b58:	4614      	mov	r4, r2
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4643      	mov	r3, r8
 8003b5e:	18e3      	adds	r3, r4, r3
 8003b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b64:	464b      	mov	r3, r9
 8003b66:	eb45 0303 	adc.w	r3, r5, r3
 8003b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b94:	4621      	mov	r1, r4
 8003b96:	008a      	lsls	r2, r1, #2
 8003b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b9c:	f7fc fb1c 	bl	80001d8 <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4b60      	ldr	r3, [pc, #384]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	011c      	lsls	r4, r3, #4
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	61b9      	str	r1, [r7, #24]
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6139      	str	r1, [r7, #16]
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c04:	464b      	mov	r3, r9
 8003c06:	460a      	mov	r2, r1
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c28:	4649      	mov	r1, r9
 8003c2a:	008b      	lsls	r3, r1, #2
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c32:	4641      	mov	r1, r8
 8003c34:	008a      	lsls	r2, r1, #2
 8003c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c3a:	f7fc facd 	bl	80001d8 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	; 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	3332      	adds	r3, #50	; 0x32
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c62:	441c      	add	r4, r3
 8003c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c68:	2200      	movs	r2, #0
 8003c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c6c:	677a      	str	r2, [r7, #116]	; 0x74
 8003c6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c72:	4642      	mov	r2, r8
 8003c74:	464b      	mov	r3, r9
 8003c76:	1891      	adds	r1, r2, r2
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	415b      	adcs	r3, r3
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c82:	4641      	mov	r1, r8
 8003c84:	1851      	adds	r1, r2, r1
 8003c86:	6039      	str	r1, [r7, #0]
 8003c88:	4649      	mov	r1, r9
 8003c8a:	414b      	adcs	r3, r1
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	00cb      	lsls	r3, r1, #3
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	00ca      	lsls	r2, r1, #3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	4603      	mov	r3, r0
 8003cae:	4642      	mov	r2, r8
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc8:	667a      	str	r2, [r7, #100]	; 0x64
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	008b      	lsls	r3, r1, #2
 8003cda:	4641      	mov	r1, r8
 8003cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	008a      	lsls	r2, r1, #2
 8003ce4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ce8:	f7fc fa76 	bl	80001d8 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2164      	movs	r1, #100	; 0x64
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	3332      	adds	r3, #50	; 0x32
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <UART_SetConfig+0x4e4>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	f003 020f 	and.w	r2, r3, #15
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4422      	add	r2, r4
 8003d18:	609a      	str	r2, [r3, #8]
}
 8003d1a:	bf00      	nop
 8003d1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	51eb851f 	.word	0x51eb851f

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 f820 	bl	8003d84 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08003e94 	.word	0x08003e94
 8003d68:	08003e94 	.word	0x08003e94
 8003d6c:	08003e94 	.word	0x08003e94
 8003d70:	08003e98 	.word	0x08003e98

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <_init>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr

08003d90 <_fini>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr
