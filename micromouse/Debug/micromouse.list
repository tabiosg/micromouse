
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080088a0  080088a0  000188a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca4  08008ca4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cac  08008cac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cac  08008cac  00018cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cb0  08008cb0  00018cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e0  08008e94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08008e94  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  0002fd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e73  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138fb  00000000  00000000  0004d203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb31  00000000  00000000  00060afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f062f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000f0680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008884 	.word	0x08008884

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008884 	.word	0x08008884

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e009      	b.n	8000f88 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f80c 	bl	8000f9a <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	ddf1      	ble.n	8000f74 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turn_LED+0x1c>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <turn_LED+0x26>
 8000fb4:	e008      	b.n	8000fc8 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f809 	bl	8000fd0 <turn_off_LED_color>
		return;
 8000fbe:	e003      	b.n	8000fc8 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f824 	bl	8001010 <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d811      	bhi.n	8001004 <turn_off_LED_color+0x34>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <turn_off_LED_color+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08000ff9 	.word	0x08000ff9
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <turn_off_LED_color+0x3c>)
 8000ffe:	f002 fcd7 	bl	80039b0 <HAL_GPIO_WritePin>
		return;
 8001002:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d811      	bhi.n	8001044 <turn_on_LED_color+0x34>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <turn_on_LED_color+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001045 	.word	0x08001045
 800102c:	08001045 	.word	0x08001045
 8001030:	08001045 	.word	0x08001045
 8001034:	08001039 	.word	0x08001039
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <turn_on_LED_color+0x3c>)
 800103e:	f002 fcb7 	bl	80039b0 <HAL_GPIO_WritePin>
		return;
 8001042:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8001056:	f001 fff7 	bl	8003048 <is_switch_on>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Test_Algo;  // TODO - Remove when not testing
 800105e:	2302      	movs	r3, #2
 8001060:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d00a      	beq.n	800107e <determine_algorithm+0x2e>
 8001068:	2b02      	cmp	r3, #2
 800106a:	dc0a      	bgt.n	8001082 <determine_algorithm+0x32>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <determine_algorithm+0x26>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <determine_algorithm+0x2a>
 8001074:	e005      	b.n	8001082 <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 800107e:	2302      	movs	r3, #2
 8001080:	e000      	b.n	8001084 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8001082:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <do_search_algorithm>:

void do_search_algorithm(algorithm_type algo)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff60 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7b 	bl	8000f9a <turn_LED>
	turn_LED(Blue, On);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff77 	bl	8000f9a <turn_LED>

	switch(algo)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d00c      	beq.n	80010cc <do_search_algorithm+0x40>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc0c      	bgt.n	80010d0 <do_search_algorithm+0x44>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <do_search_algorithm+0x34>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d003      	beq.n	80010c6 <do_search_algorithm+0x3a>
 80010be:	e007      	b.n	80010d0 <do_search_algorithm+0x44>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 80010c0:	f001 f8a2 	bl	8002208 <do_hug_left_algorithm>
		return;
 80010c4:	e004      	b.n	80010d0 <do_search_algorithm+0x44>
	case Flood_Fill_Algo:
		do_flood_fill_algorithm();
 80010c6:	f000 f815 	bl	80010f4 <do_flood_fill_algorithm>
		return; // TODO
 80010ca:	e001      	b.n	80010d0 <do_search_algorithm+0x44>
	case Test_Algo:
		do_test_algorithm();
 80010cc:	f002 f8be 	bl	800324c <do_test_algorithm>
	}  // switch(algo)
}  // do_search_algorithm(algorithm_type algo)
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <complete_search_algorithm>:

void complete_search_algorithm()
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ff3e 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff59 	bl	8000f9a <turn_LED>
	turn_LED(Green, On);
 80010e8:	2101      	movs	r1, #1
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff55 	bl	8000f9a <turn_LED>
}  // complete_search_algorithm()
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <do_flood_fill_algorithm>:
#include "flood_fill.h"

void do_flood_fill_algorithm()
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 80010fa:	af00      	add	r7, sp, #0
	// Initialize the maze
	flood_fill_maze maze;

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8001102:	e154      	b.n	80013ae <do_flood_fill_algorithm+0x2ba>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 800110a:	e146      	b.n	800139a <do_flood_fill_algorithm+0x2a6>
		{
			// Initialize distance grid
			if(i <= 7 && j <= 7) maze.distance_grid[i][j] = ((7 - i) + (7 - j));
 800110c:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001110:	2b07      	cmp	r3, #7
 8001112:	d81c      	bhi.n	800114e <do_flood_fill_algorithm+0x5a>
 8001114:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001118:	2b07      	cmp	r3, #7
 800111a:	d818      	bhi.n	800114e <do_flood_fill_algorithm+0x5a>
 800111c:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8001120:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001124:	4413      	add	r3, r2
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 800112c:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001130:	f1c1 010e 	rsb	r1, r1, #14
 8001134:	b2c8      	uxtb	r0, r1
 8001136:	f607 0118 	addw	r1, r7, #2072	; 0x818
 800113a:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	440a      	add	r2, r1
 8001142:	4413      	add	r3, r2
 8001144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001148:	4602      	mov	r2, r0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e05e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i <= 7 && j > 7) maze.distance_grid[i][j] = ((7 - i) + (j - 8));
 800114e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001152:	2b07      	cmp	r3, #7
 8001154:	d81b      	bhi.n	800118e <do_flood_fill_algorithm+0x9a>
 8001156:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800115a:	2b07      	cmp	r3, #7
 800115c:	d917      	bls.n	800118e <do_flood_fill_algorithm+0x9a>
 800115e:	f897 2816 	ldrb.w	r2, [r7, #2070]	; 0x816
 8001162:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b2d9      	uxtb	r1, r3
 800116a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 800116e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001172:	3901      	subs	r1, #1
 8001174:	b2c8      	uxtb	r0, r1
 8001176:	f607 0118 	addw	r1, r7, #2072	; 0x818
 800117a:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	440a      	add	r2, r1
 8001182:	4413      	add	r3, r2
 8001184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001188:	4602      	mov	r2, r0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e03e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j <= 7) maze.distance_grid[i][j] = ((i - 8) + (7 - j));
 800118e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001192:	2b07      	cmp	r3, #7
 8001194:	d91b      	bls.n	80011ce <do_flood_fill_algorithm+0xda>
 8001196:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800119a:	2b07      	cmp	r3, #7
 800119c:	d817      	bhi.n	80011ce <do_flood_fill_algorithm+0xda>
 800119e:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 80011a2:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 80011ae:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80011b2:	3901      	subs	r1, #1
 80011b4:	b2c8      	uxtb	r0, r1
 80011b6:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80011ba:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	440a      	add	r2, r1
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c8:	4602      	mov	r2, r0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e01e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j > 7) maze.distance_grid[i][j] = ((i - 8) + (j - 8));
 80011ce:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d91a      	bls.n	800120c <do_flood_fill_algorithm+0x118>
 80011d6:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d916      	bls.n	800120c <do_flood_fill_algorithm+0x118>
 80011de:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 80011e2:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80011e6:	4413      	add	r3, r2
 80011e8:	b2d9      	uxtb	r1, r3
 80011ea:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 80011ee:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80011f2:	3910      	subs	r1, #16
 80011f4:	b2c8      	uxtb	r0, r1
 80011f6:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80011fa:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	440a      	add	r2, r1
 8001202:	4413      	add	r3, r2
 8001204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001208:	4602      	mov	r2, r0
 800120a:	701a      	strb	r2, [r3, #0]

			// Initialize cell grid - assume no walls unless border by default
			maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 800120c:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8001210:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001214:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001218:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	441a      	add	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	4403      	add	r3, r0
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 8001232:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8001236:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800123a:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800123e:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001242:	461a      	mov	r2, r3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	441a      	add	r2, r3
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	4403      	add	r3, r0
 8001254:	3301      	adds	r3, #1
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 800125a:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800125e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001262:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001266:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800126a:	461a      	mov	r2, r3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	441a      	add	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	4403      	add	r3, r0
 800127c:	3302      	adds	r3, #2
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 8001282:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8001286:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800128a:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800128e:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001292:	461a      	mov	r2, r3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	441a      	add	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	4403      	add	r3, r0
 80012a4:	3303      	adds	r3, #3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].visited = Is_Not_Visited;
 80012aa:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80012ae:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80012b2:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80012b6:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80012ba:	461a      	mov	r2, r3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	441a      	add	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	4403      	add	r3, r0
 80012cc:	3304      	adds	r3, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

			if(i == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 80012d2:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <do_flood_fill_algorithm+0x20e>
 80012da:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80012de:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80012e2:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80012e6:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80012ea:	461a      	mov	r2, r3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	441a      	add	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	4403      	add	r3, r0
 80012fc:	3303      	adds	r3, #3
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
			if(j == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 8001302:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001306:	2b00      	cmp	r3, #0
 8001308:	d113      	bne.n	8001332 <do_flood_fill_algorithm+0x23e>
 800130a:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800130e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001312:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001316:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	441a      	add	r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	4403      	add	r3, r0
 800132c:	3302      	adds	r3, #2
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
			if(i == MAP_SIZE - 1) maze.cell_grid[i][j].walls[East] = Wall_Here;
 8001332:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d113      	bne.n	8001362 <do_flood_fill_algorithm+0x26e>
 800133a:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800133e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001342:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001346:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800134a:	461a      	mov	r2, r3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	441a      	add	r2, r3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	4403      	add	r3, r0
 800135c:	3301      	adds	r3, #1
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
			if(j == MAP_SIZE - 1) maze.cell_grid[i][j].walls[North] = Wall_Here;
 8001362:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001366:	2b0f      	cmp	r3, #15
 8001368:	d112      	bne.n	8001390 <do_flood_fill_algorithm+0x29c>
 800136a:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800136e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001372:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001376:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800137a:	461a      	mov	r2, r3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	441a      	add	r2, r3
 8001380:	460b      	mov	r3, r1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	4403      	add	r3, r0
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001390:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001394:	3301      	adds	r3, #1
 8001396:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 800139a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f aeb4 	bls.w	800110c <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80013a4:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80013a8:	3301      	adds	r3, #1
 80013aa:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 80013ae:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f aea6 	bls.w	8001104 <do_flood_fill_algorithm+0x10>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
	maze_direction direction = desired_direction;  // the direction we're currently facing
 80013be:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 80013c2:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);
 80013c6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fd9c 	bl	8001f0c <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we want to be in
 80013d4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013d8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013dc:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80013e0:	f2a2 620c 	subw	r2, r2, #1548	; 0x60c
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	801a      	strh	r2, [r3, #0]

	stack stack;

	while(1)
	{
		print_maze(&maze, c, direction);
 80013e8:	f897 2814 	ldrb.w	r2, [r7, #2068]	; 0x814
 80013ec:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013f0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013f4:	f507 7004 	add.w	r0, r7, #528	; 0x210
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	f000 fd9b 	bl	8001f34 <print_maze>
		switch(direction)
 80013fe:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001402:	2b04      	cmp	r3, #4
 8001404:	d840      	bhi.n	8001488 <do_flood_fill_algorithm+0x394>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <do_flood_fill_algorithm+0x318>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001421 	.word	0x08001421
 8001410:	0800143b 	.word	0x0800143b
 8001414:	08001455 	.word	0x08001455
 8001418:	0800146f 	.word	0x0800146f
 800141c:	08001489 	.word	0x08001489
		{
		case North:
			c.y += 1;
 8001420:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001424:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001432:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001436:	705a      	strb	r2, [r3, #1]
			break;
 8001438:	e026      	b.n	8001488 <do_flood_fill_algorithm+0x394>
		case East:
			c.x += 1;
 800143a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800143e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800144c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001450:	701a      	strb	r2, [r3, #0]
			break;
 8001452:	e019      	b.n	8001488 <do_flood_fill_algorithm+0x394>
		case South:
			c.y -= 1;
 8001454:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001458:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	3b01      	subs	r3, #1
 8001460:	b2da      	uxtb	r2, r3
 8001462:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001466:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800146a:	705a      	strb	r2, [r3, #1]
			break;
 800146c:	e00c      	b.n	8001488 <do_flood_fill_algorithm+0x394>
		case West:
			c.x -= 1;
 800146e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001472:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001480:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001484:	701a      	strb	r2, [r3, #0]
			break;
 8001486:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)

		// Go forward one cell
		go_forward_one_unit();
 8001488:	f001 fae1 	bl	8002a4e <go_forward_one_unit>
		// visiting_coord should now be the coordinate that we're on.

		if(!maze.cell_grid[c.x][c.y].visited)
 800148c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001490:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800149c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	461c      	mov	r4, r3
 80014a4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014a8:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 80014ac:	4622      	mov	r2, r4
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4422      	add	r2, r4
 80014b2:	4603      	mov	r3, r0
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4403      	add	r3, r0
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	440b      	add	r3, r1
 80014be:	3304      	adds	r3, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 82a1 	bne.w	8001a0a <do_flood_fill_algorithm+0x916>
		{
			if(is_there_wall_on_direction(Left))
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 ff03 	bl	80032d4 <is_there_wall_on_direction>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80cc 	beq.w	800166e <do_flood_fill_algorithm+0x57a>
			{
				maze.cell_grid[c.x][c.y].walls[(direction - 1) % 4] = Wall_Here;
 80014d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014da:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461c      	mov	r4, r3
 80014e2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014e6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	461d      	mov	r5, r3
 80014ee:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80014f2:	3b01      	subs	r3, #1
 80014f4:	425a      	negs	r2, r3
 80014f6:	f003 0103 	and.w	r1, r3, #3
 80014fa:	f002 0303 	and.w	r3, r2, #3
 80014fe:	bf58      	it	pl
 8001500:	4259      	negpl	r1, r3
 8001502:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001506:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800150a:	462a      	mov	r2, r5
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	442a      	add	r2, r5
 8001510:	4623      	mov	r3, r4
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4423      	add	r3, r4
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4413      	add	r3, r2
 800151a:	4403      	add	r3, r0
 800151c:	440b      	add	r3, r1
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001522:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001526:	2b04      	cmp	r3, #4
 8001528:	f200 8253 	bhi.w	80019d2 <do_flood_fill_algorithm+0x8de>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <do_flood_fill_algorithm+0x440>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	08001549 	.word	0x08001549
 8001538:	08001593 	.word	0x08001593
 800153c:	080015db 	.word	0x080015db
 8001540:	08001625 	.word	0x08001625
 8001544:	080019d3 	.word	0x080019d3
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 8001548:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800154c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b0e      	cmp	r3, #14
 8001554:	f200 8224 	bhi.w	80019a0 <do_flood_fill_algorithm+0x8ac>
 8001558:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800155c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001568:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	461c      	mov	r4, r3
 8001570:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001574:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001578:	4622      	mov	r2, r4
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4422      	add	r2, r4
 800157e:	460b      	mov	r3, r1
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	4403      	add	r3, r0
 800158a:	3303      	adds	r3, #3
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
					break;
 8001590:	e206      	b.n	80019a0 <do_flood_fill_algorithm+0x8ac>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 8001592:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001596:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8201 	beq.w	80019a4 <do_flood_fill_algorithm+0x8b0>
 80015a2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015a6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015b2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80015be:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80015c2:	461a      	mov	r2, r3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	441a      	add	r2, r3
 80015c8:	4603      	mov	r3, r0
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
					break;
 80015d8:	e1e4      	b.n	80019a4 <do_flood_fill_algorithm+0x8b0>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 80015da:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015de:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 81df 	beq.w	80019a8 <do_flood_fill_algorithm+0x8b4>
 80015ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015ee:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	1e59      	subs	r1, r3, #1
 80015f6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015fa:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	461c      	mov	r4, r3
 8001602:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001606:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800160a:	4622      	mov	r2, r4
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4422      	add	r2, r4
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	4413      	add	r3, r2
 800161a:	4403      	add	r3, r0
 800161c:	3301      	adds	r3, #1
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
					break;
 8001622:	e1c1      	b.n	80019a8 <do_flood_fill_algorithm+0x8b4>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 8001624:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001628:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	2b0e      	cmp	r3, #14
 8001630:	f200 81bc 	bhi.w	80019ac <do_flood_fill_algorithm+0x8b8>
 8001634:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001638:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001644:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001648:	785b      	ldrb	r3, [r3, #1]
 800164a:	3301      	adds	r3, #1
 800164c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001650:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001654:	461a      	mov	r2, r3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	441a      	add	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4403      	add	r3, r0
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4413      	add	r3, r2
 8001664:	440b      	add	r3, r1
 8001666:	3302      	adds	r3, #2
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
					break;
 800166c:	e19e      	b.n	80019ac <do_flood_fill_algorithm+0x8b8>
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))
			else if(is_there_wall_on_direction(Front))
 800166e:	2001      	movs	r0, #1
 8001670:	f001 fe30 	bl	80032d4 <is_there_wall_on_direction>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80c3 	beq.w	8001802 <do_flood_fill_algorithm+0x70e>
			{
				maze.cell_grid[c.x][c.y].walls[direction] = Wall_Here;
 800167c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001680:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461c      	mov	r4, r3
 8001688:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800168c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	461d      	mov	r5, r3
 8001694:	f897 1814 	ldrb.w	r1, [r7, #2068]	; 0x814
 8001698:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800169c:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80016a0:	462a      	mov	r2, r5
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	442a      	add	r2, r5
 80016a6:	4623      	mov	r3, r4
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4423      	add	r3, r4
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	4403      	add	r3, r0
 80016b2:	440b      	add	r3, r1
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
				switch(direction)
 80016b8:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80016bc:	2b04      	cmp	r3, #4
 80016be:	f200 8188 	bhi.w	80019d2 <do_flood_fill_algorithm+0x8de>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <do_flood_fill_algorithm+0x5d4>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016dd 	.word	0x080016dd
 80016cc:	08001727 	.word	0x08001727
 80016d0:	08001771 	.word	0x08001771
 80016d4:	080017b9 	.word	0x080017b9
 80016d8:	080019d3 	.word	0x080019d3
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 80016dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016e0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016e4:	785b      	ldrb	r3, [r3, #1]
 80016e6:	2b0e      	cmp	r3, #14
 80016e8:	f200 8162 	bhi.w	80019b0 <do_flood_fill_algorithm+0x8bc>
 80016ec:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016f0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016fc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	3301      	adds	r3, #1
 8001704:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001708:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 800170c:	461a      	mov	r2, r3
 800170e:	0092      	lsls	r2, r2, #2
 8001710:	441a      	add	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4403      	add	r3, r0
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	440b      	add	r3, r1
 800171e:	3302      	adds	r3, #2
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
					break;
 8001724:	e144      	b.n	80019b0 <do_flood_fill_algorithm+0x8bc>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 8001726:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800172a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b0e      	cmp	r3, #14
 8001732:	f200 813f 	bhi.w	80019b4 <do_flood_fill_algorithm+0x8c0>
 8001736:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800173a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	1c59      	adds	r1, r3, #1
 8001742:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001746:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800174a:	785b      	ldrb	r3, [r3, #1]
 800174c:	461c      	mov	r4, r3
 800174e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001752:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001756:	4622      	mov	r2, r4
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	4422      	add	r2, r4
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	4403      	add	r3, r0
 8001768:	3303      	adds	r3, #3
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
					break;
 800176e:	e121      	b.n	80019b4 <do_flood_fill_algorithm+0x8c0>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 8001770:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001774:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 811c 	beq.w	80019b8 <do_flood_fill_algorithm+0x8c4>
 8001780:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001784:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001790:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	3b01      	subs	r3, #1
 8001798:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800179c:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80017a0:	461a      	mov	r2, r3
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	4603      	mov	r3, r0
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4403      	add	r3, r0
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
					break;
 80017b6:	e0ff      	b.n	80019b8 <do_flood_fill_algorithm+0x8c4>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 80017b8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017bc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80fa 	beq.w	80019bc <do_flood_fill_algorithm+0x8c8>
 80017c8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017cc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	1e59      	subs	r1, r3, #1
 80017d4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017d8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	461c      	mov	r4, r3
 80017e0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017e4:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80017e8:	4622      	mov	r2, r4
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4422      	add	r2, r4
 80017ee:	460b      	mov	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	4403      	add	r3, r0
 80017fa:	3301      	adds	r3, #1
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
					break;
 8001800:	e0dc      	b.n	80019bc <do_flood_fill_algorithm+0x8c8>
				case Unknown:
					break;
				}  // switch(direction)

			}  // else if(is_there_wall_on_direction(Front))
			else if(is_there_wall_on_direction(Right))
 8001802:	2002      	movs	r0, #2
 8001804:	f001 fd66 	bl	80032d4 <is_there_wall_on_direction>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80d8 	beq.w	80019c0 <do_flood_fill_algorithm+0x8cc>
			{
				maze.cell_grid[c.x][c.y].walls[(direction + 1) % 4] = Wall_Here;
 8001810:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001814:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461c      	mov	r4, r3
 800181c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001820:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001824:	785b      	ldrb	r3, [r3, #1]
 8001826:	461d      	mov	r5, r3
 8001828:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 800182c:	3301      	adds	r3, #1
 800182e:	425a      	negs	r2, r3
 8001830:	f003 0103 	and.w	r1, r3, #3
 8001834:	f002 0303 	and.w	r3, r2, #3
 8001838:	bf58      	it	pl
 800183a:	4259      	negpl	r1, r3
 800183c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001840:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001844:	462a      	mov	r2, r5
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	442a      	add	r2, r5
 800184a:	4623      	mov	r3, r4
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4423      	add	r3, r4
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	4403      	add	r3, r0
 8001856:	440b      	add	r3, r1
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
				switch(direction)
 800185c:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001860:	2b04      	cmp	r3, #4
 8001862:	f200 80b6 	bhi.w	80019d2 <do_flood_fill_algorithm+0x8de>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <do_flood_fill_algorithm+0x778>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	08001881 	.word	0x08001881
 8001870:	080018cb 	.word	0x080018cb
 8001874:	08001913 	.word	0x08001913
 8001878:	0800195b 	.word	0x0800195b
 800187c:	080019d3 	.word	0x080019d3
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001880:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001884:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 809a 	beq.w	80019c4 <do_flood_fill_algorithm+0x8d0>
 8001890:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001894:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	1e59      	subs	r1, r3, #1
 800189c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80018a0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018a4:	785b      	ldrb	r3, [r3, #1]
 80018a6:	461c      	mov	r4, r3
 80018a8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80018ac:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80018b0:	4622      	mov	r2, r4
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4422      	add	r2, r4
 80018b6:	460b      	mov	r3, r1
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	4413      	add	r3, r2
 80018c0:	4403      	add	r3, r0
 80018c2:	3301      	adds	r3, #1
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
					break;
 80018c8:	e07c      	b.n	80019c4 <do_flood_fill_algorithm+0x8d0>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 80018ca:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80018ce:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b0e      	cmp	r3, #14
 80018d6:	d877      	bhi.n	80019c8 <do_flood_fill_algorithm+0x8d4>
 80018d8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80018dc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80018e8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	3301      	adds	r3, #1
 80018f0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80018f4:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80018f8:	461a      	mov	r2, r3
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	441a      	add	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4403      	add	r3, r0
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	4413      	add	r3, r2
 8001908:	440b      	add	r3, r1
 800190a:	3302      	adds	r3, #2
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
					break;
 8001910:	e05a      	b.n	80019c8 <do_flood_fill_algorithm+0x8d4>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 8001912:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001916:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b0e      	cmp	r3, #14
 800191e:	d855      	bhi.n	80019cc <do_flood_fill_algorithm+0x8d8>
 8001920:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001924:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	1c59      	adds	r1, r3, #1
 800192c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001930:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	461c      	mov	r4, r3
 8001938:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800193c:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001940:	4622      	mov	r2, r4
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	4422      	add	r2, r4
 8001946:	460b      	mov	r3, r1
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	4403      	add	r3, r0
 8001952:	3303      	adds	r3, #3
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
					break;
 8001958:	e038      	b.n	80019cc <do_flood_fill_algorithm+0x8d8>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 800195a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800195e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d033      	beq.n	80019d0 <do_flood_fill_algorithm+0x8dc>
 8001968:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800196c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001978:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	3b01      	subs	r3, #1
 8001980:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001984:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001988:	461a      	mov	r2, r3
 800198a:	0092      	lsls	r2, r2, #2
 800198c:	441a      	add	r2, r3
 800198e:	4603      	mov	r3, r0
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4403      	add	r3, r0
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	4413      	add	r3, r2
 8001998:	440b      	add	r3, r1
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
					break;
 800199e:	e017      	b.n	80019d0 <do_flood_fill_algorithm+0x8dc>
					break;
 80019a0:	bf00      	nop
 80019a2:	e016      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019a4:	bf00      	nop
 80019a6:	e014      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019a8:	bf00      	nop
 80019aa:	e012      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019ac:	bf00      	nop
 80019ae:	e010      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019b0:	bf00      	nop
 80019b2:	e00e      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019b4:	bf00      	nop
 80019b6:	e00c      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019b8:	bf00      	nop
 80019ba:	e00a      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019bc:	bf00      	nop
 80019be:	e008      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))
 80019c0:	bf00      	nop
 80019c2:	e006      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019c4:	bf00      	nop
 80019c6:	e004      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019c8:	bf00      	nop
 80019ca:	e002      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019cc:	bf00      	nop
 80019ce:	e000      	b.n	80019d2 <do_flood_fill_algorithm+0x8de>
					break;
 80019d0:	bf00      	nop


			maze.cell_grid[c.x][c.y].visited = 1;
 80019d2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80019d6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80019e2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	461c      	mov	r4, r3
 80019ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80019ee:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 80019f2:	4622      	mov	r2, r4
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4422      	add	r2, r4
 80019f8:	4603      	mov	r3, r0
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4403      	add	r3, r0
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	4413      	add	r3, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	3304      	adds	r3, #4
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]

		}  // else if(!maze.cell_grid[c.x][c.y].visited)

		if(found_flood_fill_destination(&c, &maze))
 8001a0a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f8be 	bl	8001b96 <found_flood_fill_destination>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d161      	bne.n	8001ae4 <do_flood_fill_algorithm+0x9f0>
			return;
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, &c, &stack);
 8001a20:	1d3a      	adds	r2, r7, #4
 8001a22:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001a26:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f8d0 	bl	8001bd0 <minus_one_neighbor>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815

		if(desired_direction == Unknown)
 8001a36:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d124      	bne.n	8001a88 <do_flood_fill_algorithm+0x994>
		{
			while(!stack_is_empty(&stack))
 8001a3e:	e011      	b.n	8001a64 <do_flood_fill_algorithm+0x970>
			{
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f866 	bl	8001b14 <pop_stack>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001a4e:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001a52:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, &next_coordinate, &stack);
 8001a54:	1d3a      	adds	r2, r7, #4
 8001a56:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001a5a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f8b6 	bl	8001bd0 <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f842 	bl	8001af0 <stack_is_empty>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0e6      	beq.n	8001a40 <do_flood_fill_algorithm+0x94c>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, &c, &stack);
 8001a72:	1d3a      	adds	r2, r7, #4
 8001a74:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001a78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f8a7 	bl	8001bd0 <minus_one_neighbor>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
		}  // if(next_direction == Unknown)

		int difference = direction - desired_direction;
 8001a88:	f897 2814 	ldrb.w	r2, [r7, #2068]	; 0x814
 8001a8c:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
		switch(difference % 4)
 8001a96:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001a9a:	425a      	negs	r2, r3
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	bf58      	it	pl
 8001aa6:	4253      	negpl	r3, r2
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d816      	bhi.n	8001ada <do_flood_fill_algorithm+0x9e6>
 8001aac:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <do_flood_fill_algorithm+0x9c0>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001adb 	.word	0x08001adb
 8001ab8:	08001ac5 	.word	0x08001ac5
 8001abc:	08001acd 	.word	0x08001acd
 8001ac0:	08001ad3 	.word	0x08001ad3
		{
		case 0:
			break;
		case 1:
			rotate_direction_90(Left);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f000 ff90 	bl	80029ea <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001aca:	e006      	b.n	8001ada <do_flood_fill_algorithm+0x9e6>
		case 2:
			rotate_180_degrees();
 8001acc:	f000 ffb2 	bl	8002a34 <rotate_180_degrees>
			// TODO - might need to calibrate
			break;
 8001ad0:	e003      	b.n	8001ada <do_flood_fill_algorithm+0x9e6>
		case 3:
			rotate_direction_90(Right);
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f000 ff89 	bl	80029ea <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001ad8:	bf00      	nop
		}

		direction = desired_direction;
 8001ada:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 8001ade:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	{
 8001ae2:	e481      	b.n	80013e8 <do_flood_fill_algorithm+0x2f4>
			return;
 8001ae4:	bf00      	nop

	}  // while(1)
}  // do_hug_left_algorithm()
 8001ae6:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	bf00      	nop

08001af0 <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <pop_stack>:

coordinate pop_stack(stack *s)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001b32:	3301      	adds	r3, #1
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	f107 020c 	add.w	r2, r7, #12
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	440b      	add	r3, r1
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	8013      	strh	r3, [r2, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	7b3a      	ldrb	r2, [r7, #12]
 8001b46:	f362 0307 	bfi	r3, r2, #0, #8
 8001b4a:	7b7a      	ldrb	r2, [r7, #13]
 8001b4c:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <push_stack>:

void push_stack(stack* s, coordinate *c)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
	s->index = s->index + 1;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = *c;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	460a      	mov	r2, r1
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <found_flood_fill_destination>:
		break;
	}  // switch(d)
}  // void move_forward_and_update(maze_direction d, Coordinate *c, Flood_Fill_Maze *m)

uint8_t found_flood_fill_destination(coordinate *c, flood_fill_maze *maze)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c->x][c->y] == 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	785b      	ldrb	r3, [r3, #1]
 8001baa:	4619      	mov	r1, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	0103      	lsls	r3, r0, #4
 8001bb0:	4413      	add	r3, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(Coordinate *c, Flood_Fill_Maze *maze)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate *c, stack *s)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
 8001bdc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001be0:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c->x][c->y] - 1;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	4619      	mov	r1, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	0103      	lsls	r3, r0, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 8001c04:	2300      	movs	r3, #0
 8001c06:	757b      	strb	r3, [r7, #21]
 8001c08:	e103      	b.n	8001e12 <minus_one_neighbor+0x242>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461c      	mov	r4, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	7d79      	ldrb	r1, [r7, #21]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	441a      	add	r2, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4423      	add	r3, r4
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	4403      	add	r3, r0
 8001c2a:	440b      	add	r3, r1
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80e3 	bne.w	8001dfa <minus_one_neighbor+0x22a>
		{
			switch(i)
 8001c34:	7d7b      	ldrb	r3, [r7, #21]
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	f200 80e8 	bhi.w	8001e0c <minus_one_neighbor+0x23c>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <minus_one_neighbor+0x74>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c59 	.word	0x08001c59
 8001c48:	08001cc3 	.word	0x08001cc3
 8001c4c:	08001d2b 	.word	0x08001d2b
 8001c50:	08001d93 	.word	0x08001d93
 8001c54:	08001e0d 	.word	0x08001e0d
			{
			case North:
				if(maze->distance_grid[c->x][c->y + 1] == target)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	3301      	adds	r3, #1
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	440a      	add	r2, r1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d101      	bne.n	8001c80 <minus_one_neighbor+0xb0>
				{
					return i;
 8001c7c:	7d7b      	ldrb	r3, [r7, #21]
 8001c7e:	e140      	b.n	8001f02 <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y + 1] == target)
				if(maze->distance_grid[c->x][c->y + 1] < min_dist)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	440a      	add	r2, r1
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	8afa      	ldrh	r2, [r7, #22]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f240 80ad 	bls.w	8001dfe <minus_one_neighbor+0x22e>
				{
					min_dist = maze->distance_grid[c->x][c->y + 1];
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	440a      	add	r2, r1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y + 1] < min_dist)
				break;
 8001cc0:	e09d      	b.n	8001dfe <minus_one_neighbor+0x22e>
			case East:
				if(maze->distance_grid[c->x + 1][c->y] == target)
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	7852      	ldrb	r2, [r2, #1]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d101      	bne.n	8001cea <minus_one_neighbor+0x11a>
				{
					return i;
 8001ce6:	7d7b      	ldrb	r3, [r7, #21]
 8001ce8:	e10b      	b.n	8001f02 <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x + 1][c->y] == target)
				if(maze->distance_grid[c->x + 1][c->y] < min_dist)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	7852      	ldrb	r2, [r2, #1]
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	8afa      	ldrh	r2, [r7, #22]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d97a      	bls.n	8001e02 <minus_one_neighbor+0x232>
				{
					min_dist = maze->distance_grid[c->x + 1][c->y];
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	7852      	ldrb	r2, [r2, #1]
 8001d16:	4611      	mov	r1, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x + 1][c->y] < min_dist)
				break;
 8001d28:	e06b      	b.n	8001e02 <minus_one_neighbor+0x232>
			case South:
				if(maze->distance_grid[c->x][c->y-1] == target)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	785b      	ldrb	r3, [r3, #1]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	440a      	add	r2, r1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d101      	bne.n	8001d52 <minus_one_neighbor+0x182>
				{
					return i;
 8001d4e:	7d7b      	ldrb	r3, [r7, #21]
 8001d50:	e0d7      	b.n	8001f02 <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y-1] == target)
				if(maze->distance_grid[c->x][c->y-1] < min_dist)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	440a      	add	r2, r1
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8afa      	ldrh	r2, [r7, #22]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d948      	bls.n	8001e06 <minus_one_neighbor+0x236>
				{
					min_dist = maze->distance_grid[c->x][c->y-1];
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	785b      	ldrb	r3, [r3, #1]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	440a      	add	r2, r1
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y-1] < min_dist)
				break;
 8001d90:	e039      	b.n	8001e06 <minus_one_neighbor+0x236>
			case West:
				if(maze->distance_grid[c->x-1][c->y] == target)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	7852      	ldrb	r2, [r2, #1]
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d101      	bne.n	8001dba <minus_one_neighbor+0x1ea>
				{
					return i;
 8001db6:	7d7b      	ldrb	r3, [r7, #21]
 8001db8:	e0a3      	b.n	8001f02 <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x-1][c->y] == target)
				if(maze->distance_grid[c->x-1][c->y] < min_dist)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	7852      	ldrb	r2, [r2, #1]
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	4413      	add	r3, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	8afa      	ldrh	r2, [r7, #22]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d916      	bls.n	8001e0a <minus_one_neighbor+0x23a>
				{
					min_dist = maze->distance_grid[c->x-1][c->y];
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	7852      	ldrb	r2, [r2, #1]
 8001de6:	4611      	mov	r1, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x-1][c->y] < min_dist)
				break;
 8001df8:	e007      	b.n	8001e0a <minus_one_neighbor+0x23a>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001dfa:	bf00      	nop
 8001dfc:	e006      	b.n	8001e0c <minus_one_neighbor+0x23c>
				break;
 8001dfe:	bf00      	nop
 8001e00:	e004      	b.n	8001e0c <minus_one_neighbor+0x23c>
				break;
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <minus_one_neighbor+0x23c>
				break;
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <minus_one_neighbor+0x23c>
				break;
 8001e0a:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 8001e0c:	7d7b      	ldrb	r3, [r7, #21]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	757b      	strb	r3, [r7, #21]
 8001e12:	7d7b      	ldrb	r3, [r7, #21]
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	f67f aef8 	bls.w	8001c0a <minus_one_neighbor+0x3a>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c->x][c->y] = min_dist + 1;
 8001e1a:	8afb      	ldrh	r3, [r7, #22]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	4614      	mov	r4, r2
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	7852      	ldrb	r2, [r2, #1]
 8001e28:	4610      	mov	r0, r2
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2d9      	uxtb	r1, r3
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	0123      	lsls	r3, r4, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	4403      	add	r3, r0
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	460a      	mov	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	753b      	strb	r3, [r7, #20]
 8001e42:	e05a      	b.n	8001efa <minus_one_neighbor+0x32a>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461c      	mov	r4, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	7d39      	ldrb	r1, [r7, #20]
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	461a      	mov	r2, r3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	4623      	mov	r3, r4
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4423      	add	r3, r4
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4413      	add	r3, r2
 8001e62:	4403      	add	r3, r0
 8001e64:	440b      	add	r3, r1
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d143      	bne.n	8001ef4 <minus_one_neighbor+0x324>
		{
			coordinate temp;
			switch(i)
 8001e6c:	7d3b      	ldrb	r3, [r7, #20]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d83a      	bhi.n	8001ee8 <minus_one_neighbor+0x318>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <minus_one_neighbor+0x2a8>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001ea1 	.word	0x08001ea1
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001ed1 	.word	0x08001ed1
			{
			case North:
				init_coordinate(&temp, c->x, c->y + 1);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	7819      	ldrb	r1, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f837 	bl	8001f0c <init_coordinate>
				break;
 8001e9e:	e023      	b.n	8001ee8 <minus_one_neighbor+0x318>
			case East:
				init_coordinate(&temp, c->x + 1, c->y);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b2d9      	uxtb	r1, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	785a      	ldrb	r2, [r3, #1]
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f82b 	bl	8001f0c <init_coordinate>
				break;
 8001eb6:	e017      	b.n	8001ee8 <minus_one_neighbor+0x318>
			case South:
				init_coordinate(&temp, c->x, c->y - 1);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	7819      	ldrb	r1, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	785b      	ldrb	r3, [r3, #1]
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 f81f 	bl	8001f0c <init_coordinate>
				break;
 8001ece:	e00b      	b.n	8001ee8 <minus_one_neighbor+0x318>
			case West:
				init_coordinate(&temp, c->x - 1, c->y);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b2d9      	uxtb	r1, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	785a      	ldrb	r2, [r3, #1]
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f813 	bl	8001f0c <init_coordinate>
				break;
 8001ee6:	bf00      	nop
			}  // switch(i)
			push_stack(s, &temp);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4619      	mov	r1, r3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fe34 	bl	8001b5c <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 8001ef4:	7d3b      	ldrb	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	753b      	strb	r3, [r7, #20]
 8001efa:	7d3b      	ldrb	r3, [r7, #20]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d9a1      	bls.n	8001e44 <minus_one_neighbor+0x274>
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8001f00:	2304      	movs	r3, #4
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}
 8001f0a:	bf00      	nop

08001f0c <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	701a      	strb	r2, [r3, #0]
	c->y = y;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	78ba      	ldrb	r2, [r7, #2]
 8001f26:	705a      	strb	r2, [r3, #1]
}  // void init_coor(Coordinate *c, uint8_t x, uint8_t y)
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0d2      	sub	sp, #328	; 0x148
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f42:	6018      	str	r0, [r3, #0]
 8001f44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f4c:	8019      	strh	r1, [r3, #0]
 8001f4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f52:	f2a3 1341 	subw	r3, r3, #321	; 0x141
 8001f56:	701a      	strb	r2, [r3, #0]
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001f5e:	e08c      	b.n	800207a <print_maze+0x146>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001f66:	e07e      	b.n	8002066 <print_maze+0x132>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8001f68:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001f6c:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001f70:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f74:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001f78:	6810      	ldr	r0, [r2, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	441a      	add	r2, r3
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4413      	add	r3, r2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[East] << 1;
 8001f92:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001f96:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001f9a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f9e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001fa2:	6810      	ldr	r0, [r2, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	460b      	mov	r3, r1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b25a      	sxtb	r2, r3
 8001fbe:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[South] << 2;
 8001fca:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001fce:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001fd2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001fd6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001fda:	6810      	ldr	r0, [r2, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	441a      	add	r2, r3
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	4403      	add	r3, r0
 8001fee:	3302      	adds	r3, #2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[West] << 3;
 8002002:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8002006:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800200a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800200e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8002012:	6810      	ldr	r0, [r2, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	0092      	lsls	r2, r2, #2
 8002018:	441a      	add	r2, r3
 800201a:	460b      	mov	r3, r1
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	4403      	add	r3, r0
 8002026:	3303      	adds	r3, #3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	b25a      	sxtb	r2, r3
 800202e:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8002032:	4313      	orrs	r3, r2
 8002034:	b25b      	sxtb	r3, r3
 8002036:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			maze_map[i][j] = 'a' + number;
 800203a:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 800203e:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8002042:	f897 1143 	ldrb.w	r1, [r7, #323]	; 0x143
 8002046:	3161      	adds	r1, #97	; 0x61
 8002048:	b2c8      	uxtb	r0, r1
 800204a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 800204e:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	440a      	add	r2, r1
 8002056:	4413      	add	r3, r2
 8002058:	4602      	mov	r2, r0
 800205a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800205c:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8002060:	3301      	adds	r3, #1
 8002062:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8002066:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800206a:	2b0f      	cmp	r3, #15
 800206c:	f67f af7c 	bls.w	8001f68 <print_maze+0x34>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8002070:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8002074:	3301      	adds	r3, #1
 8002076:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800207a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800207e:	2b0f      	cmp	r3, #15
 8002080:	f67f af6e 	bls.w	8001f60 <print_maze+0x2c>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 8002084:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002088:	f2a3 1341 	subw	r3, r3, #321	; 0x141
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b04      	cmp	r3, #4
 8002090:	d864      	bhi.n	800215c <print_maze+0x228>
 8002092:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <print_maze+0x164>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	080020ad 	.word	0x080020ad
 800209c:	080020d9 	.word	0x080020d9
 80020a0:	08002105 	.word	0x08002105
 80020a4:	08002131 	.word	0x08002131
 80020a8:	0800215d 	.word	0x0800215d
	{
	case North:
		maze_map[c.x][c.y] = 'N';
 80020ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020c8:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80020cc:	0103      	lsls	r3, r0, #4
 80020ce:	4413      	add	r3, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	224e      	movs	r2, #78	; 0x4e
 80020d4:	701a      	strb	r2, [r3, #0]
		break;
 80020d6:	e041      	b.n	800215c <print_maze+0x228>
	case East:
		maze_map[c.x][c.y] = 'E';
 80020d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020dc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80020f4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80020f8:	0103      	lsls	r3, r0, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	2245      	movs	r2, #69	; 0x45
 8002100:	701a      	strb	r2, [r3, #0]
		break;
 8002102:	e02b      	b.n	800215c <print_maze+0x228>
	case South:
		maze_map[c.x][c.y] = 'S';
 8002104:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002108:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002114:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	4619      	mov	r1, r3
 800211c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002120:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002124:	0103      	lsls	r3, r0, #4
 8002126:	4413      	add	r3, r2
 8002128:	440b      	add	r3, r1
 800212a:	2253      	movs	r2, #83	; 0x53
 800212c:	701a      	strb	r2, [r3, #0]
		break;
 800212e:	e015      	b.n	800215c <print_maze+0x228>
	case West:
		maze_map[c.x][c.y] = 'W';
 8002130:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002134:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002140:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	4619      	mov	r1, r3
 8002148:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800214c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002150:	0103      	lsls	r3, r0, #4
 8002152:	4413      	add	r3, r2
 8002154:	440b      	add	r3, r1
 8002156:	2257      	movs	r2, #87	; 0x57
 8002158:	701a      	strb	r2, [r3, #0]
		break;
 800215a:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8002162:	e044      	b.n	80021ee <print_maze+0x2ba>
	{
		char buf[16];
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
 800216a:	e017      	b.n	800219c <print_maze+0x268>
		{
			buf[i] = maze_map[i][j];
 800216c:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 8002170:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8002174:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8002178:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800217c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8002180:	0109      	lsls	r1, r1, #4
 8002182:	4401      	add	r1, r0
 8002184:	440a      	add	r2, r1
 8002186:	7811      	ldrb	r1, [r2, #0]
 8002188:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800218c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002190:	54d1      	strb	r1, [r2, r3]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002192:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8002196:	3301      	adds	r3, #1
 8002198:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
 800219c:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d9e3      	bls.n	800216c <print_maze+0x238>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80021a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80021a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ac:	2210      	movs	r2, #16
 80021ae:	4815      	ldr	r0, [pc, #84]	; (8002204 <print_maze+0x2d0>)
 80021b0:	f003 f8c5 	bl	800533e <HAL_UART_Transmit>
		char buf2[30] = "\r\n";
 80021b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80021b8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80021bc:	f640 220d 	movw	r2, #2573	; 0xa0d
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	3304      	adds	r3, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	831a      	strh	r2, [r3, #24]
		HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80021d4:	f107 0110 	add.w	r1, r7, #16
 80021d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021dc:	221e      	movs	r2, #30
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <print_maze+0x2d0>)
 80021e0:	f003 f8ad 	bl	800533e <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80021e4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 80021ee:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80021f2:	2b0f      	cmp	r3, #15
 80021f4:	d9b6      	bls.n	8002164 <print_maze+0x230>
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80021f6:	bf00      	nop
 80021f8:	bf00      	nop
 80021fa:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200003a8 	.word	0x200003a8

08002208 <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 800220c:	2000      	movs	r0, #0
 800220e:	f001 f861 	bl	80032d4 <is_there_wall_on_direction>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d105      	bne.n	8002224 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 8002218:	2000      	movs	r0, #0
 800221a:	f000 fbe6 	bl	80029ea <rotate_direction_90>
		go_forward_one_unit();
 800221e:	f000 fc16 	bl	8002a4e <go_forward_one_unit>
 8002222:	e018      	b.n	8002256 <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8002224:	2001      	movs	r0, #1
 8002226:	f001 f855 	bl	80032d4 <is_there_wall_on_direction>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d010      	beq.n	8002252 <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8002230:	2002      	movs	r0, #2
 8002232:	f001 f84f 	bl	80032d4 <is_there_wall_on_direction>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 800223c:	f000 fbfa 	bl	8002a34 <rotate_180_degrees>
			go_forward_one_unit();
 8002240:	f000 fc05 	bl	8002a4e <go_forward_one_unit>
 8002244:	e007      	b.n	8002256 <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 8002246:	2002      	movs	r0, #2
 8002248:	f000 fbcf 	bl	80029ea <rotate_direction_90>
			go_forward_one_unit();
 800224c:	f000 fbff 	bl	8002a4e <go_forward_one_unit>
 8002250:	e001      	b.n	8002256 <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 8002252:	f000 fbfc 	bl	8002a4e <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 8002256:	f000 f808 	bl	800226a <found_hugger_destination>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 8002260:	f7ff ffd2 	bl	8002208 <do_hug_left_algorithm>
 8002264:	e000      	b.n	8002268 <do_hug_left_algorithm+0x60>
		return;
 8002266:	bf00      	nop
}  // do_hug_left_algorithm()
 8002268:	bd80      	pop	{r7, pc}

0800226a <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 800226e:	2300      	movs	r3, #0
}  // found_hugger_destination()
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002282:	f001 f869 	bl	8003358 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002286:	f000 f859 	bl	800233c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228a:	f000 fab7 	bl	80027fc <MX_GPIO_Init>
  MX_TIM3_Init();
 800228e:	f000 f90b 	bl	80024a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002292:	f000 f963 	bl	800255c <MX_TIM4_Init>
  MX_TIM2_Init();
 8002296:	f000 f8af 	bl	80023f8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800229a:	f000 f9b9 	bl	8002610 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800229e:	f000 fa83 	bl	80027a8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80022a2:	f000 fa09 	bl	80026b8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80022a6:	f000 fa55 	bl	8002754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe fe56 	bl	8000f5c <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 80022b0:	2101      	movs	r1, #1
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fe fe71 	bl	8000f9a <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 80022b8:	2001      	movs	r0, #1
 80022ba:	f000 fbd4 	bl	8002a66 <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 80022be:	f000 fb57 	bl	8002970 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <main+0xa8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <main+0xa8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 80022d2:	2100      	movs	r1, #0
 80022d4:	4814      	ldr	r0, [pc, #80]	; (8002328 <main+0xac>)
 80022d6:	f002 f87b 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 80022da:	2104      	movs	r1, #4
 80022dc:	4813      	ldr	r0, [pc, #76]	; (800232c <main+0xb0>)
 80022de:	f002 f877 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 80022e2:	2100      	movs	r1, #0
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <main+0xb4>)
 80022e6:	f002 f873 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 80022ea:	2104      	movs	r1, #4
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <main+0xa8>)
 80022ee:	f002 f86f 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  // Sonic Trigger PWM
 80022f2:	2100      	movs	r1, #0
 80022f4:	480f      	ldr	r0, [pc, #60]	; (8002334 <main+0xb8>)
 80022f6:	f002 f86b 	bl	80043d0 <HAL_TIM_PWM_Start>

  manual_mode = 0;  // TODO - change to 1 once we can control manual_mode
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <main+0xbc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

  while (manual_mode) {
 8002300:	e000      	b.n	8002304 <main+0x88>
	  continue;  // stuck in infinite loop until interrupt is called
 8002302:	bf00      	nop
  while (manual_mode) {
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <main+0xbc>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1fa      	bne.n	8002302 <main+0x86>
  }

  uint8_t determined_algorithm = determine_algorithm();
 800230c:	f7fe fea0 	bl	8001050 <determine_algorithm>
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  do_search_algorithm(determined_algorithm);
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe feb8 	bl	800108c <do_search_algorithm>
  complete_search_algorithm();
 800231c:	f7fe fedb 	bl	80010d6 <complete_search_algorithm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002320:	e7fe      	b.n	8002320 <main+0xa4>
 8002322:	bf00      	nop
 8002324:	200002d4 	.word	0x200002d4
 8002328:	2000028c 	.word	0x2000028c
 800232c:	20000244 	.word	0x20000244
 8002330:	200001fc 	.word	0x200001fc
 8002334:	2000031c 	.word	0x2000031c
 8002338:	200003ec 	.word	0x200003ec

0800233c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b094      	sub	sp, #80	; 0x50
 8002340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002342:	f107 0320 	add.w	r3, r7, #32
 8002346:	2230      	movs	r2, #48	; 0x30
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fb96 	bl	8005a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <SystemClock_Config+0xb4>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <SystemClock_Config+0xb4>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <SystemClock_Config+0xb4>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <SystemClock_Config+0xb8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <SystemClock_Config+0xb8>)
 8002386:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <SystemClock_Config+0xb8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002398:	2302      	movs	r3, #2
 800239a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239c:	2301      	movs	r3, #1
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a0:	2310      	movs	r3, #16
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fb19 	bl	80039e4 <HAL_RCC_OscConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80023b8:	f000 fa90 	bl	80028dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023bc:	230f      	movs	r3, #15
 80023be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fd7c 	bl	8003ed4 <HAL_RCC_ClockConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023e2:	f000 fa7b 	bl	80028dc <Error_Handler>
  }
}
 80023e6:	bf00      	nop
 80023e8:	3750      	adds	r7, #80	; 0x50
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000

080023f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fe:	f107 0320 	add.w	r3, r7, #32
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <MX_TIM2_Init+0xac>)
 800241c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002424:	229f      	movs	r2, #159	; 0x9f
 8002426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM2_Init+0xac>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002430:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <MX_TIM2_Init+0xac>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002442:	4818      	ldr	r0, [pc, #96]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002444:	f001 ff75 	bl	8004332 <HAL_TIM_PWM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800244e:	f000 fa45 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800245a:	f107 0320 	add.w	r3, r7, #32
 800245e:	4619      	mov	r1, r3
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002462:	f002 fe9d 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800246c:	f000 fa36 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002470:	2360      	movs	r3, #96	; 0x60
 8002472:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	4619      	mov	r1, r3
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002488:	f002 fa46 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002492:	f000 fa23 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002496:	4803      	ldr	r0, [pc, #12]	; (80024a4 <MX_TIM2_Init+0xac>)
 8002498:	f000 fbee 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200001fc 	.word	0x200001fc

080024a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ca:	4b22      	ldr	r3, [pc, #136]	; (8002554 <MX_TIM3_Init+0xac>)
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <MX_TIM3_Init+0xb0>)
 80024ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <MX_TIM3_Init+0xac>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <MX_TIM3_Init+0xac>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_TIM3_Init+0xac>)
 80024de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <MX_TIM3_Init+0xac>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_TIM3_Init+0xac>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024f0:	4818      	ldr	r0, [pc, #96]	; (8002554 <MX_TIM3_Init+0xac>)
 80024f2:	f001 ff1e 	bl	8004332 <HAL_TIM_PWM_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80024fc:	f000 f9ee 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4619      	mov	r1, r3
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_TIM3_Init+0xac>)
 8002510:	f002 fe46 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800251a:	f000 f9df 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251e:	2360      	movs	r3, #96	; 0x60
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2204      	movs	r2, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM3_Init+0xac>)
 8002536:	f002 f9ef 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002540:	f000 f9cc 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM3_Init+0xac>)
 8002546:	f000 fb97 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3728      	adds	r7, #40	; 0x28
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000244 	.word	0x20000244
 8002558:	40000400 	.word	0x40000400

0800255c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002562:	f107 0320 	add.w	r3, r7, #32
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	615a      	str	r2, [r3, #20]
 800257c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <MX_TIM4_Init+0xac>)
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <MX_TIM4_Init+0xb0>)
 8002582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002584:	4b20      	ldr	r3, [pc, #128]	; (8002608 <MX_TIM4_Init+0xac>)
 8002586:	224f      	movs	r2, #79	; 0x4f
 8002588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258a:	4b1f      	ldr	r3, [pc, #124]	; (8002608 <MX_TIM4_Init+0xac>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <MX_TIM4_Init+0xac>)
 8002592:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <MX_TIM4_Init+0xac>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_TIM4_Init+0xac>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025a4:	4818      	ldr	r0, [pc, #96]	; (8002608 <MX_TIM4_Init+0xac>)
 80025a6:	f001 fec4 	bl	8004332 <HAL_TIM_PWM_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80025b0:	f000 f994 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025bc:	f107 0320 	add.w	r3, r7, #32
 80025c0:	4619      	mov	r1, r3
 80025c2:	4811      	ldr	r0, [pc, #68]	; (8002608 <MX_TIM4_Init+0xac>)
 80025c4:	f002 fdec 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80025ce:	f000 f985 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d2:	2360      	movs	r3, #96	; 0x60
 80025d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2200      	movs	r2, #0
 80025e6:	4619      	mov	r1, r3
 80025e8:	4807      	ldr	r0, [pc, #28]	; (8002608 <MX_TIM4_Init+0xac>)
 80025ea:	f002 f995 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80025f4:	f000 f972 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <MX_TIM4_Init+0xac>)
 80025fa:	f000 fb3d 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000028c 	.word	0x2000028c
 800260c:	40000800 	.word	0x40000800

08002610 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002620:	463b      	mov	r3, r7
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <MX_TIM5_Init+0xa0>)
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <MX_TIM5_Init+0xa4>)
 8002630:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002632:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002634:	220f      	movs	r2, #15
 8002636:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <MX_TIM5_Init+0xa0>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002640:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002644:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <MX_TIM5_Init+0xa0>)
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002652:	4817      	ldr	r0, [pc, #92]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002654:	f001 ff6c 	bl	8004530 <HAL_TIM_IC_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800265e:	f000 f93d 	bl	80028dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800266a:	f107 0310 	add.w	r3, r7, #16
 800266e:	4619      	mov	r1, r3
 8002670:	480f      	ldr	r0, [pc, #60]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002672:	f002 fd95 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800267c:	f000 f92e 	bl	80028dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002680:	2300      	movs	r3, #0
 8002682:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002684:	2301      	movs	r3, #1
 8002686:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002688:	2300      	movs	r3, #0
 800268a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	2204      	movs	r2, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <MX_TIM5_Init+0xa0>)
 8002698:	f002 f8a1 	bl	80047de <HAL_TIM_IC_ConfigChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80026a2:	f000 f91b 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200002d4 	.word	0x200002d4
 80026b4:	40000c00 	.word	0x40000c00

080026b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_TIM10_Init+0x94>)
 80026d2:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <MX_TIM10_Init+0x98>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <MX_TIM10_Init+0x94>)
 80026d8:	229f      	movs	r2, #159	; 0x9f
 80026da:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <MX_TIM10_Init+0x94>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 80026e2:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM10_Init+0x94>)
 80026e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80026e8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <MX_TIM10_Init+0x94>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <MX_TIM10_Init+0x94>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80026f6:	4815      	ldr	r0, [pc, #84]	; (800274c <MX_TIM10_Init+0x94>)
 80026f8:	f001 fdcc 	bl	8004294 <HAL_TIM_Base_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002702:	f000 f8eb 	bl	80028dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002706:	4811      	ldr	r0, [pc, #68]	; (800274c <MX_TIM10_Init+0x94>)
 8002708:	f001 fe13 	bl	8004332 <HAL_TIM_PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002712:	f000 f8e3 	bl	80028dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002716:	2360      	movs	r3, #96	; 0x60
 8002718:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	4807      	ldr	r0, [pc, #28]	; (800274c <MX_TIM10_Init+0x94>)
 800272e:	f002 f8f3 	bl	8004918 <HAL_TIM_PWM_ConfigChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002738:	f000 f8d0 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <MX_TIM10_Init+0x94>)
 800273e:	f000 fa9b 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8002742:	bf00      	nop
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000031c 	.word	0x2000031c
 8002750:	40014400 	.word	0x40014400

08002754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <MX_USART2_UART_Init+0x50>)
 800275c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 8002760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 800277a:	220c      	movs	r2, #12
 800277c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_USART2_UART_Init+0x4c>)
 800278c:	f002 fd8a 	bl	80052a4 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002796:	f000 f8a1 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000364 	.word	0x20000364
 80027a4:	40004400 	.word	0x40004400

080027a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <MX_USART6_UART_Init+0x50>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_USART6_UART_Init+0x4c>)
 80027e0:	f002 fd60 	bl	80052a4 <HAL_UART_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027ea:	f000 f877 	bl	80028dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200003a8 	.word	0x200003a8
 80027f8:	40011400 	.word	0x40011400

080027fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <MX_GPIO_Init+0xb4>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <MX_GPIO_Init+0xb4>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_GPIO_Init+0xb4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 8002866:	2200      	movs	r2, #0
 8002868:	f44f 7148 	mov.w	r1, #800	; 0x320
 800286c:	4811      	ldr	r0, [pc, #68]	; (80028b4 <MX_GPIO_Init+0xb8>)
 800286e:	f001 f89f 	bl	80039b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 8002872:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	4619      	mov	r1, r3
 800288a:	480a      	ldr	r0, [pc, #40]	; (80028b4 <MX_GPIO_Init+0xb8>)
 800288c:	f000 ff0c 	bl	80036a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	4804      	ldr	r0, [pc, #16]	; (80028b4 <MX_GPIO_Init+0xb8>)
 80028a4:	f000 ff00 	bl	80036a8 <HAL_GPIO_Init>

}
 80028a8:	bf00      	nop
 80028aa:	3720      	adds	r7, #32
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020000 	.word	0x40020000

080028b8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80028c0:	1d39      	adds	r1, r7, #4
 80028c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c6:	2201      	movs	r2, #1
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <__io_putchar+0x20>)
 80028ca:	f002 fd38 	bl	800533e <HAL_UART_Transmit>
  return ch;
 80028ce:	687b      	ldr	r3, [r7, #4]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000364 	.word	0x20000364

080028dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <Error_Handler+0x8>
	...

080028e8 <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	460a      	mov	r2, r1
 80028f2:	71fb      	strb	r3, [r7, #7]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <set_motor_speed+0x1c>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d016      	beq.n	8002930 <set_motor_speed+0x48>
 8002902:	e02b      	b.n	800295c <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002904:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	bfd4      	ite	le
 800290c:	2301      	movle	r3, #1
 800290e:	2300      	movgt	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002918:	4812      	ldr	r0, [pc, #72]	; (8002964 <set_motor_speed+0x7c>)
 800291a:	f001 f849 	bl	80039b0 <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 800291e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	bfb8      	it	lt
 8002926:	425b      	neglt	r3, r3
 8002928:	b29a      	uxth	r2, r3
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <set_motor_speed+0x80>)
 800292c:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800292e:	e015      	b.n	800295c <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002930:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfd4      	ite	le
 8002938:	2301      	movle	r3, #1
 800293a:	2300      	movgt	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002944:	4807      	ldr	r0, [pc, #28]	; (8002964 <set_motor_speed+0x7c>)
 8002946:	f001 f833 	bl	80039b0 <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 800294a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	bfb8      	it	lt
 8002952:	425b      	neglt	r3, r3
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <set_motor_speed+0x84>)
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 800295a:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40020000 	.word	0x40020000
 8002968:	40000800 	.word	0x40000800
 800296c:	40000400 	.word	0x40000400

08002970 <stop_all_motors>:
{
	set_motor_speed(side, 0);
}  // stop_motors(motor_side side)

void stop_all_motors()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	set_motor_speed(Left_Motor, 0);
 8002974:	2100      	movs	r1, #0
 8002976:	2000      	movs	r0, #0
 8002978:	f7ff ffb6 	bl	80028e8 <set_motor_speed>
	set_motor_speed(Right_Motor, 0);
 800297c:	2100      	movs	r1, #0
 800297e:	2001      	movs	r0, #1
 8002980:	f7ff ffb2 	bl	80028e8 <set_motor_speed>
}  // stop_all_motors()
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <rotate_direction>:

void rotate_direction(direction d)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d00f      	beq.n	80029b8 <rotate_direction+0x30>
 8002998:	2b02      	cmp	r3, #2
 800299a:	dc17      	bgt.n	80029cc <rotate_direction+0x44>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <rotate_direction+0x1c>
 80029a0:	2b01      	cmp	r3, #1
	case Left:
		set_motor_speed(Left_Motor, -200);
		set_motor_speed(Right_Motor, 200);
		return;
	case Front:
		return;
 80029a2:	e013      	b.n	80029cc <rotate_direction+0x44>
		set_motor_speed(Left_Motor, -200);
 80029a4:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7ff ff9d 	bl	80028e8 <set_motor_speed>
		set_motor_speed(Right_Motor, 200);
 80029ae:	21c8      	movs	r1, #200	; 0xc8
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff ff99 	bl	80028e8 <set_motor_speed>
		return;
 80029b6:	e009      	b.n	80029cc <rotate_direction+0x44>
	case Right:
		set_motor_speed(Left_Motor, 200);
 80029b8:	21c8      	movs	r1, #200	; 0xc8
 80029ba:	2000      	movs	r0, #0
 80029bc:	f7ff ff94 	bl	80028e8 <set_motor_speed>
		set_motor_speed(Right_Motor, -200);
 80029c0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80029c4:	2001      	movs	r0, #1
 80029c6:	f7ff ff8f 	bl	80028e8 <set_motor_speed>
		return;
 80029ca:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d)
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <motors_forward>:

void motors_forward()
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	af00      	add	r7, sp, #0
	set_motor_speed(Left_Motor, 200);
 80029d6:	21c8      	movs	r1, #200	; 0xc8
 80029d8:	2000      	movs	r0, #0
 80029da:	f7ff ff85 	bl	80028e8 <set_motor_speed>
	set_motor_speed(Right_Motor, 200);
 80029de:	21c8      	movs	r1, #200	; 0xc8
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ff81 	bl	80028e8 <set_motor_speed>
}  // void motors_forward()
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}

080029ea <rotate_direction_90>:
#include "mouse.h"

void rotate_direction_90(direction d)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	71fb      	strb	r3, [r7, #7]


	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d00f      	beq.n	8002a1a <rotate_direction_90+0x30>
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	dc17      	bgt.n	8002a2e <rotate_direction_90+0x44>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <rotate_direction_90+0x1c>
 8002a02:	2b01      	cmp	r3, #1
		rotate_direction(Left);
		HAL_Delay(445);
		stop_all_motors();
		return;
	case Front:
		return;
 8002a04:	e013      	b.n	8002a2e <rotate_direction_90+0x44>
		rotate_direction(Left);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7ff ffbe 	bl	8002988 <rotate_direction>
		HAL_Delay(445);
 8002a0c:	f240 10bd 	movw	r0, #445	; 0x1bd
 8002a10:	f000 fd14 	bl	800343c <HAL_Delay>
		stop_all_motors();
 8002a14:	f7ff ffac 	bl	8002970 <stop_all_motors>
		return;
 8002a18:	e009      	b.n	8002a2e <rotate_direction_90+0x44>
	case Right:
		rotate_direction(Right);
 8002a1a:	2002      	movs	r0, #2
 8002a1c:	f7ff ffb4 	bl	8002988 <rotate_direction>
		HAL_Delay(445);
 8002a20:	f240 10bd 	movw	r0, #445	; 0x1bd
 8002a24:	f000 fd0a 	bl	800343c <HAL_Delay>
		stop_all_motors();
 8002a28:	f7ff ffa2 	bl	8002970 <stop_all_motors>
		return;
 8002a2c:	bf00      	nop
	}  // switch(d)
}  // rotate_direction_90(direction d)
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <rotate_180_degrees>:

void rotate_180_degrees()
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff ffd6 	bl	80029ea <rotate_direction_90>
	HAL_Delay(200);
 8002a3e:	20c8      	movs	r0, #200	; 0xc8
 8002a40:	f000 fcfc 	bl	800343c <HAL_Delay>
	rotate_direction_90(Left);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff ffd0 	bl	80029ea <rotate_direction_90>

}  // rotate_180_degrees()
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
	// TODO - make sure numbers are precise enough. need to tune
	motors_forward();
 8002a52:	f7ff ffbe 	bl	80029d2 <motors_forward>
	HAL_Delay(1000);
 8002a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a5a:	f000 fcef 	bl	800343c <HAL_Delay>
	stop_all_motors();
 8002a5e:	f7ff ff87 	bl	8002970 <stop_all_motors>
}  // go_forward()
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d010      	beq.n	8002a98 <set_servo_angle+0x32>
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	dc13      	bgt.n	8002aa2 <set_servo_angle+0x3c>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <set_servo_angle+0x1e>
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <set_servo_angle+0x28>
 8002a82:	e00e      	b.n	8002aa2 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 225;
 8002a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a88:	22e1      	movs	r2, #225	; 0xe1
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002a8c:	e009      	b.n	8002aa2 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 150;
 8002a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a92:	2296      	movs	r2, #150	; 0x96
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002a96:	e004      	b.n	8002aa2 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 75;
 8002a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a9c:	224b      	movs	r2, #75	; 0x4b
 8002a9e:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002aa0:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_MspInit+0x4c>)
 8002abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	4b1d      	ldr	r3, [pc, #116]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b2a:	e026      	b.n	8002b7a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <HAL_TIM_PWM_MspInit+0x90>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d10e      	bne.n	8002b54 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
}
 8002b52:	e012      	b.n	8002b7a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_TIM_PWM_MspInit+0x94>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10d      	bne.n	8002b7a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800

08002b94 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_TIM_IC_MspInit+0x94>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d133      	bne.n	8002c1e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002bc0:	f043 0308 	orr.w	r3, r3, #8
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_TIM_IC_MspInit+0x98>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <HAL_TIM_IC_MspInit+0x9c>)
 8002c0a:	f000 fd4d 	bl	80036a8 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2032      	movs	r0, #50	; 0x32
 8002c14:	f000 fd11 	bl	800363a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c18:	2032      	movs	r0, #50	; 0x32
 8002c1a:	f000 fd2a 	bl	8003672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3728      	adds	r7, #40	; 0x28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_TIM_Base_MspInit+0x3c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10d      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_TIM_Base_MspInit+0x40>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40014400 	.word	0x40014400
 8002c74:	40023800 	.word	0x40023800

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d11f      	bne.n	8002cda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b44      	ldr	r3, [pc, #272]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	483b      	ldr	r0, [pc, #236]	; (8002dc0 <HAL_TIM_MspPostInit+0x148>)
 8002cd4:	f000 fce8 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002cd8:	e06b      	b.n	8002db2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_TIM_MspPostInit+0x14c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d11e      	bne.n	8002d22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cee:	f043 0304 	orr.w	r3, r3, #4
 8002cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	482b      	ldr	r0, [pc, #172]	; (8002dc8 <HAL_TIM_MspPostInit+0x150>)
 8002d1c:	f000 fcc4 	bl	80036a8 <HAL_GPIO_Init>
}
 8002d20:	e047      	b.n	8002db2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <HAL_TIM_MspPostInit+0x154>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d11e      	bne.n	8002d6a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a21      	ldr	r2, [pc, #132]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d36:	f043 0302 	orr.w	r3, r3, #2
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b1f      	ldr	r3, [pc, #124]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4619      	mov	r1, r3
 8002d62:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <HAL_TIM_MspPostInit+0x158>)
 8002d64:	f000 fca0 	bl	80036a8 <HAL_GPIO_Init>
}
 8002d68:	e023      	b.n	8002db2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_TIM_MspPostInit+0x15c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d11e      	bne.n	8002db2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d7e:	f043 0302 	orr.w	r3, r3, #2
 8002d82:	6313      	str	r3, [r2, #48]	; 0x30
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_TIM_MspPostInit+0x144>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 8002d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002da2:	2303      	movs	r3, #3
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	4619      	mov	r1, r3
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <HAL_TIM_MspPostInit+0x158>)
 8002dae:	f000 fc7b 	bl	80036a8 <HAL_GPIO_Init>
}
 8002db2:	bf00      	nop
 8002db4:	3730      	adds	r7, #48	; 0x30
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40000400 	.word	0x40000400
 8002dc8:	40020800 	.word	0x40020800
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40014400 	.word	0x40014400

08002dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a41      	ldr	r2, [pc, #260]	; (8002efc <HAL_UART_MspInit+0x124>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d12c      	bne.n	8002e54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	61bb      	str	r3, [r7, #24]
 8002e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	4b39      	ldr	r3, [pc, #228]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e32:	230c      	movs	r3, #12
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e42:	2307      	movs	r3, #7
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	482d      	ldr	r0, [pc, #180]	; (8002f04 <HAL_UART_MspInit+0x12c>)
 8002e4e:	f000 fc2b 	bl	80036a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e52:	e04f      	b.n	8002ef4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_UART_MspInit+0x130>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d14a      	bne.n	8002ef4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e68:	f043 0320 	orr.w	r3, r3, #32
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <HAL_UART_MspInit+0x128>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480f      	ldr	r0, [pc, #60]	; (8002f0c <HAL_UART_MspInit+0x134>)
 8002ece:	f000 fbeb 	bl	80036a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	4805      	ldr	r0, [pc, #20]	; (8002f04 <HAL_UART_MspInit+0x12c>)
 8002ef0:	f000 fbda 	bl	80036a8 <HAL_GPIO_Init>
}
 8002ef4:	bf00      	nop
 8002ef6:	3730      	adds	r7, #48	; 0x30
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40004400 	.word	0x40004400
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40020800 	.word	0x40020800

08002f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f14:	e7fe      	b.n	8002f14 <NMI_Handler+0x4>

08002f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f1a:	e7fe      	b.n	8002f1a <HardFault_Handler+0x4>

08002f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <MemManage_Handler+0x4>

08002f22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f26:	e7fe      	b.n	8002f26 <BusFault_Handler+0x4>

08002f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <UsageFault_Handler+0x4>

08002f2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f5c:	f000 fa4e 	bl	80033fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	0000      	movs	r0, r0
	...

08002f68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f6e:	4830      	ldr	r0, [pc, #192]	; (8003030 <TIM5_IRQHandler+0xc8>)
 8002f70:	f001 fb2d 	bl	80045ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  if (risingEdgeInterrupt == 1)
 8002f74:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <TIM5_IRQHandler+0xcc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d118      	bne.n	8002fae <TIM5_IRQHandler+0x46>
  {
	TIM5->CCER &= ~(1 << 7);
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f86:	6213      	str	r3, [r2, #32]
	TIM5->CCER &= ~(1 << 5);
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f8e:	f023 0320 	bic.w	r3, r3, #32
 8002f92:	6213      	str	r3, [r2, #32]
	TIM5->CCER |= (1 << 5);
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a27      	ldr	r2, [pc, #156]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	6213      	str	r3, [r2, #32]
	TIM5->CNT = 0;
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
	risingEdgeInterrupt = 0;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <TIM5_IRQHandler+0xcc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fac:	e036      	b.n	800301c <TIM5_IRQHandler+0xb4>
	  counter = TIM5->CNT;
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <TIM5_IRQHandler+0xd4>)
 8002fb6:	601a      	str	r2, [r3, #0]
	  TIM5->CCER &= ~(1 << 7);
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	6213      	str	r3, [r2, #32]
	  TIM5->CCER &= ~(1 << 5);
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a1b      	ldr	r2, [pc, #108]	; (8003038 <TIM5_IRQHandler+0xd0>)
 8002fca:	f023 0320 	bic.w	r3, r3, #32
 8002fce:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <TIM5_IRQHandler+0xd4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd faad 	bl	8000534 <__aeabi_i2d>
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <TIM5_IRQHandler+0xd8>)
 8002fe0:	f7fd fc3c 	bl	800085c <__aeabi_ddiv>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fde4 	bl	8000bb8 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fd faaf 	bl	8000558 <__aeabi_f2d>
 8002ffa:	a30b      	add	r3, pc, #44	; (adr r3, 8003028 <TIM5_IRQHandler+0xc0>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fb02 	bl	8000608 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fdd4 	bl	8000bb8 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <TIM5_IRQHandler+0xdc>)
 8003014:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <TIM5_IRQHandler+0xcc>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	f3af 8000 	nop.w
 8003028:	851eb852 	.word	0x851eb852
 800302c:	400451eb 	.word	0x400451eb
 8003030:	200002d4 	.word	0x200002d4
 8003034:	20000004 	.word	0x20000004
 8003038:	40000c00 	.word	0x40000c00
 800303c:	200003f4 	.word	0x200003f4
 8003040:	40620000 	.word	0x40620000
 8003044:	200003f8 	.word	0x200003f8

08003048 <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 800304c:	2300      	movs	r3, #0
}   // is_switch_on()
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	return 1;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <_kill>:

int _kill(int pid, int sig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003072:	f002 fcd9 	bl	8005a28 <__errno>
 8003076:	4603      	mov	r3, r0
 8003078:	2216      	movs	r2, #22
 800307a:	601a      	str	r2, [r3, #0]
	return -1;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_exit>:

void _exit (int status)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ffe7 	bl	8003068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800309a:	e7fe      	b.n	800309a <_exit+0x12>

0800309c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e00a      	b.n	80030c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ae:	f3af 8000 	nop.w
 80030b2:	4601      	mov	r1, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	b2ca      	uxtb	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3301      	adds	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dbf0      	blt.n	80030ae <_read+0x12>
	}

return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e009      	b.n	80030fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fbe1 	bl	80028b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbf1      	blt.n	80030e8 <_write+0x12>
	}
	return len;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_close>:

int _close(int file)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
	return -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003136:	605a      	str	r2, [r3, #4]
	return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_isatty>:

int _isatty(int file)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return 1;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <_sbrk+0x5c>)
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <_sbrk+0x60>)
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <_sbrk+0x64>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <_sbrk+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a8:	f002 fc3e 	bl	8005a28 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	220c      	movs	r2, #12
 80031b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	e009      	b.n	80031cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <_sbrk+0x64>)
 80031c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20020000 	.word	0x20020000
 80031d8:	00000400 	.word	0x00000400
 80031dc:	200003f0 	.word	0x200003f0
 80031e0:	20000410 	.word	0x20000410

080031e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <SystemInit+0x20>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	4a05      	ldr	r2, [pc, #20]	; (8003204 <SystemInit+0x20>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <test_wall_sensor>:
	rotate_360_degrees(Right);
	HAL_Delay(1000);
}  // void test_alternate_360()

void test_wall_sensor()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
	uint8_t left_wall = is_there_wall_on_direction(Left);
 800320e:	2000      	movs	r0, #0
 8003210:	f000 f860 	bl	80032d4 <is_there_wall_on_direction>
 8003214:	4603      	mov	r3, r0
 8003216:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(1000);
 8003218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800321c:	f000 f90e 	bl	800343c <HAL_Delay>
	uint8_t right_wall = is_there_wall_on_direction(Right);
 8003220:	2002      	movs	r0, #2
 8003222:	f000 f857 	bl	80032d4 <is_there_wall_on_direction>
 8003226:	4603      	mov	r3, r0
 8003228:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1000);
 800322a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800322e:	f000 f905 	bl	800343c <HAL_Delay>
	uint8_t front_wall = is_there_wall_on_direction(Front);
 8003232:	2001      	movs	r0, #1
 8003234:	f000 f84e 	bl	80032d4 <is_there_wall_on_direction>
 8003238:	4603      	mov	r3, r0
 800323a:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1000);
 800323c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003240:	f000 f8fc 	bl	800343c <HAL_Delay>
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

//	test_alternate_left_right();
//	test_zig_zag();
//	test_turn_left();
	test_wall_sensor();
 8003250:	f7ff ffda 	bl	8003208 <test_wall_sensor>
//	test_servo_angles();


	return do_test_algorithm();
 8003254:	f7ff fffa 	bl	800324c <do_test_algorithm>
}  // do_test_algorithm()
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <distance_of_object_in_cm>:
int risingEdgeInterrupt = 1;
int counter;
float centimeters;

int16_t distance_of_object_in_cm()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
	char string[40];
	sprintf((char *)string, "%f,\r\n", centimeters * 1000);
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <distance_of_object_in_cm+0x64>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032c4 <distance_of_object_in_cm+0x68>
 800326c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003270:	ee17 0a90 	vmov	r0, s15
 8003274:	f7fd f970 	bl	8000558 <__aeabi_f2d>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4638      	mov	r0, r7
 800327e:	4912      	ldr	r1, [pc, #72]	; (80032c8 <distance_of_object_in_cm+0x6c>)
 8003280:	f003 f886 	bl	8006390 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t *)string, sizeof(string), 1000);
 8003284:	4639      	mov	r1, r7
 8003286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328a:	2228      	movs	r2, #40	; 0x28
 800328c:	480f      	ldr	r0, [pc, #60]	; (80032cc <distance_of_object_in_cm+0x70>)
 800328e:	f002 f856 	bl	800533e <HAL_UART_Transmit>
	printf("%f\r\n", centimeters);
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <distance_of_object_in_cm+0x64>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd f95e 	bl	8000558 <__aeabi_f2d>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	480b      	ldr	r0, [pc, #44]	; (80032d0 <distance_of_object_in_cm+0x74>)
 80032a2:	f003 f85d 	bl	8006360 <iprintf>
	return centimeters;
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <distance_of_object_in_cm+0x64>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b0:	ee17 3a90 	vmov	r3, s15
 80032b4:	b21b      	sxth	r3, r3
}  // int16_t distance_of_object_in_cm()
 80032b6:	4618      	mov	r0, r3
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200003f8 	.word	0x200003f8
 80032c4:	447a0000 	.word	0x447a0000
 80032c8:	080088a0 	.word	0x080088a0
 80032cc:	200003a8 	.word	0x200003a8
 80032d0:	080088a8 	.word	0x080088a8

080032d4 <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fbc0 	bl	8002a66 <set_servo_angle>
	HAL_Delay(100);
 80032e6:	2064      	movs	r0, #100	; 0x64
 80032e8:	f000 f8a8 	bl	800343c <HAL_Delay>
	return distance_of_object_in_cm() < 18;
 80032ec:	f7ff ffb6 	bl	800325c <distance_of_object_in_cm>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b11      	cmp	r3, #17
 80032f4:	bfd4      	ite	le
 80032f6:	2301      	movle	r3, #1
 80032f8:	2300      	movgt	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
}  // is_there_wall_on_direction(direction d)
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800333c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003308:	480d      	ldr	r0, [pc, #52]	; (8003340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800330a:	490e      	ldr	r1, [pc, #56]	; (8003344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800330c:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800330e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003310:	e002      	b.n	8003318 <LoopCopyDataInit>

08003312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003316:	3304      	adds	r3, #4

08003318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800331a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800331c:	d3f9      	bcc.n	8003312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003320:	4c0b      	ldr	r4, [pc, #44]	; (8003350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003324:	e001      	b.n	800332a <LoopFillZerobss>

08003326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003328:	3204      	adds	r2, #4

0800332a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800332a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800332c:	d3fb      	bcc.n	8003326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800332e:	f7ff ff59 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003332:	f002 fb7f 	bl	8005a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003336:	f7fe ffa1 	bl	800227c <main>
  bx  lr    
 800333a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800333c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003344:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003348:	08008cb4 	.word	0x08008cb4
  ldr r2, =_sbss
 800334c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003350:	20000410 	.word	0x20000410

08003354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003354:	e7fe      	b.n	8003354 <ADC_IRQHandler>
	...

08003358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800335c:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_Init+0x40>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <HAL_Init+0x40>)
 8003362:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003366:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_Init+0x40>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_Init+0x40>)
 800336e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003372:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_Init+0x40>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_Init+0x40>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003380:	2003      	movs	r0, #3
 8003382:	f000 f94f 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003386:	200f      	movs	r0, #15
 8003388:	f000 f808 	bl	800339c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800338c:	f7ff fb8e 	bl	8002aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00

0800339c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_InitTick+0x54>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_InitTick+0x58>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f967 	bl	800368e <HAL_SYSTICK_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00e      	b.n	80033e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d80a      	bhi.n	80033e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f000 f92f 	bl	800363a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033dc:	4a06      	ldr	r2, [pc, #24]	; (80033f8 <HAL_InitTick+0x5c>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000000 	.word	0x20000000
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_IncTick+0x20>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_IncTick+0x24>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4413      	add	r3, r2
 800340c:	4a04      	ldr	r2, [pc, #16]	; (8003420 <HAL_IncTick+0x24>)
 800340e:	6013      	str	r3, [r2, #0]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	2000000c 	.word	0x2000000c
 8003420:	200003fc 	.word	0x200003fc

08003424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return uwTick;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_GetTick+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	200003fc 	.word	0x200003fc

0800343c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff ffee 	bl	8003424 <HAL_GetTick>
 8003448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d005      	beq.n	8003462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_Delay+0x44>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003462:	bf00      	nop
 8003464:	f7ff ffde 	bl	8003424 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d8f7      	bhi.n	8003464 <HAL_Delay+0x28>
  {
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000000c 	.word	0x2000000c

08003484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a0:	4013      	ands	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b6:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <__NVIC_SetPriorityGrouping+0x44>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	60d3      	str	r3, [r2, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <__NVIC_GetPriorityGrouping+0x18>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	0a1b      	lsrs	r3, r3, #8
 80034d6:	f003 0307 	and.w	r3, r3, #7
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0b      	blt.n	8003512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_EnableIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	6039      	str	r1, [r7, #0]
 800352e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	2b00      	cmp	r3, #0
 8003536:	db0a      	blt.n	800354e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	490c      	ldr	r1, [pc, #48]	; (8003570 <__NVIC_SetPriority+0x4c>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	440b      	add	r3, r1
 8003548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800354c:	e00a      	b.n	8003564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	4908      	ldr	r1, [pc, #32]	; (8003574 <__NVIC_SetPriority+0x50>)
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3b04      	subs	r3, #4
 800355c:	0112      	lsls	r2, r2, #4
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	440b      	add	r3, r1
 8003562:	761a      	strb	r2, [r3, #24]
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000e100 	.word	0xe000e100
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f1c3 0307 	rsb	r3, r3, #7
 8003592:	2b04      	cmp	r3, #4
 8003594:	bf28      	it	cs
 8003596:	2304      	movcs	r3, #4
 8003598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3304      	adds	r3, #4
 800359e:	2b06      	cmp	r3, #6
 80035a0:	d902      	bls.n	80035a8 <NVIC_EncodePriority+0x30>
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3b03      	subs	r3, #3
 80035a6:	e000      	b.n	80035aa <NVIC_EncodePriority+0x32>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	401a      	ands	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	43d9      	mvns	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	4313      	orrs	r3, r2
         );
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f0:	d301      	bcc.n	80035f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00f      	b.n	8003616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <SysTick_Config+0x40>)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035fe:	210f      	movs	r1, #15
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
 8003604:	f7ff ff8e 	bl	8003524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <SysTick_Config+0x40>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <SysTick_Config+0x40>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010

08003624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff29 	bl	8003484 <__NVIC_SetPriorityGrouping>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800364c:	f7ff ff3e 	bl	80034cc <__NVIC_GetPriorityGrouping>
 8003650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff ff8e 	bl	8003578 <NVIC_EncodePriority>
 800365c:	4602      	mov	r2, r0
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff5d 	bl	8003524 <__NVIC_SetPriority>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff31 	bl	80034e8 <__NVIC_EnableIRQ>
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ffa2 	bl	80035e0 <SysTick_Config>
 800369c:	4603      	mov	r3, r0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e159      	b.n	8003978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036c4:	2201      	movs	r2, #1
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f040 8148 	bne.w	8003972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d005      	beq.n	80036fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d130      	bne.n	800375c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4013      	ands	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 0201 	and.w	r2, r3, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d017      	beq.n	8003798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d123      	bne.n	80037ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	08da      	lsrs	r2, r3, #3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3208      	adds	r2, #8
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	220f      	movs	r2, #15
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	08da      	lsrs	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3208      	adds	r2, #8
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80a2 	beq.w	8003972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	4b57      	ldr	r3, [pc, #348]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	4a56      	ldr	r2, [pc, #344]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	6453      	str	r3, [r2, #68]	; 0x44
 800383e:	4b54      	ldr	r3, [pc, #336]	; (8003990 <HAL_GPIO_Init+0x2e8>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384a:	4a52      	ldr	r2, [pc, #328]	; (8003994 <HAL_GPIO_Init+0x2ec>)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	3302      	adds	r3, #2
 8003852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	220f      	movs	r2, #15
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_GPIO_Init+0x2f0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_Init+0x202>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a48      	ldr	r2, [pc, #288]	; (800399c <HAL_GPIO_Init+0x2f4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_Init+0x1fe>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_GPIO_Init+0x2f8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_Init+0x1fa>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_GPIO_Init+0x2fc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_Init+0x1f6>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a45      	ldr	r2, [pc, #276]	; (80039a8 <HAL_GPIO_Init+0x300>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_Init+0x1f2>
 8003896:	2304      	movs	r3, #4
 8003898:	e008      	b.n	80038ac <HAL_GPIO_Init+0x204>
 800389a:	2307      	movs	r3, #7
 800389c:	e006      	b.n	80038ac <HAL_GPIO_Init+0x204>
 800389e:	2303      	movs	r3, #3
 80038a0:	e004      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e002      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <HAL_GPIO_Init+0x204>
 80038aa:	2300      	movs	r3, #0
 80038ac:	69fa      	ldr	r2, [r7, #28]
 80038ae:	f002 0203 	and.w	r2, r2, #3
 80038b2:	0092      	lsls	r2, r2, #2
 80038b4:	4093      	lsls	r3, r2
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038bc:	4935      	ldr	r1, [pc, #212]	; (8003994 <HAL_GPIO_Init+0x2ec>)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ee:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f4:	4b2d      	ldr	r3, [pc, #180]	; (80039ac <HAL_GPIO_Init+0x304>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <HAL_GPIO_Init+0x304>)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391e:	4b23      	ldr	r3, [pc, #140]	; (80039ac <HAL_GPIO_Init+0x304>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	4013      	ands	r3, r2
 800392c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003942:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_GPIO_Init+0x304>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_GPIO_Init+0x304>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <HAL_GPIO_Init+0x304>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	f67f aea2 	bls.w	80036c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3724      	adds	r7, #36	; 0x24
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	40013800 	.word	0x40013800
 8003998:	40020000 	.word	0x40020000
 800399c:	40020400 	.word	0x40020400
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020c00 	.word	0x40020c00
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40013c00 	.word	0x40013c00

080039b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	807b      	strh	r3, [r7, #2]
 80039bc:	4613      	mov	r3, r2
 80039be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039c0:	787b      	ldrb	r3, [r7, #1]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039cc:	e003      	b.n	80039d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	619a      	str	r2, [r3, #24]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e267      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b82      	ldr	r3, [pc, #520]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b7e      	ldr	r3, [pc, #504]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e242      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6f      	ldr	r2, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a6c      	ldr	r2, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b66      	ldr	r3, [pc, #408]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a65      	ldr	r2, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7ff fcc2 	bl	8003424 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7ff fcbe 	bl	8003424 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e207      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b5b      	ldr	r3, [pc, #364]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7ff fcae 	bl	8003424 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7ff fcaa 	bl	8003424 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1f3      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c7      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7ff fc63 	bl	8003424 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7ff fc5f 	bl	8003424 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a8      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4925      	ldr	r1, [pc, #148]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCC_OscConfig+0x244>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7ff fc42 	bl	8003424 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7ff fc3e 	bl	8003424 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e187      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d036      	beq.n	8003c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7ff fc22 	bl	8003424 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7ff fc1e 	bl	8003424 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e167      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e01b      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCC_OscConfig+0x248>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7ff fc0b 	bl	8003424 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e00e      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7ff fc07 	bl	8003424 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d907      	bls.n	8003c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e150      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003c24:	40023800 	.word	0x40023800
 8003c28:	42470000 	.word	0x42470000
 8003c2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ea      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8097 	beq.w	8003d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b7d      	ldr	r3, [pc, #500]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a7c      	ldr	r2, [pc, #496]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b7a      	ldr	r3, [pc, #488]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b77      	ldr	r3, [pc, #476]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b74      	ldr	r3, [pc, #464]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a73      	ldr	r2, [pc, #460]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7ff fbc7 	bl	8003424 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7ff fbc3 	bl	8003424 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e10c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cac:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_OscConfig+0x474>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x2ea>
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x30c>
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a5e      	ldr	r2, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	4a5b      	ldr	r2, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6713      	str	r3, [r2, #112]	; 0x70
 8003cee:	e00b      	b.n	8003d08 <HAL_RCC_OscConfig+0x324>
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a54      	ldr	r2, [pc, #336]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d02:	f023 0304 	bic.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7ff fb88 	bl	8003424 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7ff fb84 	bl	8003424 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e0cb      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2e:	4b49      	ldr	r3, [pc, #292]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0ee      	beq.n	8003d18 <HAL_RCC_OscConfig+0x334>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7ff fb72 	bl	8003424 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	e00a      	b.n	8003d5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f7ff fb6e 	bl	8003424 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0b5      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ee      	bne.n	8003d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d105      	bne.n	8003d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6c:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	4a38      	ldr	r2, [pc, #224]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80a1 	beq.w	8003ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d82:	4b34      	ldr	r3, [pc, #208]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d05c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d141      	bne.n	8003e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b31      	ldr	r3, [pc, #196]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7ff fb42 	bl	8003424 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7ff fb3e 	bl	8003424 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e087      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b27      	ldr	r3, [pc, #156]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	061b      	lsls	r3, r3, #24
 8003de6:	491b      	ldr	r1, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7ff fb17 	bl	8003424 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7ff fb13 	bl	8003424 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e05c      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x416>
 8003e18:	e054      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_RCC_OscConfig+0x478>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7ff fb00 	bl	8003424 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e28:	f7ff fafc 	bl	8003424 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e045      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x444>
 8003e46:	e03d      	b.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e038      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
 8003e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d028      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d121      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d11a      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e90:	4013      	ands	r3, r2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7ff fa2e 	bl	8003424 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7ff fa2a 	bl	8003424 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f98e 	bl	800339c <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	080088b0 	.word	0x080088b0
 8004098:	20000000 	.word	0x20000000
 800409c:	20000008 	.word	0x20000008

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a4:	b090      	sub	sp, #64	; 0x40
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	2300      	movs	r3, #0
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	f200 80a1 	bhi.w	800420c <HAL_RCC_GetSysClockFreq+0x16c>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x3a>
 80040d2:	e09b      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_GetSysClockFreq+0x184>)
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040d8:	e09b      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040de:	e098      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b4f      	ldr	r3, [pc, #316]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b4d      	ldr	r3, [pc, #308]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d028      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	2200      	movs	r2, #0
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	627a      	str	r2, [r7, #36]	; 0x24
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004108:	2100      	movs	r1, #0
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 800410c:	fb03 f201 	mul.w	r2, r3, r1
 8004110:	2300      	movs	r3, #0
 8004112:	fb00 f303 	mul.w	r3, r0, r3
 8004116:	4413      	add	r3, r2
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_RCC_GetSysClockFreq+0x188>)
 800411a:	fba0 1202 	umull	r1, r2, r0, r2
 800411e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004120:	460a      	mov	r2, r1
 8004122:	62ba      	str	r2, [r7, #40]	; 0x28
 8004124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004126:	4413      	add	r3, r2
 8004128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2200      	movs	r2, #0
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	61fa      	str	r2, [r7, #28]
 8004132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800413a:	f7fc fd8d 	bl	8000c58 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4613      	mov	r3, r2
 8004144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004146:	e053      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004148:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	2200      	movs	r2, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	617a      	str	r2, [r7, #20]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800415a:	f04f 0b00 	mov.w	fp, #0
 800415e:	4652      	mov	r2, sl
 8004160:	465b      	mov	r3, fp
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	0159      	lsls	r1, r3, #5
 800416c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004170:	0150      	lsls	r0, r2, #5
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	ebb2 080a 	subs.w	r8, r2, sl
 800417a:	eb63 090b 	sbc.w	r9, r3, fp
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800418a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800418e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004192:	ebb2 0408 	subs.w	r4, r2, r8
 8004196:	eb63 0509 	sbc.w	r5, r3, r9
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	00eb      	lsls	r3, r5, #3
 80041a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a8:	00e2      	lsls	r2, r4, #3
 80041aa:	4614      	mov	r4, r2
 80041ac:	461d      	mov	r5, r3
 80041ae:	eb14 030a 	adds.w	r3, r4, sl
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	eb45 030b 	adc.w	r3, r5, fp
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c6:	4629      	mov	r1, r5
 80041c8:	028b      	lsls	r3, r1, #10
 80041ca:	4621      	mov	r1, r4
 80041cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041d0:	4621      	mov	r1, r4
 80041d2:	028a      	lsls	r2, r1, #10
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	2200      	movs	r2, #0
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	60fa      	str	r2, [r7, #12]
 80041e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e4:	f7fc fd38 	bl	8000c58 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4613      	mov	r3, r2
 80041ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	3301      	adds	r3, #1
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800420a:	e002      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetSysClockFreq+0x184>)
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004214:	4618      	mov	r0, r3
 8004216:	3740      	adds	r7, #64	; 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	00f42400 	.word	0x00f42400
 8004228:	017d7840 	.word	0x017d7840

0800422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_RCC_GetHCLKFreq+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000000 	.word	0x20000000

08004244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004248:	f7ff fff0 	bl	800422c <HAL_RCC_GetHCLKFreq>
 800424c:	4602      	mov	r2, r0
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	4903      	ldr	r1, [pc, #12]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800425a:	5ccb      	ldrb	r3, [r1, r3]
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004260:	4618      	mov	r0, r3
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40023800 	.word	0x40023800
 8004268:	080088c0 	.word	0x080088c0

0800426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004270:	f7ff ffdc 	bl	800422c <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0b5b      	lsrs	r3, r3, #13
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4903      	ldr	r1, [pc, #12]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40023800 	.word	0x40023800
 8004290:	080088c0 	.word	0x080088c0

08004294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e041      	b.n	800432a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fcba 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 fc14 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e041      	b.n	80043c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fe fbcf 	bl	8002afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4610      	mov	r0, r2
 8004372:	f000 fbc5 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x24>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e068      	b.n	8004514 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x92>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fe66 	bl	8005154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_TIM_PWM_Start+0x14c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	; (800451c <HAL_TIM_PWM_Start+0x14c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b4:	d013      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_TIM_PWM_Start+0x150>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_TIM_PWM_Start+0x154>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIM_PWM_Start+0x158>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <HAL_TIM_PWM_Start+0x15c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d010      	beq.n	8004512 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	e007      	b.n	8004512 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40014000 	.word	0x40014000

08004530 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e041      	b.n	80045c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fb1c 	bl	8002b94 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f000 fac6 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d122      	bne.n	800462a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d11b      	bne.n	800462a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f06f 0202 	mvn.w	r2, #2
 80045fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa57 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 8004616:	e005      	b.n	8004624 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa49 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa5a 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d122      	bne.n	800467e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d11b      	bne.n	800467e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f06f 0204 	mvn.w	r2, #4
 800464e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 fa2d 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 800466a:	e005      	b.n	8004678 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fa1f 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa30 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b08      	cmp	r3, #8
 800468a:	d122      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d11b      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0208 	mvn.w	r2, #8
 80046a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2204      	movs	r2, #4
 80046a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa03 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 80046be:	e005      	b.n	80046cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f9f5 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa06 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d122      	bne.n	8004726 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d11b      	bne.n	8004726 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0210 	mvn.w	r2, #16
 80046f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2208      	movs	r2, #8
 80046fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f9d9 	bl	8004ac4 <HAL_TIM_IC_CaptureCallback>
 8004712:	e005      	b.n	8004720 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f9cb 	bl	8004ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f9dc 	bl	8004ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10e      	bne.n	8004752 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d107      	bne.n	8004752 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0201 	mvn.w	r2, #1
 800474a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9a5 	bl	8004a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d10e      	bne.n	800477e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d107      	bne.n	800477e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fd89 	bl	8005290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d10e      	bne.n	80047aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d107      	bne.n	80047aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f9a1 	bl	8004aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d10e      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b20      	cmp	r3, #32
 80047c4:	d107      	bne.n	80047d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f06f 0220 	mvn.w	r2, #32
 80047ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fd53 	bl	800527c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIM_IC_ConfigChannel+0x1e>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e088      	b.n	800490e <HAL_TIM_IC_ConfigChannel+0x130>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d11b      	bne.n	8004842 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f000 fb7d 	bl	8004f18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699a      	ldr	r2, [r3, #24]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 020c 	bic.w	r2, r2, #12
 800482c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6999      	ldr	r1, [r3, #24]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	619a      	str	r2, [r3, #24]
 8004840:	e060      	b.n	8004904 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d11c      	bne.n	8004882 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 fbc6 	bl	8004fe8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800486a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6999      	ldr	r1, [r3, #24]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021a      	lsls	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	619a      	str	r2, [r3, #24]
 8004880:	e040      	b.n	8004904 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d11b      	bne.n	80048c0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f000 fbe3 	bl	8005062 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 020c 	bic.w	r2, r2, #12
 80048aa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69d9      	ldr	r1, [r3, #28]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	61da      	str	r2, [r3, #28]
 80048be:	e021      	b.n	8004904 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	d11c      	bne.n	8004900 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f000 fc00 	bl	80050da <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69d9      	ldr	r1, [r3, #28]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	021a      	lsls	r2, r3, #8
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	61da      	str	r2, [r3, #28]
 80048fe:	e001      	b.n	8004904 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004932:	2302      	movs	r3, #2
 8004934:	e0ae      	b.n	8004a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	f200 809f 	bhi.w	8004a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004946:	a201      	add	r2, pc, #4	; (adr r2, 800494c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494c:	08004981 	.word	0x08004981
 8004950:	08004a85 	.word	0x08004a85
 8004954:	08004a85 	.word	0x08004a85
 8004958:	08004a85 	.word	0x08004a85
 800495c:	080049c1 	.word	0x080049c1
 8004960:	08004a85 	.word	0x08004a85
 8004964:	08004a85 	.word	0x08004a85
 8004968:	08004a85 	.word	0x08004a85
 800496c:	08004a03 	.word	0x08004a03
 8004970:	08004a85 	.word	0x08004a85
 8004974:	08004a85 	.word	0x08004a85
 8004978:	08004a85 	.word	0x08004a85
 800497c:	08004a43 	.word	0x08004a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f93a 	bl	8004c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0204 	bic.w	r2, r2, #4
 80049aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6999      	ldr	r1, [r3, #24]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	691a      	ldr	r2, [r3, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	619a      	str	r2, [r3, #24]
      break;
 80049be:	e064      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f980 	bl	8004ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699a      	ldr	r2, [r3, #24]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6999      	ldr	r1, [r3, #24]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	021a      	lsls	r2, r3, #8
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]
      break;
 8004a00:	e043      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f9cb 	bl	8004da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0208 	orr.w	r2, r2, #8
 8004a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69da      	ldr	r2, [r3, #28]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0204 	bic.w	r2, r2, #4
 8004a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69d9      	ldr	r1, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	61da      	str	r2, [r3, #28]
      break;
 8004a40:	e023      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fa15 	bl	8004e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69da      	ldr	r2, [r3, #28]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69d9      	ldr	r1, [r3, #28]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	61da      	str	r2, [r3, #28]
      break;
 8004a82:	e002      	b.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a34      	ldr	r2, [pc, #208]	; (8004be4 <TIM_Base_SetConfig+0xe4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00f      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1e:	d00b      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a31      	ldr	r2, [pc, #196]	; (8004be8 <TIM_Base_SetConfig+0xe8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d007      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a30      	ldr	r2, [pc, #192]	; (8004bec <TIM_Base_SetConfig+0xec>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0x38>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a2f      	ldr	r2, [pc, #188]	; (8004bf0 <TIM_Base_SetConfig+0xf0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d108      	bne.n	8004b4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <TIM_Base_SetConfig+0xe4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01b      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b58:	d017      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a22      	ldr	r2, [pc, #136]	; (8004be8 <TIM_Base_SetConfig+0xe8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d013      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <TIM_Base_SetConfig+0xec>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00f      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <TIM_Base_SetConfig+0xf0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <TIM_Base_SetConfig+0xf4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <TIM_Base_SetConfig+0xf8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a1d      	ldr	r2, [pc, #116]	; (8004bfc <TIM_Base_SetConfig+0xfc>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d108      	bne.n	8004b9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <TIM_Base_SetConfig+0xe4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d103      	bne.n	8004bd0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	615a      	str	r2, [r3, #20]
}
 8004bd6:	bf00      	nop
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800

08004c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 0302 	bic.w	r3, r3, #2
 8004c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <TIM_OC1_SetConfig+0xc8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10c      	bne.n	8004c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0308 	bic.w	r3, r3, #8
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <TIM_OC1_SetConfig+0xc8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d111      	bne.n	8004ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40010000 	.word	0x40010000

08004ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0210 	bic.w	r2, r3, #16
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0320 	bic.w	r3, r3, #32
 8004d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1e      	ldr	r2, [pc, #120]	; (8004da0 <TIM_OC2_SetConfig+0xd4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10d      	bne.n	8004d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <TIM_OC2_SetConfig+0xd4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d113      	bne.n	8004d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000

08004da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <TIM_OC3_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10d      	bne.n	8004e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a14      	ldr	r2, [pc, #80]	; (8004e74 <TIM_OC3_SetConfig+0xd0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40010000 	.word	0x40010000

08004e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a10      	ldr	r2, [pc, #64]	; (8004f14 <TIM_OC4_SetConfig+0x9c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d109      	bne.n	8004eec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	621a      	str	r2, [r3, #32]
}
 8004f06:	bf00      	nop
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000

08004f18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <TIM_TI1_SetConfig+0xbc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <TIM_TI1_SetConfig+0x56>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4c:	d00f      	beq.n	8004f6e <TIM_TI1_SetConfig+0x56>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <TIM_TI1_SetConfig+0xc0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <TIM_TI1_SetConfig+0x56>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <TIM_TI1_SetConfig+0xc4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <TIM_TI1_SetConfig+0x56>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <TIM_TI1_SetConfig+0xc8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_TI1_SetConfig+0x56>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <TIM_TI1_SetConfig+0xcc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <TIM_TI1_SetConfig+0x5a>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <TIM_TI1_SetConfig+0x5c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e003      	b.n	8004f92 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f023 030a 	bic.w	r3, r3, #10
 8004fac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f003 030a 	and.w	r3, r3, #10
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	f023 0210 	bic.w	r2, r3, #16
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	031b      	lsls	r3, r3, #12
 800502c:	b29b      	uxth	r3, r3
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800503a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005062:	b480      	push	{r7}
 8005064:	b087      	sub	sp, #28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4313      	orrs	r3, r2
 8005096:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005106:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	b29b      	uxth	r3, r3
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800512c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2201      	movs	r2, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1a      	ldr	r2, [r3, #32]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	fa01 f303 	lsl.w	r3, r1, r3
 800518c:	431a      	orrs	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e050      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d013      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a18      	ldr	r2, [pc, #96]	; (800526c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a15      	ldr	r2, [pc, #84]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a13      	ldr	r2, [pc, #76]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e03f      	b.n	8005336 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd fd84 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f929 	bl	8005540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695a      	ldr	r2, [r3, #20]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800530c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b08a      	sub	sp, #40	; 0x28
 8005342:	af02      	add	r7, sp, #8
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b20      	cmp	r3, #32
 800535c:	d17c      	bne.n	8005458 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Transmit+0x2c>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e075      	b.n	800545a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x3e>
 8005378:	2302      	movs	r3, #2
 800537a:	e06e      	b.n	800545a <HAL_UART_Transmit+0x11c>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2221      	movs	r2, #33	; 0x21
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005392:	f7fe f847 	bl	8003424 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ac:	d108      	bne.n	80053c0 <HAL_UART_Transmit+0x82>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d104      	bne.n	80053c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e003      	b.n	80053c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053d0:	e02a      	b.n	8005428 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	2180      	movs	r1, #128	; 0x80
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f840 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e036      	b.n	800545a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005400:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	3302      	adds	r3, #2
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e007      	b.n	800541a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	781a      	ldrb	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	3301      	adds	r3, #1
 8005418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1cf      	bne.n	80053d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 f810 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b090      	sub	sp, #64	; 0x40
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	e050      	b.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547a:	d04c      	beq.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800547c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0x30>
 8005482:	f7fd ffcf 	bl	8003424 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800548e:	429a      	cmp	r2, r3
 8005490:	d241      	bcs.n	8005516 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054b2:	637a      	str	r2, [r7, #52]	; 0x34
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3314      	adds	r3, #20
 80054cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	613b      	str	r3, [r7, #16]
   return(result);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e6:	623a      	str	r2, [r7, #32]
 80054e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	69f9      	ldr	r1, [r7, #28]
 80054ec:	6a3a      	ldr	r2, [r7, #32]
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e5      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e00f      	b.n	8005536 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	429a      	cmp	r2, r3
 8005532:	d09f      	beq.n	8005474 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3740      	adds	r7, #64	; 0x40
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b0c0      	sub	sp, #256	; 0x100
 8005546:	af00      	add	r7, sp, #0
 8005548:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	ea40 0301 	orr.w	r3, r0, r1
 8005568:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	431a      	orrs	r2, r3
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	431a      	orrs	r2, r3
 8005580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005598:	f021 010c 	bic.w	r1, r1, #12
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055a6:	430b      	orrs	r3, r1
 80055a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	6999      	ldr	r1, [r3, #24]
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	ea40 0301 	orr.w	r3, r0, r1
 80055c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b8f      	ldr	r3, [pc, #572]	; (800580c <UART_SetConfig+0x2cc>)
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d005      	beq.n	80055e0 <UART_SetConfig+0xa0>
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b8d      	ldr	r3, [pc, #564]	; (8005810 <UART_SetConfig+0x2d0>)
 80055dc:	429a      	cmp	r2, r3
 80055de:	d104      	bne.n	80055ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055e0:	f7fe fe44 	bl	800426c <HAL_RCC_GetPCLK2Freq>
 80055e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055e8:	e003      	b.n	80055f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055ea:	f7fe fe2b 	bl	8004244 <HAL_RCC_GetPCLK1Freq>
 80055ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	f040 810c 	bne.w	8005818 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800560a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800560e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005612:	4622      	mov	r2, r4
 8005614:	462b      	mov	r3, r5
 8005616:	1891      	adds	r1, r2, r2
 8005618:	65b9      	str	r1, [r7, #88]	; 0x58
 800561a:	415b      	adcs	r3, r3
 800561c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800561e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005622:	4621      	mov	r1, r4
 8005624:	eb12 0801 	adds.w	r8, r2, r1
 8005628:	4629      	mov	r1, r5
 800562a:	eb43 0901 	adc.w	r9, r3, r1
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800563a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800563e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005642:	4690      	mov	r8, r2
 8005644:	4699      	mov	r9, r3
 8005646:	4623      	mov	r3, r4
 8005648:	eb18 0303 	adds.w	r3, r8, r3
 800564c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005650:	462b      	mov	r3, r5
 8005652:	eb49 0303 	adc.w	r3, r9, r3
 8005656:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005666:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800566a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800566e:	460b      	mov	r3, r1
 8005670:	18db      	adds	r3, r3, r3
 8005672:	653b      	str	r3, [r7, #80]	; 0x50
 8005674:	4613      	mov	r3, r2
 8005676:	eb42 0303 	adc.w	r3, r2, r3
 800567a:	657b      	str	r3, [r7, #84]	; 0x54
 800567c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005680:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005684:	f7fb fae8 	bl	8000c58 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4b61      	ldr	r3, [pc, #388]	; (8005814 <UART_SetConfig+0x2d4>)
 800568e:	fba3 2302 	umull	r2, r3, r3, r2
 8005692:	095b      	lsrs	r3, r3, #5
 8005694:	011c      	lsls	r4, r3, #4
 8005696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800569a:	2200      	movs	r2, #0
 800569c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	1891      	adds	r1, r2, r2
 80056ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80056b0:	415b      	adcs	r3, r3
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056b8:	4641      	mov	r1, r8
 80056ba:	eb12 0a01 	adds.w	sl, r2, r1
 80056be:	4649      	mov	r1, r9
 80056c0:	eb43 0b01 	adc.w	fp, r3, r1
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d8:	4692      	mov	sl, r2
 80056da:	469b      	mov	fp, r3
 80056dc:	4643      	mov	r3, r8
 80056de:	eb1a 0303 	adds.w	r3, sl, r3
 80056e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056e6:	464b      	mov	r3, r9
 80056e8:	eb4b 0303 	adc.w	r3, fp, r3
 80056ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005700:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005704:	460b      	mov	r3, r1
 8005706:	18db      	adds	r3, r3, r3
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
 800570a:	4613      	mov	r3, r2
 800570c:	eb42 0303 	adc.w	r3, r2, r3
 8005710:	647b      	str	r3, [r7, #68]	; 0x44
 8005712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005716:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800571a:	f7fb fa9d 	bl	8000c58 <__aeabi_uldivmod>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4611      	mov	r1, r2
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <UART_SetConfig+0x2d4>)
 8005726:	fba3 2301 	umull	r2, r3, r3, r1
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2264      	movs	r2, #100	; 0x64
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	1acb      	subs	r3, r1, r3
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800573a:	4b36      	ldr	r3, [pc, #216]	; (8005814 <UART_SetConfig+0x2d4>)
 800573c:	fba3 2302 	umull	r2, r3, r3, r2
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005748:	441c      	add	r4, r3
 800574a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005754:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005758:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800575c:	4642      	mov	r2, r8
 800575e:	464b      	mov	r3, r9
 8005760:	1891      	adds	r1, r2, r2
 8005762:	63b9      	str	r1, [r7, #56]	; 0x38
 8005764:	415b      	adcs	r3, r3
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005768:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800576c:	4641      	mov	r1, r8
 800576e:	1851      	adds	r1, r2, r1
 8005770:	6339      	str	r1, [r7, #48]	; 0x30
 8005772:	4649      	mov	r1, r9
 8005774:	414b      	adcs	r3, r1
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	f04f 0300 	mov.w	r3, #0
 8005780:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005784:	4659      	mov	r1, fp
 8005786:	00cb      	lsls	r3, r1, #3
 8005788:	4651      	mov	r1, sl
 800578a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800578e:	4651      	mov	r1, sl
 8005790:	00ca      	lsls	r2, r1, #3
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	4603      	mov	r3, r0
 8005798:	4642      	mov	r2, r8
 800579a:	189b      	adds	r3, r3, r2
 800579c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a0:	464b      	mov	r3, r9
 80057a2:	460a      	mov	r2, r1
 80057a4:	eb42 0303 	adc.w	r3, r2, r3
 80057a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057c0:	460b      	mov	r3, r1
 80057c2:	18db      	adds	r3, r3, r3
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057c6:	4613      	mov	r3, r2
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057d6:	f7fb fa3f 	bl	8000c58 <__aeabi_uldivmod>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <UART_SetConfig+0x2d4>)
 80057e0:	fba3 1302 	umull	r1, r3, r3, r2
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	2164      	movs	r1, #100	; 0x64
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	3332      	adds	r3, #50	; 0x32
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <UART_SetConfig+0x2d4>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	f003 0207 	and.w	r2, r3, #7
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4422      	add	r2, r4
 8005806:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005808:	e105      	b.n	8005a16 <UART_SetConfig+0x4d6>
 800580a:	bf00      	nop
 800580c:	40011000 	.word	0x40011000
 8005810:	40011400 	.word	0x40011400
 8005814:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800581c:	2200      	movs	r2, #0
 800581e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005822:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005826:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800582a:	4642      	mov	r2, r8
 800582c:	464b      	mov	r3, r9
 800582e:	1891      	adds	r1, r2, r2
 8005830:	6239      	str	r1, [r7, #32]
 8005832:	415b      	adcs	r3, r3
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
 8005836:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800583a:	4641      	mov	r1, r8
 800583c:	1854      	adds	r4, r2, r1
 800583e:	4649      	mov	r1, r9
 8005840:	eb43 0501 	adc.w	r5, r3, r1
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	00eb      	lsls	r3, r5, #3
 800584e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005852:	00e2      	lsls	r2, r4, #3
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	4643      	mov	r3, r8
 800585a:	18e3      	adds	r3, r4, r3
 800585c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005860:	464b      	mov	r3, r9
 8005862:	eb45 0303 	adc.w	r3, r5, r3
 8005866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005876:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005886:	4629      	mov	r1, r5
 8005888:	008b      	lsls	r3, r1, #2
 800588a:	4621      	mov	r1, r4
 800588c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005890:	4621      	mov	r1, r4
 8005892:	008a      	lsls	r2, r1, #2
 8005894:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005898:	f7fb f9de 	bl	8000c58 <__aeabi_uldivmod>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4b60      	ldr	r3, [pc, #384]	; (8005a24 <UART_SetConfig+0x4e4>)
 80058a2:	fba3 2302 	umull	r2, r3, r3, r2
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	011c      	lsls	r4, r3, #4
 80058aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058bc:	4642      	mov	r2, r8
 80058be:	464b      	mov	r3, r9
 80058c0:	1891      	adds	r1, r2, r2
 80058c2:	61b9      	str	r1, [r7, #24]
 80058c4:	415b      	adcs	r3, r3
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058cc:	4641      	mov	r1, r8
 80058ce:	1851      	adds	r1, r2, r1
 80058d0:	6139      	str	r1, [r7, #16]
 80058d2:	4649      	mov	r1, r9
 80058d4:	414b      	adcs	r3, r1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e4:	4659      	mov	r1, fp
 80058e6:	00cb      	lsls	r3, r1, #3
 80058e8:	4651      	mov	r1, sl
 80058ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ee:	4651      	mov	r1, sl
 80058f0:	00ca      	lsls	r2, r1, #3
 80058f2:	4610      	mov	r0, r2
 80058f4:	4619      	mov	r1, r3
 80058f6:	4603      	mov	r3, r0
 80058f8:	4642      	mov	r2, r8
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005900:	464b      	mov	r3, r9
 8005902:	460a      	mov	r2, r1
 8005904:	eb42 0303 	adc.w	r3, r2, r3
 8005908:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	67bb      	str	r3, [r7, #120]	; 0x78
 8005916:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005924:	4649      	mov	r1, r9
 8005926:	008b      	lsls	r3, r1, #2
 8005928:	4641      	mov	r1, r8
 800592a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592e:	4641      	mov	r1, r8
 8005930:	008a      	lsls	r2, r1, #2
 8005932:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005936:	f7fb f98f 	bl	8000c58 <__aeabi_uldivmod>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <UART_SetConfig+0x4e4>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a34      	ldr	r2, [pc, #208]	; (8005a24 <UART_SetConfig+0x4e4>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800595e:	441c      	add	r4, r3
 8005960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005964:	2200      	movs	r2, #0
 8005966:	673b      	str	r3, [r7, #112]	; 0x70
 8005968:	677a      	str	r2, [r7, #116]	; 0x74
 800596a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	1891      	adds	r1, r2, r2
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	415b      	adcs	r3, r3
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800597e:	4641      	mov	r1, r8
 8005980:	1851      	adds	r1, r2, r1
 8005982:	6039      	str	r1, [r7, #0]
 8005984:	4649      	mov	r1, r9
 8005986:	414b      	adcs	r3, r1
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005996:	4659      	mov	r1, fp
 8005998:	00cb      	lsls	r3, r1, #3
 800599a:	4651      	mov	r1, sl
 800599c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059a0:	4651      	mov	r1, sl
 80059a2:	00ca      	lsls	r2, r1, #3
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	4603      	mov	r3, r0
 80059aa:	4642      	mov	r2, r8
 80059ac:	189b      	adds	r3, r3, r2
 80059ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80059b0:	464b      	mov	r3, r9
 80059b2:	460a      	mov	r2, r1
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	663b      	str	r3, [r7, #96]	; 0x60
 80059c4:	667a      	str	r2, [r7, #100]	; 0x64
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	f04f 0300 	mov.w	r3, #0
 80059ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059d2:	4649      	mov	r1, r9
 80059d4:	008b      	lsls	r3, r1, #2
 80059d6:	4641      	mov	r1, r8
 80059d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059dc:	4641      	mov	r1, r8
 80059de:	008a      	lsls	r2, r1, #2
 80059e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059e4:	f7fb f938 	bl	8000c58 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4b0d      	ldr	r3, [pc, #52]	; (8005a24 <UART_SetConfig+0x4e4>)
 80059ee:	fba3 1302 	umull	r1, r3, r3, r2
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	2164      	movs	r1, #100	; 0x64
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	3332      	adds	r3, #50	; 0x32
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <UART_SetConfig+0x4e4>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	f003 020f 	and.w	r2, r3, #15
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4422      	add	r2, r4
 8005a14:	609a      	str	r2, [r3, #8]
}
 8005a16:	bf00      	nop
 8005a18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a22:	bf00      	nop
 8005a24:	51eb851f 	.word	0x51eb851f

08005a28 <__errno>:
 8005a28:	4b01      	ldr	r3, [pc, #4]	; (8005a30 <__errno+0x8>)
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000010 	.word	0x20000010

08005a34 <__libc_init_array>:
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	4d0d      	ldr	r5, [pc, #52]	; (8005a6c <__libc_init_array+0x38>)
 8005a38:	4c0d      	ldr	r4, [pc, #52]	; (8005a70 <__libc_init_array+0x3c>)
 8005a3a:	1b64      	subs	r4, r4, r5
 8005a3c:	10a4      	asrs	r4, r4, #2
 8005a3e:	2600      	movs	r6, #0
 8005a40:	42a6      	cmp	r6, r4
 8005a42:	d109      	bne.n	8005a58 <__libc_init_array+0x24>
 8005a44:	4d0b      	ldr	r5, [pc, #44]	; (8005a74 <__libc_init_array+0x40>)
 8005a46:	4c0c      	ldr	r4, [pc, #48]	; (8005a78 <__libc_init_array+0x44>)
 8005a48:	f002 ff1c 	bl	8008884 <_init>
 8005a4c:	1b64      	subs	r4, r4, r5
 8005a4e:	10a4      	asrs	r4, r4, #2
 8005a50:	2600      	movs	r6, #0
 8005a52:	42a6      	cmp	r6, r4
 8005a54:	d105      	bne.n	8005a62 <__libc_init_array+0x2e>
 8005a56:	bd70      	pop	{r4, r5, r6, pc}
 8005a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5c:	4798      	blx	r3
 8005a5e:	3601      	adds	r6, #1
 8005a60:	e7ee      	b.n	8005a40 <__libc_init_array+0xc>
 8005a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a66:	4798      	blx	r3
 8005a68:	3601      	adds	r6, #1
 8005a6a:	e7f2      	b.n	8005a52 <__libc_init_array+0x1e>
 8005a6c:	08008cac 	.word	0x08008cac
 8005a70:	08008cac 	.word	0x08008cac
 8005a74:	08008cac 	.word	0x08008cac
 8005a78:	08008cb0 	.word	0x08008cb0

08005a7c <memset>:
 8005a7c:	4402      	add	r2, r0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d100      	bne.n	8005a86 <memset+0xa>
 8005a84:	4770      	bx	lr
 8005a86:	f803 1b01 	strb.w	r1, [r3], #1
 8005a8a:	e7f9      	b.n	8005a80 <memset+0x4>

08005a8c <__cvt>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	ec55 4b10 	vmov	r4, r5, d0
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	460e      	mov	r6, r1
 8005a98:	4619      	mov	r1, r3
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	bfbb      	ittet	lt
 8005a9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aa2:	461d      	movlt	r5, r3
 8005aa4:	2300      	movge	r3, #0
 8005aa6:	232d      	movlt	r3, #45	; 0x2d
 8005aa8:	700b      	strb	r3, [r1, #0]
 8005aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ab0:	4691      	mov	r9, r2
 8005ab2:	f023 0820 	bic.w	r8, r3, #32
 8005ab6:	bfbc      	itt	lt
 8005ab8:	4622      	movlt	r2, r4
 8005aba:	4614      	movlt	r4, r2
 8005abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ac0:	d005      	beq.n	8005ace <__cvt+0x42>
 8005ac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ac6:	d100      	bne.n	8005aca <__cvt+0x3e>
 8005ac8:	3601      	adds	r6, #1
 8005aca:	2102      	movs	r1, #2
 8005acc:	e000      	b.n	8005ad0 <__cvt+0x44>
 8005ace:	2103      	movs	r1, #3
 8005ad0:	ab03      	add	r3, sp, #12
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	ab02      	add	r3, sp, #8
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	ec45 4b10 	vmov	d0, r4, r5
 8005adc:	4653      	mov	r3, sl
 8005ade:	4632      	mov	r2, r6
 8005ae0:	f000 fd02 	bl	80064e8 <_dtoa_r>
 8005ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ae8:	4607      	mov	r7, r0
 8005aea:	d102      	bne.n	8005af2 <__cvt+0x66>
 8005aec:	f019 0f01 	tst.w	r9, #1
 8005af0:	d022      	beq.n	8005b38 <__cvt+0xac>
 8005af2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005af6:	eb07 0906 	add.w	r9, r7, r6
 8005afa:	d110      	bne.n	8005b1e <__cvt+0x92>
 8005afc:	783b      	ldrb	r3, [r7, #0]
 8005afe:	2b30      	cmp	r3, #48	; 0x30
 8005b00:	d10a      	bne.n	8005b18 <__cvt+0x8c>
 8005b02:	2200      	movs	r2, #0
 8005b04:	2300      	movs	r3, #0
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0e:	b918      	cbnz	r0, 8005b18 <__cvt+0x8c>
 8005b10:	f1c6 0601 	rsb	r6, r6, #1
 8005b14:	f8ca 6000 	str.w	r6, [sl]
 8005b18:	f8da 3000 	ldr.w	r3, [sl]
 8005b1c:	4499      	add	r9, r3
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2300      	movs	r3, #0
 8005b22:	4620      	mov	r0, r4
 8005b24:	4629      	mov	r1, r5
 8005b26:	f7fa ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b2a:	b108      	cbz	r0, 8005b30 <__cvt+0xa4>
 8005b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b30:	2230      	movs	r2, #48	; 0x30
 8005b32:	9b03      	ldr	r3, [sp, #12]
 8005b34:	454b      	cmp	r3, r9
 8005b36:	d307      	bcc.n	8005b48 <__cvt+0xbc>
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b3c:	1bdb      	subs	r3, r3, r7
 8005b3e:	4638      	mov	r0, r7
 8005b40:	6013      	str	r3, [r2, #0]
 8005b42:	b004      	add	sp, #16
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	1c59      	adds	r1, r3, #1
 8005b4a:	9103      	str	r1, [sp, #12]
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e7f0      	b.n	8005b32 <__cvt+0xa6>

08005b50 <__exponent>:
 8005b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b52:	4603      	mov	r3, r0
 8005b54:	2900      	cmp	r1, #0
 8005b56:	bfb8      	it	lt
 8005b58:	4249      	neglt	r1, r1
 8005b5a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b5e:	bfb4      	ite	lt
 8005b60:	222d      	movlt	r2, #45	; 0x2d
 8005b62:	222b      	movge	r2, #43	; 0x2b
 8005b64:	2909      	cmp	r1, #9
 8005b66:	7042      	strb	r2, [r0, #1]
 8005b68:	dd2a      	ble.n	8005bc0 <__exponent+0x70>
 8005b6a:	f10d 0407 	add.w	r4, sp, #7
 8005b6e:	46a4      	mov	ip, r4
 8005b70:	270a      	movs	r7, #10
 8005b72:	46a6      	mov	lr, r4
 8005b74:	460a      	mov	r2, r1
 8005b76:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b7a:	fb07 1516 	mls	r5, r7, r6, r1
 8005b7e:	3530      	adds	r5, #48	; 0x30
 8005b80:	2a63      	cmp	r2, #99	; 0x63
 8005b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b8a:	4631      	mov	r1, r6
 8005b8c:	dcf1      	bgt.n	8005b72 <__exponent+0x22>
 8005b8e:	3130      	adds	r1, #48	; 0x30
 8005b90:	f1ae 0502 	sub.w	r5, lr, #2
 8005b94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b98:	1c44      	adds	r4, r0, #1
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4561      	cmp	r1, ip
 8005b9e:	d30a      	bcc.n	8005bb6 <__exponent+0x66>
 8005ba0:	f10d 0209 	add.w	r2, sp, #9
 8005ba4:	eba2 020e 	sub.w	r2, r2, lr
 8005ba8:	4565      	cmp	r5, ip
 8005baa:	bf88      	it	hi
 8005bac:	2200      	movhi	r2, #0
 8005bae:	4413      	add	r3, r2
 8005bb0:	1a18      	subs	r0, r3, r0
 8005bb2:	b003      	add	sp, #12
 8005bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bbe:	e7ed      	b.n	8005b9c <__exponent+0x4c>
 8005bc0:	2330      	movs	r3, #48	; 0x30
 8005bc2:	3130      	adds	r1, #48	; 0x30
 8005bc4:	7083      	strb	r3, [r0, #2]
 8005bc6:	70c1      	strb	r1, [r0, #3]
 8005bc8:	1d03      	adds	r3, r0, #4
 8005bca:	e7f1      	b.n	8005bb0 <__exponent+0x60>

08005bcc <_printf_float>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	ed2d 8b02 	vpush	{d8}
 8005bd4:	b08d      	sub	sp, #52	; 0x34
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005bdc:	4616      	mov	r6, r2
 8005bde:	461f      	mov	r7, r3
 8005be0:	4605      	mov	r5, r0
 8005be2:	f001 fb65 	bl	80072b0 <_localeconv_r>
 8005be6:	f8d0 a000 	ldr.w	sl, [r0]
 8005bea:	4650      	mov	r0, sl
 8005bec:	f7fa faf8 	bl	80001e0 <strlen>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c00:	3307      	adds	r3, #7
 8005c02:	f023 0307 	bic.w	r3, r3, #7
 8005c06:	f103 0208 	add.w	r2, r3, #8
 8005c0a:	f8c8 2000 	str.w	r2, [r8]
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c24:	ee08 0a10 	vmov	s16, r0
 8005c28:	4b9f      	ldr	r3, [pc, #636]	; (8005ea8 <_printf_float+0x2dc>)
 8005c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c32:	f7fa ff83 	bl	8000b3c <__aeabi_dcmpun>
 8005c36:	bb88      	cbnz	r0, 8005c9c <_printf_float+0xd0>
 8005c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c3c:	4b9a      	ldr	r3, [pc, #616]	; (8005ea8 <_printf_float+0x2dc>)
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	f7fa ff5d 	bl	8000b00 <__aeabi_dcmple>
 8005c46:	bb48      	cbnz	r0, 8005c9c <_printf_float+0xd0>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4649      	mov	r1, r9
 8005c50:	f7fa ff4c 	bl	8000aec <__aeabi_dcmplt>
 8005c54:	b110      	cbz	r0, 8005c5c <_printf_float+0x90>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	4b93      	ldr	r3, [pc, #588]	; (8005eac <_printf_float+0x2e0>)
 8005c5e:	4894      	ldr	r0, [pc, #592]	; (8005eb0 <_printf_float+0x2e4>)
 8005c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c64:	bf94      	ite	ls
 8005c66:	4698      	movls	r8, r3
 8005c68:	4680      	movhi	r8, r0
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	9b05      	ldr	r3, [sp, #20]
 8005c70:	f023 0204 	bic.w	r2, r3, #4
 8005c74:	6022      	str	r2, [r4, #0]
 8005c76:	f04f 0900 	mov.w	r9, #0
 8005c7a:	9700      	str	r7, [sp, #0]
 8005c7c:	4633      	mov	r3, r6
 8005c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c80:	4621      	mov	r1, r4
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 f9d8 	bl	8006038 <_printf_common>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	f040 8090 	bne.w	8005dae <_printf_float+0x1e2>
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c92:	b00d      	add	sp, #52	; 0x34
 8005c94:	ecbd 8b02 	vpop	{d8}
 8005c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	f7fa ff4a 	bl	8000b3c <__aeabi_dcmpun>
 8005ca8:	b140      	cbz	r0, 8005cbc <_printf_float+0xf0>
 8005caa:	464b      	mov	r3, r9
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfbc      	itt	lt
 8005cb0:	232d      	movlt	r3, #45	; 0x2d
 8005cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cb6:	487f      	ldr	r0, [pc, #508]	; (8005eb4 <_printf_float+0x2e8>)
 8005cb8:	4b7f      	ldr	r3, [pc, #508]	; (8005eb8 <_printf_float+0x2ec>)
 8005cba:	e7d1      	b.n	8005c60 <_printf_float+0x94>
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005cc2:	9206      	str	r2, [sp, #24]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	d13f      	bne.n	8005d48 <_printf_float+0x17c>
 8005cc8:	2306      	movs	r3, #6
 8005cca:	6063      	str	r3, [r4, #4]
 8005ccc:	9b05      	ldr	r3, [sp, #20]
 8005cce:	6861      	ldr	r1, [r4, #4]
 8005cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8005cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005cde:	ab09      	add	r3, sp, #36	; 0x24
 8005ce0:	ec49 8b10 	vmov	d0, r8, r9
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005cec:	4628      	mov	r0, r5
 8005cee:	f7ff fecd 	bl	8005a8c <__cvt>
 8005cf2:	9b06      	ldr	r3, [sp, #24]
 8005cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cf6:	2b47      	cmp	r3, #71	; 0x47
 8005cf8:	4680      	mov	r8, r0
 8005cfa:	d108      	bne.n	8005d0e <_printf_float+0x142>
 8005cfc:	1cc8      	adds	r0, r1, #3
 8005cfe:	db02      	blt.n	8005d06 <_printf_float+0x13a>
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	4299      	cmp	r1, r3
 8005d04:	dd41      	ble.n	8005d8a <_printf_float+0x1be>
 8005d06:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8005d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d12:	d820      	bhi.n	8005d56 <_printf_float+0x18a>
 8005d14:	3901      	subs	r1, #1
 8005d16:	465a      	mov	r2, fp
 8005d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d1e:	f7ff ff17 	bl	8005b50 <__exponent>
 8005d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d24:	1813      	adds	r3, r2, r0
 8005d26:	2a01      	cmp	r2, #1
 8005d28:	4681      	mov	r9, r0
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	dc02      	bgt.n	8005d34 <_printf_float+0x168>
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	07d2      	lsls	r2, r2, #31
 8005d32:	d501      	bpl.n	8005d38 <_printf_float+0x16c>
 8005d34:	3301      	adds	r3, #1
 8005d36:	6123      	str	r3, [r4, #16]
 8005d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d09c      	beq.n	8005c7a <_printf_float+0xae>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d46:	e798      	b.n	8005c7a <_printf_float+0xae>
 8005d48:	9a06      	ldr	r2, [sp, #24]
 8005d4a:	2a47      	cmp	r2, #71	; 0x47
 8005d4c:	d1be      	bne.n	8005ccc <_printf_float+0x100>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1bc      	bne.n	8005ccc <_printf_float+0x100>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e7b9      	b.n	8005cca <_printf_float+0xfe>
 8005d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d5a:	d118      	bne.n	8005d8e <_printf_float+0x1c2>
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	dd0b      	ble.n	8005d7a <_printf_float+0x1ae>
 8005d62:	6121      	str	r1, [r4, #16]
 8005d64:	b913      	cbnz	r3, 8005d6c <_printf_float+0x1a0>
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	07d0      	lsls	r0, r2, #31
 8005d6a:	d502      	bpl.n	8005d72 <_printf_float+0x1a6>
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	440b      	add	r3, r1
 8005d70:	6123      	str	r3, [r4, #16]
 8005d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d74:	f04f 0900 	mov.w	r9, #0
 8005d78:	e7de      	b.n	8005d38 <_printf_float+0x16c>
 8005d7a:	b913      	cbnz	r3, 8005d82 <_printf_float+0x1b6>
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	07d2      	lsls	r2, r2, #31
 8005d80:	d501      	bpl.n	8005d86 <_printf_float+0x1ba>
 8005d82:	3302      	adds	r3, #2
 8005d84:	e7f4      	b.n	8005d70 <_printf_float+0x1a4>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e7f2      	b.n	8005d70 <_printf_float+0x1a4>
 8005d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	4299      	cmp	r1, r3
 8005d92:	db05      	blt.n	8005da0 <_printf_float+0x1d4>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	6121      	str	r1, [r4, #16]
 8005d98:	07d8      	lsls	r0, r3, #31
 8005d9a:	d5ea      	bpl.n	8005d72 <_printf_float+0x1a6>
 8005d9c:	1c4b      	adds	r3, r1, #1
 8005d9e:	e7e7      	b.n	8005d70 <_printf_float+0x1a4>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	bfd4      	ite	le
 8005da4:	f1c1 0202 	rsble	r2, r1, #2
 8005da8:	2201      	movgt	r2, #1
 8005daa:	4413      	add	r3, r2
 8005dac:	e7e0      	b.n	8005d70 <_printf_float+0x1a4>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	055a      	lsls	r2, r3, #21
 8005db2:	d407      	bmi.n	8005dc4 <_printf_float+0x1f8>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	4642      	mov	r2, r8
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d12c      	bne.n	8005e1c <_printf_float+0x250>
 8005dc2:	e764      	b.n	8005c8e <_printf_float+0xc2>
 8005dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dc8:	f240 80e0 	bls.w	8005f8c <_printf_float+0x3c0>
 8005dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f7fa fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d034      	beq.n	8005e46 <_printf_float+0x27a>
 8005ddc:	4a37      	ldr	r2, [pc, #220]	; (8005ebc <_printf_float+0x2f0>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af51 	beq.w	8005c8e <_printf_float+0xc2>
 8005dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db02      	blt.n	8005dfa <_printf_float+0x22e>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07d8      	lsls	r0, r3, #31
 8005df8:	d510      	bpl.n	8005e1c <_printf_float+0x250>
 8005dfa:	ee18 3a10 	vmov	r3, s16
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af41 	beq.w	8005c8e <_printf_float+0xc2>
 8005e0c:	f04f 0800 	mov.w	r8, #0
 8005e10:	f104 091a 	add.w	r9, r4, #26
 8005e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4543      	cmp	r3, r8
 8005e1a:	dc09      	bgt.n	8005e30 <_printf_float+0x264>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	079b      	lsls	r3, r3, #30
 8005e20:	f100 8105 	bmi.w	800602e <_printf_float+0x462>
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	bfb8      	it	lt
 8005e2c:	4618      	movlt	r0, r3
 8005e2e:	e730      	b.n	8005c92 <_printf_float+0xc6>
 8005e30:	2301      	movs	r3, #1
 8005e32:	464a      	mov	r2, r9
 8005e34:	4631      	mov	r1, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47b8      	blx	r7
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f43f af27 	beq.w	8005c8e <_printf_float+0xc2>
 8005e40:	f108 0801 	add.w	r8, r8, #1
 8005e44:	e7e6      	b.n	8005e14 <_printf_float+0x248>
 8005e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dc39      	bgt.n	8005ec0 <_printf_float+0x2f4>
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	; (8005ebc <_printf_float+0x2f0>)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	4631      	mov	r1, r6
 8005e52:	4628      	mov	r0, r5
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	f43f af19 	beq.w	8005c8e <_printf_float+0xc2>
 8005e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e60:	4313      	orrs	r3, r2
 8005e62:	d102      	bne.n	8005e6a <_printf_float+0x29e>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	d5d8      	bpl.n	8005e1c <_printf_float+0x250>
 8005e6a:	ee18 3a10 	vmov	r3, s16
 8005e6e:	4652      	mov	r2, sl
 8005e70:	4631      	mov	r1, r6
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b8      	blx	r7
 8005e76:	3001      	adds	r0, #1
 8005e78:	f43f af09 	beq.w	8005c8e <_printf_float+0xc2>
 8005e7c:	f04f 0900 	mov.w	r9, #0
 8005e80:	f104 0a1a 	add.w	sl, r4, #26
 8005e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e86:	425b      	negs	r3, r3
 8005e88:	454b      	cmp	r3, r9
 8005e8a:	dc01      	bgt.n	8005e90 <_printf_float+0x2c4>
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8e:	e792      	b.n	8005db6 <_printf_float+0x1ea>
 8005e90:	2301      	movs	r3, #1
 8005e92:	4652      	mov	r2, sl
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f aef7 	beq.w	8005c8e <_printf_float+0xc2>
 8005ea0:	f109 0901 	add.w	r9, r9, #1
 8005ea4:	e7ee      	b.n	8005e84 <_printf_float+0x2b8>
 8005ea6:	bf00      	nop
 8005ea8:	7fefffff 	.word	0x7fefffff
 8005eac:	080088cc 	.word	0x080088cc
 8005eb0:	080088d0 	.word	0x080088d0
 8005eb4:	080088d8 	.word	0x080088d8
 8005eb8:	080088d4 	.word	0x080088d4
 8005ebc:	080088dc 	.word	0x080088dc
 8005ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	bfa8      	it	ge
 8005ec8:	461a      	movge	r2, r3
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	4691      	mov	r9, r2
 8005ece:	dc37      	bgt.n	8005f40 <_printf_float+0x374>
 8005ed0:	f04f 0b00 	mov.w	fp, #0
 8005ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ed8:	f104 021a 	add.w	r2, r4, #26
 8005edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ede:	9305      	str	r3, [sp, #20]
 8005ee0:	eba3 0309 	sub.w	r3, r3, r9
 8005ee4:	455b      	cmp	r3, fp
 8005ee6:	dc33      	bgt.n	8005f50 <_printf_float+0x384>
 8005ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eec:	429a      	cmp	r2, r3
 8005eee:	db3b      	blt.n	8005f68 <_printf_float+0x39c>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	07da      	lsls	r2, r3, #31
 8005ef4:	d438      	bmi.n	8005f68 <_printf_float+0x39c>
 8005ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef8:	9a05      	ldr	r2, [sp, #20]
 8005efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005efc:	1a9a      	subs	r2, r3, r2
 8005efe:	eba3 0901 	sub.w	r9, r3, r1
 8005f02:	4591      	cmp	r9, r2
 8005f04:	bfa8      	it	ge
 8005f06:	4691      	movge	r9, r2
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	dc35      	bgt.n	8005f7a <_printf_float+0x3ae>
 8005f0e:	f04f 0800 	mov.w	r8, #0
 8005f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f16:	f104 0a1a 	add.w	sl, r4, #26
 8005f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	eba3 0309 	sub.w	r3, r3, r9
 8005f24:	4543      	cmp	r3, r8
 8005f26:	f77f af79 	ble.w	8005e1c <_printf_float+0x250>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4631      	mov	r1, r6
 8005f30:	4628      	mov	r0, r5
 8005f32:	47b8      	blx	r7
 8005f34:	3001      	adds	r0, #1
 8005f36:	f43f aeaa 	beq.w	8005c8e <_printf_float+0xc2>
 8005f3a:	f108 0801 	add.w	r8, r8, #1
 8005f3e:	e7ec      	b.n	8005f1a <_printf_float+0x34e>
 8005f40:	4613      	mov	r3, r2
 8005f42:	4631      	mov	r1, r6
 8005f44:	4642      	mov	r2, r8
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	d1c0      	bne.n	8005ed0 <_printf_float+0x304>
 8005f4e:	e69e      	b.n	8005c8e <_printf_float+0xc2>
 8005f50:	2301      	movs	r3, #1
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f ae97 	beq.w	8005c8e <_printf_float+0xc2>
 8005f60:	9a05      	ldr	r2, [sp, #20]
 8005f62:	f10b 0b01 	add.w	fp, fp, #1
 8005f66:	e7b9      	b.n	8005edc <_printf_float+0x310>
 8005f68:	ee18 3a10 	vmov	r3, s16
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1be      	bne.n	8005ef6 <_printf_float+0x32a>
 8005f78:	e689      	b.n	8005c8e <_printf_float+0xc2>
 8005f7a:	9a05      	ldr	r2, [sp, #20]
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	4442      	add	r2, r8
 8005f80:	4631      	mov	r1, r6
 8005f82:	4628      	mov	r0, r5
 8005f84:	47b8      	blx	r7
 8005f86:	3001      	adds	r0, #1
 8005f88:	d1c1      	bne.n	8005f0e <_printf_float+0x342>
 8005f8a:	e680      	b.n	8005c8e <_printf_float+0xc2>
 8005f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f8e:	2a01      	cmp	r2, #1
 8005f90:	dc01      	bgt.n	8005f96 <_printf_float+0x3ca>
 8005f92:	07db      	lsls	r3, r3, #31
 8005f94:	d538      	bpl.n	8006008 <_printf_float+0x43c>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4642      	mov	r2, r8
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b8      	blx	r7
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	f43f ae74 	beq.w	8005c8e <_printf_float+0xc2>
 8005fa6:	ee18 3a10 	vmov	r3, s16
 8005faa:	4652      	mov	r2, sl
 8005fac:	4631      	mov	r1, r6
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f43f ae6b 	beq.w	8005c8e <_printf_float+0xc2>
 8005fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f7fa fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc4:	b9d8      	cbnz	r0, 8005ffe <_printf_float+0x432>
 8005fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc8:	f108 0201 	add.w	r2, r8, #1
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b8      	blx	r7
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d10e      	bne.n	8005ff6 <_printf_float+0x42a>
 8005fd8:	e659      	b.n	8005c8e <_printf_float+0xc2>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4652      	mov	r2, sl
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	f43f ae52 	beq.w	8005c8e <_printf_float+0xc2>
 8005fea:	f108 0801 	add.w	r8, r8, #1
 8005fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	4543      	cmp	r3, r8
 8005ff4:	dcf1      	bgt.n	8005fda <_printf_float+0x40e>
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ffc:	e6dc      	b.n	8005db8 <_printf_float+0x1ec>
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	f104 0a1a 	add.w	sl, r4, #26
 8006006:	e7f2      	b.n	8005fee <_printf_float+0x422>
 8006008:	2301      	movs	r3, #1
 800600a:	4642      	mov	r2, r8
 800600c:	e7df      	b.n	8005fce <_printf_float+0x402>
 800600e:	2301      	movs	r3, #1
 8006010:	464a      	mov	r2, r9
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f ae38 	beq.w	8005c8e <_printf_float+0xc2>
 800601e:	f108 0801 	add.w	r8, r8, #1
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006026:	1a5b      	subs	r3, r3, r1
 8006028:	4543      	cmp	r3, r8
 800602a:	dcf0      	bgt.n	800600e <_printf_float+0x442>
 800602c:	e6fa      	b.n	8005e24 <_printf_float+0x258>
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	f104 0919 	add.w	r9, r4, #25
 8006036:	e7f4      	b.n	8006022 <_printf_float+0x456>

08006038 <_printf_common>:
 8006038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800603c:	4616      	mov	r6, r2
 800603e:	4699      	mov	r9, r3
 8006040:	688a      	ldr	r2, [r1, #8]
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006048:	4293      	cmp	r3, r2
 800604a:	bfb8      	it	lt
 800604c:	4613      	movlt	r3, r2
 800604e:	6033      	str	r3, [r6, #0]
 8006050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006054:	4607      	mov	r7, r0
 8006056:	460c      	mov	r4, r1
 8006058:	b10a      	cbz	r2, 800605e <_printf_common+0x26>
 800605a:	3301      	adds	r3, #1
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	0699      	lsls	r1, r3, #26
 8006062:	bf42      	ittt	mi
 8006064:	6833      	ldrmi	r3, [r6, #0]
 8006066:	3302      	addmi	r3, #2
 8006068:	6033      	strmi	r3, [r6, #0]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	f015 0506 	ands.w	r5, r5, #6
 8006070:	d106      	bne.n	8006080 <_printf_common+0x48>
 8006072:	f104 0a19 	add.w	sl, r4, #25
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	6832      	ldr	r2, [r6, #0]
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	42ab      	cmp	r3, r5
 800607e:	dc26      	bgt.n	80060ce <_printf_common+0x96>
 8006080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006084:	1e13      	subs	r3, r2, #0
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	bf18      	it	ne
 800608a:	2301      	movne	r3, #1
 800608c:	0692      	lsls	r2, r2, #26
 800608e:	d42b      	bmi.n	80060e8 <_printf_common+0xb0>
 8006090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006094:	4649      	mov	r1, r9
 8006096:	4638      	mov	r0, r7
 8006098:	47c0      	blx	r8
 800609a:	3001      	adds	r0, #1
 800609c:	d01e      	beq.n	80060dc <_printf_common+0xa4>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	68e5      	ldr	r5, [r4, #12]
 80060a2:	6832      	ldr	r2, [r6, #0]
 80060a4:	f003 0306 	and.w	r3, r3, #6
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	bf08      	it	eq
 80060ac:	1aad      	subeq	r5, r5, r2
 80060ae:	68a3      	ldr	r3, [r4, #8]
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	bf0c      	ite	eq
 80060b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060b8:	2500      	movne	r5, #0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfc4      	itt	gt
 80060be:	1a9b      	subgt	r3, r3, r2
 80060c0:	18ed      	addgt	r5, r5, r3
 80060c2:	2600      	movs	r6, #0
 80060c4:	341a      	adds	r4, #26
 80060c6:	42b5      	cmp	r5, r6
 80060c8:	d11a      	bne.n	8006100 <_printf_common+0xc8>
 80060ca:	2000      	movs	r0, #0
 80060cc:	e008      	b.n	80060e0 <_printf_common+0xa8>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4652      	mov	r2, sl
 80060d2:	4649      	mov	r1, r9
 80060d4:	4638      	mov	r0, r7
 80060d6:	47c0      	blx	r8
 80060d8:	3001      	adds	r0, #1
 80060da:	d103      	bne.n	80060e4 <_printf_common+0xac>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e4:	3501      	adds	r5, #1
 80060e6:	e7c6      	b.n	8006076 <_printf_common+0x3e>
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	2030      	movs	r0, #48	; 0x30
 80060ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060f2:	4422      	add	r2, r4
 80060f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7c7      	b.n	8006090 <_printf_common+0x58>
 8006100:	2301      	movs	r3, #1
 8006102:	4622      	mov	r2, r4
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d0e6      	beq.n	80060dc <_printf_common+0xa4>
 800610e:	3601      	adds	r6, #1
 8006110:	e7d9      	b.n	80060c6 <_printf_common+0x8e>
	...

08006114 <_printf_i>:
 8006114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	7e0f      	ldrb	r7, [r1, #24]
 800611a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800611c:	2f78      	cmp	r7, #120	; 0x78
 800611e:	4691      	mov	r9, r2
 8006120:	4680      	mov	r8, r0
 8006122:	460c      	mov	r4, r1
 8006124:	469a      	mov	sl, r3
 8006126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800612a:	d807      	bhi.n	800613c <_printf_i+0x28>
 800612c:	2f62      	cmp	r7, #98	; 0x62
 800612e:	d80a      	bhi.n	8006146 <_printf_i+0x32>
 8006130:	2f00      	cmp	r7, #0
 8006132:	f000 80d8 	beq.w	80062e6 <_printf_i+0x1d2>
 8006136:	2f58      	cmp	r7, #88	; 0x58
 8006138:	f000 80a3 	beq.w	8006282 <_printf_i+0x16e>
 800613c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006144:	e03a      	b.n	80061bc <_printf_i+0xa8>
 8006146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800614a:	2b15      	cmp	r3, #21
 800614c:	d8f6      	bhi.n	800613c <_printf_i+0x28>
 800614e:	a101      	add	r1, pc, #4	; (adr r1, 8006154 <_printf_i+0x40>)
 8006150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061c1 	.word	0x080061c1
 800615c:	0800613d 	.word	0x0800613d
 8006160:	0800613d 	.word	0x0800613d
 8006164:	0800613d 	.word	0x0800613d
 8006168:	0800613d 	.word	0x0800613d
 800616c:	080061c1 	.word	0x080061c1
 8006170:	0800613d 	.word	0x0800613d
 8006174:	0800613d 	.word	0x0800613d
 8006178:	0800613d 	.word	0x0800613d
 800617c:	0800613d 	.word	0x0800613d
 8006180:	080062cd 	.word	0x080062cd
 8006184:	080061f1 	.word	0x080061f1
 8006188:	080062af 	.word	0x080062af
 800618c:	0800613d 	.word	0x0800613d
 8006190:	0800613d 	.word	0x0800613d
 8006194:	080062ef 	.word	0x080062ef
 8006198:	0800613d 	.word	0x0800613d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800613d 	.word	0x0800613d
 80061a4:	0800613d 	.word	0x0800613d
 80061a8:	080062b7 	.word	0x080062b7
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	602a      	str	r2, [r5, #0]
 80061b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061bc:	2301      	movs	r3, #1
 80061be:	e0a3      	b.n	8006308 <_printf_i+0x1f4>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	6829      	ldr	r1, [r5, #0]
 80061c4:	0606      	lsls	r6, r0, #24
 80061c6:	f101 0304 	add.w	r3, r1, #4
 80061ca:	d50a      	bpl.n	80061e2 <_printf_i+0xce>
 80061cc:	680e      	ldr	r6, [r1, #0]
 80061ce:	602b      	str	r3, [r5, #0]
 80061d0:	2e00      	cmp	r6, #0
 80061d2:	da03      	bge.n	80061dc <_printf_i+0xc8>
 80061d4:	232d      	movs	r3, #45	; 0x2d
 80061d6:	4276      	negs	r6, r6
 80061d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061dc:	485e      	ldr	r0, [pc, #376]	; (8006358 <_printf_i+0x244>)
 80061de:	230a      	movs	r3, #10
 80061e0:	e019      	b.n	8006216 <_printf_i+0x102>
 80061e2:	680e      	ldr	r6, [r1, #0]
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ea:	bf18      	it	ne
 80061ec:	b236      	sxthne	r6, r6
 80061ee:	e7ef      	b.n	80061d0 <_printf_i+0xbc>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	6820      	ldr	r0, [r4, #0]
 80061f4:	1d19      	adds	r1, r3, #4
 80061f6:	6029      	str	r1, [r5, #0]
 80061f8:	0601      	lsls	r1, r0, #24
 80061fa:	d501      	bpl.n	8006200 <_printf_i+0xec>
 80061fc:	681e      	ldr	r6, [r3, #0]
 80061fe:	e002      	b.n	8006206 <_printf_i+0xf2>
 8006200:	0646      	lsls	r6, r0, #25
 8006202:	d5fb      	bpl.n	80061fc <_printf_i+0xe8>
 8006204:	881e      	ldrh	r6, [r3, #0]
 8006206:	4854      	ldr	r0, [pc, #336]	; (8006358 <_printf_i+0x244>)
 8006208:	2f6f      	cmp	r7, #111	; 0x6f
 800620a:	bf0c      	ite	eq
 800620c:	2308      	moveq	r3, #8
 800620e:	230a      	movne	r3, #10
 8006210:	2100      	movs	r1, #0
 8006212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006216:	6865      	ldr	r5, [r4, #4]
 8006218:	60a5      	str	r5, [r4, #8]
 800621a:	2d00      	cmp	r5, #0
 800621c:	bfa2      	ittt	ge
 800621e:	6821      	ldrge	r1, [r4, #0]
 8006220:	f021 0104 	bicge.w	r1, r1, #4
 8006224:	6021      	strge	r1, [r4, #0]
 8006226:	b90e      	cbnz	r6, 800622c <_printf_i+0x118>
 8006228:	2d00      	cmp	r5, #0
 800622a:	d04d      	beq.n	80062c8 <_printf_i+0x1b4>
 800622c:	4615      	mov	r5, r2
 800622e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006232:	fb03 6711 	mls	r7, r3, r1, r6
 8006236:	5dc7      	ldrb	r7, [r0, r7]
 8006238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800623c:	4637      	mov	r7, r6
 800623e:	42bb      	cmp	r3, r7
 8006240:	460e      	mov	r6, r1
 8006242:	d9f4      	bls.n	800622e <_printf_i+0x11a>
 8006244:	2b08      	cmp	r3, #8
 8006246:	d10b      	bne.n	8006260 <_printf_i+0x14c>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07de      	lsls	r6, r3, #31
 800624c:	d508      	bpl.n	8006260 <_printf_i+0x14c>
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	6861      	ldr	r1, [r4, #4]
 8006252:	4299      	cmp	r1, r3
 8006254:	bfde      	ittt	le
 8006256:	2330      	movle	r3, #48	; 0x30
 8006258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800625c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006260:	1b52      	subs	r2, r2, r5
 8006262:	6122      	str	r2, [r4, #16]
 8006264:	f8cd a000 	str.w	sl, [sp]
 8006268:	464b      	mov	r3, r9
 800626a:	aa03      	add	r2, sp, #12
 800626c:	4621      	mov	r1, r4
 800626e:	4640      	mov	r0, r8
 8006270:	f7ff fee2 	bl	8006038 <_printf_common>
 8006274:	3001      	adds	r0, #1
 8006276:	d14c      	bne.n	8006312 <_printf_i+0x1fe>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295
 800627c:	b004      	add	sp, #16
 800627e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006282:	4835      	ldr	r0, [pc, #212]	; (8006358 <_printf_i+0x244>)
 8006284:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006290:	6029      	str	r1, [r5, #0]
 8006292:	061d      	lsls	r5, r3, #24
 8006294:	d514      	bpl.n	80062c0 <_printf_i+0x1ac>
 8006296:	07df      	lsls	r7, r3, #31
 8006298:	bf44      	itt	mi
 800629a:	f043 0320 	orrmi.w	r3, r3, #32
 800629e:	6023      	strmi	r3, [r4, #0]
 80062a0:	b91e      	cbnz	r6, 80062aa <_printf_i+0x196>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	f023 0320 	bic.w	r3, r3, #32
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	2310      	movs	r3, #16
 80062ac:	e7b0      	b.n	8006210 <_printf_i+0xfc>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	f043 0320 	orr.w	r3, r3, #32
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	2378      	movs	r3, #120	; 0x78
 80062b8:	4828      	ldr	r0, [pc, #160]	; (800635c <_printf_i+0x248>)
 80062ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062be:	e7e3      	b.n	8006288 <_printf_i+0x174>
 80062c0:	0659      	lsls	r1, r3, #25
 80062c2:	bf48      	it	mi
 80062c4:	b2b6      	uxthmi	r6, r6
 80062c6:	e7e6      	b.n	8006296 <_printf_i+0x182>
 80062c8:	4615      	mov	r5, r2
 80062ca:	e7bb      	b.n	8006244 <_printf_i+0x130>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	6826      	ldr	r6, [r4, #0]
 80062d0:	6961      	ldr	r1, [r4, #20]
 80062d2:	1d18      	adds	r0, r3, #4
 80062d4:	6028      	str	r0, [r5, #0]
 80062d6:	0635      	lsls	r5, r6, #24
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	d501      	bpl.n	80062e0 <_printf_i+0x1cc>
 80062dc:	6019      	str	r1, [r3, #0]
 80062de:	e002      	b.n	80062e6 <_printf_i+0x1d2>
 80062e0:	0670      	lsls	r0, r6, #25
 80062e2:	d5fb      	bpl.n	80062dc <_printf_i+0x1c8>
 80062e4:	8019      	strh	r1, [r3, #0]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6123      	str	r3, [r4, #16]
 80062ea:	4615      	mov	r5, r2
 80062ec:	e7ba      	b.n	8006264 <_printf_i+0x150>
 80062ee:	682b      	ldr	r3, [r5, #0]
 80062f0:	1d1a      	adds	r2, r3, #4
 80062f2:	602a      	str	r2, [r5, #0]
 80062f4:	681d      	ldr	r5, [r3, #0]
 80062f6:	6862      	ldr	r2, [r4, #4]
 80062f8:	2100      	movs	r1, #0
 80062fa:	4628      	mov	r0, r5
 80062fc:	f7f9 ff78 	bl	80001f0 <memchr>
 8006300:	b108      	cbz	r0, 8006306 <_printf_i+0x1f2>
 8006302:	1b40      	subs	r0, r0, r5
 8006304:	6060      	str	r0, [r4, #4]
 8006306:	6863      	ldr	r3, [r4, #4]
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	2300      	movs	r3, #0
 800630c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006310:	e7a8      	b.n	8006264 <_printf_i+0x150>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	462a      	mov	r2, r5
 8006316:	4649      	mov	r1, r9
 8006318:	4640      	mov	r0, r8
 800631a:	47d0      	blx	sl
 800631c:	3001      	adds	r0, #1
 800631e:	d0ab      	beq.n	8006278 <_printf_i+0x164>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	079b      	lsls	r3, r3, #30
 8006324:	d413      	bmi.n	800634e <_printf_i+0x23a>
 8006326:	68e0      	ldr	r0, [r4, #12]
 8006328:	9b03      	ldr	r3, [sp, #12]
 800632a:	4298      	cmp	r0, r3
 800632c:	bfb8      	it	lt
 800632e:	4618      	movlt	r0, r3
 8006330:	e7a4      	b.n	800627c <_printf_i+0x168>
 8006332:	2301      	movs	r3, #1
 8006334:	4632      	mov	r2, r6
 8006336:	4649      	mov	r1, r9
 8006338:	4640      	mov	r0, r8
 800633a:	47d0      	blx	sl
 800633c:	3001      	adds	r0, #1
 800633e:	d09b      	beq.n	8006278 <_printf_i+0x164>
 8006340:	3501      	adds	r5, #1
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	9903      	ldr	r1, [sp, #12]
 8006346:	1a5b      	subs	r3, r3, r1
 8006348:	42ab      	cmp	r3, r5
 800634a:	dcf2      	bgt.n	8006332 <_printf_i+0x21e>
 800634c:	e7eb      	b.n	8006326 <_printf_i+0x212>
 800634e:	2500      	movs	r5, #0
 8006350:	f104 0619 	add.w	r6, r4, #25
 8006354:	e7f5      	b.n	8006342 <_printf_i+0x22e>
 8006356:	bf00      	nop
 8006358:	080088de 	.word	0x080088de
 800635c:	080088ef 	.word	0x080088ef

08006360 <iprintf>:
 8006360:	b40f      	push	{r0, r1, r2, r3}
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <iprintf+0x2c>)
 8006364:	b513      	push	{r0, r1, r4, lr}
 8006366:	681c      	ldr	r4, [r3, #0]
 8006368:	b124      	cbz	r4, 8006374 <iprintf+0x14>
 800636a:	69a3      	ldr	r3, [r4, #24]
 800636c:	b913      	cbnz	r3, 8006374 <iprintf+0x14>
 800636e:	4620      	mov	r0, r4
 8006370:	f000 ff00 	bl	8007174 <__sinit>
 8006374:	ab05      	add	r3, sp, #20
 8006376:	9a04      	ldr	r2, [sp, #16]
 8006378:	68a1      	ldr	r1, [r4, #8]
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	4620      	mov	r0, r4
 800637e:	f001 fdb5 	bl	8007eec <_vfiprintf_r>
 8006382:	b002      	add	sp, #8
 8006384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006388:	b004      	add	sp, #16
 800638a:	4770      	bx	lr
 800638c:	20000010 	.word	0x20000010

08006390 <siprintf>:
 8006390:	b40e      	push	{r1, r2, r3}
 8006392:	b500      	push	{lr}
 8006394:	b09c      	sub	sp, #112	; 0x70
 8006396:	ab1d      	add	r3, sp, #116	; 0x74
 8006398:	9002      	str	r0, [sp, #8]
 800639a:	9006      	str	r0, [sp, #24]
 800639c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063a0:	4809      	ldr	r0, [pc, #36]	; (80063c8 <siprintf+0x38>)
 80063a2:	9107      	str	r1, [sp, #28]
 80063a4:	9104      	str	r1, [sp, #16]
 80063a6:	4909      	ldr	r1, [pc, #36]	; (80063cc <siprintf+0x3c>)
 80063a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ac:	9105      	str	r1, [sp, #20]
 80063ae:	6800      	ldr	r0, [r0, #0]
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	a902      	add	r1, sp, #8
 80063b4:	f001 fc70 	bl	8007c98 <_svfiprintf_r>
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	b01c      	add	sp, #112	; 0x70
 80063c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c4:	b003      	add	sp, #12
 80063c6:	4770      	bx	lr
 80063c8:	20000010 	.word	0x20000010
 80063cc:	ffff0208 	.word	0xffff0208

080063d0 <quorem>:
 80063d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d4:	6903      	ldr	r3, [r0, #16]
 80063d6:	690c      	ldr	r4, [r1, #16]
 80063d8:	42a3      	cmp	r3, r4
 80063da:	4607      	mov	r7, r0
 80063dc:	f2c0 8081 	blt.w	80064e2 <quorem+0x112>
 80063e0:	3c01      	subs	r4, #1
 80063e2:	f101 0814 	add.w	r8, r1, #20
 80063e6:	f100 0514 	add.w	r5, r0, #20
 80063ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063f8:	3301      	adds	r3, #1
 80063fa:	429a      	cmp	r2, r3
 80063fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006404:	fbb2 f6f3 	udiv	r6, r2, r3
 8006408:	d331      	bcc.n	800646e <quorem+0x9e>
 800640a:	f04f 0e00 	mov.w	lr, #0
 800640e:	4640      	mov	r0, r8
 8006410:	46ac      	mov	ip, r5
 8006412:	46f2      	mov	sl, lr
 8006414:	f850 2b04 	ldr.w	r2, [r0], #4
 8006418:	b293      	uxth	r3, r2
 800641a:	fb06 e303 	mla	r3, r6, r3, lr
 800641e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006422:	b29b      	uxth	r3, r3
 8006424:	ebaa 0303 	sub.w	r3, sl, r3
 8006428:	f8dc a000 	ldr.w	sl, [ip]
 800642c:	0c12      	lsrs	r2, r2, #16
 800642e:	fa13 f38a 	uxtah	r3, r3, sl
 8006432:	fb06 e202 	mla	r2, r6, r2, lr
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	9b00      	ldr	r3, [sp, #0]
 800643a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800643e:	b292      	uxth	r2, r2
 8006440:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006448:	f8bd 3000 	ldrh.w	r3, [sp]
 800644c:	4581      	cmp	r9, r0
 800644e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006452:	f84c 3b04 	str.w	r3, [ip], #4
 8006456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800645a:	d2db      	bcs.n	8006414 <quorem+0x44>
 800645c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006460:	b92b      	cbnz	r3, 800646e <quorem+0x9e>
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	3b04      	subs	r3, #4
 8006466:	429d      	cmp	r5, r3
 8006468:	461a      	mov	r2, r3
 800646a:	d32e      	bcc.n	80064ca <quorem+0xfa>
 800646c:	613c      	str	r4, [r7, #16]
 800646e:	4638      	mov	r0, r7
 8006470:	f001 f9be 	bl	80077f0 <__mcmp>
 8006474:	2800      	cmp	r0, #0
 8006476:	db24      	blt.n	80064c2 <quorem+0xf2>
 8006478:	3601      	adds	r6, #1
 800647a:	4628      	mov	r0, r5
 800647c:	f04f 0c00 	mov.w	ip, #0
 8006480:	f858 2b04 	ldr.w	r2, [r8], #4
 8006484:	f8d0 e000 	ldr.w	lr, [r0]
 8006488:	b293      	uxth	r3, r2
 800648a:	ebac 0303 	sub.w	r3, ip, r3
 800648e:	0c12      	lsrs	r2, r2, #16
 8006490:	fa13 f38e 	uxtah	r3, r3, lr
 8006494:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006498:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064a2:	45c1      	cmp	r9, r8
 80064a4:	f840 3b04 	str.w	r3, [r0], #4
 80064a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064ac:	d2e8      	bcs.n	8006480 <quorem+0xb0>
 80064ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064b6:	b922      	cbnz	r2, 80064c2 <quorem+0xf2>
 80064b8:	3b04      	subs	r3, #4
 80064ba:	429d      	cmp	r5, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	d30a      	bcc.n	80064d6 <quorem+0x106>
 80064c0:	613c      	str	r4, [r7, #16]
 80064c2:	4630      	mov	r0, r6
 80064c4:	b003      	add	sp, #12
 80064c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	d1cc      	bne.n	800646c <quorem+0x9c>
 80064d2:	3c01      	subs	r4, #1
 80064d4:	e7c7      	b.n	8006466 <quorem+0x96>
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	3b04      	subs	r3, #4
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d1f0      	bne.n	80064c0 <quorem+0xf0>
 80064de:	3c01      	subs	r4, #1
 80064e0:	e7eb      	b.n	80064ba <quorem+0xea>
 80064e2:	2000      	movs	r0, #0
 80064e4:	e7ee      	b.n	80064c4 <quorem+0xf4>
	...

080064e8 <_dtoa_r>:
 80064e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ec:	ed2d 8b04 	vpush	{d8-d9}
 80064f0:	ec57 6b10 	vmov	r6, r7, d0
 80064f4:	b093      	sub	sp, #76	; 0x4c
 80064f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064fc:	9106      	str	r1, [sp, #24]
 80064fe:	ee10 aa10 	vmov	sl, s0
 8006502:	4604      	mov	r4, r0
 8006504:	9209      	str	r2, [sp, #36]	; 0x24
 8006506:	930c      	str	r3, [sp, #48]	; 0x30
 8006508:	46bb      	mov	fp, r7
 800650a:	b975      	cbnz	r5, 800652a <_dtoa_r+0x42>
 800650c:	2010      	movs	r0, #16
 800650e:	f000 fed7 	bl	80072c0 <malloc>
 8006512:	4602      	mov	r2, r0
 8006514:	6260      	str	r0, [r4, #36]	; 0x24
 8006516:	b920      	cbnz	r0, 8006522 <_dtoa_r+0x3a>
 8006518:	4ba7      	ldr	r3, [pc, #668]	; (80067b8 <_dtoa_r+0x2d0>)
 800651a:	21ea      	movs	r1, #234	; 0xea
 800651c:	48a7      	ldr	r0, [pc, #668]	; (80067bc <_dtoa_r+0x2d4>)
 800651e:	f001 ff3b 	bl	8008398 <__assert_func>
 8006522:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006526:	6005      	str	r5, [r0, #0]
 8006528:	60c5      	str	r5, [r0, #12]
 800652a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652c:	6819      	ldr	r1, [r3, #0]
 800652e:	b151      	cbz	r1, 8006546 <_dtoa_r+0x5e>
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	604a      	str	r2, [r1, #4]
 8006534:	2301      	movs	r3, #1
 8006536:	4093      	lsls	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
 800653a:	4620      	mov	r0, r4
 800653c:	f000 ff16 	bl	800736c <_Bfree>
 8006540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	1e3b      	subs	r3, r7, #0
 8006548:	bfaa      	itet	ge
 800654a:	2300      	movge	r3, #0
 800654c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006550:	f8c8 3000 	strge.w	r3, [r8]
 8006554:	4b9a      	ldr	r3, [pc, #616]	; (80067c0 <_dtoa_r+0x2d8>)
 8006556:	bfbc      	itt	lt
 8006558:	2201      	movlt	r2, #1
 800655a:	f8c8 2000 	strlt.w	r2, [r8]
 800655e:	ea33 030b 	bics.w	r3, r3, fp
 8006562:	d11b      	bne.n	800659c <_dtoa_r+0xb4>
 8006564:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006566:	f242 730f 	movw	r3, #9999	; 0x270f
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006570:	4333      	orrs	r3, r6
 8006572:	f000 8592 	beq.w	800709a <_dtoa_r+0xbb2>
 8006576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006578:	b963      	cbnz	r3, 8006594 <_dtoa_r+0xac>
 800657a:	4b92      	ldr	r3, [pc, #584]	; (80067c4 <_dtoa_r+0x2dc>)
 800657c:	e022      	b.n	80065c4 <_dtoa_r+0xdc>
 800657e:	4b92      	ldr	r3, [pc, #584]	; (80067c8 <_dtoa_r+0x2e0>)
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	3308      	adds	r3, #8
 8006584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	9801      	ldr	r0, [sp, #4]
 800658a:	b013      	add	sp, #76	; 0x4c
 800658c:	ecbd 8b04 	vpop	{d8-d9}
 8006590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006594:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <_dtoa_r+0x2dc>)
 8006596:	9301      	str	r3, [sp, #4]
 8006598:	3303      	adds	r3, #3
 800659a:	e7f3      	b.n	8006584 <_dtoa_r+0x9c>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4650      	mov	r0, sl
 80065a2:	4659      	mov	r1, fp
 80065a4:	f7fa fa98 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a8:	ec4b ab19 	vmov	d9, sl, fp
 80065ac:	4680      	mov	r8, r0
 80065ae:	b158      	cbz	r0, 80065c8 <_dtoa_r+0xe0>
 80065b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b2:	2301      	movs	r3, #1
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 856b 	beq.w	8007094 <_dtoa_r+0xbac>
 80065be:	4883      	ldr	r0, [pc, #524]	; (80067cc <_dtoa_r+0x2e4>)
 80065c0:	6018      	str	r0, [r3, #0]
 80065c2:	1e43      	subs	r3, r0, #1
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	e7df      	b.n	8006588 <_dtoa_r+0xa0>
 80065c8:	ec4b ab10 	vmov	d0, sl, fp
 80065cc:	aa10      	add	r2, sp, #64	; 0x40
 80065ce:	a911      	add	r1, sp, #68	; 0x44
 80065d0:	4620      	mov	r0, r4
 80065d2:	f001 f9b3 	bl	800793c <__d2b>
 80065d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065da:	ee08 0a10 	vmov	s16, r0
 80065de:	2d00      	cmp	r5, #0
 80065e0:	f000 8084 	beq.w	80066ec <_dtoa_r+0x204>
 80065e4:	ee19 3a90 	vmov	r3, s19
 80065e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065f0:	4656      	mov	r6, sl
 80065f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065fe:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <_dtoa_r+0x2e8>)
 8006600:	2200      	movs	r2, #0
 8006602:	4630      	mov	r0, r6
 8006604:	4639      	mov	r1, r7
 8006606:	f7f9 fe47 	bl	8000298 <__aeabi_dsub>
 800660a:	a365      	add	r3, pc, #404	; (adr r3, 80067a0 <_dtoa_r+0x2b8>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fffa 	bl	8000608 <__aeabi_dmul>
 8006614:	a364      	add	r3, pc, #400	; (adr r3, 80067a8 <_dtoa_r+0x2c0>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7f9 fe3f 	bl	800029c <__adddf3>
 800661e:	4606      	mov	r6, r0
 8006620:	4628      	mov	r0, r5
 8006622:	460f      	mov	r7, r1
 8006624:	f7f9 ff86 	bl	8000534 <__aeabi_i2d>
 8006628:	a361      	add	r3, pc, #388	; (adr r3, 80067b0 <_dtoa_r+0x2c8>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f7f9 ffeb 	bl	8000608 <__aeabi_dmul>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	4630      	mov	r0, r6
 8006638:	4639      	mov	r1, r7
 800663a:	f7f9 fe2f 	bl	800029c <__adddf3>
 800663e:	4606      	mov	r6, r0
 8006640:	460f      	mov	r7, r1
 8006642:	f7fa fa91 	bl	8000b68 <__aeabi_d2iz>
 8006646:	2200      	movs	r2, #0
 8006648:	9000      	str	r0, [sp, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7fa fa4c 	bl	8000aec <__aeabi_dcmplt>
 8006654:	b150      	cbz	r0, 800666c <_dtoa_r+0x184>
 8006656:	9800      	ldr	r0, [sp, #0]
 8006658:	f7f9 ff6c 	bl	8000534 <__aeabi_i2d>
 800665c:	4632      	mov	r2, r6
 800665e:	463b      	mov	r3, r7
 8006660:	f7fa fa3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006664:	b910      	cbnz	r0, 800666c <_dtoa_r+0x184>
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	3b01      	subs	r3, #1
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	9b00      	ldr	r3, [sp, #0]
 800666e:	2b16      	cmp	r3, #22
 8006670:	d85a      	bhi.n	8006728 <_dtoa_r+0x240>
 8006672:	9a00      	ldr	r2, [sp, #0]
 8006674:	4b57      	ldr	r3, [pc, #348]	; (80067d4 <_dtoa_r+0x2ec>)
 8006676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	ec51 0b19 	vmov	r0, r1, d9
 8006682:	f7fa fa33 	bl	8000aec <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	d050      	beq.n	800672c <_dtoa_r+0x244>
 800668a:	9b00      	ldr	r3, [sp, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	2300      	movs	r3, #0
 8006692:	930b      	str	r3, [sp, #44]	; 0x2c
 8006694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006696:	1b5d      	subs	r5, r3, r5
 8006698:	1e6b      	subs	r3, r5, #1
 800669a:	9305      	str	r3, [sp, #20]
 800669c:	bf45      	ittet	mi
 800669e:	f1c5 0301 	rsbmi	r3, r5, #1
 80066a2:	9304      	strmi	r3, [sp, #16]
 80066a4:	2300      	movpl	r3, #0
 80066a6:	2300      	movmi	r3, #0
 80066a8:	bf4c      	ite	mi
 80066aa:	9305      	strmi	r3, [sp, #20]
 80066ac:	9304      	strpl	r3, [sp, #16]
 80066ae:	9b00      	ldr	r3, [sp, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	db3d      	blt.n	8006730 <_dtoa_r+0x248>
 80066b4:	9b05      	ldr	r3, [sp, #20]
 80066b6:	9a00      	ldr	r2, [sp, #0]
 80066b8:	920a      	str	r2, [sp, #40]	; 0x28
 80066ba:	4413      	add	r3, r2
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	9b06      	ldr	r3, [sp, #24]
 80066c4:	2b09      	cmp	r3, #9
 80066c6:	f200 8089 	bhi.w	80067dc <_dtoa_r+0x2f4>
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	bfc4      	itt	gt
 80066ce:	3b04      	subgt	r3, #4
 80066d0:	9306      	strgt	r3, [sp, #24]
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	f1a3 0302 	sub.w	r3, r3, #2
 80066d8:	bfcc      	ite	gt
 80066da:	2500      	movgt	r5, #0
 80066dc:	2501      	movle	r5, #1
 80066de:	2b03      	cmp	r3, #3
 80066e0:	f200 8087 	bhi.w	80067f2 <_dtoa_r+0x30a>
 80066e4:	e8df f003 	tbb	[pc, r3]
 80066e8:	59383a2d 	.word	0x59383a2d
 80066ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066f0:	441d      	add	r5, r3
 80066f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	bfc1      	itttt	gt
 80066fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006702:	fa0b f303 	lslgt.w	r3, fp, r3
 8006706:	fa26 f000 	lsrgt.w	r0, r6, r0
 800670a:	bfda      	itte	le
 800670c:	f1c3 0320 	rsble	r3, r3, #32
 8006710:	fa06 f003 	lslle.w	r0, r6, r3
 8006714:	4318      	orrgt	r0, r3
 8006716:	f7f9 fefd 	bl	8000514 <__aeabi_ui2d>
 800671a:	2301      	movs	r3, #1
 800671c:	4606      	mov	r6, r0
 800671e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006722:	3d01      	subs	r5, #1
 8006724:	930e      	str	r3, [sp, #56]	; 0x38
 8006726:	e76a      	b.n	80065fe <_dtoa_r+0x116>
 8006728:	2301      	movs	r3, #1
 800672a:	e7b2      	b.n	8006692 <_dtoa_r+0x1aa>
 800672c:	900b      	str	r0, [sp, #44]	; 0x2c
 800672e:	e7b1      	b.n	8006694 <_dtoa_r+0x1ac>
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	9a00      	ldr	r2, [sp, #0]
 8006734:	1a9b      	subs	r3, r3, r2
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	4253      	negs	r3, r2
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	2300      	movs	r3, #0
 800673e:	930a      	str	r3, [sp, #40]	; 0x28
 8006740:	e7bf      	b.n	80066c2 <_dtoa_r+0x1da>
 8006742:	2300      	movs	r3, #0
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	2b00      	cmp	r3, #0
 800674a:	dc55      	bgt.n	80067f8 <_dtoa_r+0x310>
 800674c:	2301      	movs	r3, #1
 800674e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006752:	461a      	mov	r2, r3
 8006754:	9209      	str	r2, [sp, #36]	; 0x24
 8006756:	e00c      	b.n	8006772 <_dtoa_r+0x28a>
 8006758:	2301      	movs	r3, #1
 800675a:	e7f3      	b.n	8006744 <_dtoa_r+0x25c>
 800675c:	2300      	movs	r3, #0
 800675e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006760:	9308      	str	r3, [sp, #32]
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	4413      	add	r3, r2
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	3301      	adds	r3, #1
 800676a:	2b01      	cmp	r3, #1
 800676c:	9303      	str	r3, [sp, #12]
 800676e:	bfb8      	it	lt
 8006770:	2301      	movlt	r3, #1
 8006772:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006774:	2200      	movs	r2, #0
 8006776:	6042      	str	r2, [r0, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	f102 0614 	add.w	r6, r2, #20
 800677e:	429e      	cmp	r6, r3
 8006780:	6841      	ldr	r1, [r0, #4]
 8006782:	d93d      	bls.n	8006800 <_dtoa_r+0x318>
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fdb1 	bl	80072ec <_Balloc>
 800678a:	9001      	str	r0, [sp, #4]
 800678c:	2800      	cmp	r0, #0
 800678e:	d13b      	bne.n	8006808 <_dtoa_r+0x320>
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <_dtoa_r+0x2f0>)
 8006792:	4602      	mov	r2, r0
 8006794:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006798:	e6c0      	b.n	800651c <_dtoa_r+0x34>
 800679a:	2301      	movs	r3, #1
 800679c:	e7df      	b.n	800675e <_dtoa_r+0x276>
 800679e:	bf00      	nop
 80067a0:	636f4361 	.word	0x636f4361
 80067a4:	3fd287a7 	.word	0x3fd287a7
 80067a8:	8b60c8b3 	.word	0x8b60c8b3
 80067ac:	3fc68a28 	.word	0x3fc68a28
 80067b0:	509f79fb 	.word	0x509f79fb
 80067b4:	3fd34413 	.word	0x3fd34413
 80067b8:	0800890d 	.word	0x0800890d
 80067bc:	08008924 	.word	0x08008924
 80067c0:	7ff00000 	.word	0x7ff00000
 80067c4:	08008909 	.word	0x08008909
 80067c8:	08008900 	.word	0x08008900
 80067cc:	080088dd 	.word	0x080088dd
 80067d0:	3ff80000 	.word	0x3ff80000
 80067d4:	08008a78 	.word	0x08008a78
 80067d8:	0800897f 	.word	0x0800897f
 80067dc:	2501      	movs	r5, #1
 80067de:	2300      	movs	r3, #0
 80067e0:	9306      	str	r3, [sp, #24]
 80067e2:	9508      	str	r5, [sp, #32]
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	2312      	movs	r3, #18
 80067f0:	e7b0      	b.n	8006754 <_dtoa_r+0x26c>
 80067f2:	2301      	movs	r3, #1
 80067f4:	9308      	str	r3, [sp, #32]
 80067f6:	e7f5      	b.n	80067e4 <_dtoa_r+0x2fc>
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067fe:	e7b8      	b.n	8006772 <_dtoa_r+0x28a>
 8006800:	3101      	adds	r1, #1
 8006802:	6041      	str	r1, [r0, #4]
 8006804:	0052      	lsls	r2, r2, #1
 8006806:	e7b8      	b.n	800677a <_dtoa_r+0x292>
 8006808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	2b0e      	cmp	r3, #14
 8006812:	f200 809d 	bhi.w	8006950 <_dtoa_r+0x468>
 8006816:	2d00      	cmp	r5, #0
 8006818:	f000 809a 	beq.w	8006950 <_dtoa_r+0x468>
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	dd32      	ble.n	8006888 <_dtoa_r+0x3a0>
 8006822:	4ab7      	ldr	r2, [pc, #732]	; (8006b00 <_dtoa_r+0x618>)
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800682c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006830:	9b00      	ldr	r3, [sp, #0]
 8006832:	05d8      	lsls	r0, r3, #23
 8006834:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006838:	d516      	bpl.n	8006868 <_dtoa_r+0x380>
 800683a:	4bb2      	ldr	r3, [pc, #712]	; (8006b04 <_dtoa_r+0x61c>)
 800683c:	ec51 0b19 	vmov	r0, r1, d9
 8006840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006844:	f7fa f80a 	bl	800085c <__aeabi_ddiv>
 8006848:	f007 070f 	and.w	r7, r7, #15
 800684c:	4682      	mov	sl, r0
 800684e:	468b      	mov	fp, r1
 8006850:	2503      	movs	r5, #3
 8006852:	4eac      	ldr	r6, [pc, #688]	; (8006b04 <_dtoa_r+0x61c>)
 8006854:	b957      	cbnz	r7, 800686c <_dtoa_r+0x384>
 8006856:	4642      	mov	r2, r8
 8006858:	464b      	mov	r3, r9
 800685a:	4650      	mov	r0, sl
 800685c:	4659      	mov	r1, fp
 800685e:	f7f9 fffd 	bl	800085c <__aeabi_ddiv>
 8006862:	4682      	mov	sl, r0
 8006864:	468b      	mov	fp, r1
 8006866:	e028      	b.n	80068ba <_dtoa_r+0x3d2>
 8006868:	2502      	movs	r5, #2
 800686a:	e7f2      	b.n	8006852 <_dtoa_r+0x36a>
 800686c:	07f9      	lsls	r1, r7, #31
 800686e:	d508      	bpl.n	8006882 <_dtoa_r+0x39a>
 8006870:	4640      	mov	r0, r8
 8006872:	4649      	mov	r1, r9
 8006874:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006878:	f7f9 fec6 	bl	8000608 <__aeabi_dmul>
 800687c:	3501      	adds	r5, #1
 800687e:	4680      	mov	r8, r0
 8006880:	4689      	mov	r9, r1
 8006882:	107f      	asrs	r7, r7, #1
 8006884:	3608      	adds	r6, #8
 8006886:	e7e5      	b.n	8006854 <_dtoa_r+0x36c>
 8006888:	f000 809b 	beq.w	80069c2 <_dtoa_r+0x4da>
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	4f9d      	ldr	r7, [pc, #628]	; (8006b04 <_dtoa_r+0x61c>)
 8006890:	425e      	negs	r6, r3
 8006892:	4b9b      	ldr	r3, [pc, #620]	; (8006b00 <_dtoa_r+0x618>)
 8006894:	f006 020f 	and.w	r2, r6, #15
 8006898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	ec51 0b19 	vmov	r0, r1, d9
 80068a4:	f7f9 feb0 	bl	8000608 <__aeabi_dmul>
 80068a8:	1136      	asrs	r6, r6, #4
 80068aa:	4682      	mov	sl, r0
 80068ac:	468b      	mov	fp, r1
 80068ae:	2300      	movs	r3, #0
 80068b0:	2502      	movs	r5, #2
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	d17a      	bne.n	80069ac <_dtoa_r+0x4c4>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1d3      	bne.n	8006862 <_dtoa_r+0x37a>
 80068ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8082 	beq.w	80069c6 <_dtoa_r+0x4de>
 80068c2:	4b91      	ldr	r3, [pc, #580]	; (8006b08 <_dtoa_r+0x620>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	4650      	mov	r0, sl
 80068c8:	4659      	mov	r1, fp
 80068ca:	f7fa f90f 	bl	8000aec <__aeabi_dcmplt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d079      	beq.n	80069c6 <_dtoa_r+0x4de>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d076      	beq.n	80069c6 <_dtoa_r+0x4de>
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dd36      	ble.n	800694c <_dtoa_r+0x464>
 80068de:	9b00      	ldr	r3, [sp, #0]
 80068e0:	4650      	mov	r0, sl
 80068e2:	4659      	mov	r1, fp
 80068e4:	1e5f      	subs	r7, r3, #1
 80068e6:	2200      	movs	r2, #0
 80068e8:	4b88      	ldr	r3, [pc, #544]	; (8006b0c <_dtoa_r+0x624>)
 80068ea:	f7f9 fe8d 	bl	8000608 <__aeabi_dmul>
 80068ee:	9e02      	ldr	r6, [sp, #8]
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	3501      	adds	r5, #1
 80068f6:	4628      	mov	r0, r5
 80068f8:	f7f9 fe1c 	bl	8000534 <__aeabi_i2d>
 80068fc:	4652      	mov	r2, sl
 80068fe:	465b      	mov	r3, fp
 8006900:	f7f9 fe82 	bl	8000608 <__aeabi_dmul>
 8006904:	4b82      	ldr	r3, [pc, #520]	; (8006b10 <_dtoa_r+0x628>)
 8006906:	2200      	movs	r2, #0
 8006908:	f7f9 fcc8 	bl	800029c <__adddf3>
 800690c:	46d0      	mov	r8, sl
 800690e:	46d9      	mov	r9, fp
 8006910:	4682      	mov	sl, r0
 8006912:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006916:	2e00      	cmp	r6, #0
 8006918:	d158      	bne.n	80069cc <_dtoa_r+0x4e4>
 800691a:	4b7e      	ldr	r3, [pc, #504]	; (8006b14 <_dtoa_r+0x62c>)
 800691c:	2200      	movs	r2, #0
 800691e:	4640      	mov	r0, r8
 8006920:	4649      	mov	r1, r9
 8006922:	f7f9 fcb9 	bl	8000298 <__aeabi_dsub>
 8006926:	4652      	mov	r2, sl
 8006928:	465b      	mov	r3, fp
 800692a:	4680      	mov	r8, r0
 800692c:	4689      	mov	r9, r1
 800692e:	f7fa f8fb 	bl	8000b28 <__aeabi_dcmpgt>
 8006932:	2800      	cmp	r0, #0
 8006934:	f040 8295 	bne.w	8006e62 <_dtoa_r+0x97a>
 8006938:	4652      	mov	r2, sl
 800693a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7fa f8d3 	bl	8000aec <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 8289 	bne.w	8006e5e <_dtoa_r+0x976>
 800694c:	ec5b ab19 	vmov	sl, fp, d9
 8006950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006952:	2b00      	cmp	r3, #0
 8006954:	f2c0 8148 	blt.w	8006be8 <_dtoa_r+0x700>
 8006958:	9a00      	ldr	r2, [sp, #0]
 800695a:	2a0e      	cmp	r2, #14
 800695c:	f300 8144 	bgt.w	8006be8 <_dtoa_r+0x700>
 8006960:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <_dtoa_r+0x618>)
 8006962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006966:	e9d3 8900 	ldrd	r8, r9, [r3]
 800696a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	f280 80d5 	bge.w	8006b1c <_dtoa_r+0x634>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f300 80d1 	bgt.w	8006b1c <_dtoa_r+0x634>
 800697a:	f040 826f 	bne.w	8006e5c <_dtoa_r+0x974>
 800697e:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <_dtoa_r+0x62c>)
 8006980:	2200      	movs	r2, #0
 8006982:	4640      	mov	r0, r8
 8006984:	4649      	mov	r1, r9
 8006986:	f7f9 fe3f 	bl	8000608 <__aeabi_dmul>
 800698a:	4652      	mov	r2, sl
 800698c:	465b      	mov	r3, fp
 800698e:	f7fa f8c1 	bl	8000b14 <__aeabi_dcmpge>
 8006992:	9e03      	ldr	r6, [sp, #12]
 8006994:	4637      	mov	r7, r6
 8006996:	2800      	cmp	r0, #0
 8006998:	f040 8245 	bne.w	8006e26 <_dtoa_r+0x93e>
 800699c:	9d01      	ldr	r5, [sp, #4]
 800699e:	2331      	movs	r3, #49	; 0x31
 80069a0:	f805 3b01 	strb.w	r3, [r5], #1
 80069a4:	9b00      	ldr	r3, [sp, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	e240      	b.n	8006e2e <_dtoa_r+0x946>
 80069ac:	07f2      	lsls	r2, r6, #31
 80069ae:	d505      	bpl.n	80069bc <_dtoa_r+0x4d4>
 80069b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b4:	f7f9 fe28 	bl	8000608 <__aeabi_dmul>
 80069b8:	3501      	adds	r5, #1
 80069ba:	2301      	movs	r3, #1
 80069bc:	1076      	asrs	r6, r6, #1
 80069be:	3708      	adds	r7, #8
 80069c0:	e777      	b.n	80068b2 <_dtoa_r+0x3ca>
 80069c2:	2502      	movs	r5, #2
 80069c4:	e779      	b.n	80068ba <_dtoa_r+0x3d2>
 80069c6:	9f00      	ldr	r7, [sp, #0]
 80069c8:	9e03      	ldr	r6, [sp, #12]
 80069ca:	e794      	b.n	80068f6 <_dtoa_r+0x40e>
 80069cc:	9901      	ldr	r1, [sp, #4]
 80069ce:	4b4c      	ldr	r3, [pc, #304]	; (8006b00 <_dtoa_r+0x618>)
 80069d0:	4431      	add	r1, r6
 80069d2:	910d      	str	r1, [sp, #52]	; 0x34
 80069d4:	9908      	ldr	r1, [sp, #32]
 80069d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069de:	2900      	cmp	r1, #0
 80069e0:	d043      	beq.n	8006a6a <_dtoa_r+0x582>
 80069e2:	494d      	ldr	r1, [pc, #308]	; (8006b18 <_dtoa_r+0x630>)
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7f9 ff39 	bl	800085c <__aeabi_ddiv>
 80069ea:	4652      	mov	r2, sl
 80069ec:	465b      	mov	r3, fp
 80069ee:	f7f9 fc53 	bl	8000298 <__aeabi_dsub>
 80069f2:	9d01      	ldr	r5, [sp, #4]
 80069f4:	4682      	mov	sl, r0
 80069f6:	468b      	mov	fp, r1
 80069f8:	4649      	mov	r1, r9
 80069fa:	4640      	mov	r0, r8
 80069fc:	f7fa f8b4 	bl	8000b68 <__aeabi_d2iz>
 8006a00:	4606      	mov	r6, r0
 8006a02:	f7f9 fd97 	bl	8000534 <__aeabi_i2d>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7f9 fc43 	bl	8000298 <__aeabi_dsub>
 8006a12:	3630      	adds	r6, #48	; 0x30
 8006a14:	f805 6b01 	strb.w	r6, [r5], #1
 8006a18:	4652      	mov	r2, sl
 8006a1a:	465b      	mov	r3, fp
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	4689      	mov	r9, r1
 8006a20:	f7fa f864 	bl	8000aec <__aeabi_dcmplt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d163      	bne.n	8006af0 <_dtoa_r+0x608>
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	4936      	ldr	r1, [pc, #216]	; (8006b08 <_dtoa_r+0x620>)
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f7f9 fc32 	bl	8000298 <__aeabi_dsub>
 8006a34:	4652      	mov	r2, sl
 8006a36:	465b      	mov	r3, fp
 8006a38:	f7fa f858 	bl	8000aec <__aeabi_dcmplt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f040 80b5 	bne.w	8006bac <_dtoa_r+0x6c4>
 8006a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d081      	beq.n	800694c <_dtoa_r+0x464>
 8006a48:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <_dtoa_r+0x624>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	4659      	mov	r1, fp
 8006a50:	f7f9 fdda 	bl	8000608 <__aeabi_dmul>
 8006a54:	4b2d      	ldr	r3, [pc, #180]	; (8006b0c <_dtoa_r+0x624>)
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f7f9 fdd2 	bl	8000608 <__aeabi_dmul>
 8006a64:	4680      	mov	r8, r0
 8006a66:	4689      	mov	r9, r1
 8006a68:	e7c6      	b.n	80069f8 <_dtoa_r+0x510>
 8006a6a:	4650      	mov	r0, sl
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	f7f9 fdcb 	bl	8000608 <__aeabi_dmul>
 8006a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a74:	9d01      	ldr	r5, [sp, #4]
 8006a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a78:	4682      	mov	sl, r0
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	4640      	mov	r0, r8
 8006a80:	f7fa f872 	bl	8000b68 <__aeabi_d2iz>
 8006a84:	4606      	mov	r6, r0
 8006a86:	f7f9 fd55 	bl	8000534 <__aeabi_i2d>
 8006a8a:	3630      	adds	r6, #48	; 0x30
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4640      	mov	r0, r8
 8006a92:	4649      	mov	r1, r9
 8006a94:	f7f9 fc00 	bl	8000298 <__aeabi_dsub>
 8006a98:	f805 6b01 	strb.w	r6, [r5], #1
 8006a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	4689      	mov	r9, r1
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	d124      	bne.n	8006af4 <_dtoa_r+0x60c>
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <_dtoa_r+0x630>)
 8006aac:	4650      	mov	r0, sl
 8006aae:	4659      	mov	r1, fp
 8006ab0:	f7f9 fbf4 	bl	800029c <__adddf3>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7fa f834 	bl	8000b28 <__aeabi_dcmpgt>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d173      	bne.n	8006bac <_dtoa_r+0x6c4>
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	4913      	ldr	r1, [pc, #76]	; (8006b18 <_dtoa_r+0x630>)
 8006aca:	2000      	movs	r0, #0
 8006acc:	f7f9 fbe4 	bl	8000298 <__aeabi_dsub>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7fa f808 	bl	8000aec <__aeabi_dcmplt>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f43f af35 	beq.w	800694c <_dtoa_r+0x464>
 8006ae2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006ae4:	1e6b      	subs	r3, r5, #1
 8006ae6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ae8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d0f8      	beq.n	8006ae2 <_dtoa_r+0x5fa>
 8006af0:	9700      	str	r7, [sp, #0]
 8006af2:	e049      	b.n	8006b88 <_dtoa_r+0x6a0>
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <_dtoa_r+0x624>)
 8006af6:	f7f9 fd87 	bl	8000608 <__aeabi_dmul>
 8006afa:	4680      	mov	r8, r0
 8006afc:	4689      	mov	r9, r1
 8006afe:	e7bd      	b.n	8006a7c <_dtoa_r+0x594>
 8006b00:	08008a78 	.word	0x08008a78
 8006b04:	08008a50 	.word	0x08008a50
 8006b08:	3ff00000 	.word	0x3ff00000
 8006b0c:	40240000 	.word	0x40240000
 8006b10:	401c0000 	.word	0x401c0000
 8006b14:	40140000 	.word	0x40140000
 8006b18:	3fe00000 	.word	0x3fe00000
 8006b1c:	9d01      	ldr	r5, [sp, #4]
 8006b1e:	4656      	mov	r6, sl
 8006b20:	465f      	mov	r7, fp
 8006b22:	4642      	mov	r2, r8
 8006b24:	464b      	mov	r3, r9
 8006b26:	4630      	mov	r0, r6
 8006b28:	4639      	mov	r1, r7
 8006b2a:	f7f9 fe97 	bl	800085c <__aeabi_ddiv>
 8006b2e:	f7fa f81b 	bl	8000b68 <__aeabi_d2iz>
 8006b32:	4682      	mov	sl, r0
 8006b34:	f7f9 fcfe 	bl	8000534 <__aeabi_i2d>
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	f7f9 fd64 	bl	8000608 <__aeabi_dmul>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b4c:	f7f9 fba4 	bl	8000298 <__aeabi_dsub>
 8006b50:	f805 6b01 	strb.w	r6, [r5], #1
 8006b54:	9e01      	ldr	r6, [sp, #4]
 8006b56:	9f03      	ldr	r7, [sp, #12]
 8006b58:	1bae      	subs	r6, r5, r6
 8006b5a:	42b7      	cmp	r7, r6
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	d135      	bne.n	8006bce <_dtoa_r+0x6e6>
 8006b62:	f7f9 fb9b 	bl	800029c <__adddf3>
 8006b66:	4642      	mov	r2, r8
 8006b68:	464b      	mov	r3, r9
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	460f      	mov	r7, r1
 8006b6e:	f7f9 ffdb 	bl	8000b28 <__aeabi_dcmpgt>
 8006b72:	b9d0      	cbnz	r0, 8006baa <_dtoa_r+0x6c2>
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b80:	b110      	cbz	r0, 8006b88 <_dtoa_r+0x6a0>
 8006b82:	f01a 0f01 	tst.w	sl, #1
 8006b86:	d110      	bne.n	8006baa <_dtoa_r+0x6c2>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	ee18 1a10 	vmov	r1, s16
 8006b8e:	f000 fbed 	bl	800736c <_Bfree>
 8006b92:	2300      	movs	r3, #0
 8006b94:	9800      	ldr	r0, [sp, #0]
 8006b96:	702b      	strb	r3, [r5, #0]
 8006b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	6018      	str	r0, [r3, #0]
 8006b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f43f acf1 	beq.w	8006588 <_dtoa_r+0xa0>
 8006ba6:	601d      	str	r5, [r3, #0]
 8006ba8:	e4ee      	b.n	8006588 <_dtoa_r+0xa0>
 8006baa:	9f00      	ldr	r7, [sp, #0]
 8006bac:	462b      	mov	r3, r5
 8006bae:	461d      	mov	r5, r3
 8006bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bb4:	2a39      	cmp	r2, #57	; 0x39
 8006bb6:	d106      	bne.n	8006bc6 <_dtoa_r+0x6de>
 8006bb8:	9a01      	ldr	r2, [sp, #4]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d1f7      	bne.n	8006bae <_dtoa_r+0x6c6>
 8006bbe:	9901      	ldr	r1, [sp, #4]
 8006bc0:	2230      	movs	r2, #48	; 0x30
 8006bc2:	3701      	adds	r7, #1
 8006bc4:	700a      	strb	r2, [r1, #0]
 8006bc6:	781a      	ldrb	r2, [r3, #0]
 8006bc8:	3201      	adds	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e790      	b.n	8006af0 <_dtoa_r+0x608>
 8006bce:	4ba6      	ldr	r3, [pc, #664]	; (8006e68 <_dtoa_r+0x980>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f7f9 fd19 	bl	8000608 <__aeabi_dmul>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2300      	movs	r3, #0
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460f      	mov	r7, r1
 8006bde:	f7f9 ff7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d09d      	beq.n	8006b22 <_dtoa_r+0x63a>
 8006be6:	e7cf      	b.n	8006b88 <_dtoa_r+0x6a0>
 8006be8:	9a08      	ldr	r2, [sp, #32]
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	f000 80d7 	beq.w	8006d9e <_dtoa_r+0x8b6>
 8006bf0:	9a06      	ldr	r2, [sp, #24]
 8006bf2:	2a01      	cmp	r2, #1
 8006bf4:	f300 80ba 	bgt.w	8006d6c <_dtoa_r+0x884>
 8006bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	f000 80b2 	beq.w	8006d64 <_dtoa_r+0x87c>
 8006c00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c04:	9e07      	ldr	r6, [sp, #28]
 8006c06:	9d04      	ldr	r5, [sp, #16]
 8006c08:	9a04      	ldr	r2, [sp, #16]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	9204      	str	r2, [sp, #16]
 8006c0e:	9a05      	ldr	r2, [sp, #20]
 8006c10:	2101      	movs	r1, #1
 8006c12:	441a      	add	r2, r3
 8006c14:	4620      	mov	r0, r4
 8006c16:	9205      	str	r2, [sp, #20]
 8006c18:	f000 fc60 	bl	80074dc <__i2b>
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	dd0c      	ble.n	8006c3c <_dtoa_r+0x754>
 8006c22:	9b05      	ldr	r3, [sp, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dd09      	ble.n	8006c3c <_dtoa_r+0x754>
 8006c28:	42ab      	cmp	r3, r5
 8006c2a:	9a04      	ldr	r2, [sp, #16]
 8006c2c:	bfa8      	it	ge
 8006c2e:	462b      	movge	r3, r5
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	9204      	str	r2, [sp, #16]
 8006c34:	9a05      	ldr	r2, [sp, #20]
 8006c36:	1aed      	subs	r5, r5, r3
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	9b07      	ldr	r3, [sp, #28]
 8006c3e:	b31b      	cbz	r3, 8006c88 <_dtoa_r+0x7a0>
 8006c40:	9b08      	ldr	r3, [sp, #32]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 80af 	beq.w	8006da6 <_dtoa_r+0x8be>
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	dd13      	ble.n	8006c74 <_dtoa_r+0x78c>
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4632      	mov	r2, r6
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fd03 	bl	800765c <__pow5mult>
 8006c56:	ee18 2a10 	vmov	r2, s16
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fc52 	bl	8007508 <__multiply>
 8006c64:	ee18 1a10 	vmov	r1, s16
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 fb7e 	bl	800736c <_Bfree>
 8006c70:	ee08 8a10 	vmov	s16, r8
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	1b9a      	subs	r2, r3, r6
 8006c78:	d006      	beq.n	8006c88 <_dtoa_r+0x7a0>
 8006c7a:	ee18 1a10 	vmov	r1, s16
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fcec 	bl	800765c <__pow5mult>
 8006c84:	ee08 0a10 	vmov	s16, r0
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fc26 	bl	80074dc <__i2b>
 8006c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	4606      	mov	r6, r0
 8006c96:	f340 8088 	ble.w	8006daa <_dtoa_r+0x8c2>
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 fcdc 	bl	800765c <__pow5mult>
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	4606      	mov	r6, r0
 8006caa:	f340 8081 	ble.w	8006db0 <_dtoa_r+0x8c8>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	6933      	ldr	r3, [r6, #16]
 8006cb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cb8:	6918      	ldr	r0, [r3, #16]
 8006cba:	f000 fbbf 	bl	800743c <__hi0bits>
 8006cbe:	f1c0 0020 	rsb	r0, r0, #32
 8006cc2:	9b05      	ldr	r3, [sp, #20]
 8006cc4:	4418      	add	r0, r3
 8006cc6:	f010 001f 	ands.w	r0, r0, #31
 8006cca:	f000 8092 	beq.w	8006df2 <_dtoa_r+0x90a>
 8006cce:	f1c0 0320 	rsb	r3, r0, #32
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	f340 808a 	ble.w	8006dec <_dtoa_r+0x904>
 8006cd8:	f1c0 001c 	rsb	r0, r0, #28
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	4403      	add	r3, r0
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	4403      	add	r3, r0
 8006ce6:	4405      	add	r5, r0
 8006ce8:	9305      	str	r3, [sp, #20]
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dd07      	ble.n	8006d00 <_dtoa_r+0x818>
 8006cf0:	ee18 1a10 	vmov	r1, s16
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 fd0a 	bl	8007710 <__lshift>
 8006cfc:	ee08 0a10 	vmov	s16, r0
 8006d00:	9b05      	ldr	r3, [sp, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dd05      	ble.n	8006d12 <_dtoa_r+0x82a>
 8006d06:	4631      	mov	r1, r6
 8006d08:	461a      	mov	r2, r3
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 fd00 	bl	8007710 <__lshift>
 8006d10:	4606      	mov	r6, r0
 8006d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d06e      	beq.n	8006df6 <_dtoa_r+0x90e>
 8006d18:	ee18 0a10 	vmov	r0, s16
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	f000 fd67 	bl	80077f0 <__mcmp>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	da67      	bge.n	8006df6 <_dtoa_r+0x90e>
 8006d26:	9b00      	ldr	r3, [sp, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	ee18 1a10 	vmov	r1, s16
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	220a      	movs	r2, #10
 8006d32:	2300      	movs	r3, #0
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fb3b 	bl	80073b0 <__multadd>
 8006d3a:	9b08      	ldr	r3, [sp, #32]
 8006d3c:	ee08 0a10 	vmov	s16, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 81b1 	beq.w	80070a8 <_dtoa_r+0xbc0>
 8006d46:	2300      	movs	r3, #0
 8006d48:	4639      	mov	r1, r7
 8006d4a:	220a      	movs	r2, #10
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fb2f 	bl	80073b0 <__multadd>
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	4607      	mov	r7, r0
 8006d58:	f300 808e 	bgt.w	8006e78 <_dtoa_r+0x990>
 8006d5c:	9b06      	ldr	r3, [sp, #24]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	dc51      	bgt.n	8006e06 <_dtoa_r+0x91e>
 8006d62:	e089      	b.n	8006e78 <_dtoa_r+0x990>
 8006d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d6a:	e74b      	b.n	8006c04 <_dtoa_r+0x71c>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1e5e      	subs	r6, r3, #1
 8006d70:	9b07      	ldr	r3, [sp, #28]
 8006d72:	42b3      	cmp	r3, r6
 8006d74:	bfbf      	itttt	lt
 8006d76:	9b07      	ldrlt	r3, [sp, #28]
 8006d78:	9607      	strlt	r6, [sp, #28]
 8006d7a:	1af2      	sublt	r2, r6, r3
 8006d7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d7e:	bfb6      	itet	lt
 8006d80:	189b      	addlt	r3, r3, r2
 8006d82:	1b9e      	subge	r6, r3, r6
 8006d84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	bfb8      	it	lt
 8006d8a:	2600      	movlt	r6, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfb7      	itett	lt
 8006d90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d98:	1a9d      	sublt	r5, r3, r2
 8006d9a:	2300      	movlt	r3, #0
 8006d9c:	e734      	b.n	8006c08 <_dtoa_r+0x720>
 8006d9e:	9e07      	ldr	r6, [sp, #28]
 8006da0:	9d04      	ldr	r5, [sp, #16]
 8006da2:	9f08      	ldr	r7, [sp, #32]
 8006da4:	e73b      	b.n	8006c1e <_dtoa_r+0x736>
 8006da6:	9a07      	ldr	r2, [sp, #28]
 8006da8:	e767      	b.n	8006c7a <_dtoa_r+0x792>
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	dc18      	bgt.n	8006de2 <_dtoa_r+0x8fa>
 8006db0:	f1ba 0f00 	cmp.w	sl, #0
 8006db4:	d115      	bne.n	8006de2 <_dtoa_r+0x8fa>
 8006db6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dba:	b993      	cbnz	r3, 8006de2 <_dtoa_r+0x8fa>
 8006dbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dc0:	0d1b      	lsrs	r3, r3, #20
 8006dc2:	051b      	lsls	r3, r3, #20
 8006dc4:	b183      	cbz	r3, 8006de8 <_dtoa_r+0x900>
 8006dc6:	9b04      	ldr	r3, [sp, #16]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	9304      	str	r3, [sp, #16]
 8006dcc:	9b05      	ldr	r3, [sp, #20]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	9305      	str	r3, [sp, #20]
 8006dd2:	f04f 0801 	mov.w	r8, #1
 8006dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f47f af6a 	bne.w	8006cb2 <_dtoa_r+0x7ca>
 8006dde:	2001      	movs	r0, #1
 8006de0:	e76f      	b.n	8006cc2 <_dtoa_r+0x7da>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	e7f6      	b.n	8006dd6 <_dtoa_r+0x8ee>
 8006de8:	4698      	mov	r8, r3
 8006dea:	e7f4      	b.n	8006dd6 <_dtoa_r+0x8ee>
 8006dec:	f43f af7d 	beq.w	8006cea <_dtoa_r+0x802>
 8006df0:	4618      	mov	r0, r3
 8006df2:	301c      	adds	r0, #28
 8006df4:	e772      	b.n	8006cdc <_dtoa_r+0x7f4>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dc37      	bgt.n	8006e6c <_dtoa_r+0x984>
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	dd34      	ble.n	8006e6c <_dtoa_r+0x984>
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	9302      	str	r3, [sp, #8]
 8006e06:	9b02      	ldr	r3, [sp, #8]
 8006e08:	b96b      	cbnz	r3, 8006e26 <_dtoa_r+0x93e>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	2205      	movs	r2, #5
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 face 	bl	80073b0 <__multadd>
 8006e14:	4601      	mov	r1, r0
 8006e16:	4606      	mov	r6, r0
 8006e18:	ee18 0a10 	vmov	r0, s16
 8006e1c:	f000 fce8 	bl	80077f0 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f73f adbb 	bgt.w	800699c <_dtoa_r+0x4b4>
 8006e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e28:	9d01      	ldr	r5, [sp, #4]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	4631      	mov	r1, r6
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 fa99 	bl	800736c <_Bfree>
 8006e3a:	2f00      	cmp	r7, #0
 8006e3c:	f43f aea4 	beq.w	8006b88 <_dtoa_r+0x6a0>
 8006e40:	f1b8 0f00 	cmp.w	r8, #0
 8006e44:	d005      	beq.n	8006e52 <_dtoa_r+0x96a>
 8006e46:	45b8      	cmp	r8, r7
 8006e48:	d003      	beq.n	8006e52 <_dtoa_r+0x96a>
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 fa8d 	bl	800736c <_Bfree>
 8006e52:	4639      	mov	r1, r7
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fa89 	bl	800736c <_Bfree>
 8006e5a:	e695      	b.n	8006b88 <_dtoa_r+0x6a0>
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	4637      	mov	r7, r6
 8006e60:	e7e1      	b.n	8006e26 <_dtoa_r+0x93e>
 8006e62:	9700      	str	r7, [sp, #0]
 8006e64:	4637      	mov	r7, r6
 8006e66:	e599      	b.n	800699c <_dtoa_r+0x4b4>
 8006e68:	40240000 	.word	0x40240000
 8006e6c:	9b08      	ldr	r3, [sp, #32]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 80ca 	beq.w	8007008 <_dtoa_r+0xb20>
 8006e74:	9b03      	ldr	r3, [sp, #12]
 8006e76:	9302      	str	r3, [sp, #8]
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	dd05      	ble.n	8006e88 <_dtoa_r+0x9a0>
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fc45 	bl	8007710 <__lshift>
 8006e86:	4607      	mov	r7, r0
 8006e88:	f1b8 0f00 	cmp.w	r8, #0
 8006e8c:	d05b      	beq.n	8006f46 <_dtoa_r+0xa5e>
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fa2b 	bl	80072ec <_Balloc>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b928      	cbnz	r0, 8006ea6 <_dtoa_r+0x9be>
 8006e9a:	4b87      	ldr	r3, [pc, #540]	; (80070b8 <_dtoa_r+0xbd0>)
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ea2:	f7ff bb3b 	b.w	800651c <_dtoa_r+0x34>
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	3202      	adds	r2, #2
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	f107 010c 	add.w	r1, r7, #12
 8006eb0:	300c      	adds	r0, #12
 8006eb2:	f000 fa0d 	bl	80072d0 <memcpy>
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fc28 	bl	8007710 <__lshift>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	f103 0901 	add.w	r9, r3, #1
 8006ec6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	f00a 0301 	and.w	r3, sl, #1
 8006ed2:	46b8      	mov	r8, r7
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	4631      	mov	r1, r6
 8006eda:	ee18 0a10 	vmov	r0, s16
 8006ede:	f7ff fa77 	bl	80063d0 <quorem>
 8006ee2:	4641      	mov	r1, r8
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eea:	ee18 0a10 	vmov	r0, s16
 8006eee:	f000 fc7f 	bl	80077f0 <__mcmp>
 8006ef2:	463a      	mov	r2, r7
 8006ef4:	9003      	str	r0, [sp, #12]
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fc95 	bl	8007828 <__mdiff>
 8006efe:	68c2      	ldr	r2, [r0, #12]
 8006f00:	f109 3bff 	add.w	fp, r9, #4294967295
 8006f04:	4605      	mov	r5, r0
 8006f06:	bb02      	cbnz	r2, 8006f4a <_dtoa_r+0xa62>
 8006f08:	4601      	mov	r1, r0
 8006f0a:	ee18 0a10 	vmov	r0, s16
 8006f0e:	f000 fc6f 	bl	80077f0 <__mcmp>
 8006f12:	4602      	mov	r2, r0
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	9207      	str	r2, [sp, #28]
 8006f1a:	f000 fa27 	bl	800736c <_Bfree>
 8006f1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f22:	ea43 0102 	orr.w	r1, r3, r2
 8006f26:	9b04      	ldr	r3, [sp, #16]
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	464d      	mov	r5, r9
 8006f2c:	d10f      	bne.n	8006f4e <_dtoa_r+0xa66>
 8006f2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f32:	d02a      	beq.n	8006f8a <_dtoa_r+0xaa2>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	dd02      	ble.n	8006f40 <_dtoa_r+0xa58>
 8006f3a:	9b02      	ldr	r3, [sp, #8]
 8006f3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f40:	f88b a000 	strb.w	sl, [fp]
 8006f44:	e775      	b.n	8006e32 <_dtoa_r+0x94a>
 8006f46:	4638      	mov	r0, r7
 8006f48:	e7ba      	b.n	8006ec0 <_dtoa_r+0x9d8>
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	e7e2      	b.n	8006f14 <_dtoa_r+0xa2c>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db04      	blt.n	8006f5e <_dtoa_r+0xa76>
 8006f54:	9906      	ldr	r1, [sp, #24]
 8006f56:	430b      	orrs	r3, r1
 8006f58:	9904      	ldr	r1, [sp, #16]
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	d122      	bne.n	8006fa4 <_dtoa_r+0xabc>
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	ddee      	ble.n	8006f40 <_dtoa_r+0xa58>
 8006f62:	ee18 1a10 	vmov	r1, s16
 8006f66:	2201      	movs	r2, #1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fbd1 	bl	8007710 <__lshift>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	ee08 0a10 	vmov	s16, r0
 8006f74:	f000 fc3c 	bl	80077f0 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	dc03      	bgt.n	8006f84 <_dtoa_r+0xa9c>
 8006f7c:	d1e0      	bne.n	8006f40 <_dtoa_r+0xa58>
 8006f7e:	f01a 0f01 	tst.w	sl, #1
 8006f82:	d0dd      	beq.n	8006f40 <_dtoa_r+0xa58>
 8006f84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f88:	d1d7      	bne.n	8006f3a <_dtoa_r+0xa52>
 8006f8a:	2339      	movs	r3, #57	; 0x39
 8006f8c:	f88b 3000 	strb.w	r3, [fp]
 8006f90:	462b      	mov	r3, r5
 8006f92:	461d      	mov	r5, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f9a:	2a39      	cmp	r2, #57	; 0x39
 8006f9c:	d071      	beq.n	8007082 <_dtoa_r+0xb9a>
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	e746      	b.n	8006e32 <_dtoa_r+0x94a>
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	dd07      	ble.n	8006fb8 <_dtoa_r+0xad0>
 8006fa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fac:	d0ed      	beq.n	8006f8a <_dtoa_r+0xaa2>
 8006fae:	f10a 0301 	add.w	r3, sl, #1
 8006fb2:	f88b 3000 	strb.w	r3, [fp]
 8006fb6:	e73c      	b.n	8006e32 <_dtoa_r+0x94a>
 8006fb8:	9b05      	ldr	r3, [sp, #20]
 8006fba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006fbe:	4599      	cmp	r9, r3
 8006fc0:	d047      	beq.n	8007052 <_dtoa_r+0xb6a>
 8006fc2:	ee18 1a10 	vmov	r1, s16
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	220a      	movs	r2, #10
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 f9f0 	bl	80073b0 <__multadd>
 8006fd0:	45b8      	cmp	r8, r7
 8006fd2:	ee08 0a10 	vmov	s16, r0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	f04f 020a 	mov.w	r2, #10
 8006fde:	4641      	mov	r1, r8
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	d106      	bne.n	8006ff2 <_dtoa_r+0xb0a>
 8006fe4:	f000 f9e4 	bl	80073b0 <__multadd>
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4607      	mov	r7, r0
 8006fec:	f109 0901 	add.w	r9, r9, #1
 8006ff0:	e772      	b.n	8006ed8 <_dtoa_r+0x9f0>
 8006ff2:	f000 f9dd 	bl	80073b0 <__multadd>
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	220a      	movs	r2, #10
 8006ffe:	4620      	mov	r0, r4
 8007000:	f000 f9d6 	bl	80073b0 <__multadd>
 8007004:	4607      	mov	r7, r0
 8007006:	e7f1      	b.n	8006fec <_dtoa_r+0xb04>
 8007008:	9b03      	ldr	r3, [sp, #12]
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	9d01      	ldr	r5, [sp, #4]
 800700e:	ee18 0a10 	vmov	r0, s16
 8007012:	4631      	mov	r1, r6
 8007014:	f7ff f9dc 	bl	80063d0 <quorem>
 8007018:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	f805 ab01 	strb.w	sl, [r5], #1
 8007022:	1aea      	subs	r2, r5, r3
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	4293      	cmp	r3, r2
 8007028:	dd09      	ble.n	800703e <_dtoa_r+0xb56>
 800702a:	ee18 1a10 	vmov	r1, s16
 800702e:	2300      	movs	r3, #0
 8007030:	220a      	movs	r2, #10
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f9bc 	bl	80073b0 <__multadd>
 8007038:	ee08 0a10 	vmov	s16, r0
 800703c:	e7e7      	b.n	800700e <_dtoa_r+0xb26>
 800703e:	9b02      	ldr	r3, [sp, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	bfc8      	it	gt
 8007044:	461d      	movgt	r5, r3
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	bfd8      	it	le
 800704a:	2501      	movle	r5, #1
 800704c:	441d      	add	r5, r3
 800704e:	f04f 0800 	mov.w	r8, #0
 8007052:	ee18 1a10 	vmov	r1, s16
 8007056:	2201      	movs	r2, #1
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fb59 	bl	8007710 <__lshift>
 800705e:	4631      	mov	r1, r6
 8007060:	ee08 0a10 	vmov	s16, r0
 8007064:	f000 fbc4 	bl	80077f0 <__mcmp>
 8007068:	2800      	cmp	r0, #0
 800706a:	dc91      	bgt.n	8006f90 <_dtoa_r+0xaa8>
 800706c:	d102      	bne.n	8007074 <_dtoa_r+0xb8c>
 800706e:	f01a 0f01 	tst.w	sl, #1
 8007072:	d18d      	bne.n	8006f90 <_dtoa_r+0xaa8>
 8007074:	462b      	mov	r3, r5
 8007076:	461d      	mov	r5, r3
 8007078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800707c:	2a30      	cmp	r2, #48	; 0x30
 800707e:	d0fa      	beq.n	8007076 <_dtoa_r+0xb8e>
 8007080:	e6d7      	b.n	8006e32 <_dtoa_r+0x94a>
 8007082:	9a01      	ldr	r2, [sp, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d184      	bne.n	8006f92 <_dtoa_r+0xaaa>
 8007088:	9b00      	ldr	r3, [sp, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	2331      	movs	r3, #49	; 0x31
 8007090:	7013      	strb	r3, [r2, #0]
 8007092:	e6ce      	b.n	8006e32 <_dtoa_r+0x94a>
 8007094:	4b09      	ldr	r3, [pc, #36]	; (80070bc <_dtoa_r+0xbd4>)
 8007096:	f7ff ba95 	b.w	80065c4 <_dtoa_r+0xdc>
 800709a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800709c:	2b00      	cmp	r3, #0
 800709e:	f47f aa6e 	bne.w	800657e <_dtoa_r+0x96>
 80070a2:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <_dtoa_r+0xbd8>)
 80070a4:	f7ff ba8e 	b.w	80065c4 <_dtoa_r+0xdc>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	dcae      	bgt.n	800700c <_dtoa_r+0xb24>
 80070ae:	9b06      	ldr	r3, [sp, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f73f aea8 	bgt.w	8006e06 <_dtoa_r+0x91e>
 80070b6:	e7a9      	b.n	800700c <_dtoa_r+0xb24>
 80070b8:	0800897f 	.word	0x0800897f
 80070bc:	080088dc 	.word	0x080088dc
 80070c0:	08008900 	.word	0x08008900

080070c4 <std>:
 80070c4:	2300      	movs	r3, #0
 80070c6:	b510      	push	{r4, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	e9c0 3300 	strd	r3, r3, [r0]
 80070ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070d2:	6083      	str	r3, [r0, #8]
 80070d4:	8181      	strh	r1, [r0, #12]
 80070d6:	6643      	str	r3, [r0, #100]	; 0x64
 80070d8:	81c2      	strh	r2, [r0, #14]
 80070da:	6183      	str	r3, [r0, #24]
 80070dc:	4619      	mov	r1, r3
 80070de:	2208      	movs	r2, #8
 80070e0:	305c      	adds	r0, #92	; 0x5c
 80070e2:	f7fe fccb 	bl	8005a7c <memset>
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <std+0x38>)
 80070e8:	6263      	str	r3, [r4, #36]	; 0x24
 80070ea:	4b05      	ldr	r3, [pc, #20]	; (8007100 <std+0x3c>)
 80070ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <std+0x40>)
 80070f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <std+0x44>)
 80070f4:	6224      	str	r4, [r4, #32]
 80070f6:	6323      	str	r3, [r4, #48]	; 0x30
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	0800816d 	.word	0x0800816d
 8007100:	0800818f 	.word	0x0800818f
 8007104:	080081c7 	.word	0x080081c7
 8007108:	080081eb 	.word	0x080081eb

0800710c <_cleanup_r>:
 800710c:	4901      	ldr	r1, [pc, #4]	; (8007114 <_cleanup_r+0x8>)
 800710e:	f000 b8af 	b.w	8007270 <_fwalk_reent>
 8007112:	bf00      	nop
 8007114:	08008501 	.word	0x08008501

08007118 <__sfmoreglue>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	2268      	movs	r2, #104	; 0x68
 800711c:	1e4d      	subs	r5, r1, #1
 800711e:	4355      	muls	r5, r2
 8007120:	460e      	mov	r6, r1
 8007122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007126:	f000 fce7 	bl	8007af8 <_malloc_r>
 800712a:	4604      	mov	r4, r0
 800712c:	b140      	cbz	r0, 8007140 <__sfmoreglue+0x28>
 800712e:	2100      	movs	r1, #0
 8007130:	e9c0 1600 	strd	r1, r6, [r0]
 8007134:	300c      	adds	r0, #12
 8007136:	60a0      	str	r0, [r4, #8]
 8007138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800713c:	f7fe fc9e 	bl	8005a7c <memset>
 8007140:	4620      	mov	r0, r4
 8007142:	bd70      	pop	{r4, r5, r6, pc}

08007144 <__sfp_lock_acquire>:
 8007144:	4801      	ldr	r0, [pc, #4]	; (800714c <__sfp_lock_acquire+0x8>)
 8007146:	f000 b8b8 	b.w	80072ba <__retarget_lock_acquire_recursive>
 800714a:	bf00      	nop
 800714c:	20000401 	.word	0x20000401

08007150 <__sfp_lock_release>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__sfp_lock_release+0x8>)
 8007152:	f000 b8b3 	b.w	80072bc <__retarget_lock_release_recursive>
 8007156:	bf00      	nop
 8007158:	20000401 	.word	0x20000401

0800715c <__sinit_lock_acquire>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__sinit_lock_acquire+0x8>)
 800715e:	f000 b8ac 	b.w	80072ba <__retarget_lock_acquire_recursive>
 8007162:	bf00      	nop
 8007164:	20000402 	.word	0x20000402

08007168 <__sinit_lock_release>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__sinit_lock_release+0x8>)
 800716a:	f000 b8a7 	b.w	80072bc <__retarget_lock_release_recursive>
 800716e:	bf00      	nop
 8007170:	20000402 	.word	0x20000402

08007174 <__sinit>:
 8007174:	b510      	push	{r4, lr}
 8007176:	4604      	mov	r4, r0
 8007178:	f7ff fff0 	bl	800715c <__sinit_lock_acquire>
 800717c:	69a3      	ldr	r3, [r4, #24]
 800717e:	b11b      	cbz	r3, 8007188 <__sinit+0x14>
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007184:	f7ff bff0 	b.w	8007168 <__sinit_lock_release>
 8007188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800718c:	6523      	str	r3, [r4, #80]	; 0x50
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <__sinit+0x68>)
 8007190:	4a13      	ldr	r2, [pc, #76]	; (80071e0 <__sinit+0x6c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	62a2      	str	r2, [r4, #40]	; 0x28
 8007196:	42a3      	cmp	r3, r4
 8007198:	bf04      	itt	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	61a3      	streq	r3, [r4, #24]
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f820 	bl	80071e4 <__sfp>
 80071a4:	6060      	str	r0, [r4, #4]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 f81c 	bl	80071e4 <__sfp>
 80071ac:	60a0      	str	r0, [r4, #8]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f818 	bl	80071e4 <__sfp>
 80071b4:	2200      	movs	r2, #0
 80071b6:	60e0      	str	r0, [r4, #12]
 80071b8:	2104      	movs	r1, #4
 80071ba:	6860      	ldr	r0, [r4, #4]
 80071bc:	f7ff ff82 	bl	80070c4 <std>
 80071c0:	68a0      	ldr	r0, [r4, #8]
 80071c2:	2201      	movs	r2, #1
 80071c4:	2109      	movs	r1, #9
 80071c6:	f7ff ff7d 	bl	80070c4 <std>
 80071ca:	68e0      	ldr	r0, [r4, #12]
 80071cc:	2202      	movs	r2, #2
 80071ce:	2112      	movs	r1, #18
 80071d0:	f7ff ff78 	bl	80070c4 <std>
 80071d4:	2301      	movs	r3, #1
 80071d6:	61a3      	str	r3, [r4, #24]
 80071d8:	e7d2      	b.n	8007180 <__sinit+0xc>
 80071da:	bf00      	nop
 80071dc:	080088c8 	.word	0x080088c8
 80071e0:	0800710d 	.word	0x0800710d

080071e4 <__sfp>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	4607      	mov	r7, r0
 80071e8:	f7ff ffac 	bl	8007144 <__sfp_lock_acquire>
 80071ec:	4b1e      	ldr	r3, [pc, #120]	; (8007268 <__sfp+0x84>)
 80071ee:	681e      	ldr	r6, [r3, #0]
 80071f0:	69b3      	ldr	r3, [r6, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <__sfp+0x16>
 80071f4:	4630      	mov	r0, r6
 80071f6:	f7ff ffbd 	bl	8007174 <__sinit>
 80071fa:	3648      	adds	r6, #72	; 0x48
 80071fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007200:	3b01      	subs	r3, #1
 8007202:	d503      	bpl.n	800720c <__sfp+0x28>
 8007204:	6833      	ldr	r3, [r6, #0]
 8007206:	b30b      	cbz	r3, 800724c <__sfp+0x68>
 8007208:	6836      	ldr	r6, [r6, #0]
 800720a:	e7f7      	b.n	80071fc <__sfp+0x18>
 800720c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007210:	b9d5      	cbnz	r5, 8007248 <__sfp+0x64>
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <__sfp+0x88>)
 8007214:	60e3      	str	r3, [r4, #12]
 8007216:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800721a:	6665      	str	r5, [r4, #100]	; 0x64
 800721c:	f000 f84c 	bl	80072b8 <__retarget_lock_init_recursive>
 8007220:	f7ff ff96 	bl	8007150 <__sfp_lock_release>
 8007224:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007228:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800722c:	6025      	str	r5, [r4, #0]
 800722e:	61a5      	str	r5, [r4, #24]
 8007230:	2208      	movs	r2, #8
 8007232:	4629      	mov	r1, r5
 8007234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007238:	f7fe fc20 	bl	8005a7c <memset>
 800723c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007244:	4620      	mov	r0, r4
 8007246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007248:	3468      	adds	r4, #104	; 0x68
 800724a:	e7d9      	b.n	8007200 <__sfp+0x1c>
 800724c:	2104      	movs	r1, #4
 800724e:	4638      	mov	r0, r7
 8007250:	f7ff ff62 	bl	8007118 <__sfmoreglue>
 8007254:	4604      	mov	r4, r0
 8007256:	6030      	str	r0, [r6, #0]
 8007258:	2800      	cmp	r0, #0
 800725a:	d1d5      	bne.n	8007208 <__sfp+0x24>
 800725c:	f7ff ff78 	bl	8007150 <__sfp_lock_release>
 8007260:	230c      	movs	r3, #12
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	e7ee      	b.n	8007244 <__sfp+0x60>
 8007266:	bf00      	nop
 8007268:	080088c8 	.word	0x080088c8
 800726c:	ffff0001 	.word	0xffff0001

08007270 <_fwalk_reent>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4606      	mov	r6, r0
 8007276:	4688      	mov	r8, r1
 8007278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800727c:	2700      	movs	r7, #0
 800727e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007282:	f1b9 0901 	subs.w	r9, r9, #1
 8007286:	d505      	bpl.n	8007294 <_fwalk_reent+0x24>
 8007288:	6824      	ldr	r4, [r4, #0]
 800728a:	2c00      	cmp	r4, #0
 800728c:	d1f7      	bne.n	800727e <_fwalk_reent+0xe>
 800728e:	4638      	mov	r0, r7
 8007290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007294:	89ab      	ldrh	r3, [r5, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d907      	bls.n	80072aa <_fwalk_reent+0x3a>
 800729a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800729e:	3301      	adds	r3, #1
 80072a0:	d003      	beq.n	80072aa <_fwalk_reent+0x3a>
 80072a2:	4629      	mov	r1, r5
 80072a4:	4630      	mov	r0, r6
 80072a6:	47c0      	blx	r8
 80072a8:	4307      	orrs	r7, r0
 80072aa:	3568      	adds	r5, #104	; 0x68
 80072ac:	e7e9      	b.n	8007282 <_fwalk_reent+0x12>
	...

080072b0 <_localeconv_r>:
 80072b0:	4800      	ldr	r0, [pc, #0]	; (80072b4 <_localeconv_r+0x4>)
 80072b2:	4770      	bx	lr
 80072b4:	20000164 	.word	0x20000164

080072b8 <__retarget_lock_init_recursive>:
 80072b8:	4770      	bx	lr

080072ba <__retarget_lock_acquire_recursive>:
 80072ba:	4770      	bx	lr

080072bc <__retarget_lock_release_recursive>:
 80072bc:	4770      	bx	lr
	...

080072c0 <malloc>:
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <malloc+0xc>)
 80072c2:	4601      	mov	r1, r0
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	f000 bc17 	b.w	8007af8 <_malloc_r>
 80072ca:	bf00      	nop
 80072cc:	20000010 	.word	0x20000010

080072d0 <memcpy>:
 80072d0:	440a      	add	r2, r1
 80072d2:	4291      	cmp	r1, r2
 80072d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072d8:	d100      	bne.n	80072dc <memcpy+0xc>
 80072da:	4770      	bx	lr
 80072dc:	b510      	push	{r4, lr}
 80072de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072e6:	4291      	cmp	r1, r2
 80072e8:	d1f9      	bne.n	80072de <memcpy+0xe>
 80072ea:	bd10      	pop	{r4, pc}

080072ec <_Balloc>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072f0:	4604      	mov	r4, r0
 80072f2:	460d      	mov	r5, r1
 80072f4:	b976      	cbnz	r6, 8007314 <_Balloc+0x28>
 80072f6:	2010      	movs	r0, #16
 80072f8:	f7ff ffe2 	bl	80072c0 <malloc>
 80072fc:	4602      	mov	r2, r0
 80072fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007300:	b920      	cbnz	r0, 800730c <_Balloc+0x20>
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <_Balloc+0x78>)
 8007304:	4818      	ldr	r0, [pc, #96]	; (8007368 <_Balloc+0x7c>)
 8007306:	2166      	movs	r1, #102	; 0x66
 8007308:	f001 f846 	bl	8008398 <__assert_func>
 800730c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007310:	6006      	str	r6, [r0, #0]
 8007312:	60c6      	str	r6, [r0, #12]
 8007314:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007316:	68f3      	ldr	r3, [r6, #12]
 8007318:	b183      	cbz	r3, 800733c <_Balloc+0x50>
 800731a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007322:	b9b8      	cbnz	r0, 8007354 <_Balloc+0x68>
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f605 	lsl.w	r6, r1, r5
 800732a:	1d72      	adds	r2, r6, #5
 800732c:	0092      	lsls	r2, r2, #2
 800732e:	4620      	mov	r0, r4
 8007330:	f000 fb60 	bl	80079f4 <_calloc_r>
 8007334:	b160      	cbz	r0, 8007350 <_Balloc+0x64>
 8007336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800733a:	e00e      	b.n	800735a <_Balloc+0x6e>
 800733c:	2221      	movs	r2, #33	; 0x21
 800733e:	2104      	movs	r1, #4
 8007340:	4620      	mov	r0, r4
 8007342:	f000 fb57 	bl	80079f4 <_calloc_r>
 8007346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007348:	60f0      	str	r0, [r6, #12]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e4      	bne.n	800731a <_Balloc+0x2e>
 8007350:	2000      	movs	r0, #0
 8007352:	bd70      	pop	{r4, r5, r6, pc}
 8007354:	6802      	ldr	r2, [r0, #0]
 8007356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800735a:	2300      	movs	r3, #0
 800735c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007360:	e7f7      	b.n	8007352 <_Balloc+0x66>
 8007362:	bf00      	nop
 8007364:	0800890d 	.word	0x0800890d
 8007368:	080089f0 	.word	0x080089f0

0800736c <_Bfree>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007370:	4605      	mov	r5, r0
 8007372:	460c      	mov	r4, r1
 8007374:	b976      	cbnz	r6, 8007394 <_Bfree+0x28>
 8007376:	2010      	movs	r0, #16
 8007378:	f7ff ffa2 	bl	80072c0 <malloc>
 800737c:	4602      	mov	r2, r0
 800737e:	6268      	str	r0, [r5, #36]	; 0x24
 8007380:	b920      	cbnz	r0, 800738c <_Bfree+0x20>
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <_Bfree+0x3c>)
 8007384:	4809      	ldr	r0, [pc, #36]	; (80073ac <_Bfree+0x40>)
 8007386:	218a      	movs	r1, #138	; 0x8a
 8007388:	f001 f806 	bl	8008398 <__assert_func>
 800738c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007390:	6006      	str	r6, [r0, #0]
 8007392:	60c6      	str	r6, [r0, #12]
 8007394:	b13c      	cbz	r4, 80073a6 <_Bfree+0x3a>
 8007396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007398:	6862      	ldr	r2, [r4, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a0:	6021      	str	r1, [r4, #0]
 80073a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	0800890d 	.word	0x0800890d
 80073ac:	080089f0 	.word	0x080089f0

080073b0 <__multadd>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	690d      	ldr	r5, [r1, #16]
 80073b6:	4607      	mov	r7, r0
 80073b8:	460c      	mov	r4, r1
 80073ba:	461e      	mov	r6, r3
 80073bc:	f101 0c14 	add.w	ip, r1, #20
 80073c0:	2000      	movs	r0, #0
 80073c2:	f8dc 3000 	ldr.w	r3, [ip]
 80073c6:	b299      	uxth	r1, r3
 80073c8:	fb02 6101 	mla	r1, r2, r1, r6
 80073cc:	0c1e      	lsrs	r6, r3, #16
 80073ce:	0c0b      	lsrs	r3, r1, #16
 80073d0:	fb02 3306 	mla	r3, r2, r6, r3
 80073d4:	b289      	uxth	r1, r1
 80073d6:	3001      	adds	r0, #1
 80073d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073dc:	4285      	cmp	r5, r0
 80073de:	f84c 1b04 	str.w	r1, [ip], #4
 80073e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073e6:	dcec      	bgt.n	80073c2 <__multadd+0x12>
 80073e8:	b30e      	cbz	r6, 800742e <__multadd+0x7e>
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	dc19      	bgt.n	8007424 <__multadd+0x74>
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	4638      	mov	r0, r7
 80073f4:	3101      	adds	r1, #1
 80073f6:	f7ff ff79 	bl	80072ec <_Balloc>
 80073fa:	4680      	mov	r8, r0
 80073fc:	b928      	cbnz	r0, 800740a <__multadd+0x5a>
 80073fe:	4602      	mov	r2, r0
 8007400:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <__multadd+0x84>)
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <__multadd+0x88>)
 8007404:	21b5      	movs	r1, #181	; 0xb5
 8007406:	f000 ffc7 	bl	8008398 <__assert_func>
 800740a:	6922      	ldr	r2, [r4, #16]
 800740c:	3202      	adds	r2, #2
 800740e:	f104 010c 	add.w	r1, r4, #12
 8007412:	0092      	lsls	r2, r2, #2
 8007414:	300c      	adds	r0, #12
 8007416:	f7ff ff5b 	bl	80072d0 <memcpy>
 800741a:	4621      	mov	r1, r4
 800741c:	4638      	mov	r0, r7
 800741e:	f7ff ffa5 	bl	800736c <_Bfree>
 8007422:	4644      	mov	r4, r8
 8007424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007428:	3501      	adds	r5, #1
 800742a:	615e      	str	r6, [r3, #20]
 800742c:	6125      	str	r5, [r4, #16]
 800742e:	4620      	mov	r0, r4
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	0800897f 	.word	0x0800897f
 8007438:	080089f0 	.word	0x080089f0

0800743c <__hi0bits>:
 800743c:	0c03      	lsrs	r3, r0, #16
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	b9d3      	cbnz	r3, 8007478 <__hi0bits+0x3c>
 8007442:	0400      	lsls	r0, r0, #16
 8007444:	2310      	movs	r3, #16
 8007446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800744a:	bf04      	itt	eq
 800744c:	0200      	lsleq	r0, r0, #8
 800744e:	3308      	addeq	r3, #8
 8007450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007454:	bf04      	itt	eq
 8007456:	0100      	lsleq	r0, r0, #4
 8007458:	3304      	addeq	r3, #4
 800745a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800745e:	bf04      	itt	eq
 8007460:	0080      	lsleq	r0, r0, #2
 8007462:	3302      	addeq	r3, #2
 8007464:	2800      	cmp	r0, #0
 8007466:	db05      	blt.n	8007474 <__hi0bits+0x38>
 8007468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800746c:	f103 0301 	add.w	r3, r3, #1
 8007470:	bf08      	it	eq
 8007472:	2320      	moveq	r3, #32
 8007474:	4618      	mov	r0, r3
 8007476:	4770      	bx	lr
 8007478:	2300      	movs	r3, #0
 800747a:	e7e4      	b.n	8007446 <__hi0bits+0xa>

0800747c <__lo0bits>:
 800747c:	6803      	ldr	r3, [r0, #0]
 800747e:	f013 0207 	ands.w	r2, r3, #7
 8007482:	4601      	mov	r1, r0
 8007484:	d00b      	beq.n	800749e <__lo0bits+0x22>
 8007486:	07da      	lsls	r2, r3, #31
 8007488:	d423      	bmi.n	80074d2 <__lo0bits+0x56>
 800748a:	0798      	lsls	r0, r3, #30
 800748c:	bf49      	itett	mi
 800748e:	085b      	lsrmi	r3, r3, #1
 8007490:	089b      	lsrpl	r3, r3, #2
 8007492:	2001      	movmi	r0, #1
 8007494:	600b      	strmi	r3, [r1, #0]
 8007496:	bf5c      	itt	pl
 8007498:	600b      	strpl	r3, [r1, #0]
 800749a:	2002      	movpl	r0, #2
 800749c:	4770      	bx	lr
 800749e:	b298      	uxth	r0, r3
 80074a0:	b9a8      	cbnz	r0, 80074ce <__lo0bits+0x52>
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	2010      	movs	r0, #16
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	b90a      	cbnz	r2, 80074ae <__lo0bits+0x32>
 80074aa:	3008      	adds	r0, #8
 80074ac:	0a1b      	lsrs	r3, r3, #8
 80074ae:	071a      	lsls	r2, r3, #28
 80074b0:	bf04      	itt	eq
 80074b2:	091b      	lsreq	r3, r3, #4
 80074b4:	3004      	addeq	r0, #4
 80074b6:	079a      	lsls	r2, r3, #30
 80074b8:	bf04      	itt	eq
 80074ba:	089b      	lsreq	r3, r3, #2
 80074bc:	3002      	addeq	r0, #2
 80074be:	07da      	lsls	r2, r3, #31
 80074c0:	d403      	bmi.n	80074ca <__lo0bits+0x4e>
 80074c2:	085b      	lsrs	r3, r3, #1
 80074c4:	f100 0001 	add.w	r0, r0, #1
 80074c8:	d005      	beq.n	80074d6 <__lo0bits+0x5a>
 80074ca:	600b      	str	r3, [r1, #0]
 80074cc:	4770      	bx	lr
 80074ce:	4610      	mov	r0, r2
 80074d0:	e7e9      	b.n	80074a6 <__lo0bits+0x2a>
 80074d2:	2000      	movs	r0, #0
 80074d4:	4770      	bx	lr
 80074d6:	2020      	movs	r0, #32
 80074d8:	4770      	bx	lr
	...

080074dc <__i2b>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	460c      	mov	r4, r1
 80074e0:	2101      	movs	r1, #1
 80074e2:	f7ff ff03 	bl	80072ec <_Balloc>
 80074e6:	4602      	mov	r2, r0
 80074e8:	b928      	cbnz	r0, 80074f6 <__i2b+0x1a>
 80074ea:	4b05      	ldr	r3, [pc, #20]	; (8007500 <__i2b+0x24>)
 80074ec:	4805      	ldr	r0, [pc, #20]	; (8007504 <__i2b+0x28>)
 80074ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074f2:	f000 ff51 	bl	8008398 <__assert_func>
 80074f6:	2301      	movs	r3, #1
 80074f8:	6144      	str	r4, [r0, #20]
 80074fa:	6103      	str	r3, [r0, #16]
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	bf00      	nop
 8007500:	0800897f 	.word	0x0800897f
 8007504:	080089f0 	.word	0x080089f0

08007508 <__multiply>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	4691      	mov	r9, r2
 800750e:	690a      	ldr	r2, [r1, #16]
 8007510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007514:	429a      	cmp	r2, r3
 8007516:	bfb8      	it	lt
 8007518:	460b      	movlt	r3, r1
 800751a:	460c      	mov	r4, r1
 800751c:	bfbc      	itt	lt
 800751e:	464c      	movlt	r4, r9
 8007520:	4699      	movlt	r9, r3
 8007522:	6927      	ldr	r7, [r4, #16]
 8007524:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007528:	68a3      	ldr	r3, [r4, #8]
 800752a:	6861      	ldr	r1, [r4, #4]
 800752c:	eb07 060a 	add.w	r6, r7, sl
 8007530:	42b3      	cmp	r3, r6
 8007532:	b085      	sub	sp, #20
 8007534:	bfb8      	it	lt
 8007536:	3101      	addlt	r1, #1
 8007538:	f7ff fed8 	bl	80072ec <_Balloc>
 800753c:	b930      	cbnz	r0, 800754c <__multiply+0x44>
 800753e:	4602      	mov	r2, r0
 8007540:	4b44      	ldr	r3, [pc, #272]	; (8007654 <__multiply+0x14c>)
 8007542:	4845      	ldr	r0, [pc, #276]	; (8007658 <__multiply+0x150>)
 8007544:	f240 115d 	movw	r1, #349	; 0x15d
 8007548:	f000 ff26 	bl	8008398 <__assert_func>
 800754c:	f100 0514 	add.w	r5, r0, #20
 8007550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007554:	462b      	mov	r3, r5
 8007556:	2200      	movs	r2, #0
 8007558:	4543      	cmp	r3, r8
 800755a:	d321      	bcc.n	80075a0 <__multiply+0x98>
 800755c:	f104 0314 	add.w	r3, r4, #20
 8007560:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007564:	f109 0314 	add.w	r3, r9, #20
 8007568:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800756c:	9202      	str	r2, [sp, #8]
 800756e:	1b3a      	subs	r2, r7, r4
 8007570:	3a15      	subs	r2, #21
 8007572:	f022 0203 	bic.w	r2, r2, #3
 8007576:	3204      	adds	r2, #4
 8007578:	f104 0115 	add.w	r1, r4, #21
 800757c:	428f      	cmp	r7, r1
 800757e:	bf38      	it	cc
 8007580:	2204      	movcc	r2, #4
 8007582:	9201      	str	r2, [sp, #4]
 8007584:	9a02      	ldr	r2, [sp, #8]
 8007586:	9303      	str	r3, [sp, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d80c      	bhi.n	80075a6 <__multiply+0x9e>
 800758c:	2e00      	cmp	r6, #0
 800758e:	dd03      	ble.n	8007598 <__multiply+0x90>
 8007590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007594:	2b00      	cmp	r3, #0
 8007596:	d05a      	beq.n	800764e <__multiply+0x146>
 8007598:	6106      	str	r6, [r0, #16]
 800759a:	b005      	add	sp, #20
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	f843 2b04 	str.w	r2, [r3], #4
 80075a4:	e7d8      	b.n	8007558 <__multiply+0x50>
 80075a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80075aa:	f1ba 0f00 	cmp.w	sl, #0
 80075ae:	d024      	beq.n	80075fa <__multiply+0xf2>
 80075b0:	f104 0e14 	add.w	lr, r4, #20
 80075b4:	46a9      	mov	r9, r5
 80075b6:	f04f 0c00 	mov.w	ip, #0
 80075ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075be:	f8d9 1000 	ldr.w	r1, [r9]
 80075c2:	fa1f fb82 	uxth.w	fp, r2
 80075c6:	b289      	uxth	r1, r1
 80075c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80075cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075d0:	f8d9 2000 	ldr.w	r2, [r9]
 80075d4:	4461      	add	r1, ip
 80075d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075da:	fb0a c20b 	mla	r2, sl, fp, ip
 80075de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075e2:	b289      	uxth	r1, r1
 80075e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075e8:	4577      	cmp	r7, lr
 80075ea:	f849 1b04 	str.w	r1, [r9], #4
 80075ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075f2:	d8e2      	bhi.n	80075ba <__multiply+0xb2>
 80075f4:	9a01      	ldr	r2, [sp, #4]
 80075f6:	f845 c002 	str.w	ip, [r5, r2]
 80075fa:	9a03      	ldr	r2, [sp, #12]
 80075fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007600:	3304      	adds	r3, #4
 8007602:	f1b9 0f00 	cmp.w	r9, #0
 8007606:	d020      	beq.n	800764a <__multiply+0x142>
 8007608:	6829      	ldr	r1, [r5, #0]
 800760a:	f104 0c14 	add.w	ip, r4, #20
 800760e:	46ae      	mov	lr, r5
 8007610:	f04f 0a00 	mov.w	sl, #0
 8007614:	f8bc b000 	ldrh.w	fp, [ip]
 8007618:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800761c:	fb09 220b 	mla	r2, r9, fp, r2
 8007620:	4492      	add	sl, r2
 8007622:	b289      	uxth	r1, r1
 8007624:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007628:	f84e 1b04 	str.w	r1, [lr], #4
 800762c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007630:	f8be 1000 	ldrh.w	r1, [lr]
 8007634:	0c12      	lsrs	r2, r2, #16
 8007636:	fb09 1102 	mla	r1, r9, r2, r1
 800763a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800763e:	4567      	cmp	r7, ip
 8007640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007644:	d8e6      	bhi.n	8007614 <__multiply+0x10c>
 8007646:	9a01      	ldr	r2, [sp, #4]
 8007648:	50a9      	str	r1, [r5, r2]
 800764a:	3504      	adds	r5, #4
 800764c:	e79a      	b.n	8007584 <__multiply+0x7c>
 800764e:	3e01      	subs	r6, #1
 8007650:	e79c      	b.n	800758c <__multiply+0x84>
 8007652:	bf00      	nop
 8007654:	0800897f 	.word	0x0800897f
 8007658:	080089f0 	.word	0x080089f0

0800765c <__pow5mult>:
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	4615      	mov	r5, r2
 8007662:	f012 0203 	ands.w	r2, r2, #3
 8007666:	4606      	mov	r6, r0
 8007668:	460f      	mov	r7, r1
 800766a:	d007      	beq.n	800767c <__pow5mult+0x20>
 800766c:	4c25      	ldr	r4, [pc, #148]	; (8007704 <__pow5mult+0xa8>)
 800766e:	3a01      	subs	r2, #1
 8007670:	2300      	movs	r3, #0
 8007672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007676:	f7ff fe9b 	bl	80073b0 <__multadd>
 800767a:	4607      	mov	r7, r0
 800767c:	10ad      	asrs	r5, r5, #2
 800767e:	d03d      	beq.n	80076fc <__pow5mult+0xa0>
 8007680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007682:	b97c      	cbnz	r4, 80076a4 <__pow5mult+0x48>
 8007684:	2010      	movs	r0, #16
 8007686:	f7ff fe1b 	bl	80072c0 <malloc>
 800768a:	4602      	mov	r2, r0
 800768c:	6270      	str	r0, [r6, #36]	; 0x24
 800768e:	b928      	cbnz	r0, 800769c <__pow5mult+0x40>
 8007690:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <__pow5mult+0xac>)
 8007692:	481e      	ldr	r0, [pc, #120]	; (800770c <__pow5mult+0xb0>)
 8007694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007698:	f000 fe7e 	bl	8008398 <__assert_func>
 800769c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076a0:	6004      	str	r4, [r0, #0]
 80076a2:	60c4      	str	r4, [r0, #12]
 80076a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076ac:	b94c      	cbnz	r4, 80076c2 <__pow5mult+0x66>
 80076ae:	f240 2171 	movw	r1, #625	; 0x271
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ff12 	bl	80074dc <__i2b>
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80076be:	4604      	mov	r4, r0
 80076c0:	6003      	str	r3, [r0, #0]
 80076c2:	f04f 0900 	mov.w	r9, #0
 80076c6:	07eb      	lsls	r3, r5, #31
 80076c8:	d50a      	bpl.n	80076e0 <__pow5mult+0x84>
 80076ca:	4639      	mov	r1, r7
 80076cc:	4622      	mov	r2, r4
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7ff ff1a 	bl	8007508 <__multiply>
 80076d4:	4639      	mov	r1, r7
 80076d6:	4680      	mov	r8, r0
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fe47 	bl	800736c <_Bfree>
 80076de:	4647      	mov	r7, r8
 80076e0:	106d      	asrs	r5, r5, #1
 80076e2:	d00b      	beq.n	80076fc <__pow5mult+0xa0>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	b938      	cbnz	r0, 80076f8 <__pow5mult+0x9c>
 80076e8:	4622      	mov	r2, r4
 80076ea:	4621      	mov	r1, r4
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff ff0b 	bl	8007508 <__multiply>
 80076f2:	6020      	str	r0, [r4, #0]
 80076f4:	f8c0 9000 	str.w	r9, [r0]
 80076f8:	4604      	mov	r4, r0
 80076fa:	e7e4      	b.n	80076c6 <__pow5mult+0x6a>
 80076fc:	4638      	mov	r0, r7
 80076fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007702:	bf00      	nop
 8007704:	08008b40 	.word	0x08008b40
 8007708:	0800890d 	.word	0x0800890d
 800770c:	080089f0 	.word	0x080089f0

08007710 <__lshift>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	460c      	mov	r4, r1
 8007716:	6849      	ldr	r1, [r1, #4]
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	4607      	mov	r7, r0
 8007722:	4691      	mov	r9, r2
 8007724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007728:	f108 0601 	add.w	r6, r8, #1
 800772c:	42b3      	cmp	r3, r6
 800772e:	db0b      	blt.n	8007748 <__lshift+0x38>
 8007730:	4638      	mov	r0, r7
 8007732:	f7ff fddb 	bl	80072ec <_Balloc>
 8007736:	4605      	mov	r5, r0
 8007738:	b948      	cbnz	r0, 800774e <__lshift+0x3e>
 800773a:	4602      	mov	r2, r0
 800773c:	4b2a      	ldr	r3, [pc, #168]	; (80077e8 <__lshift+0xd8>)
 800773e:	482b      	ldr	r0, [pc, #172]	; (80077ec <__lshift+0xdc>)
 8007740:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007744:	f000 fe28 	bl	8008398 <__assert_func>
 8007748:	3101      	adds	r1, #1
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	e7ee      	b.n	800772c <__lshift+0x1c>
 800774e:	2300      	movs	r3, #0
 8007750:	f100 0114 	add.w	r1, r0, #20
 8007754:	f100 0210 	add.w	r2, r0, #16
 8007758:	4618      	mov	r0, r3
 800775a:	4553      	cmp	r3, sl
 800775c:	db37      	blt.n	80077ce <__lshift+0xbe>
 800775e:	6920      	ldr	r0, [r4, #16]
 8007760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007764:	f104 0314 	add.w	r3, r4, #20
 8007768:	f019 091f 	ands.w	r9, r9, #31
 800776c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007770:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007774:	d02f      	beq.n	80077d6 <__lshift+0xc6>
 8007776:	f1c9 0e20 	rsb	lr, r9, #32
 800777a:	468a      	mov	sl, r1
 800777c:	f04f 0c00 	mov.w	ip, #0
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	fa02 f209 	lsl.w	r2, r2, r9
 8007786:	ea42 020c 	orr.w	r2, r2, ip
 800778a:	f84a 2b04 	str.w	r2, [sl], #4
 800778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007792:	4298      	cmp	r0, r3
 8007794:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007798:	d8f2      	bhi.n	8007780 <__lshift+0x70>
 800779a:	1b03      	subs	r3, r0, r4
 800779c:	3b15      	subs	r3, #21
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	3304      	adds	r3, #4
 80077a4:	f104 0215 	add.w	r2, r4, #21
 80077a8:	4290      	cmp	r0, r2
 80077aa:	bf38      	it	cc
 80077ac:	2304      	movcc	r3, #4
 80077ae:	f841 c003 	str.w	ip, [r1, r3]
 80077b2:	f1bc 0f00 	cmp.w	ip, #0
 80077b6:	d001      	beq.n	80077bc <__lshift+0xac>
 80077b8:	f108 0602 	add.w	r6, r8, #2
 80077bc:	3e01      	subs	r6, #1
 80077be:	4638      	mov	r0, r7
 80077c0:	612e      	str	r6, [r5, #16]
 80077c2:	4621      	mov	r1, r4
 80077c4:	f7ff fdd2 	bl	800736c <_Bfree>
 80077c8:	4628      	mov	r0, r5
 80077ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80077d2:	3301      	adds	r3, #1
 80077d4:	e7c1      	b.n	800775a <__lshift+0x4a>
 80077d6:	3904      	subs	r1, #4
 80077d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80077e0:	4298      	cmp	r0, r3
 80077e2:	d8f9      	bhi.n	80077d8 <__lshift+0xc8>
 80077e4:	e7ea      	b.n	80077bc <__lshift+0xac>
 80077e6:	bf00      	nop
 80077e8:	0800897f 	.word	0x0800897f
 80077ec:	080089f0 	.word	0x080089f0

080077f0 <__mcmp>:
 80077f0:	b530      	push	{r4, r5, lr}
 80077f2:	6902      	ldr	r2, [r0, #16]
 80077f4:	690c      	ldr	r4, [r1, #16]
 80077f6:	1b12      	subs	r2, r2, r4
 80077f8:	d10e      	bne.n	8007818 <__mcmp+0x28>
 80077fa:	f100 0314 	add.w	r3, r0, #20
 80077fe:	3114      	adds	r1, #20
 8007800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800780c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007810:	42a5      	cmp	r5, r4
 8007812:	d003      	beq.n	800781c <__mcmp+0x2c>
 8007814:	d305      	bcc.n	8007822 <__mcmp+0x32>
 8007816:	2201      	movs	r2, #1
 8007818:	4610      	mov	r0, r2
 800781a:	bd30      	pop	{r4, r5, pc}
 800781c:	4283      	cmp	r3, r0
 800781e:	d3f3      	bcc.n	8007808 <__mcmp+0x18>
 8007820:	e7fa      	b.n	8007818 <__mcmp+0x28>
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	e7f7      	b.n	8007818 <__mcmp+0x28>

08007828 <__mdiff>:
 8007828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	460c      	mov	r4, r1
 800782e:	4606      	mov	r6, r0
 8007830:	4611      	mov	r1, r2
 8007832:	4620      	mov	r0, r4
 8007834:	4690      	mov	r8, r2
 8007836:	f7ff ffdb 	bl	80077f0 <__mcmp>
 800783a:	1e05      	subs	r5, r0, #0
 800783c:	d110      	bne.n	8007860 <__mdiff+0x38>
 800783e:	4629      	mov	r1, r5
 8007840:	4630      	mov	r0, r6
 8007842:	f7ff fd53 	bl	80072ec <_Balloc>
 8007846:	b930      	cbnz	r0, 8007856 <__mdiff+0x2e>
 8007848:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <__mdiff+0x10c>)
 800784a:	4602      	mov	r2, r0
 800784c:	f240 2132 	movw	r1, #562	; 0x232
 8007850:	4839      	ldr	r0, [pc, #228]	; (8007938 <__mdiff+0x110>)
 8007852:	f000 fda1 	bl	8008398 <__assert_func>
 8007856:	2301      	movs	r3, #1
 8007858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800785c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007860:	bfa4      	itt	ge
 8007862:	4643      	movge	r3, r8
 8007864:	46a0      	movge	r8, r4
 8007866:	4630      	mov	r0, r6
 8007868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800786c:	bfa6      	itte	ge
 800786e:	461c      	movge	r4, r3
 8007870:	2500      	movge	r5, #0
 8007872:	2501      	movlt	r5, #1
 8007874:	f7ff fd3a 	bl	80072ec <_Balloc>
 8007878:	b920      	cbnz	r0, 8007884 <__mdiff+0x5c>
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <__mdiff+0x10c>)
 800787c:	4602      	mov	r2, r0
 800787e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007882:	e7e5      	b.n	8007850 <__mdiff+0x28>
 8007884:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007888:	6926      	ldr	r6, [r4, #16]
 800788a:	60c5      	str	r5, [r0, #12]
 800788c:	f104 0914 	add.w	r9, r4, #20
 8007890:	f108 0514 	add.w	r5, r8, #20
 8007894:	f100 0e14 	add.w	lr, r0, #20
 8007898:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800789c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078a0:	f108 0210 	add.w	r2, r8, #16
 80078a4:	46f2      	mov	sl, lr
 80078a6:	2100      	movs	r1, #0
 80078a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078b0:	fa1f f883 	uxth.w	r8, r3
 80078b4:	fa11 f18b 	uxtah	r1, r1, fp
 80078b8:	0c1b      	lsrs	r3, r3, #16
 80078ba:	eba1 0808 	sub.w	r8, r1, r8
 80078be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078c6:	fa1f f888 	uxth.w	r8, r8
 80078ca:	1419      	asrs	r1, r3, #16
 80078cc:	454e      	cmp	r6, r9
 80078ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078d2:	f84a 3b04 	str.w	r3, [sl], #4
 80078d6:	d8e7      	bhi.n	80078a8 <__mdiff+0x80>
 80078d8:	1b33      	subs	r3, r6, r4
 80078da:	3b15      	subs	r3, #21
 80078dc:	f023 0303 	bic.w	r3, r3, #3
 80078e0:	3304      	adds	r3, #4
 80078e2:	3415      	adds	r4, #21
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	bf38      	it	cc
 80078e8:	2304      	movcc	r3, #4
 80078ea:	441d      	add	r5, r3
 80078ec:	4473      	add	r3, lr
 80078ee:	469e      	mov	lr, r3
 80078f0:	462e      	mov	r6, r5
 80078f2:	4566      	cmp	r6, ip
 80078f4:	d30e      	bcc.n	8007914 <__mdiff+0xec>
 80078f6:	f10c 0203 	add.w	r2, ip, #3
 80078fa:	1b52      	subs	r2, r2, r5
 80078fc:	f022 0203 	bic.w	r2, r2, #3
 8007900:	3d03      	subs	r5, #3
 8007902:	45ac      	cmp	ip, r5
 8007904:	bf38      	it	cc
 8007906:	2200      	movcc	r2, #0
 8007908:	441a      	add	r2, r3
 800790a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800790e:	b17b      	cbz	r3, 8007930 <__mdiff+0x108>
 8007910:	6107      	str	r7, [r0, #16]
 8007912:	e7a3      	b.n	800785c <__mdiff+0x34>
 8007914:	f856 8b04 	ldr.w	r8, [r6], #4
 8007918:	fa11 f288 	uxtah	r2, r1, r8
 800791c:	1414      	asrs	r4, r2, #16
 800791e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007922:	b292      	uxth	r2, r2
 8007924:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007928:	f84e 2b04 	str.w	r2, [lr], #4
 800792c:	1421      	asrs	r1, r4, #16
 800792e:	e7e0      	b.n	80078f2 <__mdiff+0xca>
 8007930:	3f01      	subs	r7, #1
 8007932:	e7ea      	b.n	800790a <__mdiff+0xe2>
 8007934:	0800897f 	.word	0x0800897f
 8007938:	080089f0 	.word	0x080089f0

0800793c <__d2b>:
 800793c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007940:	4689      	mov	r9, r1
 8007942:	2101      	movs	r1, #1
 8007944:	ec57 6b10 	vmov	r6, r7, d0
 8007948:	4690      	mov	r8, r2
 800794a:	f7ff fccf 	bl	80072ec <_Balloc>
 800794e:	4604      	mov	r4, r0
 8007950:	b930      	cbnz	r0, 8007960 <__d2b+0x24>
 8007952:	4602      	mov	r2, r0
 8007954:	4b25      	ldr	r3, [pc, #148]	; (80079ec <__d2b+0xb0>)
 8007956:	4826      	ldr	r0, [pc, #152]	; (80079f0 <__d2b+0xb4>)
 8007958:	f240 310a 	movw	r1, #778	; 0x30a
 800795c:	f000 fd1c 	bl	8008398 <__assert_func>
 8007960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007968:	bb35      	cbnz	r5, 80079b8 <__d2b+0x7c>
 800796a:	2e00      	cmp	r6, #0
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	d028      	beq.n	80079c2 <__d2b+0x86>
 8007970:	4668      	mov	r0, sp
 8007972:	9600      	str	r6, [sp, #0]
 8007974:	f7ff fd82 	bl	800747c <__lo0bits>
 8007978:	9900      	ldr	r1, [sp, #0]
 800797a:	b300      	cbz	r0, 80079be <__d2b+0x82>
 800797c:	9a01      	ldr	r2, [sp, #4]
 800797e:	f1c0 0320 	rsb	r3, r0, #32
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	430b      	orrs	r3, r1
 8007988:	40c2      	lsrs	r2, r0
 800798a:	6163      	str	r3, [r4, #20]
 800798c:	9201      	str	r2, [sp, #4]
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	61a3      	str	r3, [r4, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2202      	movne	r2, #2
 8007998:	2201      	moveq	r2, #1
 800799a:	6122      	str	r2, [r4, #16]
 800799c:	b1d5      	cbz	r5, 80079d4 <__d2b+0x98>
 800799e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079a2:	4405      	add	r5, r0
 80079a4:	f8c9 5000 	str.w	r5, [r9]
 80079a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079ac:	f8c8 0000 	str.w	r0, [r8]
 80079b0:	4620      	mov	r0, r4
 80079b2:	b003      	add	sp, #12
 80079b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079bc:	e7d5      	b.n	800796a <__d2b+0x2e>
 80079be:	6161      	str	r1, [r4, #20]
 80079c0:	e7e5      	b.n	800798e <__d2b+0x52>
 80079c2:	a801      	add	r0, sp, #4
 80079c4:	f7ff fd5a 	bl	800747c <__lo0bits>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	6163      	str	r3, [r4, #20]
 80079cc:	2201      	movs	r2, #1
 80079ce:	6122      	str	r2, [r4, #16]
 80079d0:	3020      	adds	r0, #32
 80079d2:	e7e3      	b.n	800799c <__d2b+0x60>
 80079d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079dc:	f8c9 0000 	str.w	r0, [r9]
 80079e0:	6918      	ldr	r0, [r3, #16]
 80079e2:	f7ff fd2b 	bl	800743c <__hi0bits>
 80079e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079ea:	e7df      	b.n	80079ac <__d2b+0x70>
 80079ec:	0800897f 	.word	0x0800897f
 80079f0:	080089f0 	.word	0x080089f0

080079f4 <_calloc_r>:
 80079f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079f6:	fba1 2402 	umull	r2, r4, r1, r2
 80079fa:	b94c      	cbnz	r4, 8007a10 <_calloc_r+0x1c>
 80079fc:	4611      	mov	r1, r2
 80079fe:	9201      	str	r2, [sp, #4]
 8007a00:	f000 f87a 	bl	8007af8 <_malloc_r>
 8007a04:	9a01      	ldr	r2, [sp, #4]
 8007a06:	4605      	mov	r5, r0
 8007a08:	b930      	cbnz	r0, 8007a18 <_calloc_r+0x24>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	b003      	add	sp, #12
 8007a0e:	bd30      	pop	{r4, r5, pc}
 8007a10:	220c      	movs	r2, #12
 8007a12:	6002      	str	r2, [r0, #0]
 8007a14:	2500      	movs	r5, #0
 8007a16:	e7f8      	b.n	8007a0a <_calloc_r+0x16>
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7fe f82f 	bl	8005a7c <memset>
 8007a1e:	e7f4      	b.n	8007a0a <_calloc_r+0x16>

08007a20 <_free_r>:
 8007a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d044      	beq.n	8007ab0 <_free_r+0x90>
 8007a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a2a:	9001      	str	r0, [sp, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a32:	bfb8      	it	lt
 8007a34:	18e4      	addlt	r4, r4, r3
 8007a36:	f000 fe55 	bl	80086e4 <__malloc_lock>
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	; (8007ab4 <_free_r+0x94>)
 8007a3c:	9801      	ldr	r0, [sp, #4]
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	b933      	cbnz	r3, 8007a50 <_free_r+0x30>
 8007a42:	6063      	str	r3, [r4, #4]
 8007a44:	6014      	str	r4, [r2, #0]
 8007a46:	b003      	add	sp, #12
 8007a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a4c:	f000 be50 	b.w	80086f0 <__malloc_unlock>
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	d908      	bls.n	8007a66 <_free_r+0x46>
 8007a54:	6825      	ldr	r5, [r4, #0]
 8007a56:	1961      	adds	r1, r4, r5
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	bf01      	itttt	eq
 8007a5c:	6819      	ldreq	r1, [r3, #0]
 8007a5e:	685b      	ldreq	r3, [r3, #4]
 8007a60:	1949      	addeq	r1, r1, r5
 8007a62:	6021      	streq	r1, [r4, #0]
 8007a64:	e7ed      	b.n	8007a42 <_free_r+0x22>
 8007a66:	461a      	mov	r2, r3
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	b10b      	cbz	r3, 8007a70 <_free_r+0x50>
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d9fa      	bls.n	8007a66 <_free_r+0x46>
 8007a70:	6811      	ldr	r1, [r2, #0]
 8007a72:	1855      	adds	r5, r2, r1
 8007a74:	42a5      	cmp	r5, r4
 8007a76:	d10b      	bne.n	8007a90 <_free_r+0x70>
 8007a78:	6824      	ldr	r4, [r4, #0]
 8007a7a:	4421      	add	r1, r4
 8007a7c:	1854      	adds	r4, r2, r1
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	6011      	str	r1, [r2, #0]
 8007a82:	d1e0      	bne.n	8007a46 <_free_r+0x26>
 8007a84:	681c      	ldr	r4, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	6053      	str	r3, [r2, #4]
 8007a8a:	4421      	add	r1, r4
 8007a8c:	6011      	str	r1, [r2, #0]
 8007a8e:	e7da      	b.n	8007a46 <_free_r+0x26>
 8007a90:	d902      	bls.n	8007a98 <_free_r+0x78>
 8007a92:	230c      	movs	r3, #12
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	e7d6      	b.n	8007a46 <_free_r+0x26>
 8007a98:	6825      	ldr	r5, [r4, #0]
 8007a9a:	1961      	adds	r1, r4, r5
 8007a9c:	428b      	cmp	r3, r1
 8007a9e:	bf04      	itt	eq
 8007aa0:	6819      	ldreq	r1, [r3, #0]
 8007aa2:	685b      	ldreq	r3, [r3, #4]
 8007aa4:	6063      	str	r3, [r4, #4]
 8007aa6:	bf04      	itt	eq
 8007aa8:	1949      	addeq	r1, r1, r5
 8007aaa:	6021      	streq	r1, [r4, #0]
 8007aac:	6054      	str	r4, [r2, #4]
 8007aae:	e7ca      	b.n	8007a46 <_free_r+0x26>
 8007ab0:	b003      	add	sp, #12
 8007ab2:	bd30      	pop	{r4, r5, pc}
 8007ab4:	20000404 	.word	0x20000404

08007ab8 <sbrk_aligned>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4e0e      	ldr	r6, [pc, #56]	; (8007af4 <sbrk_aligned+0x3c>)
 8007abc:	460c      	mov	r4, r1
 8007abe:	6831      	ldr	r1, [r6, #0]
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	b911      	cbnz	r1, 8007aca <sbrk_aligned+0x12>
 8007ac4:	f000 fb42 	bl	800814c <_sbrk_r>
 8007ac8:	6030      	str	r0, [r6, #0]
 8007aca:	4621      	mov	r1, r4
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 fb3d 	bl	800814c <_sbrk_r>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d00a      	beq.n	8007aec <sbrk_aligned+0x34>
 8007ad6:	1cc4      	adds	r4, r0, #3
 8007ad8:	f024 0403 	bic.w	r4, r4, #3
 8007adc:	42a0      	cmp	r0, r4
 8007ade:	d007      	beq.n	8007af0 <sbrk_aligned+0x38>
 8007ae0:	1a21      	subs	r1, r4, r0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 fb32 	bl	800814c <_sbrk_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d101      	bne.n	8007af0 <sbrk_aligned+0x38>
 8007aec:	f04f 34ff 	mov.w	r4, #4294967295
 8007af0:	4620      	mov	r0, r4
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	20000408 	.word	0x20000408

08007af8 <_malloc_r>:
 8007af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007afc:	1ccd      	adds	r5, r1, #3
 8007afe:	f025 0503 	bic.w	r5, r5, #3
 8007b02:	3508      	adds	r5, #8
 8007b04:	2d0c      	cmp	r5, #12
 8007b06:	bf38      	it	cc
 8007b08:	250c      	movcc	r5, #12
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	db01      	blt.n	8007b14 <_malloc_r+0x1c>
 8007b10:	42a9      	cmp	r1, r5
 8007b12:	d905      	bls.n	8007b20 <_malloc_r+0x28>
 8007b14:	230c      	movs	r3, #12
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	2600      	movs	r6, #0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	4e2e      	ldr	r6, [pc, #184]	; (8007bdc <_malloc_r+0xe4>)
 8007b22:	f000 fddf 	bl	80086e4 <__malloc_lock>
 8007b26:	6833      	ldr	r3, [r6, #0]
 8007b28:	461c      	mov	r4, r3
 8007b2a:	bb34      	cbnz	r4, 8007b7a <_malloc_r+0x82>
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7ff ffc2 	bl	8007ab8 <sbrk_aligned>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	4604      	mov	r4, r0
 8007b38:	d14d      	bne.n	8007bd6 <_malloc_r+0xde>
 8007b3a:	6834      	ldr	r4, [r6, #0]
 8007b3c:	4626      	mov	r6, r4
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d140      	bne.n	8007bc4 <_malloc_r+0xcc>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	4631      	mov	r1, r6
 8007b46:	4638      	mov	r0, r7
 8007b48:	eb04 0803 	add.w	r8, r4, r3
 8007b4c:	f000 fafe 	bl	800814c <_sbrk_r>
 8007b50:	4580      	cmp	r8, r0
 8007b52:	d13a      	bne.n	8007bca <_malloc_r+0xd2>
 8007b54:	6821      	ldr	r1, [r4, #0]
 8007b56:	3503      	adds	r5, #3
 8007b58:	1a6d      	subs	r5, r5, r1
 8007b5a:	f025 0503 	bic.w	r5, r5, #3
 8007b5e:	3508      	adds	r5, #8
 8007b60:	2d0c      	cmp	r5, #12
 8007b62:	bf38      	it	cc
 8007b64:	250c      	movcc	r5, #12
 8007b66:	4629      	mov	r1, r5
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7ff ffa5 	bl	8007ab8 <sbrk_aligned>
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d02b      	beq.n	8007bca <_malloc_r+0xd2>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	442b      	add	r3, r5
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	e00e      	b.n	8007b98 <_malloc_r+0xa0>
 8007b7a:	6822      	ldr	r2, [r4, #0]
 8007b7c:	1b52      	subs	r2, r2, r5
 8007b7e:	d41e      	bmi.n	8007bbe <_malloc_r+0xc6>
 8007b80:	2a0b      	cmp	r2, #11
 8007b82:	d916      	bls.n	8007bb2 <_malloc_r+0xba>
 8007b84:	1961      	adds	r1, r4, r5
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	6025      	str	r5, [r4, #0]
 8007b8a:	bf18      	it	ne
 8007b8c:	6059      	strne	r1, [r3, #4]
 8007b8e:	6863      	ldr	r3, [r4, #4]
 8007b90:	bf08      	it	eq
 8007b92:	6031      	streq	r1, [r6, #0]
 8007b94:	5162      	str	r2, [r4, r5]
 8007b96:	604b      	str	r3, [r1, #4]
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f104 060b 	add.w	r6, r4, #11
 8007b9e:	f000 fda7 	bl	80086f0 <__malloc_unlock>
 8007ba2:	f026 0607 	bic.w	r6, r6, #7
 8007ba6:	1d23      	adds	r3, r4, #4
 8007ba8:	1af2      	subs	r2, r6, r3
 8007baa:	d0b6      	beq.n	8007b1a <_malloc_r+0x22>
 8007bac:	1b9b      	subs	r3, r3, r6
 8007bae:	50a3      	str	r3, [r4, r2]
 8007bb0:	e7b3      	b.n	8007b1a <_malloc_r+0x22>
 8007bb2:	6862      	ldr	r2, [r4, #4]
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	bf0c      	ite	eq
 8007bb8:	6032      	streq	r2, [r6, #0]
 8007bba:	605a      	strne	r2, [r3, #4]
 8007bbc:	e7ec      	b.n	8007b98 <_malloc_r+0xa0>
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	6864      	ldr	r4, [r4, #4]
 8007bc2:	e7b2      	b.n	8007b2a <_malloc_r+0x32>
 8007bc4:	4634      	mov	r4, r6
 8007bc6:	6876      	ldr	r6, [r6, #4]
 8007bc8:	e7b9      	b.n	8007b3e <_malloc_r+0x46>
 8007bca:	230c      	movs	r3, #12
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	4638      	mov	r0, r7
 8007bd0:	f000 fd8e 	bl	80086f0 <__malloc_unlock>
 8007bd4:	e7a1      	b.n	8007b1a <_malloc_r+0x22>
 8007bd6:	6025      	str	r5, [r4, #0]
 8007bd8:	e7de      	b.n	8007b98 <_malloc_r+0xa0>
 8007bda:	bf00      	nop
 8007bdc:	20000404 	.word	0x20000404

08007be0 <__ssputs_r>:
 8007be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	688e      	ldr	r6, [r1, #8]
 8007be6:	429e      	cmp	r6, r3
 8007be8:	4682      	mov	sl, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	4690      	mov	r8, r2
 8007bee:	461f      	mov	r7, r3
 8007bf0:	d838      	bhi.n	8007c64 <__ssputs_r+0x84>
 8007bf2:	898a      	ldrh	r2, [r1, #12]
 8007bf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bf8:	d032      	beq.n	8007c60 <__ssputs_r+0x80>
 8007bfa:	6825      	ldr	r5, [r4, #0]
 8007bfc:	6909      	ldr	r1, [r1, #16]
 8007bfe:	eba5 0901 	sub.w	r9, r5, r1
 8007c02:	6965      	ldr	r5, [r4, #20]
 8007c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	444b      	add	r3, r9
 8007c10:	106d      	asrs	r5, r5, #1
 8007c12:	429d      	cmp	r5, r3
 8007c14:	bf38      	it	cc
 8007c16:	461d      	movcc	r5, r3
 8007c18:	0553      	lsls	r3, r2, #21
 8007c1a:	d531      	bpl.n	8007c80 <__ssputs_r+0xa0>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	f7ff ff6b 	bl	8007af8 <_malloc_r>
 8007c22:	4606      	mov	r6, r0
 8007c24:	b950      	cbnz	r0, 8007c3c <__ssputs_r+0x5c>
 8007c26:	230c      	movs	r3, #12
 8007c28:	f8ca 3000 	str.w	r3, [sl]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	f04f 30ff 	mov.w	r0, #4294967295
 8007c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c3c:	6921      	ldr	r1, [r4, #16]
 8007c3e:	464a      	mov	r2, r9
 8007c40:	f7ff fb46 	bl	80072d0 <memcpy>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	6126      	str	r6, [r4, #16]
 8007c52:	6165      	str	r5, [r4, #20]
 8007c54:	444e      	add	r6, r9
 8007c56:	eba5 0509 	sub.w	r5, r5, r9
 8007c5a:	6026      	str	r6, [r4, #0]
 8007c5c:	60a5      	str	r5, [r4, #8]
 8007c5e:	463e      	mov	r6, r7
 8007c60:	42be      	cmp	r6, r7
 8007c62:	d900      	bls.n	8007c66 <__ssputs_r+0x86>
 8007c64:	463e      	mov	r6, r7
 8007c66:	6820      	ldr	r0, [r4, #0]
 8007c68:	4632      	mov	r2, r6
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	f000 fd20 	bl	80086b0 <memmove>
 8007c70:	68a3      	ldr	r3, [r4, #8]
 8007c72:	1b9b      	subs	r3, r3, r6
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	4433      	add	r3, r6
 8007c7a:	6023      	str	r3, [r4, #0]
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7db      	b.n	8007c38 <__ssputs_r+0x58>
 8007c80:	462a      	mov	r2, r5
 8007c82:	f000 fd3b 	bl	80086fc <_realloc_r>
 8007c86:	4606      	mov	r6, r0
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1e1      	bne.n	8007c50 <__ssputs_r+0x70>
 8007c8c:	6921      	ldr	r1, [r4, #16]
 8007c8e:	4650      	mov	r0, sl
 8007c90:	f7ff fec6 	bl	8007a20 <_free_r>
 8007c94:	e7c7      	b.n	8007c26 <__ssputs_r+0x46>
	...

08007c98 <_svfiprintf_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4698      	mov	r8, r3
 8007c9e:	898b      	ldrh	r3, [r1, #12]
 8007ca0:	061b      	lsls	r3, r3, #24
 8007ca2:	b09d      	sub	sp, #116	; 0x74
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	4614      	mov	r4, r2
 8007caa:	d50e      	bpl.n	8007cca <_svfiprintf_r+0x32>
 8007cac:	690b      	ldr	r3, [r1, #16]
 8007cae:	b963      	cbnz	r3, 8007cca <_svfiprintf_r+0x32>
 8007cb0:	2140      	movs	r1, #64	; 0x40
 8007cb2:	f7ff ff21 	bl	8007af8 <_malloc_r>
 8007cb6:	6028      	str	r0, [r5, #0]
 8007cb8:	6128      	str	r0, [r5, #16]
 8007cba:	b920      	cbnz	r0, 8007cc6 <_svfiprintf_r+0x2e>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	e0d1      	b.n	8007e6a <_svfiprintf_r+0x1d2>
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	616b      	str	r3, [r5, #20]
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cce:	2320      	movs	r3, #32
 8007cd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cd8:	2330      	movs	r3, #48	; 0x30
 8007cda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e84 <_svfiprintf_r+0x1ec>
 8007cde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce2:	f04f 0901 	mov.w	r9, #1
 8007ce6:	4623      	mov	r3, r4
 8007ce8:	469a      	mov	sl, r3
 8007cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cee:	b10a      	cbz	r2, 8007cf4 <_svfiprintf_r+0x5c>
 8007cf0:	2a25      	cmp	r2, #37	; 0x25
 8007cf2:	d1f9      	bne.n	8007ce8 <_svfiprintf_r+0x50>
 8007cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8007cf8:	d00b      	beq.n	8007d12 <_svfiprintf_r+0x7a>
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ff6d 	bl	8007be0 <__ssputs_r>
 8007d06:	3001      	adds	r0, #1
 8007d08:	f000 80aa 	beq.w	8007e60 <_svfiprintf_r+0x1c8>
 8007d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d0e:	445a      	add	r2, fp
 8007d10:	9209      	str	r2, [sp, #36]	; 0x24
 8007d12:	f89a 3000 	ldrb.w	r3, [sl]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 80a2 	beq.w	8007e60 <_svfiprintf_r+0x1c8>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d26:	f10a 0a01 	add.w	sl, sl, #1
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	9307      	str	r3, [sp, #28]
 8007d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d32:	931a      	str	r3, [sp, #104]	; 0x68
 8007d34:	4654      	mov	r4, sl
 8007d36:	2205      	movs	r2, #5
 8007d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3c:	4851      	ldr	r0, [pc, #324]	; (8007e84 <_svfiprintf_r+0x1ec>)
 8007d3e:	f7f8 fa57 	bl	80001f0 <memchr>
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	b9d8      	cbnz	r0, 8007d7e <_svfiprintf_r+0xe6>
 8007d46:	06d0      	lsls	r0, r2, #27
 8007d48:	bf44      	itt	mi
 8007d4a:	2320      	movmi	r3, #32
 8007d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d50:	0711      	lsls	r1, r2, #28
 8007d52:	bf44      	itt	mi
 8007d54:	232b      	movmi	r3, #43	; 0x2b
 8007d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007d60:	d015      	beq.n	8007d8e <_svfiprintf_r+0xf6>
 8007d62:	9a07      	ldr	r2, [sp, #28]
 8007d64:	4654      	mov	r4, sl
 8007d66:	2000      	movs	r0, #0
 8007d68:	f04f 0c0a 	mov.w	ip, #10
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d72:	3b30      	subs	r3, #48	; 0x30
 8007d74:	2b09      	cmp	r3, #9
 8007d76:	d94e      	bls.n	8007e16 <_svfiprintf_r+0x17e>
 8007d78:	b1b0      	cbz	r0, 8007da8 <_svfiprintf_r+0x110>
 8007d7a:	9207      	str	r2, [sp, #28]
 8007d7c:	e014      	b.n	8007da8 <_svfiprintf_r+0x110>
 8007d7e:	eba0 0308 	sub.w	r3, r0, r8
 8007d82:	fa09 f303 	lsl.w	r3, r9, r3
 8007d86:	4313      	orrs	r3, r2
 8007d88:	9304      	str	r3, [sp, #16]
 8007d8a:	46a2      	mov	sl, r4
 8007d8c:	e7d2      	b.n	8007d34 <_svfiprintf_r+0x9c>
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	1d19      	adds	r1, r3, #4
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	9103      	str	r1, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfbb      	ittet	lt
 8007d9a:	425b      	neglt	r3, r3
 8007d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007da0:	9307      	strge	r3, [sp, #28]
 8007da2:	9307      	strlt	r3, [sp, #28]
 8007da4:	bfb8      	it	lt
 8007da6:	9204      	strlt	r2, [sp, #16]
 8007da8:	7823      	ldrb	r3, [r4, #0]
 8007daa:	2b2e      	cmp	r3, #46	; 0x2e
 8007dac:	d10c      	bne.n	8007dc8 <_svfiprintf_r+0x130>
 8007dae:	7863      	ldrb	r3, [r4, #1]
 8007db0:	2b2a      	cmp	r3, #42	; 0x2a
 8007db2:	d135      	bne.n	8007e20 <_svfiprintf_r+0x188>
 8007db4:	9b03      	ldr	r3, [sp, #12]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	9203      	str	r2, [sp, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bfb8      	it	lt
 8007dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc4:	3402      	adds	r4, #2
 8007dc6:	9305      	str	r3, [sp, #20]
 8007dc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e94 <_svfiprintf_r+0x1fc>
 8007dcc:	7821      	ldrb	r1, [r4, #0]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	f7f8 fa0d 	bl	80001f0 <memchr>
 8007dd6:	b140      	cbz	r0, 8007dea <_svfiprintf_r+0x152>
 8007dd8:	2340      	movs	r3, #64	; 0x40
 8007dda:	eba0 000a 	sub.w	r0, r0, sl
 8007dde:	fa03 f000 	lsl.w	r0, r3, r0
 8007de2:	9b04      	ldr	r3, [sp, #16]
 8007de4:	4303      	orrs	r3, r0
 8007de6:	3401      	adds	r4, #1
 8007de8:	9304      	str	r3, [sp, #16]
 8007dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dee:	4826      	ldr	r0, [pc, #152]	; (8007e88 <_svfiprintf_r+0x1f0>)
 8007df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df4:	2206      	movs	r2, #6
 8007df6:	f7f8 f9fb 	bl	80001f0 <memchr>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d038      	beq.n	8007e70 <_svfiprintf_r+0x1d8>
 8007dfe:	4b23      	ldr	r3, [pc, #140]	; (8007e8c <_svfiprintf_r+0x1f4>)
 8007e00:	bb1b      	cbnz	r3, 8007e4a <_svfiprintf_r+0x1b2>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	3307      	adds	r3, #7
 8007e06:	f023 0307 	bic.w	r3, r3, #7
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	9303      	str	r3, [sp, #12]
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	4433      	add	r3, r6
 8007e12:	9309      	str	r3, [sp, #36]	; 0x24
 8007e14:	e767      	b.n	8007ce6 <_svfiprintf_r+0x4e>
 8007e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	e7a5      	b.n	8007d6c <_svfiprintf_r+0xd4>
 8007e20:	2300      	movs	r3, #0
 8007e22:	3401      	adds	r4, #1
 8007e24:	9305      	str	r3, [sp, #20]
 8007e26:	4619      	mov	r1, r3
 8007e28:	f04f 0c0a 	mov.w	ip, #10
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e32:	3a30      	subs	r2, #48	; 0x30
 8007e34:	2a09      	cmp	r2, #9
 8007e36:	d903      	bls.n	8007e40 <_svfiprintf_r+0x1a8>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0c5      	beq.n	8007dc8 <_svfiprintf_r+0x130>
 8007e3c:	9105      	str	r1, [sp, #20]
 8007e3e:	e7c3      	b.n	8007dc8 <_svfiprintf_r+0x130>
 8007e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e44:	4604      	mov	r4, r0
 8007e46:	2301      	movs	r3, #1
 8007e48:	e7f0      	b.n	8007e2c <_svfiprintf_r+0x194>
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <_svfiprintf_r+0x1f8>)
 8007e52:	a904      	add	r1, sp, #16
 8007e54:	4638      	mov	r0, r7
 8007e56:	f7fd feb9 	bl	8005bcc <_printf_float>
 8007e5a:	1c42      	adds	r2, r0, #1
 8007e5c:	4606      	mov	r6, r0
 8007e5e:	d1d6      	bne.n	8007e0e <_svfiprintf_r+0x176>
 8007e60:	89ab      	ldrh	r3, [r5, #12]
 8007e62:	065b      	lsls	r3, r3, #25
 8007e64:	f53f af2c 	bmi.w	8007cc0 <_svfiprintf_r+0x28>
 8007e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e6a:	b01d      	add	sp, #116	; 0x74
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	ab03      	add	r3, sp, #12
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	462a      	mov	r2, r5
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <_svfiprintf_r+0x1f8>)
 8007e78:	a904      	add	r1, sp, #16
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7fe f94a 	bl	8006114 <_printf_i>
 8007e80:	e7eb      	b.n	8007e5a <_svfiprintf_r+0x1c2>
 8007e82:	bf00      	nop
 8007e84:	08008b4c 	.word	0x08008b4c
 8007e88:	08008b56 	.word	0x08008b56
 8007e8c:	08005bcd 	.word	0x08005bcd
 8007e90:	08007be1 	.word	0x08007be1
 8007e94:	08008b52 	.word	0x08008b52

08007e98 <__sfputc_r>:
 8007e98:	6893      	ldr	r3, [r2, #8]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	b410      	push	{r4}
 8007ea0:	6093      	str	r3, [r2, #8]
 8007ea2:	da08      	bge.n	8007eb6 <__sfputc_r+0x1e>
 8007ea4:	6994      	ldr	r4, [r2, #24]
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	db01      	blt.n	8007eae <__sfputc_r+0x16>
 8007eaa:	290a      	cmp	r1, #10
 8007eac:	d103      	bne.n	8007eb6 <__sfputc_r+0x1e>
 8007eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb2:	f000 b99f 	b.w	80081f4 <__swbuf_r>
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	1c58      	adds	r0, r3, #1
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	7019      	strb	r1, [r3, #0]
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <__sfputs_r>:
 8007ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec8:	4606      	mov	r6, r0
 8007eca:	460f      	mov	r7, r1
 8007ecc:	4614      	mov	r4, r2
 8007ece:	18d5      	adds	r5, r2, r3
 8007ed0:	42ac      	cmp	r4, r5
 8007ed2:	d101      	bne.n	8007ed8 <__sfputs_r+0x12>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e007      	b.n	8007ee8 <__sfputs_r+0x22>
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	463a      	mov	r2, r7
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7ff ffda 	bl	8007e98 <__sfputc_r>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d1f3      	bne.n	8007ed0 <__sfputs_r+0xa>
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007eec <_vfiprintf_r>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	460d      	mov	r5, r1
 8007ef2:	b09d      	sub	sp, #116	; 0x74
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	4698      	mov	r8, r3
 8007ef8:	4606      	mov	r6, r0
 8007efa:	b118      	cbz	r0, 8007f04 <_vfiprintf_r+0x18>
 8007efc:	6983      	ldr	r3, [r0, #24]
 8007efe:	b90b      	cbnz	r3, 8007f04 <_vfiprintf_r+0x18>
 8007f00:	f7ff f938 	bl	8007174 <__sinit>
 8007f04:	4b89      	ldr	r3, [pc, #548]	; (800812c <_vfiprintf_r+0x240>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	d11b      	bne.n	8007f42 <_vfiprintf_r+0x56>
 8007f0a:	6875      	ldr	r5, [r6, #4]
 8007f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0e:	07d9      	lsls	r1, r3, #31
 8007f10:	d405      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	059a      	lsls	r2, r3, #22
 8007f16:	d402      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1a:	f7ff f9ce 	bl	80072ba <__retarget_lock_acquire_recursive>
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	d501      	bpl.n	8007f28 <_vfiprintf_r+0x3c>
 8007f24:	692b      	ldr	r3, [r5, #16]
 8007f26:	b9eb      	cbnz	r3, 8007f64 <_vfiprintf_r+0x78>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 f9c6 	bl	80082bc <__swsetup_r>
 8007f30:	b1c0      	cbz	r0, 8007f64 <_vfiprintf_r+0x78>
 8007f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f34:	07dc      	lsls	r4, r3, #31
 8007f36:	d50e      	bpl.n	8007f56 <_vfiprintf_r+0x6a>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b01d      	add	sp, #116	; 0x74
 8007f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f42:	4b7b      	ldr	r3, [pc, #492]	; (8008130 <_vfiprintf_r+0x244>)
 8007f44:	429d      	cmp	r5, r3
 8007f46:	d101      	bne.n	8007f4c <_vfiprintf_r+0x60>
 8007f48:	68b5      	ldr	r5, [r6, #8]
 8007f4a:	e7df      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f4c:	4b79      	ldr	r3, [pc, #484]	; (8008134 <_vfiprintf_r+0x248>)
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf08      	it	eq
 8007f52:	68f5      	ldreq	r5, [r6, #12]
 8007f54:	e7da      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	0598      	lsls	r0, r3, #22
 8007f5a:	d4ed      	bmi.n	8007f38 <_vfiprintf_r+0x4c>
 8007f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5e:	f7ff f9ad 	bl	80072bc <__retarget_lock_release_recursive>
 8007f62:	e7e9      	b.n	8007f38 <_vfiprintf_r+0x4c>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	2320      	movs	r3, #32
 8007f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f72:	2330      	movs	r3, #48	; 0x30
 8007f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008138 <_vfiprintf_r+0x24c>
 8007f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f7c:	f04f 0901 	mov.w	r9, #1
 8007f80:	4623      	mov	r3, r4
 8007f82:	469a      	mov	sl, r3
 8007f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f88:	b10a      	cbz	r2, 8007f8e <_vfiprintf_r+0xa2>
 8007f8a:	2a25      	cmp	r2, #37	; 0x25
 8007f8c:	d1f9      	bne.n	8007f82 <_vfiprintf_r+0x96>
 8007f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f92:	d00b      	beq.n	8007fac <_vfiprintf_r+0xc0>
 8007f94:	465b      	mov	r3, fp
 8007f96:	4622      	mov	r2, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ff93 	bl	8007ec6 <__sfputs_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f000 80aa 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	445a      	add	r2, fp
 8007faa:	9209      	str	r2, [sp, #36]	; 0x24
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a2 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc0:	f10a 0a01 	add.w	sl, sl, #1
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fce:	4654      	mov	r4, sl
 8007fd0:	2205      	movs	r2, #5
 8007fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd6:	4858      	ldr	r0, [pc, #352]	; (8008138 <_vfiprintf_r+0x24c>)
 8007fd8:	f7f8 f90a 	bl	80001f0 <memchr>
 8007fdc:	9a04      	ldr	r2, [sp, #16]
 8007fde:	b9d8      	cbnz	r0, 8008018 <_vfiprintf_r+0x12c>
 8007fe0:	06d1      	lsls	r1, r2, #27
 8007fe2:	bf44      	itt	mi
 8007fe4:	2320      	movmi	r3, #32
 8007fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fea:	0713      	lsls	r3, r2, #28
 8007fec:	bf44      	itt	mi
 8007fee:	232b      	movmi	r3, #43	; 0x2b
 8007ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffa:	d015      	beq.n	8008028 <_vfiprintf_r+0x13c>
 8007ffc:	9a07      	ldr	r2, [sp, #28]
 8007ffe:	4654      	mov	r4, sl
 8008000:	2000      	movs	r0, #0
 8008002:	f04f 0c0a 	mov.w	ip, #10
 8008006:	4621      	mov	r1, r4
 8008008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800800c:	3b30      	subs	r3, #48	; 0x30
 800800e:	2b09      	cmp	r3, #9
 8008010:	d94e      	bls.n	80080b0 <_vfiprintf_r+0x1c4>
 8008012:	b1b0      	cbz	r0, 8008042 <_vfiprintf_r+0x156>
 8008014:	9207      	str	r2, [sp, #28]
 8008016:	e014      	b.n	8008042 <_vfiprintf_r+0x156>
 8008018:	eba0 0308 	sub.w	r3, r0, r8
 800801c:	fa09 f303 	lsl.w	r3, r9, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	46a2      	mov	sl, r4
 8008026:	e7d2      	b.n	8007fce <_vfiprintf_r+0xe2>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	1d19      	adds	r1, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfbb      	ittet	lt
 8008034:	425b      	neglt	r3, r3
 8008036:	f042 0202 	orrlt.w	r2, r2, #2
 800803a:	9307      	strge	r3, [sp, #28]
 800803c:	9307      	strlt	r3, [sp, #28]
 800803e:	bfb8      	it	lt
 8008040:	9204      	strlt	r2, [sp, #16]
 8008042:	7823      	ldrb	r3, [r4, #0]
 8008044:	2b2e      	cmp	r3, #46	; 0x2e
 8008046:	d10c      	bne.n	8008062 <_vfiprintf_r+0x176>
 8008048:	7863      	ldrb	r3, [r4, #1]
 800804a:	2b2a      	cmp	r3, #42	; 0x2a
 800804c:	d135      	bne.n	80080ba <_vfiprintf_r+0x1ce>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9203      	str	r2, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	f04f 33ff 	movlt.w	r3, #4294967295
 800805e:	3402      	adds	r4, #2
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008148 <_vfiprintf_r+0x25c>
 8008066:	7821      	ldrb	r1, [r4, #0]
 8008068:	2203      	movs	r2, #3
 800806a:	4650      	mov	r0, sl
 800806c:	f7f8 f8c0 	bl	80001f0 <memchr>
 8008070:	b140      	cbz	r0, 8008084 <_vfiprintf_r+0x198>
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	eba0 000a 	sub.w	r0, r0, sl
 8008078:	fa03 f000 	lsl.w	r0, r3, r0
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	4303      	orrs	r3, r0
 8008080:	3401      	adds	r4, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008088:	482c      	ldr	r0, [pc, #176]	; (800813c <_vfiprintf_r+0x250>)
 800808a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808e:	2206      	movs	r2, #6
 8008090:	f7f8 f8ae 	bl	80001f0 <memchr>
 8008094:	2800      	cmp	r0, #0
 8008096:	d03f      	beq.n	8008118 <_vfiprintf_r+0x22c>
 8008098:	4b29      	ldr	r3, [pc, #164]	; (8008140 <_vfiprintf_r+0x254>)
 800809a:	bb1b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x1f8>
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	3307      	adds	r3, #7
 80080a0:	f023 0307 	bic.w	r3, r3, #7
 80080a4:	3308      	adds	r3, #8
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	443b      	add	r3, r7
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
 80080ae:	e767      	b.n	8007f80 <_vfiprintf_r+0x94>
 80080b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b4:	460c      	mov	r4, r1
 80080b6:	2001      	movs	r0, #1
 80080b8:	e7a5      	b.n	8008006 <_vfiprintf_r+0x11a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	3401      	adds	r4, #1
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f04f 0c0a 	mov.w	ip, #10
 80080c6:	4620      	mov	r0, r4
 80080c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080cc:	3a30      	subs	r2, #48	; 0x30
 80080ce:	2a09      	cmp	r2, #9
 80080d0:	d903      	bls.n	80080da <_vfiprintf_r+0x1ee>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c5      	beq.n	8008062 <_vfiprintf_r+0x176>
 80080d6:	9105      	str	r1, [sp, #20]
 80080d8:	e7c3      	b.n	8008062 <_vfiprintf_r+0x176>
 80080da:	fb0c 2101 	mla	r1, ip, r1, r2
 80080de:	4604      	mov	r4, r0
 80080e0:	2301      	movs	r3, #1
 80080e2:	e7f0      	b.n	80080c6 <_vfiprintf_r+0x1da>
 80080e4:	ab03      	add	r3, sp, #12
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <_vfiprintf_r+0x258>)
 80080ec:	a904      	add	r1, sp, #16
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7fd fd6c 	bl	8005bcc <_printf_float>
 80080f4:	4607      	mov	r7, r0
 80080f6:	1c78      	adds	r0, r7, #1
 80080f8:	d1d6      	bne.n	80080a8 <_vfiprintf_r+0x1bc>
 80080fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080fc:	07d9      	lsls	r1, r3, #31
 80080fe:	d405      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008100:	89ab      	ldrh	r3, [r5, #12]
 8008102:	059a      	lsls	r2, r3, #22
 8008104:	d402      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008108:	f7ff f8d8 	bl	80072bc <__retarget_lock_release_recursive>
 800810c:	89ab      	ldrh	r3, [r5, #12]
 800810e:	065b      	lsls	r3, r3, #25
 8008110:	f53f af12 	bmi.w	8007f38 <_vfiprintf_r+0x4c>
 8008114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008116:	e711      	b.n	8007f3c <_vfiprintf_r+0x50>
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <_vfiprintf_r+0x258>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4630      	mov	r0, r6
 8008124:	f7fd fff6 	bl	8006114 <_printf_i>
 8008128:	e7e4      	b.n	80080f4 <_vfiprintf_r+0x208>
 800812a:	bf00      	nop
 800812c:	080089b0 	.word	0x080089b0
 8008130:	080089d0 	.word	0x080089d0
 8008134:	08008990 	.word	0x08008990
 8008138:	08008b4c 	.word	0x08008b4c
 800813c:	08008b56 	.word	0x08008b56
 8008140:	08005bcd 	.word	0x08005bcd
 8008144:	08007ec7 	.word	0x08007ec7
 8008148:	08008b52 	.word	0x08008b52

0800814c <_sbrk_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d06      	ldr	r5, [pc, #24]	; (8008168 <_sbrk_r+0x1c>)
 8008150:	2300      	movs	r3, #0
 8008152:	4604      	mov	r4, r0
 8008154:	4608      	mov	r0, r1
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	f7fb f80e 	bl	8003178 <_sbrk>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	d102      	bne.n	8008166 <_sbrk_r+0x1a>
 8008160:	682b      	ldr	r3, [r5, #0]
 8008162:	b103      	cbz	r3, 8008166 <_sbrk_r+0x1a>
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	bd38      	pop	{r3, r4, r5, pc}
 8008168:	2000040c 	.word	0x2000040c

0800816c <__sread>:
 800816c:	b510      	push	{r4, lr}
 800816e:	460c      	mov	r4, r1
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	f000 faf2 	bl	800875c <_read_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	bfab      	itete	ge
 800817c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800817e:	89a3      	ldrhlt	r3, [r4, #12]
 8008180:	181b      	addge	r3, r3, r0
 8008182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008186:	bfac      	ite	ge
 8008188:	6563      	strge	r3, [r4, #84]	; 0x54
 800818a:	81a3      	strhlt	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__swrite>:
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	461f      	mov	r7, r3
 8008194:	898b      	ldrh	r3, [r1, #12]
 8008196:	05db      	lsls	r3, r3, #23
 8008198:	4605      	mov	r5, r0
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d505      	bpl.n	80081ac <__swrite+0x1e>
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	2302      	movs	r3, #2
 80081a6:	2200      	movs	r2, #0
 80081a8:	f000 f9f8 	bl	800859c <_lseek_r>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b6:	81a3      	strh	r3, [r4, #12]
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	4628      	mov	r0, r5
 80081be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	f000 b869 	b.w	8008298 <_write_r>

080081c6 <__sseek>:
 80081c6:	b510      	push	{r4, lr}
 80081c8:	460c      	mov	r4, r1
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 f9e5 	bl	800859c <_lseek_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	bf15      	itete	ne
 80081d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80081da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081e2:	81a3      	strheq	r3, [r4, #12]
 80081e4:	bf18      	it	ne
 80081e6:	81a3      	strhne	r3, [r4, #12]
 80081e8:	bd10      	pop	{r4, pc}

080081ea <__sclose>:
 80081ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ee:	f000 b8f1 	b.w	80083d4 <_close_r>
	...

080081f4 <__swbuf_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	460e      	mov	r6, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	4605      	mov	r5, r0
 80081fc:	b118      	cbz	r0, 8008206 <__swbuf_r+0x12>
 80081fe:	6983      	ldr	r3, [r0, #24]
 8008200:	b90b      	cbnz	r3, 8008206 <__swbuf_r+0x12>
 8008202:	f7fe ffb7 	bl	8007174 <__sinit>
 8008206:	4b21      	ldr	r3, [pc, #132]	; (800828c <__swbuf_r+0x98>)
 8008208:	429c      	cmp	r4, r3
 800820a:	d12b      	bne.n	8008264 <__swbuf_r+0x70>
 800820c:	686c      	ldr	r4, [r5, #4]
 800820e:	69a3      	ldr	r3, [r4, #24]
 8008210:	60a3      	str	r3, [r4, #8]
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	071a      	lsls	r2, r3, #28
 8008216:	d52f      	bpl.n	8008278 <__swbuf_r+0x84>
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	b36b      	cbz	r3, 8008278 <__swbuf_r+0x84>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	6820      	ldr	r0, [r4, #0]
 8008220:	1ac0      	subs	r0, r0, r3
 8008222:	6963      	ldr	r3, [r4, #20]
 8008224:	b2f6      	uxtb	r6, r6
 8008226:	4283      	cmp	r3, r0
 8008228:	4637      	mov	r7, r6
 800822a:	dc04      	bgt.n	8008236 <__swbuf_r+0x42>
 800822c:	4621      	mov	r1, r4
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f966 	bl	8008500 <_fflush_r>
 8008234:	bb30      	cbnz	r0, 8008284 <__swbuf_r+0x90>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	3b01      	subs	r3, #1
 800823a:	60a3      	str	r3, [r4, #8]
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	701e      	strb	r6, [r3, #0]
 8008244:	6963      	ldr	r3, [r4, #20]
 8008246:	3001      	adds	r0, #1
 8008248:	4283      	cmp	r3, r0
 800824a:	d004      	beq.n	8008256 <__swbuf_r+0x62>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	07db      	lsls	r3, r3, #31
 8008250:	d506      	bpl.n	8008260 <__swbuf_r+0x6c>
 8008252:	2e0a      	cmp	r6, #10
 8008254:	d104      	bne.n	8008260 <__swbuf_r+0x6c>
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f000 f951 	bl	8008500 <_fflush_r>
 800825e:	b988      	cbnz	r0, 8008284 <__swbuf_r+0x90>
 8008260:	4638      	mov	r0, r7
 8008262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008264:	4b0a      	ldr	r3, [pc, #40]	; (8008290 <__swbuf_r+0x9c>)
 8008266:	429c      	cmp	r4, r3
 8008268:	d101      	bne.n	800826e <__swbuf_r+0x7a>
 800826a:	68ac      	ldr	r4, [r5, #8]
 800826c:	e7cf      	b.n	800820e <__swbuf_r+0x1a>
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <__swbuf_r+0xa0>)
 8008270:	429c      	cmp	r4, r3
 8008272:	bf08      	it	eq
 8008274:	68ec      	ldreq	r4, [r5, #12]
 8008276:	e7ca      	b.n	800820e <__swbuf_r+0x1a>
 8008278:	4621      	mov	r1, r4
 800827a:	4628      	mov	r0, r5
 800827c:	f000 f81e 	bl	80082bc <__swsetup_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	d0cb      	beq.n	800821c <__swbuf_r+0x28>
 8008284:	f04f 37ff 	mov.w	r7, #4294967295
 8008288:	e7ea      	b.n	8008260 <__swbuf_r+0x6c>
 800828a:	bf00      	nop
 800828c:	080089b0 	.word	0x080089b0
 8008290:	080089d0 	.word	0x080089d0
 8008294:	08008990 	.word	0x08008990

08008298 <_write_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4d07      	ldr	r5, [pc, #28]	; (80082b8 <_write_r+0x20>)
 800829c:	4604      	mov	r4, r0
 800829e:	4608      	mov	r0, r1
 80082a0:	4611      	mov	r1, r2
 80082a2:	2200      	movs	r2, #0
 80082a4:	602a      	str	r2, [r5, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f7fa ff15 	bl	80030d6 <_write>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_write_r+0x1e>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_write_r+0x1e>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	2000040c 	.word	0x2000040c

080082bc <__swsetup_r>:
 80082bc:	4b32      	ldr	r3, [pc, #200]	; (8008388 <__swsetup_r+0xcc>)
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	4606      	mov	r6, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	b125      	cbz	r5, 80082d2 <__swsetup_r+0x16>
 80082c8:	69ab      	ldr	r3, [r5, #24]
 80082ca:	b913      	cbnz	r3, 80082d2 <__swsetup_r+0x16>
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7fe ff51 	bl	8007174 <__sinit>
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <__swsetup_r+0xd0>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d10f      	bne.n	80082f8 <__swsetup_r+0x3c>
 80082d8:	686c      	ldr	r4, [r5, #4]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e0:	0719      	lsls	r1, r3, #28
 80082e2:	d42c      	bmi.n	800833e <__swsetup_r+0x82>
 80082e4:	06dd      	lsls	r5, r3, #27
 80082e6:	d411      	bmi.n	800830c <__swsetup_r+0x50>
 80082e8:	2309      	movs	r3, #9
 80082ea:	6033      	str	r3, [r6, #0]
 80082ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295
 80082f6:	e03e      	b.n	8008376 <__swsetup_r+0xba>
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <__swsetup_r+0xd4>)
 80082fa:	429c      	cmp	r4, r3
 80082fc:	d101      	bne.n	8008302 <__swsetup_r+0x46>
 80082fe:	68ac      	ldr	r4, [r5, #8]
 8008300:	e7eb      	b.n	80082da <__swsetup_r+0x1e>
 8008302:	4b24      	ldr	r3, [pc, #144]	; (8008394 <__swsetup_r+0xd8>)
 8008304:	429c      	cmp	r4, r3
 8008306:	bf08      	it	eq
 8008308:	68ec      	ldreq	r4, [r5, #12]
 800830a:	e7e6      	b.n	80082da <__swsetup_r+0x1e>
 800830c:	0758      	lsls	r0, r3, #29
 800830e:	d512      	bpl.n	8008336 <__swsetup_r+0x7a>
 8008310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008312:	b141      	cbz	r1, 8008326 <__swsetup_r+0x6a>
 8008314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008318:	4299      	cmp	r1, r3
 800831a:	d002      	beq.n	8008322 <__swsetup_r+0x66>
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff fb7f 	bl	8007a20 <_free_r>
 8008322:	2300      	movs	r3, #0
 8008324:	6363      	str	r3, [r4, #52]	; 0x34
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	2300      	movs	r3, #0
 8008330:	6063      	str	r3, [r4, #4]
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f043 0308 	orr.w	r3, r3, #8
 800833c:	81a3      	strh	r3, [r4, #12]
 800833e:	6923      	ldr	r3, [r4, #16]
 8008340:	b94b      	cbnz	r3, 8008356 <__swsetup_r+0x9a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834c:	d003      	beq.n	8008356 <__swsetup_r+0x9a>
 800834e:	4621      	mov	r1, r4
 8008350:	4630      	mov	r0, r6
 8008352:	f000 f95b 	bl	800860c <__smakebuf_r>
 8008356:	89a0      	ldrh	r0, [r4, #12]
 8008358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800835c:	f010 0301 	ands.w	r3, r0, #1
 8008360:	d00a      	beq.n	8008378 <__swsetup_r+0xbc>
 8008362:	2300      	movs	r3, #0
 8008364:	60a3      	str	r3, [r4, #8]
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	425b      	negs	r3, r3
 800836a:	61a3      	str	r3, [r4, #24]
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	b943      	cbnz	r3, 8008382 <__swsetup_r+0xc6>
 8008370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008374:	d1ba      	bne.n	80082ec <__swsetup_r+0x30>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	0781      	lsls	r1, r0, #30
 800837a:	bf58      	it	pl
 800837c:	6963      	ldrpl	r3, [r4, #20]
 800837e:	60a3      	str	r3, [r4, #8]
 8008380:	e7f4      	b.n	800836c <__swsetup_r+0xb0>
 8008382:	2000      	movs	r0, #0
 8008384:	e7f7      	b.n	8008376 <__swsetup_r+0xba>
 8008386:	bf00      	nop
 8008388:	20000010 	.word	0x20000010
 800838c:	080089b0 	.word	0x080089b0
 8008390:	080089d0 	.word	0x080089d0
 8008394:	08008990 	.word	0x08008990

08008398 <__assert_func>:
 8008398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800839a:	4614      	mov	r4, r2
 800839c:	461a      	mov	r2, r3
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <__assert_func+0x2c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4605      	mov	r5, r0
 80083a4:	68d8      	ldr	r0, [r3, #12]
 80083a6:	b14c      	cbz	r4, 80083bc <__assert_func+0x24>
 80083a8:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <__assert_func+0x30>)
 80083aa:	9100      	str	r1, [sp, #0]
 80083ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083b0:	4906      	ldr	r1, [pc, #24]	; (80083cc <__assert_func+0x34>)
 80083b2:	462b      	mov	r3, r5
 80083b4:	f000 f8e0 	bl	8008578 <fiprintf>
 80083b8:	f000 f9ef 	bl	800879a <abort>
 80083bc:	4b04      	ldr	r3, [pc, #16]	; (80083d0 <__assert_func+0x38>)
 80083be:	461c      	mov	r4, r3
 80083c0:	e7f3      	b.n	80083aa <__assert_func+0x12>
 80083c2:	bf00      	nop
 80083c4:	20000010 	.word	0x20000010
 80083c8:	08008b5d 	.word	0x08008b5d
 80083cc:	08008b6a 	.word	0x08008b6a
 80083d0:	08008b98 	.word	0x08008b98

080083d4 <_close_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d06      	ldr	r5, [pc, #24]	; (80083f0 <_close_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7fa fe95 	bl	800310e <_close>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_close_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_close_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	2000040c 	.word	0x2000040c

080083f4 <__sflush_r>:
 80083f4:	898a      	ldrh	r2, [r1, #12]
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	0710      	lsls	r0, r2, #28
 80083fe:	460c      	mov	r4, r1
 8008400:	d458      	bmi.n	80084b4 <__sflush_r+0xc0>
 8008402:	684b      	ldr	r3, [r1, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc05      	bgt.n	8008414 <__sflush_r+0x20>
 8008408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc02      	bgt.n	8008414 <__sflush_r+0x20>
 800840e:	2000      	movs	r0, #0
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008416:	2e00      	cmp	r6, #0
 8008418:	d0f9      	beq.n	800840e <__sflush_r+0x1a>
 800841a:	2300      	movs	r3, #0
 800841c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008420:	682f      	ldr	r7, [r5, #0]
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	d032      	beq.n	800848c <__sflush_r+0x98>
 8008426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	075a      	lsls	r2, r3, #29
 800842c:	d505      	bpl.n	800843a <__sflush_r+0x46>
 800842e:	6863      	ldr	r3, [r4, #4]
 8008430:	1ac0      	subs	r0, r0, r3
 8008432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008434:	b10b      	cbz	r3, 800843a <__sflush_r+0x46>
 8008436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008438:	1ac0      	subs	r0, r0, r3
 800843a:	2300      	movs	r3, #0
 800843c:	4602      	mov	r2, r0
 800843e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008440:	6a21      	ldr	r1, [r4, #32]
 8008442:	4628      	mov	r0, r5
 8008444:	47b0      	blx	r6
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	d106      	bne.n	800845a <__sflush_r+0x66>
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	291d      	cmp	r1, #29
 8008450:	d82c      	bhi.n	80084ac <__sflush_r+0xb8>
 8008452:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <__sflush_r+0x108>)
 8008454:	40ca      	lsrs	r2, r1
 8008456:	07d6      	lsls	r6, r2, #31
 8008458:	d528      	bpl.n	80084ac <__sflush_r+0xb8>
 800845a:	2200      	movs	r2, #0
 800845c:	6062      	str	r2, [r4, #4]
 800845e:	04d9      	lsls	r1, r3, #19
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	d504      	bpl.n	8008470 <__sflush_r+0x7c>
 8008466:	1c42      	adds	r2, r0, #1
 8008468:	d101      	bne.n	800846e <__sflush_r+0x7a>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b903      	cbnz	r3, 8008470 <__sflush_r+0x7c>
 800846e:	6560      	str	r0, [r4, #84]	; 0x54
 8008470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008472:	602f      	str	r7, [r5, #0]
 8008474:	2900      	cmp	r1, #0
 8008476:	d0ca      	beq.n	800840e <__sflush_r+0x1a>
 8008478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800847c:	4299      	cmp	r1, r3
 800847e:	d002      	beq.n	8008486 <__sflush_r+0x92>
 8008480:	4628      	mov	r0, r5
 8008482:	f7ff facd 	bl	8007a20 <_free_r>
 8008486:	2000      	movs	r0, #0
 8008488:	6360      	str	r0, [r4, #52]	; 0x34
 800848a:	e7c1      	b.n	8008410 <__sflush_r+0x1c>
 800848c:	6a21      	ldr	r1, [r4, #32]
 800848e:	2301      	movs	r3, #1
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	1c41      	adds	r1, r0, #1
 8008496:	d1c7      	bne.n	8008428 <__sflush_r+0x34>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c4      	beq.n	8008428 <__sflush_r+0x34>
 800849e:	2b1d      	cmp	r3, #29
 80084a0:	d001      	beq.n	80084a6 <__sflush_r+0xb2>
 80084a2:	2b16      	cmp	r3, #22
 80084a4:	d101      	bne.n	80084aa <__sflush_r+0xb6>
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	e7b1      	b.n	800840e <__sflush_r+0x1a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	e7ad      	b.n	8008410 <__sflush_r+0x1c>
 80084b4:	690f      	ldr	r7, [r1, #16]
 80084b6:	2f00      	cmp	r7, #0
 80084b8:	d0a9      	beq.n	800840e <__sflush_r+0x1a>
 80084ba:	0793      	lsls	r3, r2, #30
 80084bc:	680e      	ldr	r6, [r1, #0]
 80084be:	bf08      	it	eq
 80084c0:	694b      	ldreq	r3, [r1, #20]
 80084c2:	600f      	str	r7, [r1, #0]
 80084c4:	bf18      	it	ne
 80084c6:	2300      	movne	r3, #0
 80084c8:	eba6 0807 	sub.w	r8, r6, r7
 80084cc:	608b      	str	r3, [r1, #8]
 80084ce:	f1b8 0f00 	cmp.w	r8, #0
 80084d2:	dd9c      	ble.n	800840e <__sflush_r+0x1a>
 80084d4:	6a21      	ldr	r1, [r4, #32]
 80084d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084d8:	4643      	mov	r3, r8
 80084da:	463a      	mov	r2, r7
 80084dc:	4628      	mov	r0, r5
 80084de:	47b0      	blx	r6
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dc06      	bgt.n	80084f2 <__sflush_r+0xfe>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e78e      	b.n	8008410 <__sflush_r+0x1c>
 80084f2:	4407      	add	r7, r0
 80084f4:	eba8 0800 	sub.w	r8, r8, r0
 80084f8:	e7e9      	b.n	80084ce <__sflush_r+0xda>
 80084fa:	bf00      	nop
 80084fc:	20400001 	.word	0x20400001

08008500 <_fflush_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b913      	cbnz	r3, 8008510 <_fflush_r+0x10>
 800850a:	2500      	movs	r5, #0
 800850c:	4628      	mov	r0, r5
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	b118      	cbz	r0, 800851a <_fflush_r+0x1a>
 8008512:	6983      	ldr	r3, [r0, #24]
 8008514:	b90b      	cbnz	r3, 800851a <_fflush_r+0x1a>
 8008516:	f7fe fe2d 	bl	8007174 <__sinit>
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <_fflush_r+0x6c>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d11b      	bne.n	8008558 <_fflush_r+0x58>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <_fflush_r+0xa>
 800852a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800852c:	07d0      	lsls	r0, r2, #31
 800852e:	d404      	bmi.n	800853a <_fflush_r+0x3a>
 8008530:	0599      	lsls	r1, r3, #22
 8008532:	d402      	bmi.n	800853a <_fflush_r+0x3a>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f7fe fec0 	bl	80072ba <__retarget_lock_acquire_recursive>
 800853a:	4628      	mov	r0, r5
 800853c:	4621      	mov	r1, r4
 800853e:	f7ff ff59 	bl	80083f4 <__sflush_r>
 8008542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008544:	07da      	lsls	r2, r3, #31
 8008546:	4605      	mov	r5, r0
 8008548:	d4e0      	bmi.n	800850c <_fflush_r+0xc>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	d4dd      	bmi.n	800850c <_fflush_r+0xc>
 8008550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008552:	f7fe feb3 	bl	80072bc <__retarget_lock_release_recursive>
 8008556:	e7d9      	b.n	800850c <_fflush_r+0xc>
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <_fflush_r+0x70>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_fflush_r+0x62>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7df      	b.n	8008522 <_fflush_r+0x22>
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <_fflush_r+0x74>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7da      	b.n	8008522 <_fflush_r+0x22>
 800856c:	080089b0 	.word	0x080089b0
 8008570:	080089d0 	.word	0x080089d0
 8008574:	08008990 	.word	0x08008990

08008578 <fiprintf>:
 8008578:	b40e      	push	{r1, r2, r3}
 800857a:	b503      	push	{r0, r1, lr}
 800857c:	4601      	mov	r1, r0
 800857e:	ab03      	add	r3, sp, #12
 8008580:	4805      	ldr	r0, [pc, #20]	; (8008598 <fiprintf+0x20>)
 8008582:	f853 2b04 	ldr.w	r2, [r3], #4
 8008586:	6800      	ldr	r0, [r0, #0]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f7ff fcaf 	bl	8007eec <_vfiprintf_r>
 800858e:	b002      	add	sp, #8
 8008590:	f85d eb04 	ldr.w	lr, [sp], #4
 8008594:	b003      	add	sp, #12
 8008596:	4770      	bx	lr
 8008598:	20000010 	.word	0x20000010

0800859c <_lseek_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	; (80085bc <_lseek_r+0x20>)
 80085a0:	4604      	mov	r4, r0
 80085a2:	4608      	mov	r0, r1
 80085a4:	4611      	mov	r1, r2
 80085a6:	2200      	movs	r2, #0
 80085a8:	602a      	str	r2, [r5, #0]
 80085aa:	461a      	mov	r2, r3
 80085ac:	f7fa fdd6 	bl	800315c <_lseek>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d102      	bne.n	80085ba <_lseek_r+0x1e>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	b103      	cbz	r3, 80085ba <_lseek_r+0x1e>
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	2000040c 	.word	0x2000040c

080085c0 <__swhatbuf_r>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	460e      	mov	r6, r1
 80085c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c8:	2900      	cmp	r1, #0
 80085ca:	b096      	sub	sp, #88	; 0x58
 80085cc:	4614      	mov	r4, r2
 80085ce:	461d      	mov	r5, r3
 80085d0:	da08      	bge.n	80085e4 <__swhatbuf_r+0x24>
 80085d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	061a      	lsls	r2, r3, #24
 80085dc:	d410      	bmi.n	8008600 <__swhatbuf_r+0x40>
 80085de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e2:	e00e      	b.n	8008602 <__swhatbuf_r+0x42>
 80085e4:	466a      	mov	r2, sp
 80085e6:	f000 f8df 	bl	80087a8 <_fstat_r>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	dbf1      	blt.n	80085d2 <__swhatbuf_r+0x12>
 80085ee:	9a01      	ldr	r2, [sp, #4]
 80085f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085f8:	425a      	negs	r2, r3
 80085fa:	415a      	adcs	r2, r3
 80085fc:	602a      	str	r2, [r5, #0]
 80085fe:	e7ee      	b.n	80085de <__swhatbuf_r+0x1e>
 8008600:	2340      	movs	r3, #64	; 0x40
 8008602:	2000      	movs	r0, #0
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	b016      	add	sp, #88	; 0x58
 8008608:	bd70      	pop	{r4, r5, r6, pc}
	...

0800860c <__smakebuf_r>:
 800860c:	898b      	ldrh	r3, [r1, #12]
 800860e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008610:	079d      	lsls	r5, r3, #30
 8008612:	4606      	mov	r6, r0
 8008614:	460c      	mov	r4, r1
 8008616:	d507      	bpl.n	8008628 <__smakebuf_r+0x1c>
 8008618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	6123      	str	r3, [r4, #16]
 8008620:	2301      	movs	r3, #1
 8008622:	6163      	str	r3, [r4, #20]
 8008624:	b002      	add	sp, #8
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	ab01      	add	r3, sp, #4
 800862a:	466a      	mov	r2, sp
 800862c:	f7ff ffc8 	bl	80085c0 <__swhatbuf_r>
 8008630:	9900      	ldr	r1, [sp, #0]
 8008632:	4605      	mov	r5, r0
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff fa5f 	bl	8007af8 <_malloc_r>
 800863a:	b948      	cbnz	r0, 8008650 <__smakebuf_r+0x44>
 800863c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008640:	059a      	lsls	r2, r3, #22
 8008642:	d4ef      	bmi.n	8008624 <__smakebuf_r+0x18>
 8008644:	f023 0303 	bic.w	r3, r3, #3
 8008648:	f043 0302 	orr.w	r3, r3, #2
 800864c:	81a3      	strh	r3, [r4, #12]
 800864e:	e7e3      	b.n	8008618 <__smakebuf_r+0xc>
 8008650:	4b0d      	ldr	r3, [pc, #52]	; (8008688 <__smakebuf_r+0x7c>)
 8008652:	62b3      	str	r3, [r6, #40]	; 0x28
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	6020      	str	r0, [r4, #0]
 8008658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	9b00      	ldr	r3, [sp, #0]
 8008660:	6163      	str	r3, [r4, #20]
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	6120      	str	r0, [r4, #16]
 8008666:	b15b      	cbz	r3, 8008680 <__smakebuf_r+0x74>
 8008668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f8ad 	bl	80087cc <_isatty_r>
 8008672:	b128      	cbz	r0, 8008680 <__smakebuf_r+0x74>
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	89a0      	ldrh	r0, [r4, #12]
 8008682:	4305      	orrs	r5, r0
 8008684:	81a5      	strh	r5, [r4, #12]
 8008686:	e7cd      	b.n	8008624 <__smakebuf_r+0x18>
 8008688:	0800710d 	.word	0x0800710d

0800868c <__ascii_mbtowc>:
 800868c:	b082      	sub	sp, #8
 800868e:	b901      	cbnz	r1, 8008692 <__ascii_mbtowc+0x6>
 8008690:	a901      	add	r1, sp, #4
 8008692:	b142      	cbz	r2, 80086a6 <__ascii_mbtowc+0x1a>
 8008694:	b14b      	cbz	r3, 80086aa <__ascii_mbtowc+0x1e>
 8008696:	7813      	ldrb	r3, [r2, #0]
 8008698:	600b      	str	r3, [r1, #0]
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	1e10      	subs	r0, r2, #0
 800869e:	bf18      	it	ne
 80086a0:	2001      	movne	r0, #1
 80086a2:	b002      	add	sp, #8
 80086a4:	4770      	bx	lr
 80086a6:	4610      	mov	r0, r2
 80086a8:	e7fb      	b.n	80086a2 <__ascii_mbtowc+0x16>
 80086aa:	f06f 0001 	mvn.w	r0, #1
 80086ae:	e7f8      	b.n	80086a2 <__ascii_mbtowc+0x16>

080086b0 <memmove>:
 80086b0:	4288      	cmp	r0, r1
 80086b2:	b510      	push	{r4, lr}
 80086b4:	eb01 0402 	add.w	r4, r1, r2
 80086b8:	d902      	bls.n	80086c0 <memmove+0x10>
 80086ba:	4284      	cmp	r4, r0
 80086bc:	4623      	mov	r3, r4
 80086be:	d807      	bhi.n	80086d0 <memmove+0x20>
 80086c0:	1e43      	subs	r3, r0, #1
 80086c2:	42a1      	cmp	r1, r4
 80086c4:	d008      	beq.n	80086d8 <memmove+0x28>
 80086c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086ce:	e7f8      	b.n	80086c2 <memmove+0x12>
 80086d0:	4402      	add	r2, r0
 80086d2:	4601      	mov	r1, r0
 80086d4:	428a      	cmp	r2, r1
 80086d6:	d100      	bne.n	80086da <memmove+0x2a>
 80086d8:	bd10      	pop	{r4, pc}
 80086da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086e2:	e7f7      	b.n	80086d4 <memmove+0x24>

080086e4 <__malloc_lock>:
 80086e4:	4801      	ldr	r0, [pc, #4]	; (80086ec <__malloc_lock+0x8>)
 80086e6:	f7fe bde8 	b.w	80072ba <__retarget_lock_acquire_recursive>
 80086ea:	bf00      	nop
 80086ec:	20000400 	.word	0x20000400

080086f0 <__malloc_unlock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_unlock+0x8>)
 80086f2:	f7fe bde3 	b.w	80072bc <__retarget_lock_release_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000400 	.word	0x20000400

080086fc <_realloc_r>:
 80086fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008700:	4680      	mov	r8, r0
 8008702:	4614      	mov	r4, r2
 8008704:	460e      	mov	r6, r1
 8008706:	b921      	cbnz	r1, 8008712 <_realloc_r+0x16>
 8008708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	4611      	mov	r1, r2
 800870e:	f7ff b9f3 	b.w	8007af8 <_malloc_r>
 8008712:	b92a      	cbnz	r2, 8008720 <_realloc_r+0x24>
 8008714:	f7ff f984 	bl	8007a20 <_free_r>
 8008718:	4625      	mov	r5, r4
 800871a:	4628      	mov	r0, r5
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	f000 f864 	bl	80087ec <_malloc_usable_size_r>
 8008724:	4284      	cmp	r4, r0
 8008726:	4607      	mov	r7, r0
 8008728:	d802      	bhi.n	8008730 <_realloc_r+0x34>
 800872a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800872e:	d812      	bhi.n	8008756 <_realloc_r+0x5a>
 8008730:	4621      	mov	r1, r4
 8008732:	4640      	mov	r0, r8
 8008734:	f7ff f9e0 	bl	8007af8 <_malloc_r>
 8008738:	4605      	mov	r5, r0
 800873a:	2800      	cmp	r0, #0
 800873c:	d0ed      	beq.n	800871a <_realloc_r+0x1e>
 800873e:	42bc      	cmp	r4, r7
 8008740:	4622      	mov	r2, r4
 8008742:	4631      	mov	r1, r6
 8008744:	bf28      	it	cs
 8008746:	463a      	movcs	r2, r7
 8008748:	f7fe fdc2 	bl	80072d0 <memcpy>
 800874c:	4631      	mov	r1, r6
 800874e:	4640      	mov	r0, r8
 8008750:	f7ff f966 	bl	8007a20 <_free_r>
 8008754:	e7e1      	b.n	800871a <_realloc_r+0x1e>
 8008756:	4635      	mov	r5, r6
 8008758:	e7df      	b.n	800871a <_realloc_r+0x1e>
	...

0800875c <_read_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	4d07      	ldr	r5, [pc, #28]	; (800877c <_read_r+0x20>)
 8008760:	4604      	mov	r4, r0
 8008762:	4608      	mov	r0, r1
 8008764:	4611      	mov	r1, r2
 8008766:	2200      	movs	r2, #0
 8008768:	602a      	str	r2, [r5, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	f7fa fc96 	bl	800309c <_read>
 8008770:	1c43      	adds	r3, r0, #1
 8008772:	d102      	bne.n	800877a <_read_r+0x1e>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	b103      	cbz	r3, 800877a <_read_r+0x1e>
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	bd38      	pop	{r3, r4, r5, pc}
 800877c:	2000040c 	.word	0x2000040c

08008780 <__ascii_wctomb>:
 8008780:	b149      	cbz	r1, 8008796 <__ascii_wctomb+0x16>
 8008782:	2aff      	cmp	r2, #255	; 0xff
 8008784:	bf85      	ittet	hi
 8008786:	238a      	movhi	r3, #138	; 0x8a
 8008788:	6003      	strhi	r3, [r0, #0]
 800878a:	700a      	strbls	r2, [r1, #0]
 800878c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008790:	bf98      	it	ls
 8008792:	2001      	movls	r0, #1
 8008794:	4770      	bx	lr
 8008796:	4608      	mov	r0, r1
 8008798:	4770      	bx	lr

0800879a <abort>:
 800879a:	b508      	push	{r3, lr}
 800879c:	2006      	movs	r0, #6
 800879e:	f000 f855 	bl	800884c <raise>
 80087a2:	2001      	movs	r0, #1
 80087a4:	f7fa fc70 	bl	8003088 <_exit>

080087a8 <_fstat_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_fstat_r+0x20>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	4611      	mov	r1, r2
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	f7fa fcb6 	bl	8003126 <_fstat>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d102      	bne.n	80087c4 <_fstat_r+0x1c>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	b103      	cbz	r3, 80087c4 <_fstat_r+0x1c>
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	2000040c 	.word	0x2000040c

080087cc <_isatty_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d06      	ldr	r5, [pc, #24]	; (80087e8 <_isatty_r+0x1c>)
 80087d0:	2300      	movs	r3, #0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	602b      	str	r3, [r5, #0]
 80087d8:	f7fa fcb5 	bl	8003146 <_isatty>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_isatty_r+0x1a>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_isatty_r+0x1a>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	2000040c 	.word	0x2000040c

080087ec <_malloc_usable_size_r>:
 80087ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f0:	1f18      	subs	r0, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfbc      	itt	lt
 80087f6:	580b      	ldrlt	r3, [r1, r0]
 80087f8:	18c0      	addlt	r0, r0, r3
 80087fa:	4770      	bx	lr

080087fc <_raise_r>:
 80087fc:	291f      	cmp	r1, #31
 80087fe:	b538      	push	{r3, r4, r5, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	d904      	bls.n	8008810 <_raise_r+0x14>
 8008806:	2316      	movs	r3, #22
 8008808:	6003      	str	r3, [r0, #0]
 800880a:	f04f 30ff 	mov.w	r0, #4294967295
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008812:	b112      	cbz	r2, 800881a <_raise_r+0x1e>
 8008814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008818:	b94b      	cbnz	r3, 800882e <_raise_r+0x32>
 800881a:	4620      	mov	r0, r4
 800881c:	f000 f830 	bl	8008880 <_getpid_r>
 8008820:	462a      	mov	r2, r5
 8008822:	4601      	mov	r1, r0
 8008824:	4620      	mov	r0, r4
 8008826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800882a:	f000 b817 	b.w	800885c <_kill_r>
 800882e:	2b01      	cmp	r3, #1
 8008830:	d00a      	beq.n	8008848 <_raise_r+0x4c>
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	d103      	bne.n	800883e <_raise_r+0x42>
 8008836:	2316      	movs	r3, #22
 8008838:	6003      	str	r3, [r0, #0]
 800883a:	2001      	movs	r0, #1
 800883c:	e7e7      	b.n	800880e <_raise_r+0x12>
 800883e:	2400      	movs	r4, #0
 8008840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008844:	4628      	mov	r0, r5
 8008846:	4798      	blx	r3
 8008848:	2000      	movs	r0, #0
 800884a:	e7e0      	b.n	800880e <_raise_r+0x12>

0800884c <raise>:
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <raise+0xc>)
 800884e:	4601      	mov	r1, r0
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	f7ff bfd3 	b.w	80087fc <_raise_r>
 8008856:	bf00      	nop
 8008858:	20000010 	.word	0x20000010

0800885c <_kill_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d07      	ldr	r5, [pc, #28]	; (800887c <_kill_r+0x20>)
 8008860:	2300      	movs	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	4611      	mov	r1, r2
 8008868:	602b      	str	r3, [r5, #0]
 800886a:	f7fa fbfd 	bl	8003068 <_kill>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	d102      	bne.n	8008878 <_kill_r+0x1c>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b103      	cbz	r3, 8008878 <_kill_r+0x1c>
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	bd38      	pop	{r3, r4, r5, pc}
 800887a:	bf00      	nop
 800887c:	2000040c 	.word	0x2000040c

08008880 <_getpid_r>:
 8008880:	f7fa bbea 	b.w	8003058 <_getpid>

08008884 <_init>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr

08008890 <_fini>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr
