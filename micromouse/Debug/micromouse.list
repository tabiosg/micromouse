
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08009ba8  08009ba8  00019ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a204  0800a204  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a204  0800a204  0001a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a20c  0800a20c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a210  0800a210  0001a210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e4  0800a3f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  0800a3f8  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111dc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de9  00000000  00000000  000313f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000341e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019994  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015701  00000000  00000000  0004f964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fff2  00000000  00000000  00065065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5057  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005154  00000000  00000000  000f50a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b90 	.word	0x08009b90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009b90 	.word	0x08009b90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e009      	b.n	8000f88 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f80c 	bl	8000f9a <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	ddf1      	ble.n	8000f74 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turn_LED+0x1c>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <turn_LED+0x26>
 8000fb4:	e008      	b.n	8000fc8 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f809 	bl	8000fd0 <turn_off_LED_color>
		return;
 8000fbe:	e003      	b.n	8000fc8 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f824 	bl	8001010 <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d811      	bhi.n	8001004 <turn_off_LED_color+0x34>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <turn_off_LED_color+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08000ff9 	.word	0x08000ff9
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <turn_off_LED_color+0x3c>)
 8000ffe:	f002 ff55 	bl	8003eac <HAL_GPIO_WritePin>
		return;
 8001002:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d811      	bhi.n	8001044 <turn_on_LED_color+0x34>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <turn_on_LED_color+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001045 	.word	0x08001045
 800102c:	08001045 	.word	0x08001045
 8001030:	08001045 	.word	0x08001045
 8001034:	08001039 	.word	0x08001039
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <turn_on_LED_color+0x3c>)
 800103e:	f002 ff35 	bl	8003eac <HAL_GPIO_WritePin>
		return;
 8001042:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8001056:	f002 f965 	bl	8003324 <is_switch_on>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Flood_Fill_Algo;  // TODO - Remove when not testing
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d00a      	beq.n	800107e <determine_algorithm+0x2e>
 8001068:	2b02      	cmp	r3, #2
 800106a:	dc0a      	bgt.n	8001082 <determine_algorithm+0x32>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <determine_algorithm+0x26>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <determine_algorithm+0x2a>
 8001074:	e005      	b.n	8001082 <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 800107e:	2302      	movs	r3, #2
 8001080:	e000      	b.n	8001084 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8001082:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <do_search_algorithm>:

void do_search_algorithm(algorithm_type algo)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff60 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7b 	bl	8000f9a <turn_LED>
	turn_LED(Blue, On);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff77 	bl	8000f9a <turn_LED>

	switch(algo)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d00c      	beq.n	80010cc <do_search_algorithm+0x40>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc0c      	bgt.n	80010d0 <do_search_algorithm+0x44>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <do_search_algorithm+0x34>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d003      	beq.n	80010c6 <do_search_algorithm+0x3a>
 80010be:	e007      	b.n	80010d0 <do_search_algorithm+0x44>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 80010c0:	f001 f8cc 	bl	800225c <do_hug_left_algorithm>
		return;
 80010c4:	e004      	b.n	80010d0 <do_search_algorithm+0x44>
	case Flood_Fill_Algo:
		do_flood_fill_algorithm();
 80010c6:	f000 f815 	bl	80010f4 <do_flood_fill_algorithm>
		return; // TODO
 80010ca:	e001      	b.n	80010d0 <do_search_algorithm+0x44>
	case Test_Algo:
		do_test_algorithm();
 80010cc:	f002 fa0a 	bl	80034e4 <do_test_algorithm>
	}  // switch(algo)
}  // do_search_algorithm(algorithm_type algo)
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <complete_search_algorithm>:

void complete_search_algorithm()
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ff3e 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff59 	bl	8000f9a <turn_LED>
	turn_LED(Green, On);
 80010e8:	2101      	movs	r1, #1
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff55 	bl	8000f9a <turn_LED>
}  // complete_search_algorithm()
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <do_flood_fill_algorithm>:
#include "flood_fill.h"

void do_flood_fill_algorithm()
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 80010fa:	af02      	add	r7, sp, #8
	// Initialize the maze
	flood_fill_maze maze;

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 8001102:	e154      	b.n	80013ae <do_flood_fill_algorithm+0x2ba>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001104:	2300      	movs	r3, #0
 8001106:	f887 3826 	strb.w	r3, [r7, #2086]	; 0x826
 800110a:	e146      	b.n	800139a <do_flood_fill_algorithm+0x2a6>
		{
			// Initialize distance grid
			if(i <= 7 && j <= 7) maze.distance_grid[i][j] = ((7 - i) + (7 - j));
 800110c:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001110:	2b07      	cmp	r3, #7
 8001112:	d81c      	bhi.n	800114e <do_flood_fill_algorithm+0x5a>
 8001114:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001118:	2b07      	cmp	r3, #7
 800111a:	d818      	bhi.n	800114e <do_flood_fill_algorithm+0x5a>
 800111c:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 8001120:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001124:	4413      	add	r3, r2
 8001126:	b2d9      	uxtb	r1, r3
 8001128:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 800112c:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001130:	f1c1 010e 	rsb	r1, r1, #14
 8001134:	b2c8      	uxtb	r0, r1
 8001136:	f607 0128 	addw	r1, r7, #2088	; 0x828
 800113a:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	440a      	add	r2, r1
 8001142:	4413      	add	r3, r2
 8001144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001148:	4602      	mov	r2, r0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e05e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i <= 7 && j > 7) maze.distance_grid[i][j] = ((7 - i) + (j - 8));
 800114e:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001152:	2b07      	cmp	r3, #7
 8001154:	d81b      	bhi.n	800118e <do_flood_fill_algorithm+0x9a>
 8001156:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 800115a:	2b07      	cmp	r3, #7
 800115c:	d917      	bls.n	800118e <do_flood_fill_algorithm+0x9a>
 800115e:	f897 2826 	ldrb.w	r2, [r7, #2086]	; 0x826
 8001162:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b2d9      	uxtb	r1, r3
 800116a:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 800116e:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001172:	3901      	subs	r1, #1
 8001174:	b2c8      	uxtb	r0, r1
 8001176:	f607 0128 	addw	r1, r7, #2088	; 0x828
 800117a:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	440a      	add	r2, r1
 8001182:	4413      	add	r3, r2
 8001184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001188:	4602      	mov	r2, r0
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e03e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j <= 7) maze.distance_grid[i][j] = ((i - 8) + (7 - j));
 800118e:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001192:	2b07      	cmp	r3, #7
 8001194:	d91b      	bls.n	80011ce <do_flood_fill_algorithm+0xda>
 8001196:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 800119a:	2b07      	cmp	r3, #7
 800119c:	d817      	bhi.n	80011ce <do_flood_fill_algorithm+0xda>
 800119e:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 80011a2:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 80011ae:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80011b2:	3901      	subs	r1, #1
 80011b4:	b2c8      	uxtb	r0, r1
 80011b6:	f607 0128 	addw	r1, r7, #2088	; 0x828
 80011ba:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	440a      	add	r2, r1
 80011c2:	4413      	add	r3, r2
 80011c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011c8:	4602      	mov	r2, r0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e01e      	b.n	800120c <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j > 7) maze.distance_grid[i][j] = ((i - 8) + (j - 8));
 80011ce:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	d91a      	bls.n	800120c <do_flood_fill_algorithm+0x118>
 80011d6:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d916      	bls.n	800120c <do_flood_fill_algorithm+0x118>
 80011de:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 80011e2:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80011e6:	4413      	add	r3, r2
 80011e8:	b2d9      	uxtb	r1, r3
 80011ea:	f897 2827 	ldrb.w	r2, [r7, #2087]	; 0x827
 80011ee:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80011f2:	3910      	subs	r1, #16
 80011f4:	b2c8      	uxtb	r0, r1
 80011f6:	f607 0128 	addw	r1, r7, #2088	; 0x828
 80011fa:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	440a      	add	r2, r1
 8001202:	4413      	add	r3, r2
 8001204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001208:	4602      	mov	r2, r0
 800120a:	701a      	strb	r2, [r3, #0]

			// Initialize cell grid - assume no walls unless border by default
			maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 800120c:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 8001210:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001214:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001218:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	441a      	add	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	4403      	add	r3, r0
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 8001232:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 8001236:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 800123a:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800123e:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001242:	461a      	mov	r2, r3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	441a      	add	r2, r3
 8001248:	460b      	mov	r3, r1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4413      	add	r3, r2
 8001252:	4403      	add	r3, r0
 8001254:	3301      	adds	r3, #1
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 800125a:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 800125e:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001262:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001266:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800126a:	461a      	mov	r2, r3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	441a      	add	r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	4403      	add	r3, r0
 800127c:	3302      	adds	r3, #2
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 8001282:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 8001286:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 800128a:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800128e:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001292:	461a      	mov	r2, r3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	441a      	add	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	4403      	add	r3, r0
 80012a4:	3303      	adds	r3, #3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].visited = Is_Not_Visited;
 80012aa:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 80012ae:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80012b2:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80012b6:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80012ba:	461a      	mov	r2, r3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	441a      	add	r2, r3
 80012c0:	460b      	mov	r3, r1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	4403      	add	r3, r0
 80012cc:	3304      	adds	r3, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

			if(i == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80012d2:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d113      	bne.n	8001302 <do_flood_fill_algorithm+0x20e>
 80012da:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 80012de:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 80012e2:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80012e6:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80012ea:	461a      	mov	r2, r3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	441a      	add	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	4413      	add	r3, r2
 80012fa:	4403      	add	r3, r0
 80012fc:	3302      	adds	r3, #2
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
			if(j == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 8001302:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001306:	2b00      	cmp	r3, #0
 8001308:	d113      	bne.n	8001332 <do_flood_fill_algorithm+0x23e>
 800130a:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 800130e:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001312:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001316:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	441a      	add	r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	4403      	add	r3, r0
 800132c:	3303      	adds	r3, #3
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
			if(i == MAP_SIZE - 1) maze.cell_grid[i][j].walls[North] = Wall_Here;
 8001332:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 8001336:	2b0f      	cmp	r3, #15
 8001338:	d112      	bne.n	8001360 <do_flood_fill_algorithm+0x26c>
 800133a:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 800133e:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001342:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001346:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800134a:	461a      	mov	r2, r3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	441a      	add	r2, r3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	4403      	add	r3, r0
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
			if(j == MAP_SIZE - 1) maze.cell_grid[i][j].walls[East] = Wall_Here;
 8001360:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d113      	bne.n	8001390 <do_flood_fill_algorithm+0x29c>
 8001368:	f897 1827 	ldrb.w	r1, [r7, #2087]	; 0x827
 800136c:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001370:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001374:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001378:	461a      	mov	r2, r3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	441a      	add	r2, r3
 800137e:	460b      	mov	r3, r1
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	4403      	add	r3, r0
 800138a:	3301      	adds	r3, #1
 800138c:	2201      	movs	r2, #1
 800138e:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001390:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 8001394:	3301      	adds	r3, #1
 8001396:	f887 3826 	strb.w	r3, [r7, #2086]	; 0x826
 800139a:	f897 3826 	ldrb.w	r3, [r7, #2086]	; 0x826
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f aeb4 	bls.w	800110c <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80013a4:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80013a8:	3301      	adds	r3, #1
 80013aa:	f887 3827 	strb.w	r3, [r7, #2087]	; 0x827
 80013ae:	f897 3827 	ldrb.w	r3, [r7, #2087]	; 0x827
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	f67f aea6 	bls.w	8001104 <do_flood_fill_algorithm+0x10>
//	maze.cell_grid[0][0].walls[East] = Wall_Here;
//	maze.cell_grid[0][1].walls[West] = Wall_Here;

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3825 	strb.w	r3, [r7, #2085]	; 0x825
	maze_direction direction = desired_direction;  // the direction we're currently facing
 80013be:	f897 3825 	ldrb.w	r3, [r7, #2085]	; 0x825
 80013c2:	f887 3824 	strb.w	r3, [r7, #2084]	; 0x824
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);  // Always start in South, West corner facing North.
 80013c6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fde0 	bl	8001f94 <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we are currently in
 80013d4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80013d8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013dc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80013e0:	f2a2 620c 	subw	r2, r2, #1548	; 0x60c
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	801a      	strh	r2, [r3, #0]

	stack stack;

	print_maze(&maze, c, direction);
 80013e8:	f897 2824 	ldrb.w	r2, [r7, #2084]	; 0x824
 80013ec:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80013f0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013f4:	f507 7008 	add.w	r0, r7, #544	; 0x220
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	f000 fddf 	bl	8001fbc <print_maze>

	while(1)
	{
		if (requested_manual_command != AUTON_CHAR)
 80013fe:	4bd1      	ldr	r3, [pc, #836]	; (8001744 <do_flood_fill_algorithm+0x650>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b41      	cmp	r3, #65	; 0x41
 8001404:	f040 83d3 	bne.w	8001bae <do_flood_fill_algorithm+0xaba>
		{
			return;
		}
		switch(direction)
 8001408:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 800140c:	2b04      	cmp	r3, #4
 800140e:	d841      	bhi.n	8001494 <do_flood_fill_algorithm+0x3a0>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <do_flood_fill_algorithm+0x324>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001447 	.word	0x08001447
 8001420:	08001461 	.word	0x08001461
 8001424:	0800147b 	.word	0x0800147b
 8001428:	08001495 	.word	0x08001495
		{
		case North:
			c.y += 1;
 800142c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001430:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800143e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001442:	705a      	strb	r2, [r3, #1]
			break;
 8001444:	e026      	b.n	8001494 <do_flood_fill_algorithm+0x3a0>
		case East:
			c.x += 1;
 8001446:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800144a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001458:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800145c:	701a      	strb	r2, [r3, #0]
			break;
 800145e:	e019      	b.n	8001494 <do_flood_fill_algorithm+0x3a0>
		case South:
			c.y -= 1;
 8001460:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001464:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	3b01      	subs	r3, #1
 800146c:	b2da      	uxtb	r2, r3
 800146e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001472:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001476:	705a      	strb	r2, [r3, #1]
			break;
 8001478:	e00c      	b.n	8001494 <do_flood_fill_algorithm+0x3a0>
		case West:
			c.x -= 1;
 800147a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800147e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800148c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001490:	701a      	strb	r2, [r3, #0]
			break;
 8001492:	bf00      	nop
			break;
		}  // switch(direction)

		// visiting_coord should now be the coordinate that we're on.

		if(!maze.cell_grid[c.y][c.x].visited)
 8001494:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001498:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	4618      	mov	r0, r3
 80014a0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014a4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461c      	mov	r4, r3
 80014ac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014b0:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 80014b4:	4622      	mov	r2, r4
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4422      	add	r2, r4
 80014ba:	4603      	mov	r3, r0
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4403      	add	r3, r0
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	3304      	adds	r3, #4
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 82d0 	bne.w	8001a70 <do_flood_fill_algorithm+0x97c>
		{
			// Move in direction for unvisited cell
			printf("Going forward one unit into an unvisited cell. \r\n");
 80014d0:	489d      	ldr	r0, [pc, #628]	; (8001748 <do_flood_fill_algorithm+0x654>)
 80014d2:	f006 f893 	bl	80075fc <puts>
			go_forward_one_unit();
 80014d6:	f001 fc0f 	bl	8002cf8 <go_forward_one_unit>

			char buf[20];
			sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, direction);
 80014da:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014de:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80014ea:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 80014f6:	4638      	mov	r0, r7
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	4993      	ldr	r1, [pc, #588]	; (800174c <do_flood_fill_algorithm+0x658>)
 80014fe:	f006 f885 	bl	800760c <siprintf>
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001502:	4639      	mov	r1, r7
 8001504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001508:	2214      	movs	r2, #20
 800150a:	4891      	ldr	r0, [pc, #580]	; (8001750 <do_flood_fill_algorithm+0x65c>)
 800150c:	f004 f995 	bl	800583a <HAL_UART_Transmit>
			print_maze(&maze, c, direction);
 8001510:	f897 2824 	ldrb.w	r2, [r7, #2084]	; 0x824
 8001514:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001518:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800151c:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8001520:	6819      	ldr	r1, [r3, #0]
 8001522:	f000 fd4b 	bl	8001fbc <print_maze>

			if(is_there_wall_on_direction(Left))
 8001526:	2000      	movs	r0, #0
 8001528:	f002 f816 	bl	8003558 <is_there_wall_on_direction>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80c8 	beq.w	80016c4 <do_flood_fill_algorithm+0x5d0>
			{
				maze.cell_grid[c.y][c.x].walls[(direction - 1) % 4] = Wall_Here;
 8001534:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001538:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	461c      	mov	r4, r3
 8001540:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001544:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	461d      	mov	r5, r3
 800154c:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 8001550:	3b01      	subs	r3, #1
 8001552:	425a      	negs	r2, r3
 8001554:	f003 0103 	and.w	r1, r3, #3
 8001558:	f002 0303 	and.w	r3, r2, #3
 800155c:	bf58      	it	pl
 800155e:	4259      	negpl	r1, r3
 8001560:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001564:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001568:	462a      	mov	r2, r5
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	442a      	add	r2, r5
 800156e:	4623      	mov	r3, r4
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4423      	add	r3, r4
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4413      	add	r3, r2
 8001578:	4403      	add	r3, r0
 800157a:	440b      	add	r3, r1
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001580:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 8001584:	2b04      	cmp	r3, #4
 8001586:	f200 80a6 	bhi.w	80016d6 <do_flood_fill_algorithm+0x5e2>
 800158a:	a201      	add	r2, pc, #4	; (adr r2, 8001590 <do_flood_fill_algorithm+0x49c>)
 800158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001590:	080015a5 	.word	0x080015a5
 8001594:	080015ef 	.word	0x080015ef
 8001598:	08001635 	.word	0x08001635
 800159c:	0800167d 	.word	0x0800167d
 80015a0:	080016d7 	.word	0x080016d7
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 80015a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015a8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b0e      	cmp	r3, #14
 80015b0:	f200 808a 	bhi.w	80016c8 <do_flood_fill_algorithm+0x5d4>
 80015b4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015b8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	4618      	mov	r0, r3
 80015c0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015c4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80015d0:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80015d4:	461a      	mov	r2, r3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	441a      	add	r2, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4403      	add	r3, r0
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	4413      	add	r3, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	3303      	adds	r3, #3
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
					break;
 80015ec:	e06c      	b.n	80016c8 <do_flood_fill_algorithm+0x5d4>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 80015ee:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80015f2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d067      	beq.n	80016cc <do_flood_fill_algorithm+0x5d8>
 80015fc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001600:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	1e59      	subs	r1, r3, #1
 8001608:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800160c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461c      	mov	r4, r3
 8001614:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001618:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800161c:	4622      	mov	r2, r4
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4422      	add	r2, r4
 8001622:	460b      	mov	r3, r1
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	4413      	add	r3, r2
 800162c:	4403      	add	r3, r0
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
					break;
 8001632:	e04b      	b.n	80016cc <do_flood_fill_algorithm+0x5d8>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001634:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001638:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d046      	beq.n	80016d0 <do_flood_fill_algorithm+0x5dc>
 8001642:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001646:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	4618      	mov	r0, r3
 800164e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001652:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	3b01      	subs	r3, #1
 800165a:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800165e:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001662:	461a      	mov	r2, r3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	441a      	add	r2, r3
 8001668:	4603      	mov	r3, r0
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	440b      	add	r3, r1
 8001674:	3301      	adds	r3, #1
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
					break;
 800167a:	e029      	b.n	80016d0 <do_flood_fill_algorithm+0x5dc>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 800167c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001680:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	2b0e      	cmp	r3, #14
 8001688:	d824      	bhi.n	80016d4 <do_flood_fill_algorithm+0x5e0>
 800168a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800168e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	1c59      	adds	r1, r3, #1
 8001696:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800169a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461c      	mov	r4, r3
 80016a2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80016a6:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80016aa:	4622      	mov	r2, r4
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4422      	add	r2, r4
 80016b0:	460b      	mov	r3, r1
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4413      	add	r3, r2
 80016ba:	4403      	add	r3, r0
 80016bc:	3302      	adds	r3, #2
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
					break;
 80016c2:	e007      	b.n	80016d4 <do_flood_fill_algorithm+0x5e0>
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))
 80016c4:	bf00      	nop
 80016c6:	e006      	b.n	80016d6 <do_flood_fill_algorithm+0x5e2>
					break;
 80016c8:	bf00      	nop
 80016ca:	e004      	b.n	80016d6 <do_flood_fill_algorithm+0x5e2>
					break;
 80016cc:	bf00      	nop
 80016ce:	e002      	b.n	80016d6 <do_flood_fill_algorithm+0x5e2>
					break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <do_flood_fill_algorithm+0x5e2>
					break;
 80016d4:	bf00      	nop

			if(is_there_wall_on_direction(Front))
 80016d6:	2001      	movs	r0, #1
 80016d8:	f001 ff3e 	bl	8003558 <is_there_wall_on_direction>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80c8 	beq.w	8001874 <do_flood_fill_algorithm+0x780>
			{
				maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 80016e4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80016e8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016ec:	785b      	ldrb	r3, [r3, #1]
 80016ee:	461c      	mov	r4, r3
 80016f0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80016f4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461d      	mov	r5, r3
 80016fc:	f897 1824 	ldrb.w	r1, [r7, #2084]	; 0x824
 8001700:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001704:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001708:	462a      	mov	r2, r5
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	442a      	add	r2, r5
 800170e:	4623      	mov	r3, r4
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4423      	add	r3, r4
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	4413      	add	r3, r2
 8001718:	4403      	add	r3, r0
 800171a:	440b      	add	r3, r1
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001720:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 8001724:	2b04      	cmp	r3, #4
 8001726:	f200 80ae 	bhi.w	8001886 <do_flood_fill_algorithm+0x792>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <do_flood_fill_algorithm+0x63c>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001755 	.word	0x08001755
 8001734:	0800179f 	.word	0x0800179f
 8001738:	080017e7 	.word	0x080017e7
 800173c:	0800182d 	.word	0x0800182d
 8001740:	08001887 	.word	0x08001887
 8001744:	20000001 	.word	0x20000001
 8001748:	08009ba8 	.word	0x08009ba8
 800174c:	08009bdc 	.word	0x08009bdc
 8001750:	200003ac 	.word	0x200003ac
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001754:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001758:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	2b0e      	cmp	r3, #14
 8001760:	f200 808a 	bhi.w	8001878 <do_flood_fill_algorithm+0x784>
 8001764:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001768:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	1c59      	adds	r1, r3, #1
 8001770:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001774:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461c      	mov	r4, r3
 800177c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001780:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001784:	4622      	mov	r2, r4
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4422      	add	r2, r4
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	4413      	add	r3, r2
 8001794:	4403      	add	r3, r0
 8001796:	3302      	adds	r3, #2
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]
					break;
 800179c:	e06c      	b.n	8001878 <do_flood_fill_algorithm+0x784>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 800179e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80017a2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b0e      	cmp	r3, #14
 80017aa:	d867      	bhi.n	800187c <do_flood_fill_algorithm+0x788>
 80017ac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80017b0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80017bc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80017c8:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80017cc:	461a      	mov	r2, r3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	441a      	add	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4403      	add	r3, r0
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	440b      	add	r3, r1
 80017de:	3303      	adds	r3, #3
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
					break;
 80017e4:	e04a      	b.n	800187c <do_flood_fill_algorithm+0x788>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 80017e6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80017ea:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d045      	beq.n	8001880 <do_flood_fill_algorithm+0x78c>
 80017f4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80017f8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	1e59      	subs	r1, r3, #1
 8001800:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001804:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461c      	mov	r4, r3
 800180c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001810:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001814:	4622      	mov	r2, r4
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4422      	add	r2, r4
 800181a:	460b      	mov	r3, r1
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	4403      	add	r3, r0
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
					break;
 800182a:	e029      	b.n	8001880 <do_flood_fill_algorithm+0x78c>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 800182c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001830:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <do_flood_fill_algorithm+0x790>
 800183a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800183e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001842:	785b      	ldrb	r3, [r3, #1]
 8001844:	4618      	mov	r0, r3
 8001846:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800184a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001856:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 800185a:	461a      	mov	r2, r3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	441a      	add	r2, r3
 8001860:	4603      	mov	r3, r0
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4403      	add	r3, r0
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	440b      	add	r3, r1
 800186c:	3301      	adds	r3, #1
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
					break;
 8001872:	e007      	b.n	8001884 <do_flood_fill_algorithm+0x790>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Front))
 8001874:	bf00      	nop
 8001876:	e006      	b.n	8001886 <do_flood_fill_algorithm+0x792>
					break;
 8001878:	bf00      	nop
 800187a:	e004      	b.n	8001886 <do_flood_fill_algorithm+0x792>
					break;
 800187c:	bf00      	nop
 800187e:	e002      	b.n	8001886 <do_flood_fill_algorithm+0x792>
					break;
 8001880:	bf00      	nop
 8001882:	e000      	b.n	8001886 <do_flood_fill_algorithm+0x792>
					break;
 8001884:	bf00      	nop
			if(is_there_wall_on_direction(Right))
 8001886:	2002      	movs	r0, #2
 8001888:	f001 fe66 	bl	8003558 <is_there_wall_on_direction>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 80c8 	beq.w	8001a24 <do_flood_fill_algorithm+0x930>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001894:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001898:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	461c      	mov	r4, r3
 80018a0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80018a4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461d      	mov	r5, r3
 80018ac:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 80018b0:	3301      	adds	r3, #1
 80018b2:	425a      	negs	r2, r3
 80018b4:	f003 0103 	and.w	r1, r3, #3
 80018b8:	f002 0303 	and.w	r3, r2, #3
 80018bc:	bf58      	it	pl
 80018be:	4259      	negpl	r1, r3
 80018c0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80018c4:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80018c8:	462a      	mov	r2, r5
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	442a      	add	r2, r5
 80018ce:	4623      	mov	r3, r4
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4423      	add	r3, r4
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	4413      	add	r3, r2
 80018d8:	4403      	add	r3, r0
 80018da:	440b      	add	r3, r1
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
				switch(direction)
 80018e0:	f897 3824 	ldrb.w	r3, [r7, #2084]	; 0x824
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	f200 80a6 	bhi.w	8001a36 <do_flood_fill_algorithm+0x942>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <do_flood_fill_algorithm+0x7fc>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	08001905 	.word	0x08001905
 80018f4:	0800194f 	.word	0x0800194f
 80018f8:	08001997 	.word	0x08001997
 80018fc:	080019df 	.word	0x080019df
 8001900:	08001a37 	.word	0x08001a37
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001904:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001908:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 808a 	beq.w	8001a28 <do_flood_fill_algorithm+0x934>
 8001914:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001918:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	4618      	mov	r0, r3
 8001920:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001924:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3b01      	subs	r3, #1
 800192c:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001930:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001934:	461a      	mov	r2, r3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	441a      	add	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4403      	add	r3, r0
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	440b      	add	r3, r1
 8001946:	3301      	adds	r3, #1
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
					break;
 800194c:	e06c      	b.n	8001a28 <do_flood_fill_algorithm+0x934>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 800194e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001952:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001956:	785b      	ldrb	r3, [r3, #1]
 8001958:	2b0e      	cmp	r3, #14
 800195a:	d867      	bhi.n	8001a2c <do_flood_fill_algorithm+0x938>
 800195c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001960:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800196c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461c      	mov	r4, r3
 8001974:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001978:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800197c:	4622      	mov	r2, r4
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4422      	add	r2, r4
 8001982:	460b      	mov	r3, r1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	4403      	add	r3, r0
 800198e:	3302      	adds	r3, #2
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
					break;
 8001994:	e04a      	b.n	8001a2c <do_flood_fill_algorithm+0x938>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001996:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800199a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b0e      	cmp	r3, #14
 80019a2:	d845      	bhi.n	8001a30 <do_flood_fill_algorithm+0x93c>
 80019a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80019a8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80019b4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80019c0:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80019c4:	461a      	mov	r2, r3
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	441a      	add	r2, r3
 80019ca:	4603      	mov	r3, r0
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4403      	add	r3, r0
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	3303      	adds	r3, #3
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
					break;
 80019dc:	e028      	b.n	8001a30 <do_flood_fill_algorithm+0x93c>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 80019de:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80019e2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019e6:	785b      	ldrb	r3, [r3, #1]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d023      	beq.n	8001a34 <do_flood_fill_algorithm+0x940>
 80019ec:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80019f0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	1e59      	subs	r1, r3, #1
 80019f8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80019fc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461c      	mov	r4, r3
 8001a04:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a08:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4422      	add	r2, r4
 8001a12:	460b      	mov	r3, r1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
					break;
 8001a22:	e007      	b.n	8001a34 <do_flood_fill_algorithm+0x940>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))
 8001a24:	bf00      	nop
 8001a26:	e006      	b.n	8001a36 <do_flood_fill_algorithm+0x942>
					break;
 8001a28:	bf00      	nop
 8001a2a:	e004      	b.n	8001a36 <do_flood_fill_algorithm+0x942>
					break;
 8001a2c:	bf00      	nop
 8001a2e:	e002      	b.n	8001a36 <do_flood_fill_algorithm+0x942>
					break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <do_flood_fill_algorithm+0x942>
					break;
 8001a34:	bf00      	nop


			maze.cell_grid[c.y][c.x].visited = 1;
 8001a36:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a3a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a46:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461c      	mov	r4, r3
 8001a4e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a52:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 8001a56:	4622      	mov	r2, r4
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	4422      	add	r2, r4
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4403      	add	r3, r0
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e00f      	b.n	8001a90 <do_flood_fill_algorithm+0x99c>

		}  // if(!maze.cell_grid[c.y][c.x].visited)
		else
		{
			// Move in direction for visited cell
			printf("Going forward one unit into an already visited cell. Checking for walls. \r\n");
 8001a70:	4852      	ldr	r0, [pc, #328]	; (8001bbc <do_flood_fill_algorithm+0xac8>)
 8001a72:	f005 fdc3 	bl	80075fc <puts>
			go_forward_one_unit();
 8001a76:	f001 f93f 	bl	8002cf8 <go_forward_one_unit>

			print_maze(&maze, c, direction);
 8001a7a:	f897 2824 	ldrb.w	r2, [r7, #2084]	; 0x824
 8001a7e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a82:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a86:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	f000 fa96 	bl	8001fbc <print_maze>
		}

		if(found_flood_fill_destination(c, &maze))
 8001a90:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001a94:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001a98:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	6818      	ldr	r0, [r3, #0]
 8001aa0:	f000 f8ec 	bl	8001c7c <found_flood_fill_destination>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <do_flood_fill_algorithm+0x9be>
		{
			printf("Successfully found the center of the maze! \r\n");
 8001aaa:	4845      	ldr	r0, [pc, #276]	; (8001bc0 <do_flood_fill_algorithm+0xacc>)
 8001aac:	f005 fda6 	bl	80075fc <puts>
			return;
 8001ab0:	e080      	b.n	8001bb4 <do_flood_fill_algorithm+0xac0>
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001ab2:	f107 0214 	add.w	r2, r7, #20
 8001ab6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001aba:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001abe:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	f000 f8f4 	bl	8001cb0 <minus_one_neighbor>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f887 3825 	strb.w	r3, [r7, #2085]	; 0x825

		if(desired_direction == Unknown)
 8001ace:	f897 3825 	ldrb.w	r3, [r7, #2085]	; 0x825
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d130      	bne.n	8001b38 <do_flood_fill_algorithm+0xa44>
		{
			while(!stack_is_empty(&stack))
 8001ad6:	e019      	b.n	8001b0c <do_flood_fill_algorithm+0xa18>
			{
				if (requested_manual_command != AUTON_CHAR)
 8001ad8:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <do_flood_fill_algorithm+0xad0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b41      	cmp	r3, #65	; 0x41
 8001ade:	d168      	bne.n	8001bb2 <do_flood_fill_algorithm+0xabe>
				{
					return;
				}
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f889 	bl	8001bfc <pop_stack>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001af0:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001af4:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, next_coordinate, &stack);
 8001af6:	f107 0214 	add.w	r2, r7, #20
 8001afa:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001afe:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001b02:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	f000 f8d2 	bl	8001cb0 <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f861 	bl	8001bd8 <stack_is_empty>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0dd      	beq.n	8001ad8 <do_flood_fill_algorithm+0x9e4>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001b1c:	f107 0214 	add.w	r2, r7, #20
 8001b20:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001b24:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001b28:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	f000 f8bf 	bl	8001cb0 <minus_one_neighbor>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 3825 	strb.w	r3, [r7, #2085]	; 0x825
		}  // if(next_direction == Unknown)

		int difference = direction - desired_direction;
 8001b38:	f897 2824 	ldrb.w	r2, [r7, #2084]	; 0x824
 8001b3c:	f897 3825 	ldrb.w	r3, [r7, #2085]	; 0x825
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
		switch(difference % 4)
 8001b46:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001b4a:	425a      	negs	r2, r3
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	f002 0203 	and.w	r2, r2, #3
 8001b54:	bf58      	it	pl
 8001b56:	4253      	negpl	r3, r2
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d823      	bhi.n	8001ba4 <do_flood_fill_algorithm+0xab0>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <do_flood_fill_algorithm+0xa70>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b75 	.word	0x08001b75
 8001b68:	08001b7d 	.word	0x08001b7d
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b97 	.word	0x08001b97
		{
		case 0:
			printf("Will stay facing forward. \r\n");
 8001b74:	4814      	ldr	r0, [pc, #80]	; (8001bc8 <do_flood_fill_algorithm+0xad4>)
 8001b76:	f005 fd41 	bl	80075fc <puts>
			break;
 8001b7a:	e013      	b.n	8001ba4 <do_flood_fill_algorithm+0xab0>
		case 1:
			printf("Turning left. \r\n");
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <do_flood_fill_algorithm+0xad8>)
 8001b7e:	f005 fd3d 	bl	80075fc <puts>
			rotate_direction_90(Left);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f001 f87a 	bl	8002c7c <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001b88:	e00c      	b.n	8001ba4 <do_flood_fill_algorithm+0xab0>
		case 2:
			printf("Turning 180 degrees. \r\n");
 8001b8a:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <do_flood_fill_algorithm+0xadc>)
 8001b8c:	f005 fd36 	bl	80075fc <puts>
			rotate_180_degrees();
 8001b90:	f001 f8a4 	bl	8002cdc <rotate_180_degrees>
			// TODO - might need to calibrate
			break;
 8001b94:	e006      	b.n	8001ba4 <do_flood_fill_algorithm+0xab0>
		case 3:
			printf("Turning right. \r\n");
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <do_flood_fill_algorithm+0xae0>)
 8001b98:	f005 fd30 	bl	80075fc <puts>
			rotate_direction_90(Right);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f001 f86d 	bl	8002c7c <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001ba2:	bf00      	nop
		}

		direction = desired_direction;
 8001ba4:	f897 3825 	ldrb.w	r3, [r7, #2085]	; 0x825
 8001ba8:	f887 3824 	strb.w	r3, [r7, #2084]	; 0x824
	{
 8001bac:	e427      	b.n	80013fe <do_flood_fill_algorithm+0x30a>
			return;
 8001bae:	bf00      	nop
 8001bb0:	e000      	b.n	8001bb4 <do_flood_fill_algorithm+0xac0>
					return;
 8001bb2:	bf00      	nop

	}  // while(1)
}  // do_hug_left_algorithm()
 8001bb4:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	08009bf4 	.word	0x08009bf4
 8001bc0:	08009c40 	.word	0x08009c40
 8001bc4:	20000001 	.word	0x20000001
 8001bc8:	08009c70 	.word	0x08009c70
 8001bcc:	08009c8c 	.word	0x08009c8c
 8001bd0:	08009c9c 	.word	0x08009c9c
 8001bd4:	08009cb4 	.word	0x08009cb4

08001bd8 <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf0c      	ite	eq
 8001bea:	2301      	moveq	r3, #1
 8001bec:	2300      	movne	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <pop_stack>:

coordinate pop_stack(stack *s)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	440b      	add	r3, r1
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	8013      	strh	r3, [r2, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	7b3a      	ldrb	r2, [r7, #12]
 8001c2e:	f362 0307 	bfi	r3, r2, #0, #8
 8001c32:	7b7a      	ldrb	r2, [r7, #13]
 8001c34:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <push_stack>:

void push_stack(stack* s, coordinate c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	8039      	strh	r1, [r7, #0]
	s->index = s->index + 1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = c;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	463a      	mov	r2, r7
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <found_flood_fill_destination>:
		break;
	}  // switch(d)
}  // void move_forward_and_update(maze_direction d, coordinate c, Flood_Fill_Maze *m)

uint8_t found_flood_fill_destination(coordinate c, flood_fill_maze *maze)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	80b8      	strh	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c.y][c.x] == 0;
 8001c86:	797b      	ldrb	r3, [r7, #5]
 8001c88:	793a      	ldrb	r2, [r7, #4]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(coordinate c, Flood_Fill_Maze *maze)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate c, stack *s)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	8139      	strh	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
 8001cbc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cc0:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c.y][c.x] - 1;
 8001cc2:	7a7b      	ldrb	r3, [r7, #9]
 8001cc4:	7a3a      	ldrb	r2, [r7, #8]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	757b      	strb	r3, [r7, #21]
 8001ce2:	e0e8      	b.n	8001eb6 <minus_one_neighbor+0x206>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8001ce4:	7a7b      	ldrb	r3, [r7, #9]
 8001ce6:	461c      	mov	r4, r3
 8001ce8:	7a3b      	ldrb	r3, [r7, #8]
 8001cea:	7d79      	ldrb	r1, [r7, #21]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	441a      	add	r2, r3
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4423      	add	r3, r4
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4403      	add	r3, r0
 8001d00:	440b      	add	r3, r1
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 80ca 	bne.w	8001e9e <minus_one_neighbor+0x1ee>
		{
			switch(i)
 8001d0a:	7d7b      	ldrb	r3, [r7, #21]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	f200 80cf 	bhi.w	8001eb0 <minus_one_neighbor+0x200>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <minus_one_neighbor+0x68>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d2d 	.word	0x08001d2d
 8001d1c:	08001d8b 	.word	0x08001d8b
 8001d20:	08001de7 	.word	0x08001de7
 8001d24:	08001e43 	.word	0x08001e43
 8001d28:	08001eb1 	.word	0x08001eb1
			{
			case North:
				if(maze->distance_grid[c.y+1][c.x] == target)
 8001d2c:	7a7b      	ldrb	r3, [r7, #9]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	7a3a      	ldrb	r2, [r7, #8]
 8001d32:	4611      	mov	r1, r2
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d101      	bne.n	8001d50 <minus_one_neighbor+0xa0>
				{
					return i;
 8001d4c:	7d7b      	ldrb	r3, [r7, #21]
 8001d4e:	e11c      	b.n	8001f8a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y+1][c.x] == target)
				if(maze->distance_grid[c.y+1][c.x] < min_dist)
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	3301      	adds	r3, #1
 8001d54:	7a3a      	ldrb	r2, [r7, #8]
 8001d56:	4611      	mov	r1, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	8afa      	ldrh	r2, [r7, #22]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	f240 8099 	bls.w	8001ea2 <minus_one_neighbor+0x1f2>
				{
					min_dist = maze->distance_grid[c.y+1][c.x];
 8001d70:	7a7b      	ldrb	r3, [r7, #9]
 8001d72:	3301      	adds	r3, #1
 8001d74:	7a3a      	ldrb	r2, [r7, #8]
 8001d76:	4611      	mov	r1, r2
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	4413      	add	r3, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y+1][c.x] < min_dist)
				break;
 8001d88:	e08b      	b.n	8001ea2 <minus_one_neighbor+0x1f2>
			case East:
				if(maze->distance_grid[c.y][c.x+1] == target)
 8001d8a:	7a7b      	ldrb	r3, [r7, #9]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	7a3b      	ldrb	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	68f9      	ldr	r1, [r7, #12]
 8001d94:	0112      	lsls	r2, r2, #4
 8001d96:	440a      	add	r2, r1
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d101      	bne.n	8001dae <minus_one_neighbor+0xfe>
				{
					return i;
 8001daa:	7d7b      	ldrb	r3, [r7, #21]
 8001dac:	e0ed      	b.n	8001f8a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y][c.x+1] == target)
				if(maze->distance_grid[c.y][c.x+1] < min_dist)
 8001dae:	7a7b      	ldrb	r3, [r7, #9]
 8001db0:	461a      	mov	r2, r3
 8001db2:	7a3b      	ldrb	r3, [r7, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	440a      	add	r2, r1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	8afa      	ldrh	r2, [r7, #22]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d96c      	bls.n	8001ea6 <minus_one_neighbor+0x1f6>
				{
					min_dist = maze->distance_grid[c.y][c.x+1];
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	7a3b      	ldrb	r3, [r7, #8]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	440a      	add	r2, r1
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x+1] < min_dist)
				break;
 8001de4:	e05f      	b.n	8001ea6 <minus_one_neighbor+0x1f6>
			case South:
				if(maze->distance_grid[c.y-1][c.x] == target)
 8001de6:	7a7b      	ldrb	r3, [r7, #9]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	7a3a      	ldrb	r2, [r7, #8]
 8001dec:	4611      	mov	r1, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d101      	bne.n	8001e0a <minus_one_neighbor+0x15a>
				{
					return i;
 8001e06:	7d7b      	ldrb	r3, [r7, #21]
 8001e08:	e0bf      	b.n	8001f8a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y-1][c.x] == target)
				if(maze->distance_grid[c.y-1][c.x] < min_dist)
 8001e0a:	7a7b      	ldrb	r3, [r7, #9]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	7a3a      	ldrb	r2, [r7, #8]
 8001e10:	4611      	mov	r1, r2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8afa      	ldrh	r2, [r7, #22]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d940      	bls.n	8001eaa <minus_one_neighbor+0x1fa>
				{
					min_dist = maze->distance_grid[c.y-1][c.x];
 8001e28:	7a7b      	ldrb	r3, [r7, #9]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	7a3a      	ldrb	r2, [r7, #8]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y-1][c.x] < min_dist)
				break;
 8001e40:	e033      	b.n	8001eaa <minus_one_neighbor+0x1fa>
			case West:
				if(maze->distance_grid[c.y][c.x-1] == target)
 8001e42:	7a7b      	ldrb	r3, [r7, #9]
 8001e44:	461a      	mov	r2, r3
 8001e46:	7a3b      	ldrb	r3, [r7, #8]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	68f9      	ldr	r1, [r7, #12]
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	440a      	add	r2, r1
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d101      	bne.n	8001e66 <minus_one_neighbor+0x1b6>
				{
					return i;
 8001e62:	7d7b      	ldrb	r3, [r7, #21]
 8001e64:	e091      	b.n	8001f8a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y][c.x-1] == target)
				if(maze->distance_grid[c.y][c.x-1] < min_dist)
 8001e66:	7a7b      	ldrb	r3, [r7, #9]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	7a3b      	ldrb	r3, [r7, #8]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	440a      	add	r2, r1
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	8afa      	ldrh	r2, [r7, #22]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d914      	bls.n	8001eae <minus_one_neighbor+0x1fe>
				{
					min_dist = maze->distance_grid[c.y][c.x-1];
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	461a      	mov	r2, r3
 8001e88:	7a3b      	ldrb	r3, [r7, #8]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	440a      	add	r2, r1
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x-1] < min_dist)
				break;
 8001e9c:	e007      	b.n	8001eae <minus_one_neighbor+0x1fe>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8001e9e:	bf00      	nop
 8001ea0:	e006      	b.n	8001eb0 <minus_one_neighbor+0x200>
				break;
 8001ea2:	bf00      	nop
 8001ea4:	e004      	b.n	8001eb0 <minus_one_neighbor+0x200>
				break;
 8001ea6:	bf00      	nop
 8001ea8:	e002      	b.n	8001eb0 <minus_one_neighbor+0x200>
				break;
 8001eaa:	bf00      	nop
 8001eac:	e000      	b.n	8001eb0 <minus_one_neighbor+0x200>
				break;
 8001eae:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 8001eb0:	7d7b      	ldrb	r3, [r7, #21]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	757b      	strb	r3, [r7, #21]
 8001eb6:	7d7b      	ldrb	r3, [r7, #21]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	f67f af13 	bls.w	8001ce4 <minus_one_neighbor+0x34>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c.y][c.x] = min_dist + 1;
 8001ebe:	8afb      	ldrh	r3, [r7, #22]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	7a7a      	ldrb	r2, [r7, #9]
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	7a3a      	ldrb	r2, [r7, #8]
 8001ec8:	4610      	mov	r0, r2
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b2d9      	uxtb	r1, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	0123      	lsls	r3, r4, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4403      	add	r3, r0
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	460a      	mov	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	753b      	strb	r3, [r7, #20]
 8001ee2:	e04e      	b.n	8001f82 <minus_one_neighbor+0x2d2>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8001ee4:	7a7b      	ldrb	r3, [r7, #9]
 8001ee6:	461c      	mov	r4, r3
 8001ee8:	7a3b      	ldrb	r3, [r7, #8]
 8001eea:	7d39      	ldrb	r1, [r7, #20]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	441a      	add	r2, r3
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4423      	add	r3, r4
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	4403      	add	r3, r0
 8001f00:	440b      	add	r3, r1
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d139      	bne.n	8001f7c <minus_one_neighbor+0x2cc>
		{
			coordinate temp;
			switch(i)
 8001f08:	7d3b      	ldrb	r3, [r7, #20]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d832      	bhi.n	8001f74 <minus_one_neighbor+0x2c4>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <minus_one_neighbor+0x264>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f39 	.word	0x08001f39
 8001f1c:	08001f4d 	.word	0x08001f4d
 8001f20:	08001f61 	.word	0x08001f61
			{
			case North:
				init_coordinate(&temp, c.x, c.y + 1);
 8001f24:	7a39      	ldrb	r1, [r7, #8]
 8001f26:	7a7b      	ldrb	r3, [r7, #9]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f82f 	bl	8001f94 <init_coordinate>
				break;
 8001f36:	e01d      	b.n	8001f74 <minus_one_neighbor+0x2c4>
			case East:
				init_coordinate(&temp, c.x + 1, c.y);
 8001f38:	7a3b      	ldrb	r3, [r7, #8]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	7a7a      	ldrb	r2, [r7, #9]
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f825 	bl	8001f94 <init_coordinate>
				break;
 8001f4a:	e013      	b.n	8001f74 <minus_one_neighbor+0x2c4>
			case South:
				init_coordinate(&temp, c.x, c.y - 1);
 8001f4c:	7a39      	ldrb	r1, [r7, #8]
 8001f4e:	7a7b      	ldrb	r3, [r7, #9]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f81b 	bl	8001f94 <init_coordinate>
				break;
 8001f5e:	e009      	b.n	8001f74 <minus_one_neighbor+0x2c4>
			case West:
				init_coordinate(&temp, c.x - 1, c.y);
 8001f60:	7a3b      	ldrb	r3, [r7, #8]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b2d9      	uxtb	r1, r3
 8001f66:	7a7a      	ldrb	r2, [r7, #9]
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f811 	bl	8001f94 <init_coordinate>
				break;
 8001f72:	bf00      	nop
			}  // switch(i)
			push_stack(s, temp);
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff fe64 	bl	8001c44 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 8001f7c:	7d3b      	ldrb	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	753b      	strb	r3, [r7, #20]
 8001f82:	7d3b      	ldrb	r3, [r7, #20]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d9ad      	bls.n	8001ee4 <minus_one_neighbor+0x234>
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8001f88:	2304      	movs	r3, #4
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop

08001f94 <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	78fa      	ldrb	r2, [r7, #3]
 8001fa8:	701a      	strb	r2, [r3, #0]
	c->y = y;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	78ba      	ldrb	r2, [r7, #2]
 8001fae:	705a      	strb	r2, [r3, #1]
}  // void init_coor(coordinate c, uint8_t x, uint8_t y)
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0c6      	sub	sp, #280	; 0x118
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fca:	6018      	str	r0, [r3, #0]
 8001fcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fd4:	8019      	strh	r1, [r3, #0]
 8001fd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001fda:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001fde:	701a      	strb	r2, [r3, #0]
	printf("Printing maze grid. \r\n");
 8001fe0:	489c      	ldr	r0, [pc, #624]	; (8002254 <print_maze+0x298>)
 8001fe2:	f005 fb0b 	bl	80075fc <puts>
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001fec:	e08c      	b.n	8002108 <print_maze+0x14c>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001ff4:	e07e      	b.n	80020f4 <print_maze+0x138>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8001ff6:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8001ffa:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001ffe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002002:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002006:	6810      	ldr	r0, [r2, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	441a      	add	r2, r3
 800200e:	460b      	mov	r3, r1
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	4413      	add	r3, r2
 8002018:	4403      	add	r3, r0
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[East] << 1;
 8002020:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8002024:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002028:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800202c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002030:	6810      	ldr	r0, [r2, #0]
 8002032:	461a      	mov	r2, r3
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	441a      	add	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	4403      	add	r3, r0
 8002044:	3301      	adds	r3, #1
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	b25a      	sxtb	r2, r3
 800204c:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8002050:	4313      	orrs	r3, r2
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[South] << 2;
 8002058:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 800205c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002060:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002064:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002068:	6810      	ldr	r0, [r2, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	441a      	add	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	4403      	add	r3, r0
 800207c:	3302      	adds	r3, #2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	b25a      	sxtb	r2, r3
 8002084:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8002088:	4313      	orrs	r3, r2
 800208a:	b25b      	sxtb	r3, r3
 800208c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[West] << 3;
 8002090:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8002094:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002098:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800209c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020a0:	6810      	ldr	r0, [r2, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	4413      	add	r3, r2
 80020b2:	4403      	add	r3, r0
 80020b4:	3303      	adds	r3, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	b25a      	sxtb	r2, r3
 80020bc:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			maze_map[i][j] = 'a' + number;
 80020c8:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80020cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020d0:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 80020d4:	3161      	adds	r1, #97	; 0x61
 80020d6:	b2c8      	uxtb	r0, r1
 80020d8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80020dc:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	440a      	add	r2, r1
 80020e4:	4413      	add	r3, r2
 80020e6:	4602      	mov	r2, r0
 80020e8:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80020ea:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020ee:	3301      	adds	r3, #1
 80020f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80020f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	f67f af7c 	bls.w	8001ff6 <print_maze+0x3a>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80020fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002102:	3301      	adds	r3, #1
 8002104:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800210c:	2b0f      	cmp	r3, #15
 800210e:	f67f af6e 	bls.w	8001fee <print_maze+0x32>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 8002112:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002116:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d865      	bhi.n	80021ec <print_maze+0x230>
 8002120:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <print_maze+0x16c>)
 8002122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002126:	bf00      	nop
 8002128:	0800213d 	.word	0x0800213d
 800212c:	08002169 	.word	0x08002169
 8002130:	08002195 	.word	0x08002195
 8002134:	080021c1 	.word	0x080021c1
 8002138:	080021ed 	.word	0x080021ed
	{
	case North:
		maze_map[c.y][c.x] = 'N';
 800213c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002140:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	4618      	mov	r0, r3
 8002148:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800214c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002158:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800215c:	0103      	lsls	r3, r0, #4
 800215e:	4413      	add	r3, r2
 8002160:	440b      	add	r3, r1
 8002162:	224e      	movs	r2, #78	; 0x4e
 8002164:	701a      	strb	r2, [r3, #0]
		break;
 8002166:	e041      	b.n	80021ec <print_maze+0x230>
	case East:
		maze_map[c.y][c.x] = 'E';
 8002168:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800216c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	4618      	mov	r0, r3
 8002174:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002178:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002184:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002188:	0103      	lsls	r3, r0, #4
 800218a:	4413      	add	r3, r2
 800218c:	440b      	add	r3, r1
 800218e:	2245      	movs	r2, #69	; 0x45
 8002190:	701a      	strb	r2, [r3, #0]
		break;
 8002192:	e02b      	b.n	80021ec <print_maze+0x230>
	case South:
		maze_map[c.y][c.x] = 'S';
 8002194:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002198:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	4618      	mov	r0, r3
 80021a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021b0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80021b4:	0103      	lsls	r3, r0, #4
 80021b6:	4413      	add	r3, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	2253      	movs	r2, #83	; 0x53
 80021bc:	701a      	strb	r2, [r3, #0]
		break;
 80021be:	e015      	b.n	80021ec <print_maze+0x230>
	case West:
		maze_map[c.y][c.x] = 'W';
 80021c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021c8:	785b      	ldrb	r3, [r3, #1]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80021dc:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80021e0:	0103      	lsls	r3, r0, #4
 80021e2:	4413      	add	r3, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	2257      	movs	r2, #87	; 0x57
 80021e8:	701a      	strb	r2, [r3, #0]
		break;
 80021ea:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 80021ec:	230f      	movs	r3, #15
 80021ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80021f2:	e024      	b.n	800223e <print_maze+0x282>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 80021fa:	e013      	b.n	8002224 <print_maze+0x268>
		{
			printf("%c", maze_map[i][j]);
 80021fc:	f997 2115 	ldrsb.w	r2, [r7, #277]	; 0x115
 8002200:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002204:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002208:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	440a      	add	r2, r1
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f005 f96d 	bl	80074f4 <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800221a:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800221e:	3301      	adds	r3, #1
 8002220:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8002224:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d9e7      	bls.n	80021fc <print_maze+0x240>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)

		printf("\r\n");
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <print_maze+0x29c>)
 800222e:	f005 f9e5 	bl	80075fc <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 8002232:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002236:	3b01      	subs	r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800223e:	f997 3115 	ldrsb.w	r3, [r7, #277]	; 0x115
 8002242:	2b00      	cmp	r3, #0
 8002244:	dad6      	bge.n	80021f4 <print_maze+0x238>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_maze(flood_fill_maze *m, coordinate c)
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08009cc8 	.word	0x08009cc8
 8002258:	08009ce0 	.word	0x08009ce0

0800225c <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 8002260:	2000      	movs	r0, #0
 8002262:	f001 f979 	bl	8003558 <is_there_wall_on_direction>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 fd05 	bl	8002c7c <rotate_direction_90>
		go_forward_one_unit();
 8002272:	f000 fd41 	bl	8002cf8 <go_forward_one_unit>
 8002276:	e018      	b.n	80022aa <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8002278:	2001      	movs	r0, #1
 800227a:	f001 f96d 	bl	8003558 <is_there_wall_on_direction>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d010      	beq.n	80022a6 <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8002284:	2002      	movs	r0, #2
 8002286:	f001 f967 	bl	8003558 <is_there_wall_on_direction>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8002290:	f000 fd24 	bl	8002cdc <rotate_180_degrees>
			go_forward_one_unit();
 8002294:	f000 fd30 	bl	8002cf8 <go_forward_one_unit>
 8002298:	e007      	b.n	80022aa <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 800229a:	2002      	movs	r0, #2
 800229c:	f000 fcee 	bl	8002c7c <rotate_direction_90>
			go_forward_one_unit();
 80022a0:	f000 fd2a 	bl	8002cf8 <go_forward_one_unit>
 80022a4:	e001      	b.n	80022aa <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 80022a6:	f000 fd27 	bl	8002cf8 <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 80022aa:	f000 f808 	bl	80022be <found_hugger_destination>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 80022b4:	f7ff ffd2 	bl	800225c <do_hug_left_algorithm>
 80022b8:	e000      	b.n	80022bc <do_hug_left_algorithm+0x60>
		return;
 80022ba:	bf00      	nop
}  // do_hug_left_algorithm()
 80022bc:	bd80      	pop	{r7, pc}

080022be <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 80022c2:	2300      	movs	r3, #0
}  // found_hugger_destination()
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 80022d8:	2047      	movs	r0, #71	; 0x47
 80022da:	f001 fba8 	bl	8003a2e <HAL_NVIC_DisableIRQ>
	// Save the last command

	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80022de:	2047      	movs	r0, #71	; 0x47
 80022e0:	f001 fb97 	bl	8003a12 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80022e4:	2201      	movs	r2, #1
 80022e6:	4913      	ldr	r1, [pc, #76]	; (8002334 <HAL_UART_RxCpltCallback+0x64>)
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <HAL_UART_RxCpltCallback+0x68>)
 80022ea:	f003 fb38 	bl	800595e <HAL_UART_Receive_IT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	73fb      	strb	r3, [r7, #15]

	//	__HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d011      	beq.n	800231c <HAL_UART_RxCpltCallback+0x4c>
		Error_Handler();
 80022f8:	f000 fb6c 	bl	80029d4 <Error_Handler>
		HAL_UART_Abort_IT(&huart6);
 80022fc:	480e      	ldr	r0, [pc, #56]	; (8002338 <HAL_UART_RxCpltCallback+0x68>)
 80022fe:	f003 fb5f 	bl	80059c0 <HAL_UART_Abort_IT>
		SET_BIT(huart6.Instance->CR3, USART_CR3_EIE);
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_UART_RxCpltCallback+0x68>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_UART_RxCpltCallback+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	615a      	str	r2, [r3, #20]
		HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002312:	2201      	movs	r2, #1
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <HAL_UART_RxCpltCallback+0x64>)
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <HAL_UART_RxCpltCallback+0x68>)
 8002318:	f003 fb21 	bl	800595e <HAL_UART_Receive_IT>
	}
	HAL_NVIC_ClearPendingIRQ(USART6_IRQn);
 800231c:	2047      	movs	r0, #71	; 0x47
 800231e:	f001 fba0 	bl	8003a62 <HAL_NVIC_ClearPendingIRQ>
	requested_manual_command = UART6_rxBuffer[0];
 8002322:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_UART_RxCpltCallback+0x64>)
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_UART_RxCpltCallback+0x6c>)
 8002328:	701a      	strb	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200003f0 	.word	0x200003f0
 8002338:	200003ac 	.word	0x200003ac
 800233c:	20000001 	.word	0x20000001

08002340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002346:	f001 f995 	bl	8003674 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800234a:	f000 f873 	bl	8002434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800234e:	f000 fad1 	bl	80028f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002352:	f000 f925 	bl	80025a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002356:	f000 f97d 	bl	8002654 <MX_TIM4_Init>
  MX_TIM2_Init();
 800235a:	f000 f8c9 	bl	80024f0 <MX_TIM2_Init>
  MX_TIM5_Init();
 800235e:	f000 f9d3 	bl	8002708 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8002362:	f000 fa9d 	bl	80028a0 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8002366:	f000 fa23 	bl	80027b0 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800236a:	f000 fa6f 	bl	800284c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fdf4 	bl	8000f5c <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8002374:	2101      	movs	r1, #1
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fe0f 	bl	8000f9a <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 800237c:	2001      	movs	r0, #1
 800237e:	f000 fccd 	bl	8002d1c <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8002382:	f000 fbc9 	bl	8002b18 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <main+0xd0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <main+0xd0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0204 	orr.w	r2, r2, #4
 8002394:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8002396:	2100      	movs	r1, #0
 8002398:	481e      	ldr	r0, [pc, #120]	; (8002414 <main+0xd4>)
 800239a:	f002 fa97 	bl	80048cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 800239e:	2104      	movs	r1, #4
 80023a0:	481d      	ldr	r0, [pc, #116]	; (8002418 <main+0xd8>)
 80023a2:	f002 fa93 	bl	80048cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 80023a6:	2100      	movs	r1, #0
 80023a8:	481c      	ldr	r0, [pc, #112]	; (800241c <main+0xdc>)
 80023aa:	f002 fa8f 	bl	80048cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 80023ae:	2104      	movs	r1, #4
 80023b0:	4817      	ldr	r0, [pc, #92]	; (8002410 <main+0xd0>)
 80023b2:	f002 fa8b 	bl	80048cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  // Sonic Trigger PWM
 80023b6:	2100      	movs	r1, #0
 80023b8:	4819      	ldr	r0, [pc, #100]	; (8002420 <main+0xe0>)
 80023ba:	f002 fa87 	bl	80048cc <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80023be:	2201      	movs	r2, #1
 80023c0:	4918      	ldr	r1, [pc, #96]	; (8002424 <main+0xe4>)
 80023c2:	4819      	ldr	r0, [pc, #100]	; (8002428 <main+0xe8>)
 80023c4:	f003 facb 	bl	800595e <HAL_UART_Receive_IT>
  uint8_t determined_algorithm = determine_algorithm();
 80023c8:	f7fe fe42 	bl	8001050 <determine_algorithm>
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]

  requested_manual_command = S_CHAR;  // TODO - change to S_CHAR if manual mode is supported, AUTON_CHAR if not
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <main+0xec>)
 80023d2:	2238      	movs	r2, #56	; 0x38
 80023d4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (current_manual_command != AUTON_CHAR)
 80023d6:	e00a      	b.n	80023ee <main+0xae>
	  {
		  if(requested_manual_command != current_manual_command)
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <main+0xec>)
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <main+0xf0>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d004      	beq.n	80023ee <main+0xae>
		  {
			  execute_manual_command(requested_manual_command);
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <main+0xec>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 faf9 	bl	80029e0 <execute_manual_command>
	  while (current_manual_command != AUTON_CHAR)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <main+0xf0>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b41      	cmp	r3, #65	; 0x41
 80023f4:	d1f0      	bne.n	80023d8 <main+0x98>
		  }  // if(requested_manual_command != current_manual_command)
	  }  // while (current_manual_command != AUTON_CHAR)
	  do_search_algorithm(determined_algorithm);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fe47 	bl	800108c <do_search_algorithm>
	  complete_search_algorithm();
 80023fe:	f7fe fe6a 	bl	80010d6 <complete_search_algorithm>
	  requested_manual_command = S_CHAR;
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <main+0xec>)
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	701a      	strb	r2, [r3, #0]
	  current_manual_command = S_CHAR;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <main+0xf0>)
 800240a:	2238      	movs	r2, #56	; 0x38
 800240c:	701a      	strb	r2, [r3, #0]
	  while (current_manual_command != AUTON_CHAR)
 800240e:	e7ee      	b.n	80023ee <main+0xae>
 8002410:	200002d8 	.word	0x200002d8
 8002414:	20000290 	.word	0x20000290
 8002418:	20000248 	.word	0x20000248
 800241c:	20000200 	.word	0x20000200
 8002420:	20000320 	.word	0x20000320
 8002424:	200003f0 	.word	0x200003f0
 8002428:	200003ac 	.word	0x200003ac
 800242c:	20000001 	.word	0x20000001
 8002430:	20000000 	.word	0x20000000

08002434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b094      	sub	sp, #80	; 0x50
 8002438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	2230      	movs	r2, #48	; 0x30
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fbcc 	bl	8006be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <SystemClock_Config+0xb4>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <SystemClock_Config+0xb4>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002466:	6413      	str	r3, [r2, #64]	; 0x40
 8002468:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <SystemClock_Config+0xb4>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <SystemClock_Config+0xb8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <SystemClock_Config+0xb8>)
 800247e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <SystemClock_Config+0xb8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002490:	2302      	movs	r3, #2
 8002492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002494:	2301      	movs	r3, #1
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002498:	2310      	movs	r3, #16
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800249c:	2300      	movs	r3, #0
 800249e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fd1b 	bl	8003ee0 <HAL_RCC_OscConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80024b0:	f000 fa90 	bl	80029d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b4:	230f      	movs	r3, #15
 80024b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f001 ff7e 	bl	80043d0 <HAL_RCC_ClockConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80024da:	f000 fa7b 	bl	80029d4 <Error_Handler>
  }
}
 80024de:	bf00      	nop
 80024e0:	3750      	adds	r7, #80	; 0x50
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40007000 	.word	0x40007000

080024f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f6:	f107 0320 	add.w	r3, r7, #32
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	615a      	str	r2, [r3, #20]
 8002510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <MX_TIM2_Init+0xac>)
 8002514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <MX_TIM2_Init+0xac>)
 800251c:	229f      	movs	r2, #159	; 0x9f
 800251e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <MX_TIM2_Init+0xac>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <MX_TIM2_Init+0xac>)
 8002528:	f640 729f 	movw	r2, #3999	; 0xf9f
 800252c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM2_Init+0xac>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM2_Init+0xac>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800253a:	4818      	ldr	r0, [pc, #96]	; (800259c <MX_TIM2_Init+0xac>)
 800253c:	f002 f977 	bl	800482e <HAL_TIM_PWM_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002546:	f000 fa45 	bl	80029d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002552:	f107 0320 	add.w	r3, r7, #32
 8002556:	4619      	mov	r1, r3
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <MX_TIM2_Init+0xac>)
 800255a:	f003 f89f 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002564:	f000 fa36 	bl	80029d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002568:	2360      	movs	r3, #96	; 0x60
 800256a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	4619      	mov	r1, r3
 800257e:	4807      	ldr	r0, [pc, #28]	; (800259c <MX_TIM2_Init+0xac>)
 8002580:	f002 fc48 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800258a:	f000 fa23 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800258e:	4803      	ldr	r0, [pc, #12]	; (800259c <MX_TIM2_Init+0xac>)
 8002590:	f000 fcce 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000200 	.word	0x20000200

080025a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a6:	f107 0320 	add.w	r3, r7, #32
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <MX_TIM3_Init+0xac>)
 80025c4:	4a22      	ldr	r2, [pc, #136]	; (8002650 <MX_TIM3_Init+0xb0>)
 80025c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_TIM3_Init+0xac>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b1f      	ldr	r3, [pc, #124]	; (800264c <MX_TIM3_Init+0xac>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <MX_TIM3_Init+0xac>)
 80025d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80025da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <MX_TIM3_Init+0xac>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b1a      	ldr	r3, [pc, #104]	; (800264c <MX_TIM3_Init+0xac>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025e8:	4818      	ldr	r0, [pc, #96]	; (800264c <MX_TIM3_Init+0xac>)
 80025ea:	f002 f920 	bl	800482e <HAL_TIM_PWM_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80025f4:	f000 f9ee 	bl	80029d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	4619      	mov	r1, r3
 8002606:	4811      	ldr	r0, [pc, #68]	; (800264c <MX_TIM3_Init+0xac>)
 8002608:	f003 f848 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002612:	f000 f9df 	bl	80029d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002616:	2360      	movs	r3, #96	; 0x60
 8002618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2204      	movs	r2, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_TIM3_Init+0xac>)
 800262e:	f002 fbf1 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002638:	f000 f9cc 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_TIM3_Init+0xac>)
 800263e:	f000 fc77 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000248 	.word	0x20000248
 8002650:	40000400 	.word	0x40000400

08002654 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MX_TIM4_Init+0xac>)
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <MX_TIM4_Init+0xb0>)
 800267a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <MX_TIM4_Init+0xac>)
 800267e:	224f      	movs	r2, #79	; 0x4f
 8002680:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_TIM4_Init+0xac>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <MX_TIM4_Init+0xac>)
 800268a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800268e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <MX_TIM4_Init+0xac>)
 8002692:	2200      	movs	r2, #0
 8002694:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_TIM4_Init+0xac>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800269c:	4818      	ldr	r0, [pc, #96]	; (8002700 <MX_TIM4_Init+0xac>)
 800269e:	f002 f8c6 	bl	800482e <HAL_TIM_PWM_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80026a8:	f000 f994 	bl	80029d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b4:	f107 0320 	add.w	r3, r7, #32
 80026b8:	4619      	mov	r1, r3
 80026ba:	4811      	ldr	r0, [pc, #68]	; (8002700 <MX_TIM4_Init+0xac>)
 80026bc:	f002 ffee 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80026c6:	f000 f985 	bl	80029d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ca:	2360      	movs	r3, #96	; 0x60
 80026cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	; (8002700 <MX_TIM4_Init+0xac>)
 80026e2:	f002 fb97 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80026ec:	f000 f972 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <MX_TIM4_Init+0xac>)
 80026f2:	f000 fc1d 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000290 	.word	0x20000290
 8002704:	40000800 	.word	0x40000800

08002708 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002718:	463b      	mov	r3, r7
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <MX_TIM5_Init+0xa4>)
 8002728:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 800272a:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <MX_TIM5_Init+0xa0>)
 800272c:	220f      	movs	r2, #15
 800272e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002730:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002738:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800273c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800274a:	4817      	ldr	r0, [pc, #92]	; (80027a8 <MX_TIM5_Init+0xa0>)
 800274c:	f002 f96e 	bl	8004a2c <HAL_TIM_IC_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002756:	f000 f93d 	bl	80029d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4619      	mov	r1, r3
 8002768:	480f      	ldr	r0, [pc, #60]	; (80027a8 <MX_TIM5_Init+0xa0>)
 800276a:	f002 ff97 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002774:	f000 f92e 	bl	80029d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002778:	2300      	movs	r3, #0
 800277a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800277c:	2301      	movs	r3, #1
 800277e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	2204      	movs	r2, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_TIM5_Init+0xa0>)
 8002790:	f002 faa3 	bl	8004cda <HAL_TIM_IC_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800279a:	f000 f91b 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200002d8 	.word	0x200002d8
 80027ac:	40000c00 	.word	0x40000c00

080027b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <MX_TIM10_Init+0x94>)
 80027ca:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <MX_TIM10_Init+0x98>)
 80027cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <MX_TIM10_Init+0x94>)
 80027d0:	229f      	movs	r2, #159	; 0x9f
 80027d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <MX_TIM10_Init+0x94>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <MX_TIM10_Init+0x94>)
 80027dc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80027e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_TIM10_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_TIM10_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80027ee:	4815      	ldr	r0, [pc, #84]	; (8002844 <MX_TIM10_Init+0x94>)
 80027f0:	f001 ffce 	bl	8004790 <HAL_TIM_Base_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80027fa:	f000 f8eb 	bl	80029d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80027fe:	4811      	ldr	r0, [pc, #68]	; (8002844 <MX_TIM10_Init+0x94>)
 8002800:	f002 f815 	bl	800482e <HAL_TIM_PWM_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800280a:	f000 f8e3 	bl	80029d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280e:	2360      	movs	r3, #96	; 0x60
 8002810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	4619      	mov	r1, r3
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <MX_TIM10_Init+0x94>)
 8002826:	f002 faf5 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002830:	f000 f8d0 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002834:	4803      	ldr	r0, [pc, #12]	; (8002844 <MX_TIM10_Init+0x94>)
 8002836:	f000 fb7b 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 800283a:	bf00      	nop
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000320 	.word	0x20000320
 8002848:	40014400 	.word	0x40014400

0800284c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <MX_USART2_UART_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_USART2_UART_Init+0x4c>)
 8002884:	f002 ff8c 	bl	80057a0 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800288e:	f000 f8a1 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000368 	.word	0x20000368
 800289c:	40004400 	.word	0x40004400

080028a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART6_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_USART6_UART_Init+0x4c>)
 80028d8:	f002 ff62 	bl	80057a0 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 f877 	bl	80029d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200003ac 	.word	0x200003ac
 80028f0:	40011400 	.word	0x40011400

080028f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	f107 030c 	add.w	r3, r7, #12
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <MX_GPIO_Init+0xb4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <MX_GPIO_Init+0xb4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <MX_GPIO_Init+0xb4>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_GPIO_Init+0xb4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002964:	4811      	ldr	r0, [pc, #68]	; (80029ac <MX_GPIO_Init+0xb8>)
 8002966:	f001 faa1 	bl	8003eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 800296a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800296e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	4619      	mov	r1, r3
 8002982:	480a      	ldr	r0, [pc, #40]	; (80029ac <MX_GPIO_Init+0xb8>)
 8002984:	f001 f90e 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8002988:	2340      	movs	r3, #64	; 0x40
 800298a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4619      	mov	r1, r3
 800299a:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_GPIO_Init+0xb8>)
 800299c:	f001 f902 	bl	8003ba4 <HAL_GPIO_Init>

}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020000 	.word	0x40020000

080029b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80029b8:	1d39      	adds	r1, r7, #4
 80029ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029be:	2201      	movs	r2, #1
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <__io_putchar+0x20>)
 80029c2:	f002 ff3a 	bl	800583a <HAL_UART_Transmit>
  return ch;
 80029c6:	687b      	ldr	r3, [r7, #4]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000368 	.word	0x20000368

080029d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d8:	b672      	cpsid	i
}
 80029da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029dc:	e7fe      	b.n	80029dc <Error_Handler+0x8>
	...

080029e0 <execute_manual_command>:
#include "manual_control.h"

void execute_manual_command(char command)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]

	switch(command)
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	3b32      	subs	r3, #50	; 0x32
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	d833      	bhi.n	8002a5a <execute_manual_command+0x7a>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <execute_manual_command+0x18>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a49 	.word	0x08002a49
 80029fc:	08002a5b 	.word	0x08002a5b
 8002a00:	08002a39 	.word	0x08002a39
 8002a04:	08002a4f 	.word	0x08002a4f
 8002a08:	08002a41 	.word	0x08002a41
 8002a0c:	08002a5b 	.word	0x08002a5b
 8002a10:	08002a55 	.word	0x08002a55
 8002a14:	08002a5b 	.word	0x08002a5b
 8002a18:	08002a5b 	.word	0x08002a5b
 8002a1c:	08002a5b 	.word	0x08002a5b
 8002a20:	08002a5b 	.word	0x08002a5b
 8002a24:	08002a5b 	.word	0x08002a5b
 8002a28:	08002a5b 	.word	0x08002a5b
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a5b 	.word	0x08002a5b
 8002a34:	08002a55 	.word	0x08002a55
	{
	case LEFT_CHAR:
		rotate_direction(Left);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f000 f88d 	bl	8002b58 <rotate_direction>
		break;
 8002a3e:	e00d      	b.n	8002a5c <execute_manual_command+0x7c>
	case RIGHT_CHAR:
		rotate_direction(Right);
 8002a40:	2002      	movs	r0, #2
 8002a42:	f000 f889 	bl	8002b58 <rotate_direction>
		break;
 8002a46:	e009      	b.n	8002a5c <execute_manual_command+0x7c>
	case FORWARD_CHAR:
		motors_forward();
 8002a48:	f000 f8d2 	bl	8002bf0 <motors_forward>
		break;
 8002a4c:	e006      	b.n	8002a5c <execute_manual_command+0x7c>
	case BACKWARD_CHAR:
		motors_backward();
 8002a4e:	f000 f8f1 	bl	8002c34 <motors_backward>
		break;
 8002a52:	e003      	b.n	8002a5c <execute_manual_command+0x7c>
	case AUTON_CHAR:
	case S_CHAR:
		stop_all_motors();
 8002a54:	f000 f860 	bl	8002b18 <stop_all_motors>
		break;
 8002a58:	e000      	b.n	8002a5c <execute_manual_command+0x7c>
	default:
		break;
 8002a5a:	bf00      	nop
	}  // switch(command)
	current_manual_command = requested_manual_command;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <execute_manual_command+0x8c>)
 8002a5e:	781a      	ldrb	r2, [r3, #0]
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <execute_manual_command+0x90>)
 8002a62:	701a      	strb	r2, [r3, #0]


}  // void execute_manual_command(char message[30])
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000001 	.word	0x20000001
 8002a70:	20000000 	.word	0x20000000

08002a74 <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <set_motor_speed+0x1c>
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d016      	beq.n	8002abc <set_motor_speed+0x48>
 8002a8e:	e02b      	b.n	8002ae8 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002a90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bfd4      	ite	le
 8002a98:	2301      	movle	r3, #1
 8002a9a:	2300      	movgt	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <set_motor_speed+0x7c>)
 8002aa6:	f001 fa01 	bl	8003eac <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 8002aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bfb8      	it	lt
 8002ab2:	425b      	neglt	r3, r3
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <set_motor_speed+0x80>)
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002aba:	e015      	b.n	8002ae8 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bfd4      	ite	le
 8002ac4:	2301      	movle	r3, #1
 8002ac6:	2300      	movgt	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad0:	4807      	ldr	r0, [pc, #28]	; (8002af0 <set_motor_speed+0x7c>)
 8002ad2:	f001 f9eb 	bl	8003eac <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 8002ad6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bfb8      	it	lt
 8002ade:	425b      	neglt	r3, r3
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <set_motor_speed+0x84>)
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 8002ae6:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000400 	.word	0x40000400

08002afc <stop_motor>:

void stop_motor(motor_side side)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
	set_motor_speed(side, 0);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ffb2 	bl	8002a74 <set_motor_speed>
}  // stop_motor(motor_side side)
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <stop_all_motors>:

void stop_all_motors()
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
	char buf[20];
	memcpy(buf, "$STOP,,,,,,,,,,,,,,", 20);
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <stop_all_motors+0x38>)
 8002b20:	1d3c      	adds	r4, r7, #4
 8002b22:	461d      	mov	r5, r3
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002b2c:	1d39      	adds	r1, r7, #4
 8002b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b32:	2214      	movs	r2, #20
 8002b34:	4807      	ldr	r0, [pc, #28]	; (8002b54 <stop_all_motors+0x3c>)
 8002b36:	f002 fe80 	bl	800583a <HAL_UART_Transmit>
	stop_motor(Left_Motor);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7ff ffde 	bl	8002afc <stop_motor>
	stop_motor(Right_Motor);
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff ffdb 	bl	8002afc <stop_motor>
}  // stop_all_motors()
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	08009d00 	.word	0x08009d00
 8002b54:	200003ac 	.word	0x200003ac

08002b58 <rotate_direction>:

void rotate_direction(direction d)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	char buf[20];
	switch(d)
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d01f      	beq.n	8002ba8 <rotate_direction+0x50>
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	dc37      	bgt.n	8002bdc <rotate_direction+0x84>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <rotate_direction+0x1c>
 8002b70:	2b01      	cmp	r3, #1
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		set_motor_speed(Left_Motor, -180);
		set_motor_speed(Right_Motor, 200);
		return;
	case Front:
		return;
 8002b72:	e033      	b.n	8002bdc <rotate_direction+0x84>
		memcpy(buf, "$LEFT,,,,,,,,,,,,,,", 20);
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <rotate_direction+0x8c>)
 8002b76:	f107 040c 	add.w	r4, r7, #12
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002b84:	f107 010c 	add.w	r1, r7, #12
 8002b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8c:	2214      	movs	r2, #20
 8002b8e:	4816      	ldr	r0, [pc, #88]	; (8002be8 <rotate_direction+0x90>)
 8002b90:	f002 fe53 	bl	800583a <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, -180);
 8002b94:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7ff ff6b 	bl	8002a74 <set_motor_speed>
		set_motor_speed(Right_Motor, 200);
 8002b9e:	21c8      	movs	r1, #200	; 0xc8
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f7ff ff67 	bl	8002a74 <set_motor_speed>
		return;
 8002ba6:	e019      	b.n	8002bdc <rotate_direction+0x84>
	case Right:
		memcpy(buf, "$RIGHT,,,,,,,,,,,,,", 20);
 8002ba8:	4b10      	ldr	r3, [pc, #64]	; (8002bec <rotate_direction+0x94>)
 8002baa:	f107 040c 	add.w	r4, r7, #12
 8002bae:	461d      	mov	r5, r3
 8002bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002bb8:	f107 010c 	add.w	r1, r7, #12
 8002bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc0:	2214      	movs	r2, #20
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <rotate_direction+0x90>)
 8002bc4:	f002 fe39 	bl	800583a <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, 180);
 8002bc8:	21b4      	movs	r1, #180	; 0xb4
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff ff52 	bl	8002a74 <set_motor_speed>
		set_motor_speed(Right_Motor, -200);
 8002bd0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7ff ff4d 	bl	8002a74 <set_motor_speed>
		return;
 8002bda:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d)
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bdb0      	pop	{r4, r5, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	08009d14 	.word	0x08009d14
 8002be8:	200003ac 	.word	0x200003ac
 8002bec:	08009d28 	.word	0x08009d28

08002bf0 <motors_forward>:

void motors_forward()
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
	char buf[20];
	memcpy(buf, "$FORWARD,,,,,,,,,,,", 20);
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <motors_forward+0x3c>)
 8002bf8:	1d3c      	adds	r4, r7, #4
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002c04:	1d39      	adds	r1, r7, #4
 8002c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0a:	2214      	movs	r2, #20
 8002c0c:	4808      	ldr	r0, [pc, #32]	; (8002c30 <motors_forward+0x40>)
 8002c0e:	f002 fe14 	bl	800583a <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, 180);
 8002c12:	21b4      	movs	r1, #180	; 0xb4
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff ff2d 	bl	8002a74 <set_motor_speed>
	set_motor_speed(Right_Motor, 200);
 8002c1a:	21c8      	movs	r1, #200	; 0xc8
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	f7ff ff29 	bl	8002a74 <set_motor_speed>
}  // void motors_forward()
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08009d3c 	.word	0x08009d3c
 8002c30:	200003ac 	.word	0x200003ac

08002c34 <motors_backward>:

void motors_backward()
{
 8002c34:	b5b0      	push	{r4, r5, r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
	char buf[20];
	memcpy(buf, "$BACKWARD,,,,,,,,,,", 20);
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <motors_backward+0x40>)
 8002c3c:	1d3c      	adds	r4, r7, #4
 8002c3e:	461d      	mov	r5, r3
 8002c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002c48:	1d39      	adds	r1, r7, #4
 8002c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4e:	2214      	movs	r2, #20
 8002c50:	4809      	ldr	r0, [pc, #36]	; (8002c78 <motors_backward+0x44>)
 8002c52:	f002 fdf2 	bl	800583a <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, -180);
 8002c56:	f06f 01b3 	mvn.w	r1, #179	; 0xb3
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff ff0a 	bl	8002a74 <set_motor_speed>
	set_motor_speed(Right_Motor, -200);
 8002c60:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7ff ff05 	bl	8002a74 <set_motor_speed>
}  // void motors_forward()
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	08009d50 	.word	0x08009d50
 8002c78:	200003ac 	.word	0x200003ac

08002c7c <rotate_direction_90>:
#include "mouse.h"

void rotate_direction_90(direction d)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]


	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d012      	beq.n	8002cb2 <rotate_direction_90+0x36>
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	dc1d      	bgt.n	8002ccc <rotate_direction_90+0x50>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <rotate_direction_90+0x1c>
 8002c94:	2b01      	cmp	r3, #1
		rotate_direction(Left);
		HAL_Delay(500);
		stop_all_motors();
		return;
	case Front:
		return;
 8002c96:	e019      	b.n	8002ccc <rotate_direction_90+0x50>
		printf("Rotating left. \r\n");
 8002c98:	480e      	ldr	r0, [pc, #56]	; (8002cd4 <rotate_direction_90+0x58>)
 8002c9a:	f004 fcaf 	bl	80075fc <puts>
		rotate_direction(Left);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7ff ff5a 	bl	8002b58 <rotate_direction>
		HAL_Delay(500);
 8002ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ca8:	f000 fd56 	bl	8003758 <HAL_Delay>
		stop_all_motors();
 8002cac:	f7ff ff34 	bl	8002b18 <stop_all_motors>
		return;
 8002cb0:	e00c      	b.n	8002ccc <rotate_direction_90+0x50>
	case Right:
		printf("Rotating right. \r\n");
 8002cb2:	4809      	ldr	r0, [pc, #36]	; (8002cd8 <rotate_direction_90+0x5c>)
 8002cb4:	f004 fca2 	bl	80075fc <puts>
		rotate_direction(Right);
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7ff ff4d 	bl	8002b58 <rotate_direction>
		HAL_Delay(500);
 8002cbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cc2:	f000 fd49 	bl	8003758 <HAL_Delay>
		stop_all_motors();
 8002cc6:	f7ff ff27 	bl	8002b18 <stop_all_motors>
		return;
 8002cca:	bf00      	nop
	}  // switch(d)
}  // rotate_direction_90(direction d)
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08009d64 	.word	0x08009d64
 8002cd8:	08009d78 	.word	0x08009d78

08002cdc <rotate_180_degrees>:

void rotate_180_degrees()
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7ff ffcb 	bl	8002c7c <rotate_direction_90>
	HAL_Delay(200);
 8002ce6:	20c8      	movs	r0, #200	; 0xc8
 8002ce8:	f000 fd36 	bl	8003758 <HAL_Delay>
	rotate_direction_90(Left);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7ff ffc5 	bl	8002c7c <rotate_direction_90>

}  // rotate_180_degrees()
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	// TODO - make sure numbers are precise enough. need to tune
	printf("Heading forward. \r\n");
 8002cfc:	4806      	ldr	r0, [pc, #24]	; (8002d18 <go_forward_one_unit+0x20>)
 8002cfe:	f004 fc7d 	bl	80075fc <puts>
	motors_forward();
 8002d02:	f7ff ff75 	bl	8002bf0 <motors_forward>
	HAL_Delay(1000);
 8002d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d0a:	f000 fd25 	bl	8003758 <HAL_Delay>
	stop_all_motors();
 8002d0e:	f7ff ff03 	bl	8002b18 <stop_all_motors>
}  // go_forward()
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08009d8c 	.word	0x08009d8c

08002d1c <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d010      	beq.n	8002d4e <set_servo_angle+0x32>
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	dc13      	bgt.n	8002d58 <set_servo_angle+0x3c>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <set_servo_angle+0x1e>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d005      	beq.n	8002d44 <set_servo_angle+0x28>
 8002d38:	e00e      	b.n	8002d58 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 200;
 8002d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d3e:	22c8      	movs	r2, #200	; 0xc8
 8002d40:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002d42:	e009      	b.n	8002d58 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 100;
 8002d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002d4c:	e004      	b.n	8002d58 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 40;
 8002d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002d56:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d78:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_MspInit+0x4c>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800

08002db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a1c      	ldr	r2, [pc, #112]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002de2:	e026      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_TIM_PWM_MspInit+0x90>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
}
 8002e0a:	e012      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_TIM_PWM_MspInit+0x94>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10d      	bne.n	8002e32 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6413      	str	r3, [r2, #64]	; 0x40
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_TIM_PWM_MspInit+0x8c>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800

08002e4c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIM_IC_MspInit+0x94>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d133      	bne.n	8002ed6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_TIM_IC_MspInit+0x98>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <HAL_TIM_IC_MspInit+0x9c>)
 8002ec2:	f000 fe6f 	bl	8003ba4 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2032      	movs	r0, #50	; 0x32
 8002ecc:	f000 fd85 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f000 fd9e 	bl	8003a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	; 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40000c00 	.word	0x40000c00
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020000 	.word	0x40020000

08002eec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_TIM_Base_MspInit+0x3c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10d      	bne.n	8002f1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_TIM_Base_MspInit+0x40>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d11f      	bne.n	8002f92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a46      	ldr	r2, [pc, #280]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f80:	2301      	movs	r3, #1
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	4619      	mov	r1, r3
 8002f8a:	483b      	ldr	r0, [pc, #236]	; (8003078 <HAL_TIM_MspPostInit+0x148>)
 8002f8c:	f000 fe0a 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002f90:	e06b      	b.n	800306a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a39      	ldr	r2, [pc, #228]	; (800307c <HAL_TIM_MspPostInit+0x14c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d11e      	bne.n	8002fda <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6313      	str	r3, [r2, #48]	; 0x30
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	482b      	ldr	r0, [pc, #172]	; (8003080 <HAL_TIM_MspPostInit+0x150>)
 8002fd4:	f000 fde6 	bl	8003ba4 <HAL_GPIO_Init>
}
 8002fd8:	e047      	b.n	800306a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <HAL_TIM_MspPostInit+0x154>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d11e      	bne.n	8003022 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	4a21      	ldr	r2, [pc, #132]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002fee:	f043 0302 	orr.w	r3, r3, #2
 8002ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8003000:	2340      	movs	r3, #64	; 0x40
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003010:	2302      	movs	r3, #2
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	481b      	ldr	r0, [pc, #108]	; (8003088 <HAL_TIM_MspPostInit+0x158>)
 800301c:	f000 fdc2 	bl	8003ba4 <HAL_GPIO_Init>
}
 8003020:	e023      	b.n	800306a <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a19      	ldr	r2, [pc, #100]	; (800308c <HAL_TIM_MspPostInit+0x15c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d11e      	bne.n	800306a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4a0f      	ldr	r2, [pc, #60]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	6313      	str	r3, [r2, #48]	; 0x30
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_TIM_MspPostInit+0x144>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 8003048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800304c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800305a:	2303      	movs	r3, #3
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	4619      	mov	r1, r3
 8003064:	4808      	ldr	r0, [pc, #32]	; (8003088 <HAL_TIM_MspPostInit+0x158>)
 8003066:	f000 fd9d 	bl	8003ba4 <HAL_GPIO_Init>
}
 800306a:	bf00      	nop
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	40020000 	.word	0x40020000
 800307c:	40000400 	.word	0x40000400
 8003080:	40020800 	.word	0x40020800
 8003084:	40000800 	.word	0x40000800
 8003088:	40020400 	.word	0x40020400
 800308c:	40014400 	.word	0x40014400

08003090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a45      	ldr	r2, [pc, #276]	; (80031c4 <HAL_UART_MspInit+0x134>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12c      	bne.n	800310c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a43      	ldr	r2, [pc, #268]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a3c      	ldr	r2, [pc, #240]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_UART_MspInit+0x138>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_PRINT_USB_Pin|GPIO_PIN_3;
 80030ea:	230c      	movs	r3, #12
 80030ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030fa:	2307      	movs	r3, #7
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fe:	f107 031c 	add.w	r3, r7, #28
 8003102:	4619      	mov	r1, r3
 8003104:	4831      	ldr	r0, [pc, #196]	; (80031cc <HAL_UART_MspInit+0x13c>)
 8003106:	f000 fd4d 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800310a:	e057      	b.n	80031bc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <HAL_UART_MspInit+0x140>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d152      	bne.n	80031bc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <HAL_UART_MspInit+0x138>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	4a2a      	ldr	r2, [pc, #168]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003120:	f043 0320 	orr.w	r3, r3, #32
 8003124:	6453      	str	r3, [r2, #68]	; 0x44
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_UART_MspInit+0x138>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_UART_MspInit+0x138>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003176:	2303      	movs	r3, #3
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800317a:	2308      	movs	r3, #8
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4813      	ldr	r0, [pc, #76]	; (80031d4 <HAL_UART_MspInit+0x144>)
 8003186:	f000 fd0d 	bl	8003ba4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800318a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003198:	2303      	movs	r3, #3
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800319c:	2308      	movs	r3, #8
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_UART_MspInit+0x13c>)
 80031a8:	f000 fcfc 	bl	8003ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2047      	movs	r0, #71	; 0x47
 80031b2:	f000 fc12 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031b6:	2047      	movs	r0, #71	; 0x47
 80031b8:	f000 fc2b 	bl	8003a12 <HAL_NVIC_EnableIRQ>
}
 80031bc:	bf00      	nop
 80031be:	3730      	adds	r7, #48	; 0x30
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40004400 	.word	0x40004400
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40011400 	.word	0x40011400
 80031d4:	40020800 	.word	0x40020800

080031d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031dc:	e7fe      	b.n	80031dc <NMI_Handler+0x4>

080031de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <MemManage_Handler+0x4>

080031ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <BusFault_Handler+0x4>

080031f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <UsageFault_Handler+0x4>

080031f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003224:	f000 fa78 	bl	8003718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	0000      	movs	r0, r0
	...

08003230 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003236:	4830      	ldr	r0, [pc, #192]	; (80032f8 <TIM5_IRQHandler+0xc8>)
 8003238:	f001 fc47 	bl	8004aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  if (risingEdgeInterrupt == 1)
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <TIM5_IRQHandler+0xcc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d118      	bne.n	8003276 <TIM5_IRQHandler+0x46>
  {
	TIM5->CCER &= ~(1 << 7);
 8003244:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <TIM5_IRQHandler+0xd0>)
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	6213      	str	r3, [r2, #32]
	TIM5->CCER &= ~(1 << 5);
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003256:	f023 0320 	bic.w	r3, r3, #32
 800325a:	6213      	str	r3, [r2, #32]
	TIM5->CCER |= (1 << 5);
 800325c:	4b28      	ldr	r3, [pc, #160]	; (8003300 <TIM5_IRQHandler+0xd0>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003262:	f043 0320 	orr.w	r3, r3, #32
 8003266:	6213      	str	r3, [r2, #32]
	TIM5->CNT = 0;
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <TIM5_IRQHandler+0xd0>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
	risingEdgeInterrupt = 0;
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <TIM5_IRQHandler+0xcc>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 8003274:	e036      	b.n	80032e4 <TIM5_IRQHandler+0xb4>
	  counter = TIM5->CNT;
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	461a      	mov	r2, r3
 800327c:	4b21      	ldr	r3, [pc, #132]	; (8003304 <TIM5_IRQHandler+0xd4>)
 800327e:	601a      	str	r2, [r3, #0]
	  TIM5->CCER &= ~(1 << 7);
 8003280:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328a:	6213      	str	r3, [r2, #32]
	  TIM5->CCER &= ~(1 << 5);
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <TIM5_IRQHandler+0xd0>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <TIM5_IRQHandler+0xd0>)
 8003292:	f023 0320 	bic.w	r3, r3, #32
 8003296:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <TIM5_IRQHandler+0xd4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f949 	bl	8000534 <__aeabi_i2d>
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <TIM5_IRQHandler+0xd8>)
 80032a8:	f7fd fad8 	bl	800085c <__aeabi_ddiv>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	f7fd fc80 	bl	8000bb8 <__aeabi_d2f>
 80032b8:	4603      	mov	r3, r0
 80032ba:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd f94b 	bl	8000558 <__aeabi_f2d>
 80032c2:	a30b      	add	r3, pc, #44	; (adr r3, 80032f0 <TIM5_IRQHandler+0xc0>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f7fd f99e 	bl	8000608 <__aeabi_dmul>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	f7fd fc70 	bl	8000bb8 <__aeabi_d2f>
 80032d8:	4603      	mov	r3, r0
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <TIM5_IRQHandler+0xdc>)
 80032dc:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <TIM5_IRQHandler+0xcc>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	f3af 8000 	nop.w
 80032f0:	851eb852 	.word	0x851eb852
 80032f4:	400451eb 	.word	0x400451eb
 80032f8:	200002d8 	.word	0x200002d8
 80032fc:	20000008 	.word	0x20000008
 8003300:	40000c00 	.word	0x40000c00
 8003304:	200003f8 	.word	0x200003f8
 8003308:	40620000 	.word	0x40620000
 800330c:	200003fc 	.word	0x200003fc

08003310 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <USART6_IRQHandler+0x10>)
 8003316:	f002 fc67 	bl	8005be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200003ac 	.word	0x200003ac

08003324 <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 8003328:	2300      	movs	r3, #0
}   // is_switch_on()
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
	return 1;
 8003338:	2301      	movs	r3, #1
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_kill>:

int _kill(int pid, int sig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800334e:	f003 fc1d 	bl	8006b8c <__errno>
 8003352:	4603      	mov	r3, r0
 8003354:	2216      	movs	r2, #22
 8003356:	601a      	str	r2, [r3, #0]
	return -1;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_exit>:

void _exit (int status)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800336c:	f04f 31ff 	mov.w	r1, #4294967295
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ffe7 	bl	8003344 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003376:	e7fe      	b.n	8003376 <_exit+0x12>

08003378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e00a      	b.n	80033a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800338a:	f3af 8000 	nop.w
 800338e:	4601      	mov	r1, r0
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	60ba      	str	r2, [r7, #8]
 8003396:	b2ca      	uxtb	r2, r1
 8003398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	dbf0      	blt.n	800338a <_read+0x12>
	}

return len;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e009      	b.n	80033d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	60ba      	str	r2, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff faef 	bl	80029b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	dbf1      	blt.n	80033c4 <_write+0x12>
	}
	return len;
 80033e0:	687b      	ldr	r3, [r7, #4]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <_close>:

int _close(int file)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	return -1;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003412:	605a      	str	r2, [r3, #4]
	return 0;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_isatty>:

int _isatty(int file)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
	return 1;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
	return 0;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <_sbrk+0x5c>)
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <_sbrk+0x60>)
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <_sbrk+0x64>)
 8003472:	4a12      	ldr	r2, [pc, #72]	; (80034bc <_sbrk+0x68>)
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <_sbrk+0x64>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	429a      	cmp	r2, r3
 8003482:	d207      	bcs.n	8003494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003484:	f003 fb82 	bl	8006b8c <__errno>
 8003488:	4603      	mov	r3, r0
 800348a:	220c      	movs	r2, #12
 800348c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	e009      	b.n	80034a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_sbrk+0x64>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <_sbrk+0x64>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	4a05      	ldr	r2, [pc, #20]	; (80034b8 <_sbrk+0x64>)
 80034a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034a6:	68fb      	ldr	r3, [r7, #12]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20020000 	.word	0x20020000
 80034b4:	00000400 	.word	0x00000400
 80034b8:	200003f4 	.word	0x200003f4
 80034bc:	20000418 	.word	0x20000418

080034c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <SystemInit+0x20>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <SystemInit+0x20>)
 80034cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
//	test_zig_zag();
//	test_turn_left();
//	test_wall_sensor();
//	test_servo_angles();

	go_forward_one_unit();
 80034e8:	f7ff fc06 	bl	8002cf8 <go_forward_one_unit>

	return do_test_algorithm();
 80034ec:	f7ff fffa 	bl	80034e4 <do_test_algorithm>
}  // do_test_algorithm()
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <distance_of_object_in_cm>:
int risingEdgeInterrupt = 1;
int counter;
float centimeters;

int16_t distance_of_object_in_cm()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
	char string[40];
	sprintf((char *)string, "%f", centimeters * 1000);
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <distance_of_object_in_cm+0x54>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800354c <distance_of_object_in_cm+0x58>
 8003504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003508:	ee17 0a90 	vmov	r0, s15
 800350c:	f7fd f824 	bl	8000558 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4638      	mov	r0, r7
 8003516:	490e      	ldr	r1, [pc, #56]	; (8003550 <distance_of_object_in_cm+0x5c>)
 8003518:	f004 f878 	bl	800760c <siprintf>
	printf("%f\r\n", centimeters);
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <distance_of_object_in_cm+0x54>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f819 	bl	8000558 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	480a      	ldr	r0, [pc, #40]	; (8003554 <distance_of_object_in_cm+0x60>)
 800352c:	f003 ffca 	bl	80074c4 <iprintf>
	return centimeters;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <distance_of_object_in_cm+0x54>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800353a:	ee17 3a90 	vmov	r3, s15
 800353e:	b21b      	sxth	r3, r3
}  // int16_t distance_of_object_in_cm()
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200003fc 	.word	0x200003fc
 800354c:	447a0000 	.word	0x447a0000
 8003550:	08009da0 	.word	0x08009da0
 8003554:	08009da4 	.word	0x08009da4

08003558 <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fbd9 	bl	8002d1c <set_servo_angle>
	HAL_Delay(1000);
 800356a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800356e:	f000 f8f3 	bl	8003758 <HAL_Delay>
	uint8_t wall_detected = distance_of_object_in_cm() < 18;
 8003572:	f7ff ffbf 	bl	80034f4 <distance_of_object_in_cm>
 8003576:	4603      	mov	r3, r0
 8003578:	2b11      	cmp	r3, #17
 800357a:	bfd4      	ite	le
 800357c:	2301      	movle	r3, #1
 800357e:	2300      	movgt	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	77fb      	strb	r3, [r7, #31]
	char buf[20];
	switch(d)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d020      	beq.n	80035cc <is_there_wall_on_direction+0x74>
 800358a:	2b02      	cmp	r3, #2
 800358c:	dc2f      	bgt.n	80035ee <is_there_wall_on_direction+0x96>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <is_there_wall_on_direction+0x40>
 8003592:	2b01      	cmp	r3, #1
 8003594:	d009      	beq.n	80035aa <is_there_wall_on_direction+0x52>
 8003596:	e02a      	b.n	80035ee <is_there_wall_on_direction+0x96>
	{
	case Left:
		memcpy(buf, wall_detected ? "\%LEFT,0,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <is_there_wall_on_direction+0xb0>)
 800359a:	f107 0408 	add.w	r4, r7, #8
 800359e:	461d      	mov	r5, r3
 80035a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	6023      	str	r3, [r4, #0]
		break;
 80035a8:	e021      	b.n	80035ee <is_there_wall_on_direction+0x96>
	case Front:
		memcpy(buf, wall_detected ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <is_there_wall_on_direction+0x5c>
 80035b0:	4b16      	ldr	r3, [pc, #88]	; (800360c <is_there_wall_on_direction+0xb4>)
 80035b2:	e000      	b.n	80035b6 <is_there_wall_on_direction+0x5e>
 80035b4:	4b16      	ldr	r3, [pc, #88]	; (8003610 <is_there_wall_on_direction+0xb8>)
 80035b6:	f107 0408 	add.w	r4, r7, #8
 80035ba:	461d      	mov	r5, r3
 80035bc:	6828      	ldr	r0, [r5, #0]
 80035be:	6869      	ldr	r1, [r5, #4]
 80035c0:	68aa      	ldr	r2, [r5, #8]
 80035c2:	68eb      	ldr	r3, [r5, #12]
 80035c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c6:	6928      	ldr	r0, [r5, #16]
 80035c8:	6020      	str	r0, [r4, #0]
		break;
 80035ca:	e010      	b.n	80035ee <is_there_wall_on_direction+0x96>
	case Right:
		memcpy(buf, wall_detected ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 80035cc:	7ffb      	ldrb	r3, [r7, #31]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <is_there_wall_on_direction+0x7e>
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <is_there_wall_on_direction+0xbc>)
 80035d4:	e000      	b.n	80035d8 <is_there_wall_on_direction+0x80>
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <is_there_wall_on_direction+0xc0>)
 80035d8:	f107 0408 	add.w	r4, r7, #8
 80035dc:	461d      	mov	r5, r3
 80035de:	6828      	ldr	r0, [r5, #0]
 80035e0:	6869      	ldr	r1, [r5, #4]
 80035e2:	68aa      	ldr	r2, [r5, #8]
 80035e4:	68eb      	ldr	r3, [r5, #12]
 80035e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e8:	6928      	ldr	r0, [r5, #16]
 80035ea:	6020      	str	r0, [r4, #0]
		break;
 80035ec:	bf00      	nop
	}  // switch(d)
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80035ee:	f107 0108 	add.w	r1, r7, #8
 80035f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f6:	2214      	movs	r2, #20
 80035f8:	4808      	ldr	r0, [pc, #32]	; (800361c <is_there_wall_on_direction+0xc4>)
 80035fa:	f002 f91e 	bl	800583a <HAL_UART_Transmit>
	return wall_detected;
 80035fe:	7ffb      	ldrb	r3, [r7, #31]
}  // is_there_wall_on_direction(direction d)
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}
 8003608:	08009dac 	.word	0x08009dac
 800360c:	08009dc0 	.word	0x08009dc0
 8003610:	08009dd4 	.word	0x08009dd4
 8003614:	08009de8 	.word	0x08009de8
 8003618:	08009dfc 	.word	0x08009dfc
 800361c:	200003ac 	.word	0x200003ac

08003620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003626:	490e      	ldr	r1, [pc, #56]	; (8003660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003628:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800362c:	e002      	b.n	8003634 <LoopCopyDataInit>

0800362e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003632:	3304      	adds	r3, #4

08003634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003638:	d3f9      	bcc.n	800362e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800363c:	4c0b      	ldr	r4, [pc, #44]	; (800366c <LoopFillZerobss+0x26>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003640:	e001      	b.n	8003646 <LoopFillZerobss>

08003642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003644:	3204      	adds	r2, #4

08003646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003648:	d3fb      	bcc.n	8003642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800364a:	f7ff ff39 	bl	80034c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800364e:	f003 faa3 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003652:	f7fe fe75 	bl	8002340 <main>
  bx  lr    
 8003656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800365c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003660:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003664:	0800a214 	.word	0x0800a214
  ldr r2, =_sbss
 8003668:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800366c:	20000414 	.word	0x20000414

08003670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003670:	e7fe      	b.n	8003670 <ADC_IRQHandler>
	...

08003674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <HAL_Init+0x40>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_Init+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_Init+0x40>)
 800368a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800368e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_Init+0x40>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800369c:	2003      	movs	r0, #3
 800369e:	f000 f991 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a2:	200f      	movs	r0, #15
 80036a4:	f000 f808 	bl	80036b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036a8:	f7ff fb5c 	bl	8002d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00

080036b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_InitTick+0x54>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_InitTick+0x58>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f9b7 	bl	8003a4a <HAL_SYSTICK_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e00e      	b.n	8003704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0f      	cmp	r3, #15
 80036ea:	d80a      	bhi.n	8003702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ec:	2200      	movs	r2, #0
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	f000 f971 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <HAL_InitTick+0x5c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
}
 8003704:	4618      	mov	r0, r3
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000004 	.word	0x20000004
 8003710:	20000010 	.word	0x20000010
 8003714:	2000000c 	.word	0x2000000c

08003718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x20>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_IncTick+0x24>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4413      	add	r3, r2
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_IncTick+0x24>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000010 	.word	0x20000010
 800373c:	20000400 	.word	0x20000400

08003740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return uwTick;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000400 	.word	0x20000400

08003758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_Delay+0x44>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffde 	bl	8003740 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000010 	.word	0x20000010

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <__NVIC_EnableIRQ+0x38>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100

08003840 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db12      	blt.n	8003878 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	490a      	ldr	r1, [pc, #40]	; (8003884 <__NVIC_DisableIRQ+0x44>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	3320      	adds	r3, #32
 8003868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800386c:	f3bf 8f4f 	dsb	sy
}
 8003870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003872:	f3bf 8f6f 	isb	sy
}
 8003876:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db0c      	blt.n	80038b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	4907      	ldr	r1, [pc, #28]	; (80038c0 <__NVIC_ClearPendingIRQ+0x38>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	; 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	; 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fee7 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ec:	f7ff fefc 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 80039f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff ff8e 	bl	8003918 <NVIC_EncodePriority>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff feef 	bl	8003804 <__NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff feff 	bl	8003840 <__NVIC_DisableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff94 	bl	8003980 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff09 	bl	8003888 <__NVIC_ClearPendingIRQ>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7ff fe58 	bl	8003740 <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d008      	beq.n	8003ab0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e052      	b.n	8003b56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0216 	bic.w	r2, r2, #22
 8003abe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ace:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <HAL_DMA_Abort+0x62>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0208 	bic.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b00:	e013      	b.n	8003b2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b02:	f7ff fe1d 	bl	8003740 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d90c      	bls.n	8003b2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e015      	b.n	8003b56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e4      	bne.n	8003b02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	223f      	movs	r2, #63	; 0x3f
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d004      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2280      	movs	r2, #128	; 0x80
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00c      	b.n	8003b96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2205      	movs	r2, #5
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	e159      	b.n	8003e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	f040 8148 	bne.w	8003e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d005      	beq.n	8003bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d130      	bne.n	8003c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	2203      	movs	r2, #3
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 0201 	and.w	r2, r3, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d017      	beq.n	8003c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	2203      	movs	r2, #3
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d123      	bne.n	8003ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	08da      	lsrs	r2, r3, #3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3208      	adds	r2, #8
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	220f      	movs	r2, #15
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	08da      	lsrs	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3208      	adds	r2, #8
 8003ce2:	69b9      	ldr	r1, [r7, #24]
 8003ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0203 	and.w	r2, r3, #3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80a2 	beq.w	8003e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	4b57      	ldr	r3, [pc, #348]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a56      	ldr	r2, [pc, #344]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_GPIO_Init+0x2e8>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d46:	4a52      	ldr	r2, [pc, #328]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4013      	ands	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_GPIO_Init+0x2f0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d019      	beq.n	8003da6 <HAL_GPIO_Init+0x202>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x2f4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_GPIO_Init+0x1fe>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a47      	ldr	r2, [pc, #284]	; (8003e9c <HAL_GPIO_Init+0x2f8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00d      	beq.n	8003d9e <HAL_GPIO_Init+0x1fa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a46      	ldr	r2, [pc, #280]	; (8003ea0 <HAL_GPIO_Init+0x2fc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <HAL_GPIO_Init+0x1f6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a45      	ldr	r2, [pc, #276]	; (8003ea4 <HAL_GPIO_Init+0x300>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d101      	bne.n	8003d96 <HAL_GPIO_Init+0x1f2>
 8003d92:	2304      	movs	r3, #4
 8003d94:	e008      	b.n	8003da8 <HAL_GPIO_Init+0x204>
 8003d96:	2307      	movs	r3, #7
 8003d98:	e006      	b.n	8003da8 <HAL_GPIO_Init+0x204>
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e004      	b.n	8003da8 <HAL_GPIO_Init+0x204>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e002      	b.n	8003da8 <HAL_GPIO_Init+0x204>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_GPIO_Init+0x204>
 8003da6:	2300      	movs	r3, #0
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	f002 0203 	and.w	r2, r2, #3
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	4093      	lsls	r3, r2
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003db8:	4935      	ldr	r1, [pc, #212]	; (8003e90 <HAL_GPIO_Init+0x2ec>)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	3302      	adds	r3, #2
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc6:	4b38      	ldr	r3, [pc, #224]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dea:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e14:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4013      	ands	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e44:	4b18      	ldr	r3, [pc, #96]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e68:	4a0f      	ldr	r2, [pc, #60]	; (8003ea8 <HAL_GPIO_Init+0x304>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3301      	adds	r3, #1
 8003e72:	61fb      	str	r3, [r7, #28]
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	2b0f      	cmp	r3, #15
 8003e78:	f67f aea2 	bls.w	8003bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3724      	adds	r7, #36	; 0x24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40020000 	.word	0x40020000
 8003e98:	40020400 	.word	0x40020400
 8003e9c:	40020800 	.word	0x40020800
 8003ea0:	40020c00 	.word	0x40020c00
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40013c00 	.word	0x40013c00

08003eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ebc:	787b      	ldrb	r3, [r7, #1]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ec8:	e003      	b.n	8003ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	041a      	lsls	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	619a      	str	r2, [r3, #24]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e267      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d075      	beq.n	8003fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efe:	4b88      	ldr	r3, [pc, #544]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00c      	beq.n	8003f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b85      	ldr	r3, [pc, #532]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d112      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4b82      	ldr	r3, [pc, #520]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4b7e      	ldr	r3, [pc, #504]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x108>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d157      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e242      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x74>
 8003f46:	4b76      	ldr	r3, [pc, #472]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e01d      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b70      	ldr	r3, [pc, #448]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6f      	ldr	r2, [pc, #444]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6c      	ldr	r2, [pc, #432]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f78:	4b69      	ldr	r3, [pc, #420]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a68      	ldr	r2, [pc, #416]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b66      	ldr	r3, [pc, #408]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a65      	ldr	r2, [pc, #404]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7ff fbd2 	bl	8003740 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7ff fbce 	bl	8003740 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e207      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xc0>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7ff fbbe 	bl	8003740 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7ff fbba 	bl	8003740 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1f3      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xe8>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800400a:	2b08      	cmp	r3, #8
 800400c:	d11c      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b44      	ldr	r3, [pc, #272]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d001      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1c7      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4937      	ldr	r1, [pc, #220]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	e03a      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004050:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_RCC_OscConfig+0x244>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7ff fb73 	bl	8003740 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405e:	f7ff fb6f 	bl	8003740 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1a8      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	4b2b      	ldr	r3, [pc, #172]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b28      	ldr	r3, [pc, #160]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4925      	ldr	r1, [pc, #148]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCC_OscConfig+0x244>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7ff fb52 	bl	8003740 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a0:	f7ff fb4e 	bl	8003740 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e187      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d036      	beq.n	8004138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_RCC_OscConfig+0x248>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7ff fb32 	bl	8003740 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e0:	f7ff fb2e 	bl	8003740 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e167      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x240>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x200>
 80040fe:	e01b      	b.n	8004138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_OscConfig+0x248>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7ff fb1b 	bl	8003740 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00e      	b.n	800412c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410e:	f7ff fb17 	bl	8003740 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d907      	bls.n	800412c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e150      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ea      	bne.n	800410e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8097 	beq.w	8004274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b7d      	ldr	r3, [pc, #500]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a7c      	ldr	r2, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b7a      	ldr	r3, [pc, #488]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b77      	ldr	r3, [pc, #476]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b74      	ldr	r3, [pc, #464]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a73      	ldr	r2, [pc, #460]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7ff fad7 	bl	8003740 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7ff fad3 	bl	8003740 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e10c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b6a      	ldr	r3, [pc, #424]	; (8004354 <HAL_RCC_OscConfig+0x474>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x2ea>
 80041bc:	4b64      	ldr	r3, [pc, #400]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a63      	ldr	r2, [pc, #396]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	e01c      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x30c>
 80041d2:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d6:	4a5e      	ldr	r2, [pc, #376]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	; 0x70
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a5b      	ldr	r2, [pc, #364]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ec:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a54      	ldr	r2, [pc, #336]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7ff fa98 	bl	8003740 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7ff fa94 	bl	8003740 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0cb      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	4b49      	ldr	r3, [pc, #292]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <HAL_RCC_OscConfig+0x334>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7ff fa82 	bl	8003740 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7ff fa7e 	bl	8003740 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0b5      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004256:	4b3e      	ldr	r3, [pc, #248]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ee      	bne.n	8004240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a38      	ldr	r2, [pc, #224]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a1 	beq.w	80043c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427e:	4b34      	ldr	r3, [pc, #208]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d05c      	beq.n	8004344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d141      	bne.n	8004316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b31      	ldr	r3, [pc, #196]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7ff fa52 	bl	8003740 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7ff fa4e 	bl	8003740 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e087      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	491b      	ldr	r1, [pc, #108]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7ff fa27 	bl	8003740 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7ff fa23 	bl	8003740 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e05c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x416>
 8004314:	e054      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7ff fa10 	bl	8003740 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7ff fa0c 	bl	8003740 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e045      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
 8004342:	e03d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e038      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
 8004358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x4ec>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d028      	beq.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d121      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11a      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d111      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0cc      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d90c      	bls.n	800440c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b65      	ldr	r3, [pc, #404]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b59      	ldr	r3, [pc, #356]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a58      	ldr	r2, [pc, #352]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800442e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a52      	ldr	r2, [pc, #328]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	494d      	ldr	r1, [pc, #308]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d044      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d119      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3b      	ldr	r3, [pc, #236]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e067      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4934      	ldr	r1, [pc, #208]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7ff f93e 	bl	8003740 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7ff f93a 	bl	8003740 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2b      	ldr	r3, [pc, #172]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b25      	ldr	r3, [pc, #148]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20c      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b22      	ldr	r3, [pc, #136]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4916      	ldr	r1, [pc, #88]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490e      	ldr	r1, [pc, #56]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490a      	ldr	r1, [pc, #40]	; (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f89e 	bl	80036b8 <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	08009e10 	.word	0x08009e10
 8004594:	20000004 	.word	0x20000004
 8004598:	2000000c 	.word	0x2000000c

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b090      	sub	sp, #64	; 0x40
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
 80045a8:	2300      	movs	r3, #0
 80045aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ac:	2300      	movs	r3, #0
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b4:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d00d      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCC_GetSysClockFreq+0x16c>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ce:	e09b      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b53      	ldr	r3, [pc, #332]	; (8004720 <HAL_RCC_GetSysClockFreq+0x184>)
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80045d4:	e09b      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045da:	e098      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b4f      	ldr	r3, [pc, #316]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e6:	4b4d      	ldr	r3, [pc, #308]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b4a      	ldr	r3, [pc, #296]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2200      	movs	r2, #0
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	627a      	str	r2, [r7, #36]	; 0x24
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004604:	2100      	movs	r1, #0
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 8004608:	fb03 f201 	mul.w	r2, r3, r1
 800460c:	2300      	movs	r3, #0
 800460e:	fb00 f303 	mul.w	r3, r0, r3
 8004612:	4413      	add	r3, r2
 8004614:	4a43      	ldr	r2, [pc, #268]	; (8004724 <HAL_RCC_GetSysClockFreq+0x188>)
 8004616:	fba0 1202 	umull	r1, r2, r0, r2
 800461a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800461c:	460a      	mov	r2, r1
 800461e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004622:	4413      	add	r3, r2
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	2200      	movs	r2, #0
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	61fa      	str	r2, [r7, #28]
 800462e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004632:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004636:	f7fc fb0f 	bl	8000c58 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4613      	mov	r3, r2
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004642:	e053      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004644:	4b35      	ldr	r3, [pc, #212]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	2200      	movs	r2, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	617a      	str	r2, [r7, #20]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004656:	f04f 0b00 	mov.w	fp, #0
 800465a:	4652      	mov	r2, sl
 800465c:	465b      	mov	r3, fp
 800465e:	f04f 0000 	mov.w	r0, #0
 8004662:	f04f 0100 	mov.w	r1, #0
 8004666:	0159      	lsls	r1, r3, #5
 8004668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800466c:	0150      	lsls	r0, r2, #5
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	ebb2 080a 	subs.w	r8, r2, sl
 8004676:	eb63 090b 	sbc.w	r9, r3, fp
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004686:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800468a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800468e:	ebb2 0408 	subs.w	r4, r2, r8
 8004692:	eb63 0509 	sbc.w	r5, r3, r9
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	00eb      	lsls	r3, r5, #3
 80046a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046a4:	00e2      	lsls	r2, r4, #3
 80046a6:	4614      	mov	r4, r2
 80046a8:	461d      	mov	r5, r3
 80046aa:	eb14 030a 	adds.w	r3, r4, sl
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	eb45 030b 	adc.w	r3, r5, fp
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046c2:	4629      	mov	r1, r5
 80046c4:	028b      	lsls	r3, r1, #10
 80046c6:	4621      	mov	r1, r4
 80046c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046cc:	4621      	mov	r1, r4
 80046ce:	028a      	lsls	r2, r1, #10
 80046d0:	4610      	mov	r0, r2
 80046d2:	4619      	mov	r1, r3
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	2200      	movs	r2, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	60fa      	str	r2, [r7, #12]
 80046dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e0:	f7fc faba 	bl	8000c58 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4613      	mov	r3, r2
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_GetSysClockFreq+0x180>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0c1b      	lsrs	r3, r3, #16
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	3301      	adds	r3, #1
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80046fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <HAL_RCC_GetSysClockFreq+0x184>)
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004710:	4618      	mov	r0, r3
 8004712:	3740      	adds	r7, #64	; 0x40
 8004714:	46bd      	mov	sp, r7
 8004716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00f42400 	.word	0x00f42400
 8004724:	017d7840 	.word	0x017d7840

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b03      	ldr	r3, [pc, #12]	; (800473c <HAL_RCC_GetHCLKFreq+0x14>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	20000004 	.word	0x20000004

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff0 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40023800 	.word	0x40023800
 8004764:	08009e20 	.word	0x08009e20

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffdc 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	0b5b      	lsrs	r3, r3, #13
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	08009e20 	.word	0x08009e20

08004790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e041      	b.n	8004826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7fe fb98 	bl	8002eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f000 fc14 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e041      	b.n	80048c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fe faad 	bl	8002db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	4610      	mov	r0, r2
 800486e:	f000 fbc5 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x24>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e022      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d109      	bne.n	800490a <HAL_TIM_PWM_Start+0x3e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e015      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x58>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e068      	b.n	8004a10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0x82>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	e013      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0x92>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	e00b      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	e003      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fe66 	bl	8005650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <HAL_TIM_PWM_Start+0x14c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d107      	bne.n	800499e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_TIM_PWM_Start+0x14c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIM_PWM_Start+0x10e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d013      	beq.n	80049da <HAL_TIM_PWM_Start+0x10e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_TIM_PWM_Start+0x150>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIM_PWM_Start+0x10e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <HAL_TIM_PWM_Start+0x154>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIM_PWM_Start+0x10e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a16      	ldr	r2, [pc, #88]	; (8004a24 <HAL_TIM_PWM_Start+0x158>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIM_PWM_Start+0x10e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_TIM_PWM_Start+0x15c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d111      	bne.n	80049fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b06      	cmp	r3, #6
 80049ea:	d010      	beq.n	8004a0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	e007      	b.n	8004a0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40014000 	.word	0x40014000

08004a2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e041      	b.n	8004ac2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fe f9fa 	bl	8002e4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f000 fac6 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d122      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d11b      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0202 	mvn.w	r2, #2
 8004af6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa57 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004b12:	e005      	b.n	8004b20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa49 	bl	8004fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fa5a 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d122      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d11b      	bne.n	8004b7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0204 	mvn.w	r2, #4
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa2d 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004b66:	e005      	b.n	8004b74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fa1f 	bl	8004fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa30 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d122      	bne.n	8004bce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0208 	mvn.w	r2, #8
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa03 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9f5 	bl	8004fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa06 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d122      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b10      	cmp	r3, #16
 8004be8:	d11b      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0210 	mvn.w	r2, #16
 8004bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f9d9 	bl	8004fc0 <HAL_TIM_IC_CaptureCallback>
 8004c0e:	e005      	b.n	8004c1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9cb 	bl	8004fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f9dc 	bl	8004fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0201 	mvn.w	r2, #1
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f9a5 	bl	8004f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fd89 	bl	800578c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d10e      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9a1 	bl	8004fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d10e      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d107      	bne.n	8004cd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0220 	mvn.w	r2, #32
 8004cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fd53 	bl	8005778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e088      	b.n	8004e0a <HAL_TIM_IC_ConfigChannel+0x130>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11b      	bne.n	8004d3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f000 fb7d 	bl	8005414 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 020c 	bic.w	r2, r2, #12
 8004d28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6999      	ldr	r1, [r3, #24]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	619a      	str	r2, [r3, #24]
 8004d3c:	e060      	b.n	8004e00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11c      	bne.n	8004d7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6819      	ldr	r1, [r3, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f000 fbc6 	bl	80054e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	021a      	lsls	r2, r3, #8
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	619a      	str	r2, [r3, #24]
 8004d7c:	e040      	b.n	8004e00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d11b      	bne.n	8004dbc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f000 fbe3 	bl	800555e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 020c 	bic.w	r2, r2, #12
 8004da6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69d9      	ldr	r1, [r3, #28]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	61da      	str	r2, [r3, #28]
 8004dba:	e021      	b.n	8004e00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b0c      	cmp	r3, #12
 8004dc0:	d11c      	bne.n	8004dfc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f000 fc00 	bl	80055d6 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	69da      	ldr	r2, [r3, #28]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004de4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	69d9      	ldr	r1, [r3, #28]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	021a      	lsls	r2, r3, #8
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	61da      	str	r2, [r3, #28]
 8004dfa:	e001      	b.n	8004e00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0ae      	b.n	8004f90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	f200 809f 	bhi.w	8004f80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004f81 	.word	0x08004f81
 8004e50:	08004f81 	.word	0x08004f81
 8004e54:	08004f81 	.word	0x08004f81
 8004e58:	08004ebd 	.word	0x08004ebd
 8004e5c:	08004f81 	.word	0x08004f81
 8004e60:	08004f81 	.word	0x08004f81
 8004e64:	08004f81 	.word	0x08004f81
 8004e68:	08004eff 	.word	0x08004eff
 8004e6c:	08004f81 	.word	0x08004f81
 8004e70:	08004f81 	.word	0x08004f81
 8004e74:	08004f81 	.word	0x08004f81
 8004e78:	08004f3f 	.word	0x08004f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 f93a 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6999      	ldr	r1, [r3, #24]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	619a      	str	r2, [r3, #24]
      break;
 8004eba:	e064      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f980 	bl	80051c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6999      	ldr	r1, [r3, #24]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	619a      	str	r2, [r3, #24]
      break;
 8004efc:	e043      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 f9cb 	bl	80052a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69da      	ldr	r2, [r3, #28]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0208 	orr.w	r2, r2, #8
 8004f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0204 	bic.w	r2, r2, #4
 8004f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69d9      	ldr	r1, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	61da      	str	r2, [r3, #28]
      break;
 8004f3c:	e023      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fa15 	bl	8005374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69d9      	ldr	r1, [r3, #28]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	021a      	lsls	r2, r3, #8
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	61da      	str	r2, [r3, #28]
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
      break;
 8004f84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a34      	ldr	r2, [pc, #208]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a31      	ldr	r2, [pc, #196]	; (80050e4 <TIM_Base_SetConfig+0xe8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a30      	ldr	r2, [pc, #192]	; (80050e8 <TIM_Base_SetConfig+0xec>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x38>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2f      	ldr	r2, [pc, #188]	; (80050ec <TIM_Base_SetConfig+0xf0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a25      	ldr	r2, [pc, #148]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01b      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005054:	d017      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <TIM_Base_SetConfig+0xe8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <TIM_Base_SetConfig+0xec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00f      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a20      	ldr	r2, [pc, #128]	; (80050ec <TIM_Base_SetConfig+0xf0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <TIM_Base_SetConfig+0xf4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <TIM_Base_SetConfig+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_Base_SetConfig+0xfc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <TIM_Base_SetConfig+0xe4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0308 	bic.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <TIM_OC1_SetConfig+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d111      	bne.n	800519e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40010000 	.word	0x40010000

080051c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0210 	bic.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0320 	bic.w	r3, r3, #32
 8005212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1e      	ldr	r2, [pc, #120]	; (800529c <TIM_OC2_SetConfig+0xd4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10d      	bne.n	8005244 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800522e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC2_SetConfig+0xd4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000

080052a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1d      	ldr	r2, [pc, #116]	; (8005370 <TIM_OC3_SetConfig+0xd0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10d      	bne.n	800531a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <TIM_OC3_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d113      	bne.n	800534a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40010000 	.word	0x40010000

08005374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	031b      	lsls	r3, r3, #12
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <TIM_OC4_SetConfig+0x9c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d109      	bne.n	80053e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	019b      	lsls	r3, r3, #6
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40010000 	.word	0x40010000

08005414 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <TIM_TI1_SetConfig+0xbc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005448:	d00f      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <TIM_TI1_SetConfig+0xc0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00b      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <TIM_TI1_SetConfig+0xc4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d007      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <TIM_TI1_SetConfig+0xc8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_TI1_SetConfig+0x56>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <TIM_TI1_SetConfig+0xcc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d101      	bne.n	800546e <TIM_TI1_SetConfig+0x5a>
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <TIM_TI1_SetConfig+0x5c>
 800546e:	2300      	movs	r3, #0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e003      	b.n	800548e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	b2db      	uxtb	r3, r3
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f023 030a 	bic.w	r3, r3, #10
 80054a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 030a 	and.w	r3, r3, #10
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40014000 	.word	0x40014000

080054e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005522:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	031b      	lsls	r3, r3, #12
 8005528:	b29b      	uxth	r3, r3
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800555e:	b480      	push	{r7}
 8005560:	b087      	sub	sp, #28
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005602:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005614:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	b29b      	uxth	r3, r3
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005628:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	031b      	lsls	r3, r3, #12
 800562e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	2201      	movs	r2, #1
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	43db      	mvns	r3, r3
 8005672:	401a      	ands	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e050      	b.n	8005756 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d013      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a15      	ldr	r2, [pc, #84]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d10c      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	4313      	orrs	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800
 8005770:	40000c00 	.word	0x40000c00
 8005774:	40014000 	.word	0x40014000

08005778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e03f      	b.n	8005832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fd fc62 	bl	8003090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 ff5d 	bl	80066a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af02      	add	r7, sp, #8
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b20      	cmp	r3, #32
 8005858:	d17c      	bne.n	8005954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_UART_Transmit+0x2c>
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e075      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_UART_Transmit+0x3e>
 8005874:	2302      	movs	r3, #2
 8005876:	e06e      	b.n	8005956 <HAL_UART_Transmit+0x11c>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2221      	movs	r2, #33	; 0x21
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588e:	f7fd ff57 	bl	8003740 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d108      	bne.n	80058bc <HAL_UART_Transmit+0x82>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e003      	b.n	80058c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058cc:	e02a      	b.n	8005924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 fc3d 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e036      	b.n	8005956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cf      	bne.n	80058ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fc0d 	bl	8006158 <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	4613      	mov	r3, r2
 800596a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b20      	cmp	r3, #32
 8005976:	d11d      	bne.n	80059b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_UART_Receive_IT+0x26>
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e016      	b.n	80059b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_UART_Receive_IT+0x38>
 8005992:	2302      	movs	r3, #2
 8005994:	e00f      	b.n	80059b6 <HAL_UART_Receive_IT+0x58>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fc42 	bl	8006234 <UART_Start_Receive_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	e000      	b.n	80059b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b0a2      	sub	sp, #136	; 0x88
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80059c8:	2301      	movs	r3, #1
 80059ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80059e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3314      	adds	r3, #20
 8005a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005a26:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d119      	bne.n	8005a76 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	330c      	adds	r3, #12
 8005a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a54:	f023 0310 	bic.w	r3, r3, #16
 8005a58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	330c      	adds	r3, #12
 8005a60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a62:	647a      	str	r2, [r7, #68]	; 0x44
 8005a64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e5      	bne.n	8005a42 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a88:	2b80      	cmp	r3, #128	; 0x80
 8005a8a:	d104      	bne.n	8005a96 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	4a53      	ldr	r2, [pc, #332]	; (8005be0 <HAL_UART_Abort_IT+0x220>)
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50
 8005a94:	e003      	b.n	8005a9e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00f      	beq.n	8005ac6 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d104      	bne.n	8005abe <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <HAL_UART_Abort_IT+0x224>)
 8005aba:	651a      	str	r2, [r3, #80]	; 0x50
 8005abc:	e003      	b.n	8005ac6 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d12d      	bne.n	8005b30 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aea:	677b      	str	r3, [r7, #116]	; 0x74
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005af4:	633a      	str	r2, [r7, #48]	; 0x30
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00f      	beq.n	8005b30 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe f822 	bl	8003b5e <HAL_DMA_Abort_IT>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50
 8005b28:	e002      	b.n	8005b30 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d130      	bne.n	8005ba0 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b54:	673b      	str	r3, [r7, #112]	; 0x70
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3314      	adds	r3, #20
 8005b5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b5e:	61fa      	str	r2, [r7, #28]
 8005b60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d012      	beq.n	8005ba0 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd ffed 	bl	8003b5e <HAL_DMA_Abort_IT>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	2200      	movs	r2, #0
 8005b90:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b98:	e002      	b.n	8005ba0 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8005ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d116      	bne.n	8005bd6 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 faab 	bl	800612c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3788      	adds	r7, #136	; 0x88
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	0800639f 	.word	0x0800639f
 8005be4:	080063ff 	.word	0x080063ff

08005be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b0ba      	sub	sp, #232	; 0xe8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d009      	beq.n	8005c4e <HAL_UART_IRQHandler+0x66>
 8005c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fc71 	bl	800652e <UART_Receive_IT>
      return;
 8005c4c:	e256      	b.n	80060fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80de 	beq.w	8005e14 <HAL_UART_IRQHandler+0x22c>
 8005c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d106      	bne.n	8005c72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80d1 	beq.w	8005e14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_UART_IRQHandler+0xae>
 8005c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <HAL_UART_IRQHandler+0xd2>
 8005ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0202 	orr.w	r2, r3, #2
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <HAL_UART_IRQHandler+0xf6>
 8005cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d011      	beq.n	8005d0e <HAL_UART_IRQHandler+0x126>
 8005cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d105      	bne.n	8005d02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 81ed 	beq.w	80060f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_UART_IRQHandler+0x14e>
 8005d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbfc 	bl	800652e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	bf0c      	ite	eq
 8005d44:	2301      	moveq	r3, #1
 8005d46:	2300      	movne	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <HAL_UART_IRQHandler+0x17a>
 8005d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d04f      	beq.n	8005e02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 faa4 	bl	80062b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b40      	cmp	r3, #64	; 0x40
 8005d74:	d141      	bne.n	8005dfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005da2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005da6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1d9      	bne.n	8005d76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d013      	beq.n	8005df2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	4a7d      	ldr	r2, [pc, #500]	; (8005fc4 <HAL_UART_IRQHandler+0x3dc>)
 8005dd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fd fec1 	bl	8003b5e <HAL_DMA_Abort_IT>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d016      	beq.n	8005e10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	e00e      	b.n	8005e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f990 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	e00a      	b.n	8005e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f98c 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	e006      	b.n	8005e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f988 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e0e:	e170      	b.n	80060f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e10:	bf00      	nop
    return;
 8005e12:	e16e      	b.n	80060f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	f040 814a 	bne.w	80060b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8143 	beq.w	80060b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 813c 	beq.w	80060b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	f040 80b4 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8140 	beq.w	80060f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	f080 8139 	bcs.w	80060f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	f000 8088 	beq.w	8005faa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea8:	e853 3f00 	ldrex	r3, [r3]
 8005eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1d9      	bne.n	8005e9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3314      	adds	r3, #20
 8005eec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e1      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e3      	bne.n	8005f22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e3      	bne.n	8005f68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fd fd6a 	bl	8003a7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f8c0 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fc0:	e099      	b.n	80060f6 <HAL_UART_IRQHandler+0x50e>
 8005fc2:	bf00      	nop
 8005fc4:	08006377 	.word	0x08006377
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 808b 	beq.w	80060fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8086 	beq.w	80060fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006004:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006012:	647a      	str	r2, [r7, #68]	; 0x44
 8006014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3314      	adds	r3, #20
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	623b      	str	r3, [r7, #32]
   return(result);
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800604a:	633a      	str	r2, [r7, #48]	; 0x30
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e3      	bne.n	8006026 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60fb      	str	r3, [r7, #12]
   return(result);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	617b      	str	r3, [r7, #20]
   return(result);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e3      	bne.n	800606c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f848 	bl	8006140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060b0:	e023      	b.n	80060fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d009      	beq.n	80060d2 <HAL_UART_IRQHandler+0x4ea>
 80060be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9c7 	bl	800645e <UART_Transmit_IT>
    return;
 80060d0:	e014      	b.n	80060fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00e      	beq.n	80060fc <HAL_UART_IRQHandler+0x514>
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fa07 	bl	80064fe <UART_EndTransmit_IT>
    return;
 80060f0:	e004      	b.n	80060fc <HAL_UART_IRQHandler+0x514>
    return;
 80060f2:	bf00      	nop
 80060f4:	e002      	b.n	80060fc <HAL_UART_IRQHandler+0x514>
      return;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <HAL_UART_IRQHandler+0x514>
      return;
 80060fa:	bf00      	nop
  }
}
 80060fc:	37e8      	adds	r7, #232	; 0xe8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop

08006104 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b090      	sub	sp, #64	; 0x40
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006168:	e050      	b.n	800620c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800616a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d04c      	beq.n	800620c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <UART_WaitOnFlagUntilTimeout+0x30>
 8006178:	f7fd fae2 	bl	8003740 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006184:	429a      	cmp	r2, r3
 8006186:	d241      	bcs.n	800620c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	e853 3f00 	ldrex	r3, [r3]
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	330c      	adds	r3, #12
 80061a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061a8:	637a      	str	r2, [r7, #52]	; 0x34
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	e841 2300 	strex	r3, r2, [r1]
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e5      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	613b      	str	r3, [r7, #16]
   return(result);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061dc:	623a      	str	r2, [r7, #32]
 80061de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e5      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e00f      	b.n	800622c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	429a      	cmp	r2, r3
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	429a      	cmp	r2, r3
 8006228:	d09f      	beq.n	800616a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3740      	adds	r7, #64	; 0x40
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	88fa      	ldrh	r2, [r7, #6]
 8006252:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2222      	movs	r2, #34	; 0x22
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006280:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f042 0201 	orr.w	r2, r2, #1
 8006290:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0220 	orr.w	r2, r2, #32
 80062a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b095      	sub	sp, #84	; 0x54
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062d8:	643a      	str	r2, [r7, #64]	; 0x40
 80062da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	64bb      	str	r3, [r7, #72]	; 0x48
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800630c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	2b01      	cmp	r3, #1
 8006326:	d119      	bne.n	800635c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	e853 3f00 	ldrex	r3, [r3]
 8006336:	60bb      	str	r3, [r7, #8]
   return(result);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f023 0310 	bic.w	r3, r3, #16
 800633e:	647b      	str	r3, [r7, #68]	; 0x44
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	61ba      	str	r2, [r7, #24]
 800634a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	e841 2300 	strex	r3, r2, [r1]
 8006354:	613b      	str	r3, [r7, #16]
   return(result);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1e5      	bne.n	8006328 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
}
 800636a:	bf00      	nop
 800636c:	3754      	adds	r7, #84	; 0x54
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fec1 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	2200      	movs	r2, #0
 80063b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d117      	bne.n	80063f6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff fe9c 	bl	800612c <HAL_UART_AbortCpltCallback>
 80063f4:	e000      	b.n	80063f8 <UART_DMATxAbortCallback+0x5a>
      return;
 80063f6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	2200      	movs	r2, #0
 8006412:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006418:	2b00      	cmp	r3, #0
 800641a:	d004      	beq.n	8006426 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	d117      	bne.n	8006456 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f7ff fe6c 	bl	800612c <HAL_UART_AbortCpltCallback>
 8006454:	e000      	b.n	8006458 <UART_DMARxAbortCallback+0x5a>
      return;
 8006456:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b21      	cmp	r3, #33	; 0x21
 8006470:	d13e      	bne.n	80064f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800647a:	d114      	bne.n	80064a6 <UART_Transmit_IT+0x48>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d110      	bne.n	80064a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	1c9a      	adds	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]
 80064a4:	e008      	b.n	80064b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6211      	str	r1, [r2, #32]
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4619      	mov	r1, r3
 80064c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10f      	bne.n	80064ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fdf0 	bl	8006104 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b08c      	sub	sp, #48	; 0x30
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b22      	cmp	r3, #34	; 0x22
 8006540:	f040 80ab 	bne.w	800669a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d117      	bne.n	800657e <UART_Receive_IT+0x50>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d113      	bne.n	800657e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656c:	b29a      	uxth	r2, r3
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	1c9a      	adds	r2, r3, #2
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
 800657c:	e026      	b.n	80065cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006590:	d007      	beq.n	80065a2 <UART_Receive_IT+0x74>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <UART_Receive_IT+0x82>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	e008      	b.n	80065c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4619      	mov	r1, r3
 80065da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d15a      	bne.n	8006696 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0220 	bic.w	r2, r2, #32
 80065ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	695a      	ldr	r2, [r3, #20]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0201 	bic.w	r2, r2, #1
 800660e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b01      	cmp	r3, #1
 800661e:	d135      	bne.n	800668c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	613b      	str	r3, [r7, #16]
   return(result);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f023 0310 	bic.w	r3, r3, #16
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006646:	623a      	str	r2, [r7, #32]
 8006648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	69f9      	ldr	r1, [r7, #28]
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	61bb      	str	r3, [r7, #24]
   return(result);
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b10      	cmp	r3, #16
 8006666:	d10a      	bne.n	800667e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fd5b 	bl	8006140 <HAL_UARTEx_RxEventCallback>
 800668a:	e002      	b.n	8006692 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fb fe1f 	bl	80022d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	e002      	b.n	800669c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	e000      	b.n	800669c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800669a:	2302      	movs	r3, #2
  }
}
 800669c:	4618      	mov	r0, r3
 800669e:	3730      	adds	r7, #48	; 0x30
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b0c0      	sub	sp, #256	; 0x100
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	ea40 0301 	orr.w	r3, r0, r1
 80066cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066fc:	f021 010c 	bic.w	r1, r1, #12
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800670a:	430b      	orrs	r3, r1
 800670c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	ea40 0301 	orr.w	r3, r0, r1
 800672a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b8f      	ldr	r3, [pc, #572]	; (8006970 <UART_SetConfig+0x2cc>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <UART_SetConfig+0xa0>
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b8d      	ldr	r3, [pc, #564]	; (8006974 <UART_SetConfig+0x2d0>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d104      	bne.n	800674e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe f810 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8006748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800674c:	e003      	b.n	8006756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674e:	f7fd fff7 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 8006752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006760:	f040 810c 	bne.w	800697c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	1891      	adds	r1, r2, r2
 800677c:	65b9      	str	r1, [r7, #88]	; 0x58
 800677e:	415b      	adcs	r3, r3
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006786:	4621      	mov	r1, r4
 8006788:	eb12 0801 	adds.w	r8, r2, r1
 800678c:	4629      	mov	r1, r5
 800678e:	eb43 0901 	adc.w	r9, r3, r1
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a6:	4690      	mov	r8, r2
 80067a8:	4699      	mov	r9, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	eb18 0303 	adds.w	r3, r8, r3
 80067b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b4:	462b      	mov	r3, r5
 80067b6:	eb49 0303 	adc.w	r3, r9, r3
 80067ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067d2:	460b      	mov	r3, r1
 80067d4:	18db      	adds	r3, r3, r3
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
 80067d8:	4613      	mov	r3, r2
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
 80067e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e8:	f7fa fa36 	bl	8000c58 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4b61      	ldr	r3, [pc, #388]	; (8006978 <UART_SetConfig+0x2d4>)
 80067f2:	fba3 2302 	umull	r2, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	011c      	lsls	r4, r3, #4
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	64b9      	str	r1, [r7, #72]	; 0x48
 8006814:	415b      	adcs	r3, r3
 8006816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800681c:	4641      	mov	r1, r8
 800681e:	eb12 0a01 	adds.w	sl, r2, r1
 8006822:	4649      	mov	r1, r9
 8006824:	eb43 0b01 	adc.w	fp, r3, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800683c:	4692      	mov	sl, r2
 800683e:	469b      	mov	fp, r3
 8006840:	4643      	mov	r3, r8
 8006842:	eb1a 0303 	adds.w	r3, sl, r3
 8006846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800684a:	464b      	mov	r3, r9
 800684c:	eb4b 0303 	adc.w	r3, fp, r3
 8006850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006868:	460b      	mov	r3, r1
 800686a:	18db      	adds	r3, r3, r3
 800686c:	643b      	str	r3, [r7, #64]	; 0x40
 800686e:	4613      	mov	r3, r2
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
 8006876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800687a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800687e:	f7fa f9eb 	bl	8000c58 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4611      	mov	r1, r2
 8006888:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <UART_SetConfig+0x2d4>)
 800688a:	fba3 2301 	umull	r2, r3, r3, r1
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2264      	movs	r2, #100	; 0x64
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	1acb      	subs	r3, r1, r3
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <UART_SetConfig+0x2d4>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ac:	441c      	add	r4, r3
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068c8:	415b      	adcs	r3, r3
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6339      	str	r1, [r7, #48]	; 0x30
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800691c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
 800692a:	4613      	mov	r3, r2
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800693a:	f7fa f98d 	bl	8000c58 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <UART_SetConfig+0x2d4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <UART_SetConfig+0x2d4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0207 	and.w	r2, r3, #7
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4422      	add	r2, r4
 800696a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800696c:	e105      	b.n	8006b7a <UART_SetConfig+0x4d6>
 800696e:	bf00      	nop
 8006970:	40011000 	.word	0x40011000
 8006974:	40011400 	.word	0x40011400
 8006978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800698a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	1891      	adds	r1, r2, r2
 8006994:	6239      	str	r1, [r7, #32]
 8006996:	415b      	adcs	r3, r3
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699e:	4641      	mov	r1, r8
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	4649      	mov	r1, r9
 80069a4:	eb43 0501 	adc.w	r5, r3, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c4:	464b      	mov	r3, r9
 80069c6:	eb45 0303 	adc.w	r3, r5, r3
 80069ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ea:	4629      	mov	r1, r5
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	4621      	mov	r1, r4
 80069f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f4:	4621      	mov	r1, r4
 80069f6:	008a      	lsls	r2, r1, #2
 80069f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069fc:	f7fa f92c 	bl	8000c58 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b60      	ldr	r3, [pc, #384]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	011c      	lsls	r4, r3, #4
 8006a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	61b9      	str	r1, [r7, #24]
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a30:	4641      	mov	r1, r8
 8006a32:	1851      	adds	r1, r2, r1
 8006a34:	6139      	str	r1, [r7, #16]
 8006a36:	4649      	mov	r1, r9
 8006a38:	414b      	adcs	r3, r1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	00cb      	lsls	r3, r1, #3
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a52:	4651      	mov	r1, sl
 8006a54:	00ca      	lsls	r2, r1, #3
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a64:	464b      	mov	r3, r9
 8006a66:	460a      	mov	r2, r1
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a88:	4649      	mov	r1, r9
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a92:	4641      	mov	r1, r8
 8006a94:	008a      	lsls	r2, r1, #2
 8006a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a9a:	f7fa f8dd 	bl	8000c58 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	3332      	adds	r3, #50	; 0x32
 8006ab6:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac2:	441c      	add	r4, r3
 8006ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac8:	2200      	movs	r2, #0
 8006aca:	673b      	str	r3, [r7, #112]	; 0x70
 8006acc:	677a      	str	r2, [r7, #116]	; 0x74
 8006ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	1891      	adds	r1, r2, r2
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	415b      	adcs	r3, r3
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	1851      	adds	r1, r2, r1
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	4649      	mov	r1, r9
 8006aea:	414b      	adcs	r3, r1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006afa:	4659      	mov	r1, fp
 8006afc:	00cb      	lsls	r3, r1, #3
 8006afe:	4651      	mov	r1, sl
 8006b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b04:	4651      	mov	r1, sl
 8006b06:	00ca      	lsls	r2, r1, #3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4642      	mov	r2, r8
 8006b10:	189b      	adds	r3, r3, r2
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	663b      	str	r3, [r7, #96]	; 0x60
 8006b28:	667a      	str	r2, [r7, #100]	; 0x64
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b36:	4649      	mov	r1, r9
 8006b38:	008b      	lsls	r3, r1, #2
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b40:	4641      	mov	r1, r8
 8006b42:	008a      	lsls	r2, r1, #2
 8006b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b48:	f7fa f886 	bl	8000c58 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b52:	fba3 1302 	umull	r1, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	2164      	movs	r1, #100	; 0x64
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4422      	add	r2, r4
 8006b78:	609a      	str	r2, [r3, #8]
}
 8006b7a:	bf00      	nop
 8006b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b86:	bf00      	nop
 8006b88:	51eb851f 	.word	0x51eb851f

08006b8c <__errno>:
 8006b8c:	4b01      	ldr	r3, [pc, #4]	; (8006b94 <__errno+0x8>)
 8006b8e:	6818      	ldr	r0, [r3, #0]
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000014 	.word	0x20000014

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	; (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	; (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	; (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	; (8006bdc <__libc_init_array+0x44>)
 8006bac:	f002 fff0 	bl	8009b90 <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	0800a20c 	.word	0x0800a20c
 8006bd4:	0800a20c 	.word	0x0800a20c
 8006bd8:	0800a20c 	.word	0x0800a20c
 8006bdc:	0800a210 	.word	0x0800a210

08006be0 <memset>:
 8006be0:	4402      	add	r2, r0
 8006be2:	4603      	mov	r3, r0
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d100      	bne.n	8006bea <memset+0xa>
 8006be8:	4770      	bx	lr
 8006bea:	f803 1b01 	strb.w	r1, [r3], #1
 8006bee:	e7f9      	b.n	8006be4 <memset+0x4>

08006bf0 <__cvt>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	ec55 4b10 	vmov	r4, r5, d0
 8006bf8:	2d00      	cmp	r5, #0
 8006bfa:	460e      	mov	r6, r1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	462b      	mov	r3, r5
 8006c00:	bfbb      	ittet	lt
 8006c02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c06:	461d      	movlt	r5, r3
 8006c08:	2300      	movge	r3, #0
 8006c0a:	232d      	movlt	r3, #45	; 0x2d
 8006c0c:	700b      	strb	r3, [r1, #0]
 8006c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c14:	4691      	mov	r9, r2
 8006c16:	f023 0820 	bic.w	r8, r3, #32
 8006c1a:	bfbc      	itt	lt
 8006c1c:	4622      	movlt	r2, r4
 8006c1e:	4614      	movlt	r4, r2
 8006c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c24:	d005      	beq.n	8006c32 <__cvt+0x42>
 8006c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c2a:	d100      	bne.n	8006c2e <__cvt+0x3e>
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	2102      	movs	r1, #2
 8006c30:	e000      	b.n	8006c34 <__cvt+0x44>
 8006c32:	2103      	movs	r1, #3
 8006c34:	ab03      	add	r3, sp, #12
 8006c36:	9301      	str	r3, [sp, #4]
 8006c38:	ab02      	add	r3, sp, #8
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	ec45 4b10 	vmov	d0, r4, r5
 8006c40:	4653      	mov	r3, sl
 8006c42:	4632      	mov	r2, r6
 8006c44:	f000 fe50 	bl	80078e8 <_dtoa_r>
 8006c48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	d102      	bne.n	8006c56 <__cvt+0x66>
 8006c50:	f019 0f01 	tst.w	r9, #1
 8006c54:	d022      	beq.n	8006c9c <__cvt+0xac>
 8006c56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c5a:	eb07 0906 	add.w	r9, r7, r6
 8006c5e:	d110      	bne.n	8006c82 <__cvt+0x92>
 8006c60:	783b      	ldrb	r3, [r7, #0]
 8006c62:	2b30      	cmp	r3, #48	; 0x30
 8006c64:	d10a      	bne.n	8006c7c <__cvt+0x8c>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c72:	b918      	cbnz	r0, 8006c7c <__cvt+0x8c>
 8006c74:	f1c6 0601 	rsb	r6, r6, #1
 8006c78:	f8ca 6000 	str.w	r6, [sl]
 8006c7c:	f8da 3000 	ldr.w	r3, [sl]
 8006c80:	4499      	add	r9, r3
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c8e:	b108      	cbz	r0, 8006c94 <__cvt+0xa4>
 8006c90:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c94:	2230      	movs	r2, #48	; 0x30
 8006c96:	9b03      	ldr	r3, [sp, #12]
 8006c98:	454b      	cmp	r3, r9
 8006c9a:	d307      	bcc.n	8006cac <__cvt+0xbc>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca0:	1bdb      	subs	r3, r3, r7
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	6013      	str	r3, [r2, #0]
 8006ca6:	b004      	add	sp, #16
 8006ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	9103      	str	r1, [sp, #12]
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	e7f0      	b.n	8006c96 <__cvt+0xa6>

08006cb4 <__exponent>:
 8006cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2900      	cmp	r1, #0
 8006cba:	bfb8      	it	lt
 8006cbc:	4249      	neglt	r1, r1
 8006cbe:	f803 2b02 	strb.w	r2, [r3], #2
 8006cc2:	bfb4      	ite	lt
 8006cc4:	222d      	movlt	r2, #45	; 0x2d
 8006cc6:	222b      	movge	r2, #43	; 0x2b
 8006cc8:	2909      	cmp	r1, #9
 8006cca:	7042      	strb	r2, [r0, #1]
 8006ccc:	dd2a      	ble.n	8006d24 <__exponent+0x70>
 8006cce:	f10d 0407 	add.w	r4, sp, #7
 8006cd2:	46a4      	mov	ip, r4
 8006cd4:	270a      	movs	r7, #10
 8006cd6:	46a6      	mov	lr, r4
 8006cd8:	460a      	mov	r2, r1
 8006cda:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cde:	fb07 1516 	mls	r5, r7, r6, r1
 8006ce2:	3530      	adds	r5, #48	; 0x30
 8006ce4:	2a63      	cmp	r2, #99	; 0x63
 8006ce6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	dcf1      	bgt.n	8006cd6 <__exponent+0x22>
 8006cf2:	3130      	adds	r1, #48	; 0x30
 8006cf4:	f1ae 0502 	sub.w	r5, lr, #2
 8006cf8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cfc:	1c44      	adds	r4, r0, #1
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4561      	cmp	r1, ip
 8006d02:	d30a      	bcc.n	8006d1a <__exponent+0x66>
 8006d04:	f10d 0209 	add.w	r2, sp, #9
 8006d08:	eba2 020e 	sub.w	r2, r2, lr
 8006d0c:	4565      	cmp	r5, ip
 8006d0e:	bf88      	it	hi
 8006d10:	2200      	movhi	r2, #0
 8006d12:	4413      	add	r3, r2
 8006d14:	1a18      	subs	r0, r3, r0
 8006d16:	b003      	add	sp, #12
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d22:	e7ed      	b.n	8006d00 <__exponent+0x4c>
 8006d24:	2330      	movs	r3, #48	; 0x30
 8006d26:	3130      	adds	r1, #48	; 0x30
 8006d28:	7083      	strb	r3, [r0, #2]
 8006d2a:	70c1      	strb	r1, [r0, #3]
 8006d2c:	1d03      	adds	r3, r0, #4
 8006d2e:	e7f1      	b.n	8006d14 <__exponent+0x60>

08006d30 <_printf_float>:
 8006d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d34:	ed2d 8b02 	vpush	{d8}
 8006d38:	b08d      	sub	sp, #52	; 0x34
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d40:	4616      	mov	r6, r2
 8006d42:	461f      	mov	r7, r3
 8006d44:	4605      	mov	r5, r0
 8006d46:	f001 fd75 	bl	8008834 <_localeconv_r>
 8006d4a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d4e:	4650      	mov	r0, sl
 8006d50:	f7f9 fa46 	bl	80001e0 <strlen>
 8006d54:	2300      	movs	r3, #0
 8006d56:	930a      	str	r3, [sp, #40]	; 0x28
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	9305      	str	r3, [sp, #20]
 8006d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d64:	3307      	adds	r3, #7
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	f103 0208 	add.w	r2, r3, #8
 8006d6e:	f8c8 2000 	str.w	r2, [r8]
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d82:	9307      	str	r3, [sp, #28]
 8006d84:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d88:	ee08 0a10 	vmov	s16, r0
 8006d8c:	4b9f      	ldr	r3, [pc, #636]	; (800700c <_printf_float+0x2dc>)
 8006d8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	f7f9 fed1 	bl	8000b3c <__aeabi_dcmpun>
 8006d9a:	bb88      	cbnz	r0, 8006e00 <_printf_float+0xd0>
 8006d9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da0:	4b9a      	ldr	r3, [pc, #616]	; (800700c <_printf_float+0x2dc>)
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	f7f9 feab 	bl	8000b00 <__aeabi_dcmple>
 8006daa:	bb48      	cbnz	r0, 8006e00 <_printf_float+0xd0>
 8006dac:	2200      	movs	r2, #0
 8006dae:	2300      	movs	r3, #0
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 fe9a 	bl	8000aec <__aeabi_dcmplt>
 8006db8:	b110      	cbz	r0, 8006dc0 <_printf_float+0x90>
 8006dba:	232d      	movs	r3, #45	; 0x2d
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc0:	4b93      	ldr	r3, [pc, #588]	; (8007010 <_printf_float+0x2e0>)
 8006dc2:	4894      	ldr	r0, [pc, #592]	; (8007014 <_printf_float+0x2e4>)
 8006dc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006dc8:	bf94      	ite	ls
 8006dca:	4698      	movls	r8, r3
 8006dcc:	4680      	movhi	r8, r0
 8006dce:	2303      	movs	r3, #3
 8006dd0:	6123      	str	r3, [r4, #16]
 8006dd2:	9b05      	ldr	r3, [sp, #20]
 8006dd4:	f023 0204 	bic.w	r2, r3, #4
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	f04f 0900 	mov.w	r9, #0
 8006dde:	9700      	str	r7, [sp, #0]
 8006de0:	4633      	mov	r3, r6
 8006de2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006de4:	4621      	mov	r1, r4
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 f9d8 	bl	800719c <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	f040 8090 	bne.w	8006f12 <_printf_float+0x1e2>
 8006df2:	f04f 30ff 	mov.w	r0, #4294967295
 8006df6:	b00d      	add	sp, #52	; 0x34
 8006df8:	ecbd 8b02 	vpop	{d8}
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fe98 	bl	8000b3c <__aeabi_dcmpun>
 8006e0c:	b140      	cbz	r0, 8006e20 <_printf_float+0xf0>
 8006e0e:	464b      	mov	r3, r9
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bfbc      	itt	lt
 8006e14:	232d      	movlt	r3, #45	; 0x2d
 8006e16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e1a:	487f      	ldr	r0, [pc, #508]	; (8007018 <_printf_float+0x2e8>)
 8006e1c:	4b7f      	ldr	r3, [pc, #508]	; (800701c <_printf_float+0x2ec>)
 8006e1e:	e7d1      	b.n	8006dc4 <_printf_float+0x94>
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e26:	9206      	str	r2, [sp, #24]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	d13f      	bne.n	8006eac <_printf_float+0x17c>
 8006e2c:	2306      	movs	r3, #6
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	6861      	ldr	r1, [r4, #4]
 8006e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e42:	ab09      	add	r3, sp, #36	; 0x24
 8006e44:	ec49 8b10 	vmov	d0, r8, r9
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e50:	4628      	mov	r0, r5
 8006e52:	f7ff fecd 	bl	8006bf0 <__cvt>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e5a:	2b47      	cmp	r3, #71	; 0x47
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	d108      	bne.n	8006e72 <_printf_float+0x142>
 8006e60:	1cc8      	adds	r0, r1, #3
 8006e62:	db02      	blt.n	8006e6a <_printf_float+0x13a>
 8006e64:	6863      	ldr	r3, [r4, #4]
 8006e66:	4299      	cmp	r1, r3
 8006e68:	dd41      	ble.n	8006eee <_printf_float+0x1be>
 8006e6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e6e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e76:	d820      	bhi.n	8006eba <_printf_float+0x18a>
 8006e78:	3901      	subs	r1, #1
 8006e7a:	465a      	mov	r2, fp
 8006e7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e80:	9109      	str	r1, [sp, #36]	; 0x24
 8006e82:	f7ff ff17 	bl	8006cb4 <__exponent>
 8006e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e88:	1813      	adds	r3, r2, r0
 8006e8a:	2a01      	cmp	r2, #1
 8006e8c:	4681      	mov	r9, r0
 8006e8e:	6123      	str	r3, [r4, #16]
 8006e90:	dc02      	bgt.n	8006e98 <_printf_float+0x168>
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	07d2      	lsls	r2, r2, #31
 8006e96:	d501      	bpl.n	8006e9c <_printf_float+0x16c>
 8006e98:	3301      	adds	r3, #1
 8006e9a:	6123      	str	r3, [r4, #16]
 8006e9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d09c      	beq.n	8006dde <_printf_float+0xae>
 8006ea4:	232d      	movs	r3, #45	; 0x2d
 8006ea6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eaa:	e798      	b.n	8006dde <_printf_float+0xae>
 8006eac:	9a06      	ldr	r2, [sp, #24]
 8006eae:	2a47      	cmp	r2, #71	; 0x47
 8006eb0:	d1be      	bne.n	8006e30 <_printf_float+0x100>
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1bc      	bne.n	8006e30 <_printf_float+0x100>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e7b9      	b.n	8006e2e <_printf_float+0xfe>
 8006eba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ebe:	d118      	bne.n	8006ef2 <_printf_float+0x1c2>
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	dd0b      	ble.n	8006ede <_printf_float+0x1ae>
 8006ec6:	6121      	str	r1, [r4, #16]
 8006ec8:	b913      	cbnz	r3, 8006ed0 <_printf_float+0x1a0>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	07d0      	lsls	r0, r2, #31
 8006ece:	d502      	bpl.n	8006ed6 <_printf_float+0x1a6>
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	440b      	add	r3, r1
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ed8:	f04f 0900 	mov.w	r9, #0
 8006edc:	e7de      	b.n	8006e9c <_printf_float+0x16c>
 8006ede:	b913      	cbnz	r3, 8006ee6 <_printf_float+0x1b6>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	07d2      	lsls	r2, r2, #31
 8006ee4:	d501      	bpl.n	8006eea <_printf_float+0x1ba>
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	e7f4      	b.n	8006ed4 <_printf_float+0x1a4>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e7f2      	b.n	8006ed4 <_printf_float+0x1a4>
 8006eee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	db05      	blt.n	8006f04 <_printf_float+0x1d4>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	6121      	str	r1, [r4, #16]
 8006efc:	07d8      	lsls	r0, r3, #31
 8006efe:	d5ea      	bpl.n	8006ed6 <_printf_float+0x1a6>
 8006f00:	1c4b      	adds	r3, r1, #1
 8006f02:	e7e7      	b.n	8006ed4 <_printf_float+0x1a4>
 8006f04:	2900      	cmp	r1, #0
 8006f06:	bfd4      	ite	le
 8006f08:	f1c1 0202 	rsble	r2, r1, #2
 8006f0c:	2201      	movgt	r2, #1
 8006f0e:	4413      	add	r3, r2
 8006f10:	e7e0      	b.n	8006ed4 <_printf_float+0x1a4>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	055a      	lsls	r2, r3, #21
 8006f16:	d407      	bmi.n	8006f28 <_printf_float+0x1f8>
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	d12c      	bne.n	8006f80 <_printf_float+0x250>
 8006f26:	e764      	b.n	8006df2 <_printf_float+0xc2>
 8006f28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2c:	f240 80e0 	bls.w	80070f0 <_printf_float+0x3c0>
 8006f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f34:	2200      	movs	r2, #0
 8006f36:	2300      	movs	r3, #0
 8006f38:	f7f9 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d034      	beq.n	8006faa <_printf_float+0x27a>
 8006f40:	4a37      	ldr	r2, [pc, #220]	; (8007020 <_printf_float+0x2f0>)
 8006f42:	2301      	movs	r3, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af51 	beq.w	8006df2 <_printf_float+0xc2>
 8006f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f54:	429a      	cmp	r2, r3
 8006f56:	db02      	blt.n	8006f5e <_printf_float+0x22e>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07d8      	lsls	r0, r3, #31
 8006f5c:	d510      	bpl.n	8006f80 <_printf_float+0x250>
 8006f5e:	ee18 3a10 	vmov	r3, s16
 8006f62:	4652      	mov	r2, sl
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f af41 	beq.w	8006df2 <_printf_float+0xc2>
 8006f70:	f04f 0800 	mov.w	r8, #0
 8006f74:	f104 091a 	add.w	r9, r4, #26
 8006f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4543      	cmp	r3, r8
 8006f7e:	dc09      	bgt.n	8006f94 <_printf_float+0x264>
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	079b      	lsls	r3, r3, #30
 8006f84:	f100 8105 	bmi.w	8007192 <_printf_float+0x462>
 8006f88:	68e0      	ldr	r0, [r4, #12]
 8006f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	bfb8      	it	lt
 8006f90:	4618      	movlt	r0, r3
 8006f92:	e730      	b.n	8006df6 <_printf_float+0xc6>
 8006f94:	2301      	movs	r3, #1
 8006f96:	464a      	mov	r2, r9
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f af27 	beq.w	8006df2 <_printf_float+0xc2>
 8006fa4:	f108 0801 	add.w	r8, r8, #1
 8006fa8:	e7e6      	b.n	8006f78 <_printf_float+0x248>
 8006faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	dc39      	bgt.n	8007024 <_printf_float+0x2f4>
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <_printf_float+0x2f0>)
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f af19 	beq.w	8006df2 <_printf_float+0xc2>
 8006fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	d102      	bne.n	8006fce <_printf_float+0x29e>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	07d9      	lsls	r1, r3, #31
 8006fcc:	d5d8      	bpl.n	8006f80 <_printf_float+0x250>
 8006fce:	ee18 3a10 	vmov	r3, s16
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f af09 	beq.w	8006df2 <_printf_float+0xc2>
 8006fe0:	f04f 0900 	mov.w	r9, #0
 8006fe4:	f104 0a1a 	add.w	sl, r4, #26
 8006fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fea:	425b      	negs	r3, r3
 8006fec:	454b      	cmp	r3, r9
 8006fee:	dc01      	bgt.n	8006ff4 <_printf_float+0x2c4>
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff2:	e792      	b.n	8006f1a <_printf_float+0x1ea>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f aef7 	beq.w	8006df2 <_printf_float+0xc2>
 8007004:	f109 0901 	add.w	r9, r9, #1
 8007008:	e7ee      	b.n	8006fe8 <_printf_float+0x2b8>
 800700a:	bf00      	nop
 800700c:	7fefffff 	.word	0x7fefffff
 8007010:	08009e2c 	.word	0x08009e2c
 8007014:	08009e30 	.word	0x08009e30
 8007018:	08009e38 	.word	0x08009e38
 800701c:	08009e34 	.word	0x08009e34
 8007020:	08009e3c 	.word	0x08009e3c
 8007024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007028:	429a      	cmp	r2, r3
 800702a:	bfa8      	it	ge
 800702c:	461a      	movge	r2, r3
 800702e:	2a00      	cmp	r2, #0
 8007030:	4691      	mov	r9, r2
 8007032:	dc37      	bgt.n	80070a4 <_printf_float+0x374>
 8007034:	f04f 0b00 	mov.w	fp, #0
 8007038:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800703c:	f104 021a 	add.w	r2, r4, #26
 8007040:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007042:	9305      	str	r3, [sp, #20]
 8007044:	eba3 0309 	sub.w	r3, r3, r9
 8007048:	455b      	cmp	r3, fp
 800704a:	dc33      	bgt.n	80070b4 <_printf_float+0x384>
 800704c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007050:	429a      	cmp	r2, r3
 8007052:	db3b      	blt.n	80070cc <_printf_float+0x39c>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d438      	bmi.n	80070cc <_printf_float+0x39c>
 800705a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705c:	9a05      	ldr	r2, [sp, #20]
 800705e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007060:	1a9a      	subs	r2, r3, r2
 8007062:	eba3 0901 	sub.w	r9, r3, r1
 8007066:	4591      	cmp	r9, r2
 8007068:	bfa8      	it	ge
 800706a:	4691      	movge	r9, r2
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	dc35      	bgt.n	80070de <_printf_float+0x3ae>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800707a:	f104 0a1a 	add.w	sl, r4, #26
 800707e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	eba3 0309 	sub.w	r3, r3, r9
 8007088:	4543      	cmp	r3, r8
 800708a:	f77f af79 	ble.w	8006f80 <_printf_float+0x250>
 800708e:	2301      	movs	r3, #1
 8007090:	4652      	mov	r2, sl
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	f43f aeaa 	beq.w	8006df2 <_printf_float+0xc2>
 800709e:	f108 0801 	add.w	r8, r8, #1
 80070a2:	e7ec      	b.n	800707e <_printf_float+0x34e>
 80070a4:	4613      	mov	r3, r2
 80070a6:	4631      	mov	r1, r6
 80070a8:	4642      	mov	r2, r8
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	d1c0      	bne.n	8007034 <_printf_float+0x304>
 80070b2:	e69e      	b.n	8006df2 <_printf_float+0xc2>
 80070b4:	2301      	movs	r3, #1
 80070b6:	4631      	mov	r1, r6
 80070b8:	4628      	mov	r0, r5
 80070ba:	9205      	str	r2, [sp, #20]
 80070bc:	47b8      	blx	r7
 80070be:	3001      	adds	r0, #1
 80070c0:	f43f ae97 	beq.w	8006df2 <_printf_float+0xc2>
 80070c4:	9a05      	ldr	r2, [sp, #20]
 80070c6:	f10b 0b01 	add.w	fp, fp, #1
 80070ca:	e7b9      	b.n	8007040 <_printf_float+0x310>
 80070cc:	ee18 3a10 	vmov	r3, s16
 80070d0:	4652      	mov	r2, sl
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	d1be      	bne.n	800705a <_printf_float+0x32a>
 80070dc:	e689      	b.n	8006df2 <_printf_float+0xc2>
 80070de:	9a05      	ldr	r2, [sp, #20]
 80070e0:	464b      	mov	r3, r9
 80070e2:	4442      	add	r2, r8
 80070e4:	4631      	mov	r1, r6
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b8      	blx	r7
 80070ea:	3001      	adds	r0, #1
 80070ec:	d1c1      	bne.n	8007072 <_printf_float+0x342>
 80070ee:	e680      	b.n	8006df2 <_printf_float+0xc2>
 80070f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	dc01      	bgt.n	80070fa <_printf_float+0x3ca>
 80070f6:	07db      	lsls	r3, r3, #31
 80070f8:	d538      	bpl.n	800716c <_printf_float+0x43c>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4642      	mov	r2, r8
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	f43f ae74 	beq.w	8006df2 <_printf_float+0xc2>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f ae6b 	beq.w	8006df2 <_printf_float+0xc2>
 800711c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	f7f9 fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007128:	b9d8      	cbnz	r0, 8007162 <_printf_float+0x432>
 800712a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712c:	f108 0201 	add.w	r2, r8, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	d10e      	bne.n	800715a <_printf_float+0x42a>
 800713c:	e659      	b.n	8006df2 <_printf_float+0xc2>
 800713e:	2301      	movs	r3, #1
 8007140:	4652      	mov	r2, sl
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f ae52 	beq.w	8006df2 <_printf_float+0xc2>
 800714e:	f108 0801 	add.w	r8, r8, #1
 8007152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007154:	3b01      	subs	r3, #1
 8007156:	4543      	cmp	r3, r8
 8007158:	dcf1      	bgt.n	800713e <_printf_float+0x40e>
 800715a:	464b      	mov	r3, r9
 800715c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007160:	e6dc      	b.n	8006f1c <_printf_float+0x1ec>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	f104 0a1a 	add.w	sl, r4, #26
 800716a:	e7f2      	b.n	8007152 <_printf_float+0x422>
 800716c:	2301      	movs	r3, #1
 800716e:	4642      	mov	r2, r8
 8007170:	e7df      	b.n	8007132 <_printf_float+0x402>
 8007172:	2301      	movs	r3, #1
 8007174:	464a      	mov	r2, r9
 8007176:	4631      	mov	r1, r6
 8007178:	4628      	mov	r0, r5
 800717a:	47b8      	blx	r7
 800717c:	3001      	adds	r0, #1
 800717e:	f43f ae38 	beq.w	8006df2 <_printf_float+0xc2>
 8007182:	f108 0801 	add.w	r8, r8, #1
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800718a:	1a5b      	subs	r3, r3, r1
 800718c:	4543      	cmp	r3, r8
 800718e:	dcf0      	bgt.n	8007172 <_printf_float+0x442>
 8007190:	e6fa      	b.n	8006f88 <_printf_float+0x258>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	f104 0919 	add.w	r9, r4, #25
 800719a:	e7f4      	b.n	8007186 <_printf_float+0x456>

0800719c <_printf_common>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	4616      	mov	r6, r2
 80071a2:	4699      	mov	r9, r3
 80071a4:	688a      	ldr	r2, [r1, #8]
 80071a6:	690b      	ldr	r3, [r1, #16]
 80071a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	bfb8      	it	lt
 80071b0:	4613      	movlt	r3, r2
 80071b2:	6033      	str	r3, [r6, #0]
 80071b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071b8:	4607      	mov	r7, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b10a      	cbz	r2, 80071c2 <_printf_common+0x26>
 80071be:	3301      	adds	r3, #1
 80071c0:	6033      	str	r3, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	0699      	lsls	r1, r3, #26
 80071c6:	bf42      	ittt	mi
 80071c8:	6833      	ldrmi	r3, [r6, #0]
 80071ca:	3302      	addmi	r3, #2
 80071cc:	6033      	strmi	r3, [r6, #0]
 80071ce:	6825      	ldr	r5, [r4, #0]
 80071d0:	f015 0506 	ands.w	r5, r5, #6
 80071d4:	d106      	bne.n	80071e4 <_printf_common+0x48>
 80071d6:	f104 0a19 	add.w	sl, r4, #25
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	6832      	ldr	r2, [r6, #0]
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc26      	bgt.n	8007232 <_printf_common+0x96>
 80071e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071e8:	1e13      	subs	r3, r2, #0
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	bf18      	it	ne
 80071ee:	2301      	movne	r3, #1
 80071f0:	0692      	lsls	r2, r2, #26
 80071f2:	d42b      	bmi.n	800724c <_printf_common+0xb0>
 80071f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071f8:	4649      	mov	r1, r9
 80071fa:	4638      	mov	r0, r7
 80071fc:	47c0      	blx	r8
 80071fe:	3001      	adds	r0, #1
 8007200:	d01e      	beq.n	8007240 <_printf_common+0xa4>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	68e5      	ldr	r5, [r4, #12]
 8007206:	6832      	ldr	r2, [r6, #0]
 8007208:	f003 0306 	and.w	r3, r3, #6
 800720c:	2b04      	cmp	r3, #4
 800720e:	bf08      	it	eq
 8007210:	1aad      	subeq	r5, r5, r2
 8007212:	68a3      	ldr	r3, [r4, #8]
 8007214:	6922      	ldr	r2, [r4, #16]
 8007216:	bf0c      	ite	eq
 8007218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800721c:	2500      	movne	r5, #0
 800721e:	4293      	cmp	r3, r2
 8007220:	bfc4      	itt	gt
 8007222:	1a9b      	subgt	r3, r3, r2
 8007224:	18ed      	addgt	r5, r5, r3
 8007226:	2600      	movs	r6, #0
 8007228:	341a      	adds	r4, #26
 800722a:	42b5      	cmp	r5, r6
 800722c:	d11a      	bne.n	8007264 <_printf_common+0xc8>
 800722e:	2000      	movs	r0, #0
 8007230:	e008      	b.n	8007244 <_printf_common+0xa8>
 8007232:	2301      	movs	r3, #1
 8007234:	4652      	mov	r2, sl
 8007236:	4649      	mov	r1, r9
 8007238:	4638      	mov	r0, r7
 800723a:	47c0      	blx	r8
 800723c:	3001      	adds	r0, #1
 800723e:	d103      	bne.n	8007248 <_printf_common+0xac>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007248:	3501      	adds	r5, #1
 800724a:	e7c6      	b.n	80071da <_printf_common+0x3e>
 800724c:	18e1      	adds	r1, r4, r3
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	2030      	movs	r0, #48	; 0x30
 8007252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007256:	4422      	add	r2, r4
 8007258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800725c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007260:	3302      	adds	r3, #2
 8007262:	e7c7      	b.n	80071f4 <_printf_common+0x58>
 8007264:	2301      	movs	r3, #1
 8007266:	4622      	mov	r2, r4
 8007268:	4649      	mov	r1, r9
 800726a:	4638      	mov	r0, r7
 800726c:	47c0      	blx	r8
 800726e:	3001      	adds	r0, #1
 8007270:	d0e6      	beq.n	8007240 <_printf_common+0xa4>
 8007272:	3601      	adds	r6, #1
 8007274:	e7d9      	b.n	800722a <_printf_common+0x8e>
	...

08007278 <_printf_i>:
 8007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	7e0f      	ldrb	r7, [r1, #24]
 800727e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007280:	2f78      	cmp	r7, #120	; 0x78
 8007282:	4691      	mov	r9, r2
 8007284:	4680      	mov	r8, r0
 8007286:	460c      	mov	r4, r1
 8007288:	469a      	mov	sl, r3
 800728a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800728e:	d807      	bhi.n	80072a0 <_printf_i+0x28>
 8007290:	2f62      	cmp	r7, #98	; 0x62
 8007292:	d80a      	bhi.n	80072aa <_printf_i+0x32>
 8007294:	2f00      	cmp	r7, #0
 8007296:	f000 80d8 	beq.w	800744a <_printf_i+0x1d2>
 800729a:	2f58      	cmp	r7, #88	; 0x58
 800729c:	f000 80a3 	beq.w	80073e6 <_printf_i+0x16e>
 80072a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072a8:	e03a      	b.n	8007320 <_printf_i+0xa8>
 80072aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ae:	2b15      	cmp	r3, #21
 80072b0:	d8f6      	bhi.n	80072a0 <_printf_i+0x28>
 80072b2:	a101      	add	r1, pc, #4	; (adr r1, 80072b8 <_printf_i+0x40>)
 80072b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b8:	08007311 	.word	0x08007311
 80072bc:	08007325 	.word	0x08007325
 80072c0:	080072a1 	.word	0x080072a1
 80072c4:	080072a1 	.word	0x080072a1
 80072c8:	080072a1 	.word	0x080072a1
 80072cc:	080072a1 	.word	0x080072a1
 80072d0:	08007325 	.word	0x08007325
 80072d4:	080072a1 	.word	0x080072a1
 80072d8:	080072a1 	.word	0x080072a1
 80072dc:	080072a1 	.word	0x080072a1
 80072e0:	080072a1 	.word	0x080072a1
 80072e4:	08007431 	.word	0x08007431
 80072e8:	08007355 	.word	0x08007355
 80072ec:	08007413 	.word	0x08007413
 80072f0:	080072a1 	.word	0x080072a1
 80072f4:	080072a1 	.word	0x080072a1
 80072f8:	08007453 	.word	0x08007453
 80072fc:	080072a1 	.word	0x080072a1
 8007300:	08007355 	.word	0x08007355
 8007304:	080072a1 	.word	0x080072a1
 8007308:	080072a1 	.word	0x080072a1
 800730c:	0800741b 	.word	0x0800741b
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	1d1a      	adds	r2, r3, #4
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800731c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007320:	2301      	movs	r3, #1
 8007322:	e0a3      	b.n	800746c <_printf_i+0x1f4>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	6829      	ldr	r1, [r5, #0]
 8007328:	0606      	lsls	r6, r0, #24
 800732a:	f101 0304 	add.w	r3, r1, #4
 800732e:	d50a      	bpl.n	8007346 <_printf_i+0xce>
 8007330:	680e      	ldr	r6, [r1, #0]
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	2e00      	cmp	r6, #0
 8007336:	da03      	bge.n	8007340 <_printf_i+0xc8>
 8007338:	232d      	movs	r3, #45	; 0x2d
 800733a:	4276      	negs	r6, r6
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	485e      	ldr	r0, [pc, #376]	; (80074bc <_printf_i+0x244>)
 8007342:	230a      	movs	r3, #10
 8007344:	e019      	b.n	800737a <_printf_i+0x102>
 8007346:	680e      	ldr	r6, [r1, #0]
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800734e:	bf18      	it	ne
 8007350:	b236      	sxthne	r6, r6
 8007352:	e7ef      	b.n	8007334 <_printf_i+0xbc>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	1d19      	adds	r1, r3, #4
 800735a:	6029      	str	r1, [r5, #0]
 800735c:	0601      	lsls	r1, r0, #24
 800735e:	d501      	bpl.n	8007364 <_printf_i+0xec>
 8007360:	681e      	ldr	r6, [r3, #0]
 8007362:	e002      	b.n	800736a <_printf_i+0xf2>
 8007364:	0646      	lsls	r6, r0, #25
 8007366:	d5fb      	bpl.n	8007360 <_printf_i+0xe8>
 8007368:	881e      	ldrh	r6, [r3, #0]
 800736a:	4854      	ldr	r0, [pc, #336]	; (80074bc <_printf_i+0x244>)
 800736c:	2f6f      	cmp	r7, #111	; 0x6f
 800736e:	bf0c      	ite	eq
 8007370:	2308      	moveq	r3, #8
 8007372:	230a      	movne	r3, #10
 8007374:	2100      	movs	r1, #0
 8007376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800737a:	6865      	ldr	r5, [r4, #4]
 800737c:	60a5      	str	r5, [r4, #8]
 800737e:	2d00      	cmp	r5, #0
 8007380:	bfa2      	ittt	ge
 8007382:	6821      	ldrge	r1, [r4, #0]
 8007384:	f021 0104 	bicge.w	r1, r1, #4
 8007388:	6021      	strge	r1, [r4, #0]
 800738a:	b90e      	cbnz	r6, 8007390 <_printf_i+0x118>
 800738c:	2d00      	cmp	r5, #0
 800738e:	d04d      	beq.n	800742c <_printf_i+0x1b4>
 8007390:	4615      	mov	r5, r2
 8007392:	fbb6 f1f3 	udiv	r1, r6, r3
 8007396:	fb03 6711 	mls	r7, r3, r1, r6
 800739a:	5dc7      	ldrb	r7, [r0, r7]
 800739c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073a0:	4637      	mov	r7, r6
 80073a2:	42bb      	cmp	r3, r7
 80073a4:	460e      	mov	r6, r1
 80073a6:	d9f4      	bls.n	8007392 <_printf_i+0x11a>
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10b      	bne.n	80073c4 <_printf_i+0x14c>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	07de      	lsls	r6, r3, #31
 80073b0:	d508      	bpl.n	80073c4 <_printf_i+0x14c>
 80073b2:	6923      	ldr	r3, [r4, #16]
 80073b4:	6861      	ldr	r1, [r4, #4]
 80073b6:	4299      	cmp	r1, r3
 80073b8:	bfde      	ittt	le
 80073ba:	2330      	movle	r3, #48	; 0x30
 80073bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073c4:	1b52      	subs	r2, r2, r5
 80073c6:	6122      	str	r2, [r4, #16]
 80073c8:	f8cd a000 	str.w	sl, [sp]
 80073cc:	464b      	mov	r3, r9
 80073ce:	aa03      	add	r2, sp, #12
 80073d0:	4621      	mov	r1, r4
 80073d2:	4640      	mov	r0, r8
 80073d4:	f7ff fee2 	bl	800719c <_printf_common>
 80073d8:	3001      	adds	r0, #1
 80073da:	d14c      	bne.n	8007476 <_printf_i+0x1fe>
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295
 80073e0:	b004      	add	sp, #16
 80073e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e6:	4835      	ldr	r0, [pc, #212]	; (80074bc <_printf_i+0x244>)
 80073e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073ec:	6829      	ldr	r1, [r5, #0]
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073f4:	6029      	str	r1, [r5, #0]
 80073f6:	061d      	lsls	r5, r3, #24
 80073f8:	d514      	bpl.n	8007424 <_printf_i+0x1ac>
 80073fa:	07df      	lsls	r7, r3, #31
 80073fc:	bf44      	itt	mi
 80073fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007402:	6023      	strmi	r3, [r4, #0]
 8007404:	b91e      	cbnz	r6, 800740e <_printf_i+0x196>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	f023 0320 	bic.w	r3, r3, #32
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	2310      	movs	r3, #16
 8007410:	e7b0      	b.n	8007374 <_printf_i+0xfc>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	f043 0320 	orr.w	r3, r3, #32
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	2378      	movs	r3, #120	; 0x78
 800741c:	4828      	ldr	r0, [pc, #160]	; (80074c0 <_printf_i+0x248>)
 800741e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007422:	e7e3      	b.n	80073ec <_printf_i+0x174>
 8007424:	0659      	lsls	r1, r3, #25
 8007426:	bf48      	it	mi
 8007428:	b2b6      	uxthmi	r6, r6
 800742a:	e7e6      	b.n	80073fa <_printf_i+0x182>
 800742c:	4615      	mov	r5, r2
 800742e:	e7bb      	b.n	80073a8 <_printf_i+0x130>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	6826      	ldr	r6, [r4, #0]
 8007434:	6961      	ldr	r1, [r4, #20]
 8007436:	1d18      	adds	r0, r3, #4
 8007438:	6028      	str	r0, [r5, #0]
 800743a:	0635      	lsls	r5, r6, #24
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	d501      	bpl.n	8007444 <_printf_i+0x1cc>
 8007440:	6019      	str	r1, [r3, #0]
 8007442:	e002      	b.n	800744a <_printf_i+0x1d2>
 8007444:	0670      	lsls	r0, r6, #25
 8007446:	d5fb      	bpl.n	8007440 <_printf_i+0x1c8>
 8007448:	8019      	strh	r1, [r3, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	4615      	mov	r5, r2
 8007450:	e7ba      	b.n	80073c8 <_printf_i+0x150>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	1d1a      	adds	r2, r3, #4
 8007456:	602a      	str	r2, [r5, #0]
 8007458:	681d      	ldr	r5, [r3, #0]
 800745a:	6862      	ldr	r2, [r4, #4]
 800745c:	2100      	movs	r1, #0
 800745e:	4628      	mov	r0, r5
 8007460:	f7f8 fec6 	bl	80001f0 <memchr>
 8007464:	b108      	cbz	r0, 800746a <_printf_i+0x1f2>
 8007466:	1b40      	subs	r0, r0, r5
 8007468:	6060      	str	r0, [r4, #4]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	2300      	movs	r3, #0
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	e7a8      	b.n	80073c8 <_printf_i+0x150>
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	462a      	mov	r2, r5
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d0ab      	beq.n	80073dc <_printf_i+0x164>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	079b      	lsls	r3, r3, #30
 8007488:	d413      	bmi.n	80074b2 <_printf_i+0x23a>
 800748a:	68e0      	ldr	r0, [r4, #12]
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	4298      	cmp	r0, r3
 8007490:	bfb8      	it	lt
 8007492:	4618      	movlt	r0, r3
 8007494:	e7a4      	b.n	80073e0 <_printf_i+0x168>
 8007496:	2301      	movs	r3, #1
 8007498:	4632      	mov	r2, r6
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d09b      	beq.n	80073dc <_printf_i+0x164>
 80074a4:	3501      	adds	r5, #1
 80074a6:	68e3      	ldr	r3, [r4, #12]
 80074a8:	9903      	ldr	r1, [sp, #12]
 80074aa:	1a5b      	subs	r3, r3, r1
 80074ac:	42ab      	cmp	r3, r5
 80074ae:	dcf2      	bgt.n	8007496 <_printf_i+0x21e>
 80074b0:	e7eb      	b.n	800748a <_printf_i+0x212>
 80074b2:	2500      	movs	r5, #0
 80074b4:	f104 0619 	add.w	r6, r4, #25
 80074b8:	e7f5      	b.n	80074a6 <_printf_i+0x22e>
 80074ba:	bf00      	nop
 80074bc:	08009e3e 	.word	0x08009e3e
 80074c0:	08009e4f 	.word	0x08009e4f

080074c4 <iprintf>:
 80074c4:	b40f      	push	{r0, r1, r2, r3}
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <iprintf+0x2c>)
 80074c8:	b513      	push	{r0, r1, r4, lr}
 80074ca:	681c      	ldr	r4, [r3, #0]
 80074cc:	b124      	cbz	r4, 80074d8 <iprintf+0x14>
 80074ce:	69a3      	ldr	r3, [r4, #24]
 80074d0:	b913      	cbnz	r3, 80074d8 <iprintf+0x14>
 80074d2:	4620      	mov	r0, r4
 80074d4:	f001 f910 	bl	80086f8 <__sinit>
 80074d8:	ab05      	add	r3, sp, #20
 80074da:	9a04      	ldr	r2, [sp, #16]
 80074dc:	68a1      	ldr	r1, [r4, #8]
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	4620      	mov	r0, r4
 80074e2:	f002 f829 	bl	8009538 <_vfiprintf_r>
 80074e6:	b002      	add	sp, #8
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	b004      	add	sp, #16
 80074ee:	4770      	bx	lr
 80074f0:	20000014 	.word	0x20000014

080074f4 <putchar>:
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <putchar+0x28>)
 80074f6:	b513      	push	{r0, r1, r4, lr}
 80074f8:	681c      	ldr	r4, [r3, #0]
 80074fa:	4601      	mov	r1, r0
 80074fc:	b134      	cbz	r4, 800750c <putchar+0x18>
 80074fe:	69a3      	ldr	r3, [r4, #24]
 8007500:	b923      	cbnz	r3, 800750c <putchar+0x18>
 8007502:	9001      	str	r0, [sp, #4]
 8007504:	4620      	mov	r0, r4
 8007506:	f001 f8f7 	bl	80086f8 <__sinit>
 800750a:	9901      	ldr	r1, [sp, #4]
 800750c:	68a2      	ldr	r2, [r4, #8]
 800750e:	4620      	mov	r0, r4
 8007510:	b002      	add	sp, #8
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	f002 b93f 	b.w	8009798 <_putc_r>
 800751a:	bf00      	nop
 800751c:	20000014 	.word	0x20000014

08007520 <_puts_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	460e      	mov	r6, r1
 8007524:	4605      	mov	r5, r0
 8007526:	b118      	cbz	r0, 8007530 <_puts_r+0x10>
 8007528:	6983      	ldr	r3, [r0, #24]
 800752a:	b90b      	cbnz	r3, 8007530 <_puts_r+0x10>
 800752c:	f001 f8e4 	bl	80086f8 <__sinit>
 8007530:	69ab      	ldr	r3, [r5, #24]
 8007532:	68ac      	ldr	r4, [r5, #8]
 8007534:	b913      	cbnz	r3, 800753c <_puts_r+0x1c>
 8007536:	4628      	mov	r0, r5
 8007538:	f001 f8de 	bl	80086f8 <__sinit>
 800753c:	4b2c      	ldr	r3, [pc, #176]	; (80075f0 <_puts_r+0xd0>)
 800753e:	429c      	cmp	r4, r3
 8007540:	d120      	bne.n	8007584 <_puts_r+0x64>
 8007542:	686c      	ldr	r4, [r5, #4]
 8007544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007546:	07db      	lsls	r3, r3, #31
 8007548:	d405      	bmi.n	8007556 <_puts_r+0x36>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	0598      	lsls	r0, r3, #22
 800754e:	d402      	bmi.n	8007556 <_puts_r+0x36>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f001 f974 	bl	800883e <__retarget_lock_acquire_recursive>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	0719      	lsls	r1, r3, #28
 800755a:	d51d      	bpl.n	8007598 <_puts_r+0x78>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b1db      	cbz	r3, 8007598 <_puts_r+0x78>
 8007560:	3e01      	subs	r6, #1
 8007562:	68a3      	ldr	r3, [r4, #8]
 8007564:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007568:	3b01      	subs	r3, #1
 800756a:	60a3      	str	r3, [r4, #8]
 800756c:	bb39      	cbnz	r1, 80075be <_puts_r+0x9e>
 800756e:	2b00      	cmp	r3, #0
 8007570:	da38      	bge.n	80075e4 <_puts_r+0xc4>
 8007572:	4622      	mov	r2, r4
 8007574:	210a      	movs	r1, #10
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f868 	bl	800764c <__swbuf_r>
 800757c:	3001      	adds	r0, #1
 800757e:	d011      	beq.n	80075a4 <_puts_r+0x84>
 8007580:	250a      	movs	r5, #10
 8007582:	e011      	b.n	80075a8 <_puts_r+0x88>
 8007584:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <_puts_r+0xd4>)
 8007586:	429c      	cmp	r4, r3
 8007588:	d101      	bne.n	800758e <_puts_r+0x6e>
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	e7da      	b.n	8007544 <_puts_r+0x24>
 800758e:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <_puts_r+0xd8>)
 8007590:	429c      	cmp	r4, r3
 8007592:	bf08      	it	eq
 8007594:	68ec      	ldreq	r4, [r5, #12]
 8007596:	e7d5      	b.n	8007544 <_puts_r+0x24>
 8007598:	4621      	mov	r1, r4
 800759a:	4628      	mov	r0, r5
 800759c:	f000 f8a8 	bl	80076f0 <__swsetup_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d0dd      	beq.n	8007560 <_puts_r+0x40>
 80075a4:	f04f 35ff 	mov.w	r5, #4294967295
 80075a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075aa:	07da      	lsls	r2, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_puts_r+0x9a>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	059b      	lsls	r3, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_puts_r+0x9a>
 80075b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b6:	f001 f943 	bl	8008840 <__retarget_lock_release_recursive>
 80075ba:	4628      	mov	r0, r5
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da04      	bge.n	80075cc <_puts_r+0xac>
 80075c2:	69a2      	ldr	r2, [r4, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	dc06      	bgt.n	80075d6 <_puts_r+0xb6>
 80075c8:	290a      	cmp	r1, #10
 80075ca:	d004      	beq.n	80075d6 <_puts_r+0xb6>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	6022      	str	r2, [r4, #0]
 80075d2:	7019      	strb	r1, [r3, #0]
 80075d4:	e7c5      	b.n	8007562 <_puts_r+0x42>
 80075d6:	4622      	mov	r2, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f837 	bl	800764c <__swbuf_r>
 80075de:	3001      	adds	r0, #1
 80075e0:	d1bf      	bne.n	8007562 <_puts_r+0x42>
 80075e2:	e7df      	b.n	80075a4 <_puts_r+0x84>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	250a      	movs	r5, #10
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	701d      	strb	r5, [r3, #0]
 80075ee:	e7db      	b.n	80075a8 <_puts_r+0x88>
 80075f0:	08009f10 	.word	0x08009f10
 80075f4:	08009f30 	.word	0x08009f30
 80075f8:	08009ef0 	.word	0x08009ef0

080075fc <puts>:
 80075fc:	4b02      	ldr	r3, [pc, #8]	; (8007608 <puts+0xc>)
 80075fe:	4601      	mov	r1, r0
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	f7ff bf8d 	b.w	8007520 <_puts_r>
 8007606:	bf00      	nop
 8007608:	20000014 	.word	0x20000014

0800760c <siprintf>:
 800760c:	b40e      	push	{r1, r2, r3}
 800760e:	b500      	push	{lr}
 8007610:	b09c      	sub	sp, #112	; 0x70
 8007612:	ab1d      	add	r3, sp, #116	; 0x74
 8007614:	9002      	str	r0, [sp, #8]
 8007616:	9006      	str	r0, [sp, #24]
 8007618:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800761c:	4809      	ldr	r0, [pc, #36]	; (8007644 <siprintf+0x38>)
 800761e:	9107      	str	r1, [sp, #28]
 8007620:	9104      	str	r1, [sp, #16]
 8007622:	4909      	ldr	r1, [pc, #36]	; (8007648 <siprintf+0x3c>)
 8007624:	f853 2b04 	ldr.w	r2, [r3], #4
 8007628:	9105      	str	r1, [sp, #20]
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	a902      	add	r1, sp, #8
 8007630:	f001 fe58 	bl	80092e4 <_svfiprintf_r>
 8007634:	9b02      	ldr	r3, [sp, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	b01c      	add	sp, #112	; 0x70
 800763c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007640:	b003      	add	sp, #12
 8007642:	4770      	bx	lr
 8007644:	20000014 	.word	0x20000014
 8007648:	ffff0208 	.word	0xffff0208

0800764c <__swbuf_r>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	460e      	mov	r6, r1
 8007650:	4614      	mov	r4, r2
 8007652:	4605      	mov	r5, r0
 8007654:	b118      	cbz	r0, 800765e <__swbuf_r+0x12>
 8007656:	6983      	ldr	r3, [r0, #24]
 8007658:	b90b      	cbnz	r3, 800765e <__swbuf_r+0x12>
 800765a:	f001 f84d 	bl	80086f8 <__sinit>
 800765e:	4b21      	ldr	r3, [pc, #132]	; (80076e4 <__swbuf_r+0x98>)
 8007660:	429c      	cmp	r4, r3
 8007662:	d12b      	bne.n	80076bc <__swbuf_r+0x70>
 8007664:	686c      	ldr	r4, [r5, #4]
 8007666:	69a3      	ldr	r3, [r4, #24]
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	071a      	lsls	r2, r3, #28
 800766e:	d52f      	bpl.n	80076d0 <__swbuf_r+0x84>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	b36b      	cbz	r3, 80076d0 <__swbuf_r+0x84>
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	6820      	ldr	r0, [r4, #0]
 8007678:	1ac0      	subs	r0, r0, r3
 800767a:	6963      	ldr	r3, [r4, #20]
 800767c:	b2f6      	uxtb	r6, r6
 800767e:	4283      	cmp	r3, r0
 8007680:	4637      	mov	r7, r6
 8007682:	dc04      	bgt.n	800768e <__swbuf_r+0x42>
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 ffa2 	bl	80085d0 <_fflush_r>
 800768c:	bb30      	cbnz	r0, 80076dc <__swbuf_r+0x90>
 800768e:	68a3      	ldr	r3, [r4, #8]
 8007690:	3b01      	subs	r3, #1
 8007692:	60a3      	str	r3, [r4, #8]
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	6022      	str	r2, [r4, #0]
 800769a:	701e      	strb	r6, [r3, #0]
 800769c:	6963      	ldr	r3, [r4, #20]
 800769e:	3001      	adds	r0, #1
 80076a0:	4283      	cmp	r3, r0
 80076a2:	d004      	beq.n	80076ae <__swbuf_r+0x62>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	07db      	lsls	r3, r3, #31
 80076a8:	d506      	bpl.n	80076b8 <__swbuf_r+0x6c>
 80076aa:	2e0a      	cmp	r6, #10
 80076ac:	d104      	bne.n	80076b8 <__swbuf_r+0x6c>
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f000 ff8d 	bl	80085d0 <_fflush_r>
 80076b6:	b988      	cbnz	r0, 80076dc <__swbuf_r+0x90>
 80076b8:	4638      	mov	r0, r7
 80076ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076bc:	4b0a      	ldr	r3, [pc, #40]	; (80076e8 <__swbuf_r+0x9c>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	d101      	bne.n	80076c6 <__swbuf_r+0x7a>
 80076c2:	68ac      	ldr	r4, [r5, #8]
 80076c4:	e7cf      	b.n	8007666 <__swbuf_r+0x1a>
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <__swbuf_r+0xa0>)
 80076c8:	429c      	cmp	r4, r3
 80076ca:	bf08      	it	eq
 80076cc:	68ec      	ldreq	r4, [r5, #12]
 80076ce:	e7ca      	b.n	8007666 <__swbuf_r+0x1a>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4628      	mov	r0, r5
 80076d4:	f000 f80c 	bl	80076f0 <__swsetup_r>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d0cb      	beq.n	8007674 <__swbuf_r+0x28>
 80076dc:	f04f 37ff 	mov.w	r7, #4294967295
 80076e0:	e7ea      	b.n	80076b8 <__swbuf_r+0x6c>
 80076e2:	bf00      	nop
 80076e4:	08009f10 	.word	0x08009f10
 80076e8:	08009f30 	.word	0x08009f30
 80076ec:	08009ef0 	.word	0x08009ef0

080076f0 <__swsetup_r>:
 80076f0:	4b32      	ldr	r3, [pc, #200]	; (80077bc <__swsetup_r+0xcc>)
 80076f2:	b570      	push	{r4, r5, r6, lr}
 80076f4:	681d      	ldr	r5, [r3, #0]
 80076f6:	4606      	mov	r6, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	b125      	cbz	r5, 8007706 <__swsetup_r+0x16>
 80076fc:	69ab      	ldr	r3, [r5, #24]
 80076fe:	b913      	cbnz	r3, 8007706 <__swsetup_r+0x16>
 8007700:	4628      	mov	r0, r5
 8007702:	f000 fff9 	bl	80086f8 <__sinit>
 8007706:	4b2e      	ldr	r3, [pc, #184]	; (80077c0 <__swsetup_r+0xd0>)
 8007708:	429c      	cmp	r4, r3
 800770a:	d10f      	bne.n	800772c <__swsetup_r+0x3c>
 800770c:	686c      	ldr	r4, [r5, #4]
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007714:	0719      	lsls	r1, r3, #28
 8007716:	d42c      	bmi.n	8007772 <__swsetup_r+0x82>
 8007718:	06dd      	lsls	r5, r3, #27
 800771a:	d411      	bmi.n	8007740 <__swsetup_r+0x50>
 800771c:	2309      	movs	r3, #9
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	e03e      	b.n	80077aa <__swsetup_r+0xba>
 800772c:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <__swsetup_r+0xd4>)
 800772e:	429c      	cmp	r4, r3
 8007730:	d101      	bne.n	8007736 <__swsetup_r+0x46>
 8007732:	68ac      	ldr	r4, [r5, #8]
 8007734:	e7eb      	b.n	800770e <__swsetup_r+0x1e>
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <__swsetup_r+0xd8>)
 8007738:	429c      	cmp	r4, r3
 800773a:	bf08      	it	eq
 800773c:	68ec      	ldreq	r4, [r5, #12]
 800773e:	e7e6      	b.n	800770e <__swsetup_r+0x1e>
 8007740:	0758      	lsls	r0, r3, #29
 8007742:	d512      	bpl.n	800776a <__swsetup_r+0x7a>
 8007744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007746:	b141      	cbz	r1, 800775a <__swsetup_r+0x6a>
 8007748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800774c:	4299      	cmp	r1, r3
 800774e:	d002      	beq.n	8007756 <__swsetup_r+0x66>
 8007750:	4630      	mov	r0, r6
 8007752:	f001 fc8b 	bl	800906c <_free_r>
 8007756:	2300      	movs	r3, #0
 8007758:	6363      	str	r3, [r4, #52]	; 0x34
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007760:	81a3      	strh	r3, [r4, #12]
 8007762:	2300      	movs	r3, #0
 8007764:	6063      	str	r3, [r4, #4]
 8007766:	6923      	ldr	r3, [r4, #16]
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	f043 0308 	orr.w	r3, r3, #8
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	b94b      	cbnz	r3, 800778a <__swsetup_r+0x9a>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800777c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007780:	d003      	beq.n	800778a <__swsetup_r+0x9a>
 8007782:	4621      	mov	r1, r4
 8007784:	4630      	mov	r0, r6
 8007786:	f001 f881 	bl	800888c <__smakebuf_r>
 800778a:	89a0      	ldrh	r0, [r4, #12]
 800778c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007790:	f010 0301 	ands.w	r3, r0, #1
 8007794:	d00a      	beq.n	80077ac <__swsetup_r+0xbc>
 8007796:	2300      	movs	r3, #0
 8007798:	60a3      	str	r3, [r4, #8]
 800779a:	6963      	ldr	r3, [r4, #20]
 800779c:	425b      	negs	r3, r3
 800779e:	61a3      	str	r3, [r4, #24]
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	b943      	cbnz	r3, 80077b6 <__swsetup_r+0xc6>
 80077a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077a8:	d1ba      	bne.n	8007720 <__swsetup_r+0x30>
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	0781      	lsls	r1, r0, #30
 80077ae:	bf58      	it	pl
 80077b0:	6963      	ldrpl	r3, [r4, #20]
 80077b2:	60a3      	str	r3, [r4, #8]
 80077b4:	e7f4      	b.n	80077a0 <__swsetup_r+0xb0>
 80077b6:	2000      	movs	r0, #0
 80077b8:	e7f7      	b.n	80077aa <__swsetup_r+0xba>
 80077ba:	bf00      	nop
 80077bc:	20000014 	.word	0x20000014
 80077c0:	08009f10 	.word	0x08009f10
 80077c4:	08009f30 	.word	0x08009f30
 80077c8:	08009ef0 	.word	0x08009ef0

080077cc <quorem>:
 80077cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	6903      	ldr	r3, [r0, #16]
 80077d2:	690c      	ldr	r4, [r1, #16]
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	4607      	mov	r7, r0
 80077d8:	f2c0 8081 	blt.w	80078de <quorem+0x112>
 80077dc:	3c01      	subs	r4, #1
 80077de:	f101 0814 	add.w	r8, r1, #20
 80077e2:	f100 0514 	add.w	r5, r0, #20
 80077e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077f4:	3301      	adds	r3, #1
 80077f6:	429a      	cmp	r2, r3
 80077f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007800:	fbb2 f6f3 	udiv	r6, r2, r3
 8007804:	d331      	bcc.n	800786a <quorem+0x9e>
 8007806:	f04f 0e00 	mov.w	lr, #0
 800780a:	4640      	mov	r0, r8
 800780c:	46ac      	mov	ip, r5
 800780e:	46f2      	mov	sl, lr
 8007810:	f850 2b04 	ldr.w	r2, [r0], #4
 8007814:	b293      	uxth	r3, r2
 8007816:	fb06 e303 	mla	r3, r6, r3, lr
 800781a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800781e:	b29b      	uxth	r3, r3
 8007820:	ebaa 0303 	sub.w	r3, sl, r3
 8007824:	f8dc a000 	ldr.w	sl, [ip]
 8007828:	0c12      	lsrs	r2, r2, #16
 800782a:	fa13 f38a 	uxtah	r3, r3, sl
 800782e:	fb06 e202 	mla	r2, r6, r2, lr
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	9b00      	ldr	r3, [sp, #0]
 8007836:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800783a:	b292      	uxth	r2, r2
 800783c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007840:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007844:	f8bd 3000 	ldrh.w	r3, [sp]
 8007848:	4581      	cmp	r9, r0
 800784a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800784e:	f84c 3b04 	str.w	r3, [ip], #4
 8007852:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007856:	d2db      	bcs.n	8007810 <quorem+0x44>
 8007858:	f855 300b 	ldr.w	r3, [r5, fp]
 800785c:	b92b      	cbnz	r3, 800786a <quorem+0x9e>
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	3b04      	subs	r3, #4
 8007862:	429d      	cmp	r5, r3
 8007864:	461a      	mov	r2, r3
 8007866:	d32e      	bcc.n	80078c6 <quorem+0xfa>
 8007868:	613c      	str	r4, [r7, #16]
 800786a:	4638      	mov	r0, r7
 800786c:	f001 fae6 	bl	8008e3c <__mcmp>
 8007870:	2800      	cmp	r0, #0
 8007872:	db24      	blt.n	80078be <quorem+0xf2>
 8007874:	3601      	adds	r6, #1
 8007876:	4628      	mov	r0, r5
 8007878:	f04f 0c00 	mov.w	ip, #0
 800787c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007880:	f8d0 e000 	ldr.w	lr, [r0]
 8007884:	b293      	uxth	r3, r2
 8007886:	ebac 0303 	sub.w	r3, ip, r3
 800788a:	0c12      	lsrs	r2, r2, #16
 800788c:	fa13 f38e 	uxtah	r3, r3, lr
 8007890:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007894:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007898:	b29b      	uxth	r3, r3
 800789a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800789e:	45c1      	cmp	r9, r8
 80078a0:	f840 3b04 	str.w	r3, [r0], #4
 80078a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078a8:	d2e8      	bcs.n	800787c <quorem+0xb0>
 80078aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b2:	b922      	cbnz	r2, 80078be <quorem+0xf2>
 80078b4:	3b04      	subs	r3, #4
 80078b6:	429d      	cmp	r5, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	d30a      	bcc.n	80078d2 <quorem+0x106>
 80078bc:	613c      	str	r4, [r7, #16]
 80078be:	4630      	mov	r0, r6
 80078c0:	b003      	add	sp, #12
 80078c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	3b04      	subs	r3, #4
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	d1cc      	bne.n	8007868 <quorem+0x9c>
 80078ce:	3c01      	subs	r4, #1
 80078d0:	e7c7      	b.n	8007862 <quorem+0x96>
 80078d2:	6812      	ldr	r2, [r2, #0]
 80078d4:	3b04      	subs	r3, #4
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	d1f0      	bne.n	80078bc <quorem+0xf0>
 80078da:	3c01      	subs	r4, #1
 80078dc:	e7eb      	b.n	80078b6 <quorem+0xea>
 80078de:	2000      	movs	r0, #0
 80078e0:	e7ee      	b.n	80078c0 <quorem+0xf4>
 80078e2:	0000      	movs	r0, r0
 80078e4:	0000      	movs	r0, r0
	...

080078e8 <_dtoa_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ed2d 8b04 	vpush	{d8-d9}
 80078f0:	ec57 6b10 	vmov	r6, r7, d0
 80078f4:	b093      	sub	sp, #76	; 0x4c
 80078f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078fc:	9106      	str	r1, [sp, #24]
 80078fe:	ee10 aa10 	vmov	sl, s0
 8007902:	4604      	mov	r4, r0
 8007904:	9209      	str	r2, [sp, #36]	; 0x24
 8007906:	930c      	str	r3, [sp, #48]	; 0x30
 8007908:	46bb      	mov	fp, r7
 800790a:	b975      	cbnz	r5, 800792a <_dtoa_r+0x42>
 800790c:	2010      	movs	r0, #16
 800790e:	f000 fffd 	bl	800890c <malloc>
 8007912:	4602      	mov	r2, r0
 8007914:	6260      	str	r0, [r4, #36]	; 0x24
 8007916:	b920      	cbnz	r0, 8007922 <_dtoa_r+0x3a>
 8007918:	4ba7      	ldr	r3, [pc, #668]	; (8007bb8 <_dtoa_r+0x2d0>)
 800791a:	21ea      	movs	r1, #234	; 0xea
 800791c:	48a7      	ldr	r0, [pc, #668]	; (8007bbc <_dtoa_r+0x2d4>)
 800791e:	f001 ffe9 	bl	80098f4 <__assert_func>
 8007922:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007926:	6005      	str	r5, [r0, #0]
 8007928:	60c5      	str	r5, [r0, #12]
 800792a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800792c:	6819      	ldr	r1, [r3, #0]
 800792e:	b151      	cbz	r1, 8007946 <_dtoa_r+0x5e>
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	604a      	str	r2, [r1, #4]
 8007934:	2301      	movs	r3, #1
 8007936:	4093      	lsls	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
 800793a:	4620      	mov	r0, r4
 800793c:	f001 f83c 	bl	80089b8 <_Bfree>
 8007940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	1e3b      	subs	r3, r7, #0
 8007948:	bfaa      	itet	ge
 800794a:	2300      	movge	r3, #0
 800794c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007950:	f8c8 3000 	strge.w	r3, [r8]
 8007954:	4b9a      	ldr	r3, [pc, #616]	; (8007bc0 <_dtoa_r+0x2d8>)
 8007956:	bfbc      	itt	lt
 8007958:	2201      	movlt	r2, #1
 800795a:	f8c8 2000 	strlt.w	r2, [r8]
 800795e:	ea33 030b 	bics.w	r3, r3, fp
 8007962:	d11b      	bne.n	800799c <_dtoa_r+0xb4>
 8007964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007966:	f242 730f 	movw	r3, #9999	; 0x270f
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007970:	4333      	orrs	r3, r6
 8007972:	f000 8592 	beq.w	800849a <_dtoa_r+0xbb2>
 8007976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007978:	b963      	cbnz	r3, 8007994 <_dtoa_r+0xac>
 800797a:	4b92      	ldr	r3, [pc, #584]	; (8007bc4 <_dtoa_r+0x2dc>)
 800797c:	e022      	b.n	80079c4 <_dtoa_r+0xdc>
 800797e:	4b92      	ldr	r3, [pc, #584]	; (8007bc8 <_dtoa_r+0x2e0>)
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	3308      	adds	r3, #8
 8007984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	9801      	ldr	r0, [sp, #4]
 800798a:	b013      	add	sp, #76	; 0x4c
 800798c:	ecbd 8b04 	vpop	{d8-d9}
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	4b8b      	ldr	r3, [pc, #556]	; (8007bc4 <_dtoa_r+0x2dc>)
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	3303      	adds	r3, #3
 800799a:	e7f3      	b.n	8007984 <_dtoa_r+0x9c>
 800799c:	2200      	movs	r2, #0
 800799e:	2300      	movs	r3, #0
 80079a0:	4650      	mov	r0, sl
 80079a2:	4659      	mov	r1, fp
 80079a4:	f7f9 f898 	bl	8000ad8 <__aeabi_dcmpeq>
 80079a8:	ec4b ab19 	vmov	d9, sl, fp
 80079ac:	4680      	mov	r8, r0
 80079ae:	b158      	cbz	r0, 80079c8 <_dtoa_r+0xe0>
 80079b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079b2:	2301      	movs	r3, #1
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 856b 	beq.w	8008494 <_dtoa_r+0xbac>
 80079be:	4883      	ldr	r0, [pc, #524]	; (8007bcc <_dtoa_r+0x2e4>)
 80079c0:	6018      	str	r0, [r3, #0]
 80079c2:	1e43      	subs	r3, r0, #1
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	e7df      	b.n	8007988 <_dtoa_r+0xa0>
 80079c8:	ec4b ab10 	vmov	d0, sl, fp
 80079cc:	aa10      	add	r2, sp, #64	; 0x40
 80079ce:	a911      	add	r1, sp, #68	; 0x44
 80079d0:	4620      	mov	r0, r4
 80079d2:	f001 fad9 	bl	8008f88 <__d2b>
 80079d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80079da:	ee08 0a10 	vmov	s16, r0
 80079de:	2d00      	cmp	r5, #0
 80079e0:	f000 8084 	beq.w	8007aec <_dtoa_r+0x204>
 80079e4:	ee19 3a90 	vmov	r3, s19
 80079e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80079f0:	4656      	mov	r6, sl
 80079f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80079f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80079fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80079fe:	4b74      	ldr	r3, [pc, #464]	; (8007bd0 <_dtoa_r+0x2e8>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fc47 	bl	8000298 <__aeabi_dsub>
 8007a0a:	a365      	add	r3, pc, #404	; (adr r3, 8007ba0 <_dtoa_r+0x2b8>)
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f7f8 fdfa 	bl	8000608 <__aeabi_dmul>
 8007a14:	a364      	add	r3, pc, #400	; (adr r3, 8007ba8 <_dtoa_r+0x2c0>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f7f8 fc3f 	bl	800029c <__adddf3>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	4628      	mov	r0, r5
 8007a22:	460f      	mov	r7, r1
 8007a24:	f7f8 fd86 	bl	8000534 <__aeabi_i2d>
 8007a28:	a361      	add	r3, pc, #388	; (adr r3, 8007bb0 <_dtoa_r+0x2c8>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	f7f8 fdeb 	bl	8000608 <__aeabi_dmul>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4630      	mov	r0, r6
 8007a38:	4639      	mov	r1, r7
 8007a3a:	f7f8 fc2f 	bl	800029c <__adddf3>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460f      	mov	r7, r1
 8007a42:	f7f9 f891 	bl	8000b68 <__aeabi_d2iz>
 8007a46:	2200      	movs	r2, #0
 8007a48:	9000      	str	r0, [sp, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	f7f9 f84c 	bl	8000aec <__aeabi_dcmplt>
 8007a54:	b150      	cbz	r0, 8007a6c <_dtoa_r+0x184>
 8007a56:	9800      	ldr	r0, [sp, #0]
 8007a58:	f7f8 fd6c 	bl	8000534 <__aeabi_i2d>
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	f7f9 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a64:	b910      	cbnz	r0, 8007a6c <_dtoa_r+0x184>
 8007a66:	9b00      	ldr	r3, [sp, #0]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	2b16      	cmp	r3, #22
 8007a70:	d85a      	bhi.n	8007b28 <_dtoa_r+0x240>
 8007a72:	9a00      	ldr	r2, [sp, #0]
 8007a74:	4b57      	ldr	r3, [pc, #348]	; (8007bd4 <_dtoa_r+0x2ec>)
 8007a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	ec51 0b19 	vmov	r0, r1, d9
 8007a82:	f7f9 f833 	bl	8000aec <__aeabi_dcmplt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d050      	beq.n	8007b2c <_dtoa_r+0x244>
 8007a8a:	9b00      	ldr	r3, [sp, #0]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	2300      	movs	r3, #0
 8007a92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a96:	1b5d      	subs	r5, r3, r5
 8007a98:	1e6b      	subs	r3, r5, #1
 8007a9a:	9305      	str	r3, [sp, #20]
 8007a9c:	bf45      	ittet	mi
 8007a9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007aa2:	9304      	strmi	r3, [sp, #16]
 8007aa4:	2300      	movpl	r3, #0
 8007aa6:	2300      	movmi	r3, #0
 8007aa8:	bf4c      	ite	mi
 8007aaa:	9305      	strmi	r3, [sp, #20]
 8007aac:	9304      	strpl	r3, [sp, #16]
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db3d      	blt.n	8007b30 <_dtoa_r+0x248>
 8007ab4:	9b05      	ldr	r3, [sp, #20]
 8007ab6:	9a00      	ldr	r2, [sp, #0]
 8007ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8007aba:	4413      	add	r3, r2
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	9b06      	ldr	r3, [sp, #24]
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	f200 8089 	bhi.w	8007bdc <_dtoa_r+0x2f4>
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	bfc4      	itt	gt
 8007ace:	3b04      	subgt	r3, #4
 8007ad0:	9306      	strgt	r3, [sp, #24]
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ad8:	bfcc      	ite	gt
 8007ada:	2500      	movgt	r5, #0
 8007adc:	2501      	movle	r5, #1
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	f200 8087 	bhi.w	8007bf2 <_dtoa_r+0x30a>
 8007ae4:	e8df f003 	tbb	[pc, r3]
 8007ae8:	59383a2d 	.word	0x59383a2d
 8007aec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007af0:	441d      	add	r5, r3
 8007af2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	bfc1      	itttt	gt
 8007afa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007afe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b02:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b0a:	bfda      	itte	le
 8007b0c:	f1c3 0320 	rsble	r3, r3, #32
 8007b10:	fa06 f003 	lslle.w	r0, r6, r3
 8007b14:	4318      	orrgt	r0, r3
 8007b16:	f7f8 fcfd 	bl	8000514 <__aeabi_ui2d>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b22:	3d01      	subs	r5, #1
 8007b24:	930e      	str	r3, [sp, #56]	; 0x38
 8007b26:	e76a      	b.n	80079fe <_dtoa_r+0x116>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e7b2      	b.n	8007a92 <_dtoa_r+0x1aa>
 8007b2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b2e:	e7b1      	b.n	8007a94 <_dtoa_r+0x1ac>
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	9a00      	ldr	r2, [sp, #0]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	9304      	str	r3, [sp, #16]
 8007b38:	4253      	negs	r3, r2
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b40:	e7bf      	b.n	8007ac2 <_dtoa_r+0x1da>
 8007b42:	2300      	movs	r3, #0
 8007b44:	9308      	str	r3, [sp, #32]
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc55      	bgt.n	8007bf8 <_dtoa_r+0x310>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b52:	461a      	mov	r2, r3
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	e00c      	b.n	8007b72 <_dtoa_r+0x28a>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7f3      	b.n	8007b44 <_dtoa_r+0x25c>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b60:	9308      	str	r3, [sp, #32]
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	4413      	add	r3, r2
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	9303      	str	r3, [sp, #12]
 8007b6e:	bfb8      	it	lt
 8007b70:	2301      	movlt	r3, #1
 8007b72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b74:	2200      	movs	r2, #0
 8007b76:	6042      	str	r2, [r0, #4]
 8007b78:	2204      	movs	r2, #4
 8007b7a:	f102 0614 	add.w	r6, r2, #20
 8007b7e:	429e      	cmp	r6, r3
 8007b80:	6841      	ldr	r1, [r0, #4]
 8007b82:	d93d      	bls.n	8007c00 <_dtoa_r+0x318>
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fed7 	bl	8008938 <_Balloc>
 8007b8a:	9001      	str	r0, [sp, #4]
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d13b      	bne.n	8007c08 <_dtoa_r+0x320>
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <_dtoa_r+0x2f0>)
 8007b92:	4602      	mov	r2, r0
 8007b94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007b98:	e6c0      	b.n	800791c <_dtoa_r+0x34>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e7df      	b.n	8007b5e <_dtoa_r+0x276>
 8007b9e:	bf00      	nop
 8007ba0:	636f4361 	.word	0x636f4361
 8007ba4:	3fd287a7 	.word	0x3fd287a7
 8007ba8:	8b60c8b3 	.word	0x8b60c8b3
 8007bac:	3fc68a28 	.word	0x3fc68a28
 8007bb0:	509f79fb 	.word	0x509f79fb
 8007bb4:	3fd34413 	.word	0x3fd34413
 8007bb8:	08009e6d 	.word	0x08009e6d
 8007bbc:	08009e84 	.word	0x08009e84
 8007bc0:	7ff00000 	.word	0x7ff00000
 8007bc4:	08009e69 	.word	0x08009e69
 8007bc8:	08009e60 	.word	0x08009e60
 8007bcc:	08009e3d 	.word	0x08009e3d
 8007bd0:	3ff80000 	.word	0x3ff80000
 8007bd4:	08009fd8 	.word	0x08009fd8
 8007bd8:	08009edf 	.word	0x08009edf
 8007bdc:	2501      	movs	r5, #1
 8007bde:	2300      	movs	r3, #0
 8007be0:	9306      	str	r3, [sp, #24]
 8007be2:	9508      	str	r5, [sp, #32]
 8007be4:	f04f 33ff 	mov.w	r3, #4294967295
 8007be8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	2312      	movs	r3, #18
 8007bf0:	e7b0      	b.n	8007b54 <_dtoa_r+0x26c>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	9308      	str	r3, [sp, #32]
 8007bf6:	e7f5      	b.n	8007be4 <_dtoa_r+0x2fc>
 8007bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bfe:	e7b8      	b.n	8007b72 <_dtoa_r+0x28a>
 8007c00:	3101      	adds	r1, #1
 8007c02:	6041      	str	r1, [r0, #4]
 8007c04:	0052      	lsls	r2, r2, #1
 8007c06:	e7b8      	b.n	8007b7a <_dtoa_r+0x292>
 8007c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0a:	9a01      	ldr	r2, [sp, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	2b0e      	cmp	r3, #14
 8007c12:	f200 809d 	bhi.w	8007d50 <_dtoa_r+0x468>
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	f000 809a 	beq.w	8007d50 <_dtoa_r+0x468>
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd32      	ble.n	8007c88 <_dtoa_r+0x3a0>
 8007c22:	4ab7      	ldr	r2, [pc, #732]	; (8007f00 <_dtoa_r+0x618>)
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c30:	9b00      	ldr	r3, [sp, #0]
 8007c32:	05d8      	lsls	r0, r3, #23
 8007c34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c38:	d516      	bpl.n	8007c68 <_dtoa_r+0x380>
 8007c3a:	4bb2      	ldr	r3, [pc, #712]	; (8007f04 <_dtoa_r+0x61c>)
 8007c3c:	ec51 0b19 	vmov	r0, r1, d9
 8007c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c44:	f7f8 fe0a 	bl	800085c <__aeabi_ddiv>
 8007c48:	f007 070f 	and.w	r7, r7, #15
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	468b      	mov	fp, r1
 8007c50:	2503      	movs	r5, #3
 8007c52:	4eac      	ldr	r6, [pc, #688]	; (8007f04 <_dtoa_r+0x61c>)
 8007c54:	b957      	cbnz	r7, 8007c6c <_dtoa_r+0x384>
 8007c56:	4642      	mov	r2, r8
 8007c58:	464b      	mov	r3, r9
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	4659      	mov	r1, fp
 8007c5e:	f7f8 fdfd 	bl	800085c <__aeabi_ddiv>
 8007c62:	4682      	mov	sl, r0
 8007c64:	468b      	mov	fp, r1
 8007c66:	e028      	b.n	8007cba <_dtoa_r+0x3d2>
 8007c68:	2502      	movs	r5, #2
 8007c6a:	e7f2      	b.n	8007c52 <_dtoa_r+0x36a>
 8007c6c:	07f9      	lsls	r1, r7, #31
 8007c6e:	d508      	bpl.n	8007c82 <_dtoa_r+0x39a>
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c78:	f7f8 fcc6 	bl	8000608 <__aeabi_dmul>
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	4680      	mov	r8, r0
 8007c80:	4689      	mov	r9, r1
 8007c82:	107f      	asrs	r7, r7, #1
 8007c84:	3608      	adds	r6, #8
 8007c86:	e7e5      	b.n	8007c54 <_dtoa_r+0x36c>
 8007c88:	f000 809b 	beq.w	8007dc2 <_dtoa_r+0x4da>
 8007c8c:	9b00      	ldr	r3, [sp, #0]
 8007c8e:	4f9d      	ldr	r7, [pc, #628]	; (8007f04 <_dtoa_r+0x61c>)
 8007c90:	425e      	negs	r6, r3
 8007c92:	4b9b      	ldr	r3, [pc, #620]	; (8007f00 <_dtoa_r+0x618>)
 8007c94:	f006 020f 	and.w	r2, r6, #15
 8007c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	ec51 0b19 	vmov	r0, r1, d9
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	1136      	asrs	r6, r6, #4
 8007caa:	4682      	mov	sl, r0
 8007cac:	468b      	mov	fp, r1
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2502      	movs	r5, #2
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	d17a      	bne.n	8007dac <_dtoa_r+0x4c4>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1d3      	bne.n	8007c62 <_dtoa_r+0x37a>
 8007cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 8082 	beq.w	8007dc6 <_dtoa_r+0x4de>
 8007cc2:	4b91      	ldr	r3, [pc, #580]	; (8007f08 <_dtoa_r+0x620>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4650      	mov	r0, sl
 8007cc8:	4659      	mov	r1, fp
 8007cca:	f7f8 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d079      	beq.n	8007dc6 <_dtoa_r+0x4de>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d076      	beq.n	8007dc6 <_dtoa_r+0x4de>
 8007cd8:	9b02      	ldr	r3, [sp, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dd36      	ble.n	8007d4c <_dtoa_r+0x464>
 8007cde:	9b00      	ldr	r3, [sp, #0]
 8007ce0:	4650      	mov	r0, sl
 8007ce2:	4659      	mov	r1, fp
 8007ce4:	1e5f      	subs	r7, r3, #1
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	4b88      	ldr	r3, [pc, #544]	; (8007f0c <_dtoa_r+0x624>)
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	9e02      	ldr	r6, [sp, #8]
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	468b      	mov	fp, r1
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f7f8 fc1c 	bl	8000534 <__aeabi_i2d>
 8007cfc:	4652      	mov	r2, sl
 8007cfe:	465b      	mov	r3, fp
 8007d00:	f7f8 fc82 	bl	8000608 <__aeabi_dmul>
 8007d04:	4b82      	ldr	r3, [pc, #520]	; (8007f10 <_dtoa_r+0x628>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	f7f8 fac8 	bl	800029c <__adddf3>
 8007d0c:	46d0      	mov	r8, sl
 8007d0e:	46d9      	mov	r9, fp
 8007d10:	4682      	mov	sl, r0
 8007d12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d16:	2e00      	cmp	r6, #0
 8007d18:	d158      	bne.n	8007dcc <_dtoa_r+0x4e4>
 8007d1a:	4b7e      	ldr	r3, [pc, #504]	; (8007f14 <_dtoa_r+0x62c>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fab9 	bl	8000298 <__aeabi_dsub>
 8007d26:	4652      	mov	r2, sl
 8007d28:	465b      	mov	r3, fp
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	f7f8 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f040 8295 	bne.w	8008262 <_dtoa_r+0x97a>
 8007d38:	4652      	mov	r2, sl
 8007d3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f7f8 fed3 	bl	8000aec <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	f040 8289 	bne.w	800825e <_dtoa_r+0x976>
 8007d4c:	ec5b ab19 	vmov	sl, fp, d9
 8007d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f2c0 8148 	blt.w	8007fe8 <_dtoa_r+0x700>
 8007d58:	9a00      	ldr	r2, [sp, #0]
 8007d5a:	2a0e      	cmp	r2, #14
 8007d5c:	f300 8144 	bgt.w	8007fe8 <_dtoa_r+0x700>
 8007d60:	4b67      	ldr	r3, [pc, #412]	; (8007f00 <_dtoa_r+0x618>)
 8007d62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f280 80d5 	bge.w	8007f1c <_dtoa_r+0x634>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f300 80d1 	bgt.w	8007f1c <_dtoa_r+0x634>
 8007d7a:	f040 826f 	bne.w	800825c <_dtoa_r+0x974>
 8007d7e:	4b65      	ldr	r3, [pc, #404]	; (8007f14 <_dtoa_r+0x62c>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	4640      	mov	r0, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	f7f8 fc3f 	bl	8000608 <__aeabi_dmul>
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	f7f8 fec1 	bl	8000b14 <__aeabi_dcmpge>
 8007d92:	9e03      	ldr	r6, [sp, #12]
 8007d94:	4637      	mov	r7, r6
 8007d96:	2800      	cmp	r0, #0
 8007d98:	f040 8245 	bne.w	8008226 <_dtoa_r+0x93e>
 8007d9c:	9d01      	ldr	r5, [sp, #4]
 8007d9e:	2331      	movs	r3, #49	; 0x31
 8007da0:	f805 3b01 	strb.w	r3, [r5], #1
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	e240      	b.n	800822e <_dtoa_r+0x946>
 8007dac:	07f2      	lsls	r2, r6, #31
 8007dae:	d505      	bpl.n	8007dbc <_dtoa_r+0x4d4>
 8007db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db4:	f7f8 fc28 	bl	8000608 <__aeabi_dmul>
 8007db8:	3501      	adds	r5, #1
 8007dba:	2301      	movs	r3, #1
 8007dbc:	1076      	asrs	r6, r6, #1
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	e777      	b.n	8007cb2 <_dtoa_r+0x3ca>
 8007dc2:	2502      	movs	r5, #2
 8007dc4:	e779      	b.n	8007cba <_dtoa_r+0x3d2>
 8007dc6:	9f00      	ldr	r7, [sp, #0]
 8007dc8:	9e03      	ldr	r6, [sp, #12]
 8007dca:	e794      	b.n	8007cf6 <_dtoa_r+0x40e>
 8007dcc:	9901      	ldr	r1, [sp, #4]
 8007dce:	4b4c      	ldr	r3, [pc, #304]	; (8007f00 <_dtoa_r+0x618>)
 8007dd0:	4431      	add	r1, r6
 8007dd2:	910d      	str	r1, [sp, #52]	; 0x34
 8007dd4:	9908      	ldr	r1, [sp, #32]
 8007dd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007dda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007dde:	2900      	cmp	r1, #0
 8007de0:	d043      	beq.n	8007e6a <_dtoa_r+0x582>
 8007de2:	494d      	ldr	r1, [pc, #308]	; (8007f18 <_dtoa_r+0x630>)
 8007de4:	2000      	movs	r0, #0
 8007de6:	f7f8 fd39 	bl	800085c <__aeabi_ddiv>
 8007dea:	4652      	mov	r2, sl
 8007dec:	465b      	mov	r3, fp
 8007dee:	f7f8 fa53 	bl	8000298 <__aeabi_dsub>
 8007df2:	9d01      	ldr	r5, [sp, #4]
 8007df4:	4682      	mov	sl, r0
 8007df6:	468b      	mov	fp, r1
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7f8 feb4 	bl	8000b68 <__aeabi_d2iz>
 8007e00:	4606      	mov	r6, r0
 8007e02:	f7f8 fb97 	bl	8000534 <__aeabi_i2d>
 8007e06:	4602      	mov	r2, r0
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	f7f8 fa43 	bl	8000298 <__aeabi_dsub>
 8007e12:	3630      	adds	r6, #48	; 0x30
 8007e14:	f805 6b01 	strb.w	r6, [r5], #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	465b      	mov	r3, fp
 8007e1c:	4680      	mov	r8, r0
 8007e1e:	4689      	mov	r9, r1
 8007e20:	f7f8 fe64 	bl	8000aec <__aeabi_dcmplt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d163      	bne.n	8007ef0 <_dtoa_r+0x608>
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	4936      	ldr	r1, [pc, #216]	; (8007f08 <_dtoa_r+0x620>)
 8007e2e:	2000      	movs	r0, #0
 8007e30:	f7f8 fa32 	bl	8000298 <__aeabi_dsub>
 8007e34:	4652      	mov	r2, sl
 8007e36:	465b      	mov	r3, fp
 8007e38:	f7f8 fe58 	bl	8000aec <__aeabi_dcmplt>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	f040 80b5 	bne.w	8007fac <_dtoa_r+0x6c4>
 8007e42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e44:	429d      	cmp	r5, r3
 8007e46:	d081      	beq.n	8007d4c <_dtoa_r+0x464>
 8007e48:	4b30      	ldr	r3, [pc, #192]	; (8007f0c <_dtoa_r+0x624>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	4659      	mov	r1, fp
 8007e50:	f7f8 fbda 	bl	8000608 <__aeabi_dmul>
 8007e54:	4b2d      	ldr	r3, [pc, #180]	; (8007f0c <_dtoa_r+0x624>)
 8007e56:	4682      	mov	sl, r0
 8007e58:	468b      	mov	fp, r1
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f7f8 fbd2 	bl	8000608 <__aeabi_dmul>
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	e7c6      	b.n	8007df8 <_dtoa_r+0x510>
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	f7f8 fbcb 	bl	8000608 <__aeabi_dmul>
 8007e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e74:	9d01      	ldr	r5, [sp, #4]
 8007e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	4649      	mov	r1, r9
 8007e7e:	4640      	mov	r0, r8
 8007e80:	f7f8 fe72 	bl	8000b68 <__aeabi_d2iz>
 8007e84:	4606      	mov	r6, r0
 8007e86:	f7f8 fb55 	bl	8000534 <__aeabi_i2d>
 8007e8a:	3630      	adds	r6, #48	; 0x30
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fa00 	bl	8000298 <__aeabi_dsub>
 8007e98:	f805 6b01 	strb.w	r6, [r5], #1
 8007e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9e:	429d      	cmp	r5, r3
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	4689      	mov	r9, r1
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	d124      	bne.n	8007ef4 <_dtoa_r+0x60c>
 8007eaa:	4b1b      	ldr	r3, [pc, #108]	; (8007f18 <_dtoa_r+0x630>)
 8007eac:	4650      	mov	r0, sl
 8007eae:	4659      	mov	r1, fp
 8007eb0:	f7f8 f9f4 	bl	800029c <__adddf3>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 fe34 	bl	8000b28 <__aeabi_dcmpgt>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d173      	bne.n	8007fac <_dtoa_r+0x6c4>
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	465b      	mov	r3, fp
 8007ec8:	4913      	ldr	r1, [pc, #76]	; (8007f18 <_dtoa_r+0x630>)
 8007eca:	2000      	movs	r0, #0
 8007ecc:	f7f8 f9e4 	bl	8000298 <__aeabi_dsub>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	f7f8 fe08 	bl	8000aec <__aeabi_dcmplt>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f43f af35 	beq.w	8007d4c <_dtoa_r+0x464>
 8007ee2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007ee4:	1e6b      	subs	r3, r5, #1
 8007ee6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ee8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007eec:	2b30      	cmp	r3, #48	; 0x30
 8007eee:	d0f8      	beq.n	8007ee2 <_dtoa_r+0x5fa>
 8007ef0:	9700      	str	r7, [sp, #0]
 8007ef2:	e049      	b.n	8007f88 <_dtoa_r+0x6a0>
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <_dtoa_r+0x624>)
 8007ef6:	f7f8 fb87 	bl	8000608 <__aeabi_dmul>
 8007efa:	4680      	mov	r8, r0
 8007efc:	4689      	mov	r9, r1
 8007efe:	e7bd      	b.n	8007e7c <_dtoa_r+0x594>
 8007f00:	08009fd8 	.word	0x08009fd8
 8007f04:	08009fb0 	.word	0x08009fb0
 8007f08:	3ff00000 	.word	0x3ff00000
 8007f0c:	40240000 	.word	0x40240000
 8007f10:	401c0000 	.word	0x401c0000
 8007f14:	40140000 	.word	0x40140000
 8007f18:	3fe00000 	.word	0x3fe00000
 8007f1c:	9d01      	ldr	r5, [sp, #4]
 8007f1e:	4656      	mov	r6, sl
 8007f20:	465f      	mov	r7, fp
 8007f22:	4642      	mov	r2, r8
 8007f24:	464b      	mov	r3, r9
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fc97 	bl	800085c <__aeabi_ddiv>
 8007f2e:	f7f8 fe1b 	bl	8000b68 <__aeabi_d2iz>
 8007f32:	4682      	mov	sl, r0
 8007f34:	f7f8 fafe 	bl	8000534 <__aeabi_i2d>
 8007f38:	4642      	mov	r2, r8
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	f7f8 fb64 	bl	8000608 <__aeabi_dmul>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4630      	mov	r0, r6
 8007f46:	4639      	mov	r1, r7
 8007f48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f4c:	f7f8 f9a4 	bl	8000298 <__aeabi_dsub>
 8007f50:	f805 6b01 	strb.w	r6, [r5], #1
 8007f54:	9e01      	ldr	r6, [sp, #4]
 8007f56:	9f03      	ldr	r7, [sp, #12]
 8007f58:	1bae      	subs	r6, r5, r6
 8007f5a:	42b7      	cmp	r7, r6
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	d135      	bne.n	8007fce <_dtoa_r+0x6e6>
 8007f62:	f7f8 f99b 	bl	800029c <__adddf3>
 8007f66:	4642      	mov	r2, r8
 8007f68:	464b      	mov	r3, r9
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	460f      	mov	r7, r1
 8007f6e:	f7f8 fddb 	bl	8000b28 <__aeabi_dcmpgt>
 8007f72:	b9d0      	cbnz	r0, 8007faa <_dtoa_r+0x6c2>
 8007f74:	4642      	mov	r2, r8
 8007f76:	464b      	mov	r3, r9
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f80:	b110      	cbz	r0, 8007f88 <_dtoa_r+0x6a0>
 8007f82:	f01a 0f01 	tst.w	sl, #1
 8007f86:	d110      	bne.n	8007faa <_dtoa_r+0x6c2>
 8007f88:	4620      	mov	r0, r4
 8007f8a:	ee18 1a10 	vmov	r1, s16
 8007f8e:	f000 fd13 	bl	80089b8 <_Bfree>
 8007f92:	2300      	movs	r3, #0
 8007f94:	9800      	ldr	r0, [sp, #0]
 8007f96:	702b      	strb	r3, [r5, #0]
 8007f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	6018      	str	r0, [r3, #0]
 8007f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f43f acf1 	beq.w	8007988 <_dtoa_r+0xa0>
 8007fa6:	601d      	str	r5, [r3, #0]
 8007fa8:	e4ee      	b.n	8007988 <_dtoa_r+0xa0>
 8007faa:	9f00      	ldr	r7, [sp, #0]
 8007fac:	462b      	mov	r3, r5
 8007fae:	461d      	mov	r5, r3
 8007fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fb4:	2a39      	cmp	r2, #57	; 0x39
 8007fb6:	d106      	bne.n	8007fc6 <_dtoa_r+0x6de>
 8007fb8:	9a01      	ldr	r2, [sp, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d1f7      	bne.n	8007fae <_dtoa_r+0x6c6>
 8007fbe:	9901      	ldr	r1, [sp, #4]
 8007fc0:	2230      	movs	r2, #48	; 0x30
 8007fc2:	3701      	adds	r7, #1
 8007fc4:	700a      	strb	r2, [r1, #0]
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	3201      	adds	r2, #1
 8007fca:	701a      	strb	r2, [r3, #0]
 8007fcc:	e790      	b.n	8007ef0 <_dtoa_r+0x608>
 8007fce:	4ba6      	ldr	r3, [pc, #664]	; (8008268 <_dtoa_r+0x980>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f7f8 fb19 	bl	8000608 <__aeabi_dmul>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	f7f8 fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d09d      	beq.n	8007f22 <_dtoa_r+0x63a>
 8007fe6:	e7cf      	b.n	8007f88 <_dtoa_r+0x6a0>
 8007fe8:	9a08      	ldr	r2, [sp, #32]
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	f000 80d7 	beq.w	800819e <_dtoa_r+0x8b6>
 8007ff0:	9a06      	ldr	r2, [sp, #24]
 8007ff2:	2a01      	cmp	r2, #1
 8007ff4:	f300 80ba 	bgt.w	800816c <_dtoa_r+0x884>
 8007ff8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ffa:	2a00      	cmp	r2, #0
 8007ffc:	f000 80b2 	beq.w	8008164 <_dtoa_r+0x87c>
 8008000:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008004:	9e07      	ldr	r6, [sp, #28]
 8008006:	9d04      	ldr	r5, [sp, #16]
 8008008:	9a04      	ldr	r2, [sp, #16]
 800800a:	441a      	add	r2, r3
 800800c:	9204      	str	r2, [sp, #16]
 800800e:	9a05      	ldr	r2, [sp, #20]
 8008010:	2101      	movs	r1, #1
 8008012:	441a      	add	r2, r3
 8008014:	4620      	mov	r0, r4
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	f000 fd86 	bl	8008b28 <__i2b>
 800801c:	4607      	mov	r7, r0
 800801e:	2d00      	cmp	r5, #0
 8008020:	dd0c      	ble.n	800803c <_dtoa_r+0x754>
 8008022:	9b05      	ldr	r3, [sp, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd09      	ble.n	800803c <_dtoa_r+0x754>
 8008028:	42ab      	cmp	r3, r5
 800802a:	9a04      	ldr	r2, [sp, #16]
 800802c:	bfa8      	it	ge
 800802e:	462b      	movge	r3, r5
 8008030:	1ad2      	subs	r2, r2, r3
 8008032:	9204      	str	r2, [sp, #16]
 8008034:	9a05      	ldr	r2, [sp, #20]
 8008036:	1aed      	subs	r5, r5, r3
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	b31b      	cbz	r3, 8008088 <_dtoa_r+0x7a0>
 8008040:	9b08      	ldr	r3, [sp, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80af 	beq.w	80081a6 <_dtoa_r+0x8be>
 8008048:	2e00      	cmp	r6, #0
 800804a:	dd13      	ble.n	8008074 <_dtoa_r+0x78c>
 800804c:	4639      	mov	r1, r7
 800804e:	4632      	mov	r2, r6
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fe29 	bl	8008ca8 <__pow5mult>
 8008056:	ee18 2a10 	vmov	r2, s16
 800805a:	4601      	mov	r1, r0
 800805c:	4607      	mov	r7, r0
 800805e:	4620      	mov	r0, r4
 8008060:	f000 fd78 	bl	8008b54 <__multiply>
 8008064:	ee18 1a10 	vmov	r1, s16
 8008068:	4680      	mov	r8, r0
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fca4 	bl	80089b8 <_Bfree>
 8008070:	ee08 8a10 	vmov	s16, r8
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	1b9a      	subs	r2, r3, r6
 8008078:	d006      	beq.n	8008088 <_dtoa_r+0x7a0>
 800807a:	ee18 1a10 	vmov	r1, s16
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fe12 	bl	8008ca8 <__pow5mult>
 8008084:	ee08 0a10 	vmov	s16, r0
 8008088:	2101      	movs	r1, #1
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fd4c 	bl	8008b28 <__i2b>
 8008090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008092:	2b00      	cmp	r3, #0
 8008094:	4606      	mov	r6, r0
 8008096:	f340 8088 	ble.w	80081aa <_dtoa_r+0x8c2>
 800809a:	461a      	mov	r2, r3
 800809c:	4601      	mov	r1, r0
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fe02 	bl	8008ca8 <__pow5mult>
 80080a4:	9b06      	ldr	r3, [sp, #24]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	4606      	mov	r6, r0
 80080aa:	f340 8081 	ble.w	80081b0 <_dtoa_r+0x8c8>
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	6933      	ldr	r3, [r6, #16]
 80080b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080b8:	6918      	ldr	r0, [r3, #16]
 80080ba:	f000 fce5 	bl	8008a88 <__hi0bits>
 80080be:	f1c0 0020 	rsb	r0, r0, #32
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	4418      	add	r0, r3
 80080c6:	f010 001f 	ands.w	r0, r0, #31
 80080ca:	f000 8092 	beq.w	80081f2 <_dtoa_r+0x90a>
 80080ce:	f1c0 0320 	rsb	r3, r0, #32
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	f340 808a 	ble.w	80081ec <_dtoa_r+0x904>
 80080d8:	f1c0 001c 	rsb	r0, r0, #28
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	4403      	add	r3, r0
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	9b05      	ldr	r3, [sp, #20]
 80080e4:	4403      	add	r3, r0
 80080e6:	4405      	add	r5, r0
 80080e8:	9305      	str	r3, [sp, #20]
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	dd07      	ble.n	8008100 <_dtoa_r+0x818>
 80080f0:	ee18 1a10 	vmov	r1, s16
 80080f4:	461a      	mov	r2, r3
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fe30 	bl	8008d5c <__lshift>
 80080fc:	ee08 0a10 	vmov	s16, r0
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dd05      	ble.n	8008112 <_dtoa_r+0x82a>
 8008106:	4631      	mov	r1, r6
 8008108:	461a      	mov	r2, r3
 800810a:	4620      	mov	r0, r4
 800810c:	f000 fe26 	bl	8008d5c <__lshift>
 8008110:	4606      	mov	r6, r0
 8008112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d06e      	beq.n	80081f6 <_dtoa_r+0x90e>
 8008118:	ee18 0a10 	vmov	r0, s16
 800811c:	4631      	mov	r1, r6
 800811e:	f000 fe8d 	bl	8008e3c <__mcmp>
 8008122:	2800      	cmp	r0, #0
 8008124:	da67      	bge.n	80081f6 <_dtoa_r+0x90e>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	ee18 1a10 	vmov	r1, s16
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	220a      	movs	r2, #10
 8008132:	2300      	movs	r3, #0
 8008134:	4620      	mov	r0, r4
 8008136:	f000 fc61 	bl	80089fc <__multadd>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	ee08 0a10 	vmov	s16, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 81b1 	beq.w	80084a8 <_dtoa_r+0xbc0>
 8008146:	2300      	movs	r3, #0
 8008148:	4639      	mov	r1, r7
 800814a:	220a      	movs	r2, #10
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fc55 	bl	80089fc <__multadd>
 8008152:	9b02      	ldr	r3, [sp, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	4607      	mov	r7, r0
 8008158:	f300 808e 	bgt.w	8008278 <_dtoa_r+0x990>
 800815c:	9b06      	ldr	r3, [sp, #24]
 800815e:	2b02      	cmp	r3, #2
 8008160:	dc51      	bgt.n	8008206 <_dtoa_r+0x91e>
 8008162:	e089      	b.n	8008278 <_dtoa_r+0x990>
 8008164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800816a:	e74b      	b.n	8008004 <_dtoa_r+0x71c>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	1e5e      	subs	r6, r3, #1
 8008170:	9b07      	ldr	r3, [sp, #28]
 8008172:	42b3      	cmp	r3, r6
 8008174:	bfbf      	itttt	lt
 8008176:	9b07      	ldrlt	r3, [sp, #28]
 8008178:	9607      	strlt	r6, [sp, #28]
 800817a:	1af2      	sublt	r2, r6, r3
 800817c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800817e:	bfb6      	itet	lt
 8008180:	189b      	addlt	r3, r3, r2
 8008182:	1b9e      	subge	r6, r3, r6
 8008184:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008186:	9b03      	ldr	r3, [sp, #12]
 8008188:	bfb8      	it	lt
 800818a:	2600      	movlt	r6, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	bfb7      	itett	lt
 8008190:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008194:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008198:	1a9d      	sublt	r5, r3, r2
 800819a:	2300      	movlt	r3, #0
 800819c:	e734      	b.n	8008008 <_dtoa_r+0x720>
 800819e:	9e07      	ldr	r6, [sp, #28]
 80081a0:	9d04      	ldr	r5, [sp, #16]
 80081a2:	9f08      	ldr	r7, [sp, #32]
 80081a4:	e73b      	b.n	800801e <_dtoa_r+0x736>
 80081a6:	9a07      	ldr	r2, [sp, #28]
 80081a8:	e767      	b.n	800807a <_dtoa_r+0x792>
 80081aa:	9b06      	ldr	r3, [sp, #24]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	dc18      	bgt.n	80081e2 <_dtoa_r+0x8fa>
 80081b0:	f1ba 0f00 	cmp.w	sl, #0
 80081b4:	d115      	bne.n	80081e2 <_dtoa_r+0x8fa>
 80081b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081ba:	b993      	cbnz	r3, 80081e2 <_dtoa_r+0x8fa>
 80081bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081c0:	0d1b      	lsrs	r3, r3, #20
 80081c2:	051b      	lsls	r3, r3, #20
 80081c4:	b183      	cbz	r3, 80081e8 <_dtoa_r+0x900>
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	3301      	adds	r3, #1
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	3301      	adds	r3, #1
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	f04f 0801 	mov.w	r8, #1
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f47f af6a 	bne.w	80080b2 <_dtoa_r+0x7ca>
 80081de:	2001      	movs	r0, #1
 80081e0:	e76f      	b.n	80080c2 <_dtoa_r+0x7da>
 80081e2:	f04f 0800 	mov.w	r8, #0
 80081e6:	e7f6      	b.n	80081d6 <_dtoa_r+0x8ee>
 80081e8:	4698      	mov	r8, r3
 80081ea:	e7f4      	b.n	80081d6 <_dtoa_r+0x8ee>
 80081ec:	f43f af7d 	beq.w	80080ea <_dtoa_r+0x802>
 80081f0:	4618      	mov	r0, r3
 80081f2:	301c      	adds	r0, #28
 80081f4:	e772      	b.n	80080dc <_dtoa_r+0x7f4>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dc37      	bgt.n	800826c <_dtoa_r+0x984>
 80081fc:	9b06      	ldr	r3, [sp, #24]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	dd34      	ble.n	800826c <_dtoa_r+0x984>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	9b02      	ldr	r3, [sp, #8]
 8008208:	b96b      	cbnz	r3, 8008226 <_dtoa_r+0x93e>
 800820a:	4631      	mov	r1, r6
 800820c:	2205      	movs	r2, #5
 800820e:	4620      	mov	r0, r4
 8008210:	f000 fbf4 	bl	80089fc <__multadd>
 8008214:	4601      	mov	r1, r0
 8008216:	4606      	mov	r6, r0
 8008218:	ee18 0a10 	vmov	r0, s16
 800821c:	f000 fe0e 	bl	8008e3c <__mcmp>
 8008220:	2800      	cmp	r0, #0
 8008222:	f73f adbb 	bgt.w	8007d9c <_dtoa_r+0x4b4>
 8008226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008228:	9d01      	ldr	r5, [sp, #4]
 800822a:	43db      	mvns	r3, r3
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	f04f 0800 	mov.w	r8, #0
 8008232:	4631      	mov	r1, r6
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fbbf 	bl	80089b8 <_Bfree>
 800823a:	2f00      	cmp	r7, #0
 800823c:	f43f aea4 	beq.w	8007f88 <_dtoa_r+0x6a0>
 8008240:	f1b8 0f00 	cmp.w	r8, #0
 8008244:	d005      	beq.n	8008252 <_dtoa_r+0x96a>
 8008246:	45b8      	cmp	r8, r7
 8008248:	d003      	beq.n	8008252 <_dtoa_r+0x96a>
 800824a:	4641      	mov	r1, r8
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fbb3 	bl	80089b8 <_Bfree>
 8008252:	4639      	mov	r1, r7
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fbaf 	bl	80089b8 <_Bfree>
 800825a:	e695      	b.n	8007f88 <_dtoa_r+0x6a0>
 800825c:	2600      	movs	r6, #0
 800825e:	4637      	mov	r7, r6
 8008260:	e7e1      	b.n	8008226 <_dtoa_r+0x93e>
 8008262:	9700      	str	r7, [sp, #0]
 8008264:	4637      	mov	r7, r6
 8008266:	e599      	b.n	8007d9c <_dtoa_r+0x4b4>
 8008268:	40240000 	.word	0x40240000
 800826c:	9b08      	ldr	r3, [sp, #32]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80ca 	beq.w	8008408 <_dtoa_r+0xb20>
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	9302      	str	r3, [sp, #8]
 8008278:	2d00      	cmp	r5, #0
 800827a:	dd05      	ble.n	8008288 <_dtoa_r+0x9a0>
 800827c:	4639      	mov	r1, r7
 800827e:	462a      	mov	r2, r5
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fd6b 	bl	8008d5c <__lshift>
 8008286:	4607      	mov	r7, r0
 8008288:	f1b8 0f00 	cmp.w	r8, #0
 800828c:	d05b      	beq.n	8008346 <_dtoa_r+0xa5e>
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fb51 	bl	8008938 <_Balloc>
 8008296:	4605      	mov	r5, r0
 8008298:	b928      	cbnz	r0, 80082a6 <_dtoa_r+0x9be>
 800829a:	4b87      	ldr	r3, [pc, #540]	; (80084b8 <_dtoa_r+0xbd0>)
 800829c:	4602      	mov	r2, r0
 800829e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082a2:	f7ff bb3b 	b.w	800791c <_dtoa_r+0x34>
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	3202      	adds	r2, #2
 80082aa:	0092      	lsls	r2, r2, #2
 80082ac:	f107 010c 	add.w	r1, r7, #12
 80082b0:	300c      	adds	r0, #12
 80082b2:	f000 fb33 	bl	800891c <memcpy>
 80082b6:	2201      	movs	r2, #1
 80082b8:	4629      	mov	r1, r5
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 fd4e 	bl	8008d5c <__lshift>
 80082c0:	9b01      	ldr	r3, [sp, #4]
 80082c2:	f103 0901 	add.w	r9, r3, #1
 80082c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	f00a 0301 	and.w	r3, sl, #1
 80082d2:	46b8      	mov	r8, r7
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	4607      	mov	r7, r0
 80082d8:	4631      	mov	r1, r6
 80082da:	ee18 0a10 	vmov	r0, s16
 80082de:	f7ff fa75 	bl	80077cc <quorem>
 80082e2:	4641      	mov	r1, r8
 80082e4:	9002      	str	r0, [sp, #8]
 80082e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082ea:	ee18 0a10 	vmov	r0, s16
 80082ee:	f000 fda5 	bl	8008e3c <__mcmp>
 80082f2:	463a      	mov	r2, r7
 80082f4:	9003      	str	r0, [sp, #12]
 80082f6:	4631      	mov	r1, r6
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fdbb 	bl	8008e74 <__mdiff>
 80082fe:	68c2      	ldr	r2, [r0, #12]
 8008300:	f109 3bff 	add.w	fp, r9, #4294967295
 8008304:	4605      	mov	r5, r0
 8008306:	bb02      	cbnz	r2, 800834a <_dtoa_r+0xa62>
 8008308:	4601      	mov	r1, r0
 800830a:	ee18 0a10 	vmov	r0, s16
 800830e:	f000 fd95 	bl	8008e3c <__mcmp>
 8008312:	4602      	mov	r2, r0
 8008314:	4629      	mov	r1, r5
 8008316:	4620      	mov	r0, r4
 8008318:	9207      	str	r2, [sp, #28]
 800831a:	f000 fb4d 	bl	80089b8 <_Bfree>
 800831e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008322:	ea43 0102 	orr.w	r1, r3, r2
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	430b      	orrs	r3, r1
 800832a:	464d      	mov	r5, r9
 800832c:	d10f      	bne.n	800834e <_dtoa_r+0xa66>
 800832e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008332:	d02a      	beq.n	800838a <_dtoa_r+0xaa2>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd02      	ble.n	8008340 <_dtoa_r+0xa58>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008340:	f88b a000 	strb.w	sl, [fp]
 8008344:	e775      	b.n	8008232 <_dtoa_r+0x94a>
 8008346:	4638      	mov	r0, r7
 8008348:	e7ba      	b.n	80082c0 <_dtoa_r+0x9d8>
 800834a:	2201      	movs	r2, #1
 800834c:	e7e2      	b.n	8008314 <_dtoa_r+0xa2c>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	db04      	blt.n	800835e <_dtoa_r+0xa76>
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	430b      	orrs	r3, r1
 8008358:	9904      	ldr	r1, [sp, #16]
 800835a:	430b      	orrs	r3, r1
 800835c:	d122      	bne.n	80083a4 <_dtoa_r+0xabc>
 800835e:	2a00      	cmp	r2, #0
 8008360:	ddee      	ble.n	8008340 <_dtoa_r+0xa58>
 8008362:	ee18 1a10 	vmov	r1, s16
 8008366:	2201      	movs	r2, #1
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fcf7 	bl	8008d5c <__lshift>
 800836e:	4631      	mov	r1, r6
 8008370:	ee08 0a10 	vmov	s16, r0
 8008374:	f000 fd62 	bl	8008e3c <__mcmp>
 8008378:	2800      	cmp	r0, #0
 800837a:	dc03      	bgt.n	8008384 <_dtoa_r+0xa9c>
 800837c:	d1e0      	bne.n	8008340 <_dtoa_r+0xa58>
 800837e:	f01a 0f01 	tst.w	sl, #1
 8008382:	d0dd      	beq.n	8008340 <_dtoa_r+0xa58>
 8008384:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008388:	d1d7      	bne.n	800833a <_dtoa_r+0xa52>
 800838a:	2339      	movs	r3, #57	; 0x39
 800838c:	f88b 3000 	strb.w	r3, [fp]
 8008390:	462b      	mov	r3, r5
 8008392:	461d      	mov	r5, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800839a:	2a39      	cmp	r2, #57	; 0x39
 800839c:	d071      	beq.n	8008482 <_dtoa_r+0xb9a>
 800839e:	3201      	adds	r2, #1
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e746      	b.n	8008232 <_dtoa_r+0x94a>
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	dd07      	ble.n	80083b8 <_dtoa_r+0xad0>
 80083a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083ac:	d0ed      	beq.n	800838a <_dtoa_r+0xaa2>
 80083ae:	f10a 0301 	add.w	r3, sl, #1
 80083b2:	f88b 3000 	strb.w	r3, [fp]
 80083b6:	e73c      	b.n	8008232 <_dtoa_r+0x94a>
 80083b8:	9b05      	ldr	r3, [sp, #20]
 80083ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80083be:	4599      	cmp	r9, r3
 80083c0:	d047      	beq.n	8008452 <_dtoa_r+0xb6a>
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	2300      	movs	r3, #0
 80083c8:	220a      	movs	r2, #10
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fb16 	bl	80089fc <__multadd>
 80083d0:	45b8      	cmp	r8, r7
 80083d2:	ee08 0a10 	vmov	s16, r0
 80083d6:	f04f 0300 	mov.w	r3, #0
 80083da:	f04f 020a 	mov.w	r2, #10
 80083de:	4641      	mov	r1, r8
 80083e0:	4620      	mov	r0, r4
 80083e2:	d106      	bne.n	80083f2 <_dtoa_r+0xb0a>
 80083e4:	f000 fb0a 	bl	80089fc <__multadd>
 80083e8:	4680      	mov	r8, r0
 80083ea:	4607      	mov	r7, r0
 80083ec:	f109 0901 	add.w	r9, r9, #1
 80083f0:	e772      	b.n	80082d8 <_dtoa_r+0x9f0>
 80083f2:	f000 fb03 	bl	80089fc <__multadd>
 80083f6:	4639      	mov	r1, r7
 80083f8:	4680      	mov	r8, r0
 80083fa:	2300      	movs	r3, #0
 80083fc:	220a      	movs	r2, #10
 80083fe:	4620      	mov	r0, r4
 8008400:	f000 fafc 	bl	80089fc <__multadd>
 8008404:	4607      	mov	r7, r0
 8008406:	e7f1      	b.n	80083ec <_dtoa_r+0xb04>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	9d01      	ldr	r5, [sp, #4]
 800840e:	ee18 0a10 	vmov	r0, s16
 8008412:	4631      	mov	r1, r6
 8008414:	f7ff f9da 	bl	80077cc <quorem>
 8008418:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800841c:	9b01      	ldr	r3, [sp, #4]
 800841e:	f805 ab01 	strb.w	sl, [r5], #1
 8008422:	1aea      	subs	r2, r5, r3
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	4293      	cmp	r3, r2
 8008428:	dd09      	ble.n	800843e <_dtoa_r+0xb56>
 800842a:	ee18 1a10 	vmov	r1, s16
 800842e:	2300      	movs	r3, #0
 8008430:	220a      	movs	r2, #10
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fae2 	bl	80089fc <__multadd>
 8008438:	ee08 0a10 	vmov	s16, r0
 800843c:	e7e7      	b.n	800840e <_dtoa_r+0xb26>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	bfc8      	it	gt
 8008444:	461d      	movgt	r5, r3
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	bfd8      	it	le
 800844a:	2501      	movle	r5, #1
 800844c:	441d      	add	r5, r3
 800844e:	f04f 0800 	mov.w	r8, #0
 8008452:	ee18 1a10 	vmov	r1, s16
 8008456:	2201      	movs	r2, #1
 8008458:	4620      	mov	r0, r4
 800845a:	f000 fc7f 	bl	8008d5c <__lshift>
 800845e:	4631      	mov	r1, r6
 8008460:	ee08 0a10 	vmov	s16, r0
 8008464:	f000 fcea 	bl	8008e3c <__mcmp>
 8008468:	2800      	cmp	r0, #0
 800846a:	dc91      	bgt.n	8008390 <_dtoa_r+0xaa8>
 800846c:	d102      	bne.n	8008474 <_dtoa_r+0xb8c>
 800846e:	f01a 0f01 	tst.w	sl, #1
 8008472:	d18d      	bne.n	8008390 <_dtoa_r+0xaa8>
 8008474:	462b      	mov	r3, r5
 8008476:	461d      	mov	r5, r3
 8008478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800847c:	2a30      	cmp	r2, #48	; 0x30
 800847e:	d0fa      	beq.n	8008476 <_dtoa_r+0xb8e>
 8008480:	e6d7      	b.n	8008232 <_dtoa_r+0x94a>
 8008482:	9a01      	ldr	r2, [sp, #4]
 8008484:	429a      	cmp	r2, r3
 8008486:	d184      	bne.n	8008392 <_dtoa_r+0xaaa>
 8008488:	9b00      	ldr	r3, [sp, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2331      	movs	r3, #49	; 0x31
 8008490:	7013      	strb	r3, [r2, #0]
 8008492:	e6ce      	b.n	8008232 <_dtoa_r+0x94a>
 8008494:	4b09      	ldr	r3, [pc, #36]	; (80084bc <_dtoa_r+0xbd4>)
 8008496:	f7ff ba95 	b.w	80079c4 <_dtoa_r+0xdc>
 800849a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800849c:	2b00      	cmp	r3, #0
 800849e:	f47f aa6e 	bne.w	800797e <_dtoa_r+0x96>
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <_dtoa_r+0xbd8>)
 80084a4:	f7ff ba8e 	b.w	80079c4 <_dtoa_r+0xdc>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dcae      	bgt.n	800840c <_dtoa_r+0xb24>
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	f73f aea8 	bgt.w	8008206 <_dtoa_r+0x91e>
 80084b6:	e7a9      	b.n	800840c <_dtoa_r+0xb24>
 80084b8:	08009edf 	.word	0x08009edf
 80084bc:	08009e3c 	.word	0x08009e3c
 80084c0:	08009e60 	.word	0x08009e60

080084c4 <__sflush_r>:
 80084c4:	898a      	ldrh	r2, [r1, #12]
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	4605      	mov	r5, r0
 80084cc:	0710      	lsls	r0, r2, #28
 80084ce:	460c      	mov	r4, r1
 80084d0:	d458      	bmi.n	8008584 <__sflush_r+0xc0>
 80084d2:	684b      	ldr	r3, [r1, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc05      	bgt.n	80084e4 <__sflush_r+0x20>
 80084d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dc02      	bgt.n	80084e4 <__sflush_r+0x20>
 80084de:	2000      	movs	r0, #0
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d0f9      	beq.n	80084de <__sflush_r+0x1a>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084f0:	682f      	ldr	r7, [r5, #0]
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	d032      	beq.n	800855c <__sflush_r+0x98>
 80084f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	075a      	lsls	r2, r3, #29
 80084fc:	d505      	bpl.n	800850a <__sflush_r+0x46>
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	1ac0      	subs	r0, r0, r3
 8008502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008504:	b10b      	cbz	r3, 800850a <__sflush_r+0x46>
 8008506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008508:	1ac0      	subs	r0, r0, r3
 800850a:	2300      	movs	r3, #0
 800850c:	4602      	mov	r2, r0
 800850e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008510:	6a21      	ldr	r1, [r4, #32]
 8008512:	4628      	mov	r0, r5
 8008514:	47b0      	blx	r6
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	d106      	bne.n	800852a <__sflush_r+0x66>
 800851c:	6829      	ldr	r1, [r5, #0]
 800851e:	291d      	cmp	r1, #29
 8008520:	d82c      	bhi.n	800857c <__sflush_r+0xb8>
 8008522:	4a2a      	ldr	r2, [pc, #168]	; (80085cc <__sflush_r+0x108>)
 8008524:	40ca      	lsrs	r2, r1
 8008526:	07d6      	lsls	r6, r2, #31
 8008528:	d528      	bpl.n	800857c <__sflush_r+0xb8>
 800852a:	2200      	movs	r2, #0
 800852c:	6062      	str	r2, [r4, #4]
 800852e:	04d9      	lsls	r1, r3, #19
 8008530:	6922      	ldr	r2, [r4, #16]
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	d504      	bpl.n	8008540 <__sflush_r+0x7c>
 8008536:	1c42      	adds	r2, r0, #1
 8008538:	d101      	bne.n	800853e <__sflush_r+0x7a>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b903      	cbnz	r3, 8008540 <__sflush_r+0x7c>
 800853e:	6560      	str	r0, [r4, #84]	; 0x54
 8008540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008542:	602f      	str	r7, [r5, #0]
 8008544:	2900      	cmp	r1, #0
 8008546:	d0ca      	beq.n	80084de <__sflush_r+0x1a>
 8008548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800854c:	4299      	cmp	r1, r3
 800854e:	d002      	beq.n	8008556 <__sflush_r+0x92>
 8008550:	4628      	mov	r0, r5
 8008552:	f000 fd8b 	bl	800906c <_free_r>
 8008556:	2000      	movs	r0, #0
 8008558:	6360      	str	r0, [r4, #52]	; 0x34
 800855a:	e7c1      	b.n	80084e0 <__sflush_r+0x1c>
 800855c:	6a21      	ldr	r1, [r4, #32]
 800855e:	2301      	movs	r3, #1
 8008560:	4628      	mov	r0, r5
 8008562:	47b0      	blx	r6
 8008564:	1c41      	adds	r1, r0, #1
 8008566:	d1c7      	bne.n	80084f8 <__sflush_r+0x34>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c4      	beq.n	80084f8 <__sflush_r+0x34>
 800856e:	2b1d      	cmp	r3, #29
 8008570:	d001      	beq.n	8008576 <__sflush_r+0xb2>
 8008572:	2b16      	cmp	r3, #22
 8008574:	d101      	bne.n	800857a <__sflush_r+0xb6>
 8008576:	602f      	str	r7, [r5, #0]
 8008578:	e7b1      	b.n	80084de <__sflush_r+0x1a>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e7ad      	b.n	80084e0 <__sflush_r+0x1c>
 8008584:	690f      	ldr	r7, [r1, #16]
 8008586:	2f00      	cmp	r7, #0
 8008588:	d0a9      	beq.n	80084de <__sflush_r+0x1a>
 800858a:	0793      	lsls	r3, r2, #30
 800858c:	680e      	ldr	r6, [r1, #0]
 800858e:	bf08      	it	eq
 8008590:	694b      	ldreq	r3, [r1, #20]
 8008592:	600f      	str	r7, [r1, #0]
 8008594:	bf18      	it	ne
 8008596:	2300      	movne	r3, #0
 8008598:	eba6 0807 	sub.w	r8, r6, r7
 800859c:	608b      	str	r3, [r1, #8]
 800859e:	f1b8 0f00 	cmp.w	r8, #0
 80085a2:	dd9c      	ble.n	80084de <__sflush_r+0x1a>
 80085a4:	6a21      	ldr	r1, [r4, #32]
 80085a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085a8:	4643      	mov	r3, r8
 80085aa:	463a      	mov	r2, r7
 80085ac:	4628      	mov	r0, r5
 80085ae:	47b0      	blx	r6
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dc06      	bgt.n	80085c2 <__sflush_r+0xfe>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e78e      	b.n	80084e0 <__sflush_r+0x1c>
 80085c2:	4407      	add	r7, r0
 80085c4:	eba8 0800 	sub.w	r8, r8, r0
 80085c8:	e7e9      	b.n	800859e <__sflush_r+0xda>
 80085ca:	bf00      	nop
 80085cc:	20400001 	.word	0x20400001

080085d0 <_fflush_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	4605      	mov	r5, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b913      	cbnz	r3, 80085e0 <_fflush_r+0x10>
 80085da:	2500      	movs	r5, #0
 80085dc:	4628      	mov	r0, r5
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	b118      	cbz	r0, 80085ea <_fflush_r+0x1a>
 80085e2:	6983      	ldr	r3, [r0, #24]
 80085e4:	b90b      	cbnz	r3, 80085ea <_fflush_r+0x1a>
 80085e6:	f000 f887 	bl	80086f8 <__sinit>
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <_fflush_r+0x6c>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d11b      	bne.n	8008628 <_fflush_r+0x58>
 80085f0:	686c      	ldr	r4, [r5, #4]
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0ef      	beq.n	80085da <_fflush_r+0xa>
 80085fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085fc:	07d0      	lsls	r0, r2, #31
 80085fe:	d404      	bmi.n	800860a <_fflush_r+0x3a>
 8008600:	0599      	lsls	r1, r3, #22
 8008602:	d402      	bmi.n	800860a <_fflush_r+0x3a>
 8008604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008606:	f000 f91a 	bl	800883e <__retarget_lock_acquire_recursive>
 800860a:	4628      	mov	r0, r5
 800860c:	4621      	mov	r1, r4
 800860e:	f7ff ff59 	bl	80084c4 <__sflush_r>
 8008612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008614:	07da      	lsls	r2, r3, #31
 8008616:	4605      	mov	r5, r0
 8008618:	d4e0      	bmi.n	80085dc <_fflush_r+0xc>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	059b      	lsls	r3, r3, #22
 800861e:	d4dd      	bmi.n	80085dc <_fflush_r+0xc>
 8008620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008622:	f000 f90d 	bl	8008840 <__retarget_lock_release_recursive>
 8008626:	e7d9      	b.n	80085dc <_fflush_r+0xc>
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <_fflush_r+0x70>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d101      	bne.n	8008632 <_fflush_r+0x62>
 800862e:	68ac      	ldr	r4, [r5, #8]
 8008630:	e7df      	b.n	80085f2 <_fflush_r+0x22>
 8008632:	4b04      	ldr	r3, [pc, #16]	; (8008644 <_fflush_r+0x74>)
 8008634:	429c      	cmp	r4, r3
 8008636:	bf08      	it	eq
 8008638:	68ec      	ldreq	r4, [r5, #12]
 800863a:	e7da      	b.n	80085f2 <_fflush_r+0x22>
 800863c:	08009f10 	.word	0x08009f10
 8008640:	08009f30 	.word	0x08009f30
 8008644:	08009ef0 	.word	0x08009ef0

08008648 <std>:
 8008648:	2300      	movs	r3, #0
 800864a:	b510      	push	{r4, lr}
 800864c:	4604      	mov	r4, r0
 800864e:	e9c0 3300 	strd	r3, r3, [r0]
 8008652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008656:	6083      	str	r3, [r0, #8]
 8008658:	8181      	strh	r1, [r0, #12]
 800865a:	6643      	str	r3, [r0, #100]	; 0x64
 800865c:	81c2      	strh	r2, [r0, #14]
 800865e:	6183      	str	r3, [r0, #24]
 8008660:	4619      	mov	r1, r3
 8008662:	2208      	movs	r2, #8
 8008664:	305c      	adds	r0, #92	; 0x5c
 8008666:	f7fe fabb 	bl	8006be0 <memset>
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <std+0x38>)
 800866c:	6263      	str	r3, [r4, #36]	; 0x24
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <std+0x3c>)
 8008670:	62a3      	str	r3, [r4, #40]	; 0x28
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <std+0x40>)
 8008674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <std+0x44>)
 8008678:	6224      	str	r4, [r4, #32]
 800867a:	6323      	str	r3, [r4, #48]	; 0x30
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08009849 	.word	0x08009849
 8008684:	0800986b 	.word	0x0800986b
 8008688:	080098a3 	.word	0x080098a3
 800868c:	080098c7 	.word	0x080098c7

08008690 <_cleanup_r>:
 8008690:	4901      	ldr	r1, [pc, #4]	; (8008698 <_cleanup_r+0x8>)
 8008692:	f000 b8af 	b.w	80087f4 <_fwalk_reent>
 8008696:	bf00      	nop
 8008698:	080085d1 	.word	0x080085d1

0800869c <__sfmoreglue>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	2268      	movs	r2, #104	; 0x68
 80086a0:	1e4d      	subs	r5, r1, #1
 80086a2:	4355      	muls	r5, r2
 80086a4:	460e      	mov	r6, r1
 80086a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086aa:	f000 fd4b 	bl	8009144 <_malloc_r>
 80086ae:	4604      	mov	r4, r0
 80086b0:	b140      	cbz	r0, 80086c4 <__sfmoreglue+0x28>
 80086b2:	2100      	movs	r1, #0
 80086b4:	e9c0 1600 	strd	r1, r6, [r0]
 80086b8:	300c      	adds	r0, #12
 80086ba:	60a0      	str	r0, [r4, #8]
 80086bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086c0:	f7fe fa8e 	bl	8006be0 <memset>
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}

080086c8 <__sfp_lock_acquire>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__sfp_lock_acquire+0x8>)
 80086ca:	f000 b8b8 	b.w	800883e <__retarget_lock_acquire_recursive>
 80086ce:	bf00      	nop
 80086d0:	20000405 	.word	0x20000405

080086d4 <__sfp_lock_release>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__sfp_lock_release+0x8>)
 80086d6:	f000 b8b3 	b.w	8008840 <__retarget_lock_release_recursive>
 80086da:	bf00      	nop
 80086dc:	20000405 	.word	0x20000405

080086e0 <__sinit_lock_acquire>:
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__sinit_lock_acquire+0x8>)
 80086e2:	f000 b8ac 	b.w	800883e <__retarget_lock_acquire_recursive>
 80086e6:	bf00      	nop
 80086e8:	20000406 	.word	0x20000406

080086ec <__sinit_lock_release>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__sinit_lock_release+0x8>)
 80086ee:	f000 b8a7 	b.w	8008840 <__retarget_lock_release_recursive>
 80086f2:	bf00      	nop
 80086f4:	20000406 	.word	0x20000406

080086f8 <__sinit>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	4604      	mov	r4, r0
 80086fc:	f7ff fff0 	bl	80086e0 <__sinit_lock_acquire>
 8008700:	69a3      	ldr	r3, [r4, #24]
 8008702:	b11b      	cbz	r3, 800870c <__sinit+0x14>
 8008704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008708:	f7ff bff0 	b.w	80086ec <__sinit_lock_release>
 800870c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008710:	6523      	str	r3, [r4, #80]	; 0x50
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <__sinit+0x68>)
 8008714:	4a13      	ldr	r2, [pc, #76]	; (8008764 <__sinit+0x6c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	62a2      	str	r2, [r4, #40]	; 0x28
 800871a:	42a3      	cmp	r3, r4
 800871c:	bf04      	itt	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	61a3      	streq	r3, [r4, #24]
 8008722:	4620      	mov	r0, r4
 8008724:	f000 f820 	bl	8008768 <__sfp>
 8008728:	6060      	str	r0, [r4, #4]
 800872a:	4620      	mov	r0, r4
 800872c:	f000 f81c 	bl	8008768 <__sfp>
 8008730:	60a0      	str	r0, [r4, #8]
 8008732:	4620      	mov	r0, r4
 8008734:	f000 f818 	bl	8008768 <__sfp>
 8008738:	2200      	movs	r2, #0
 800873a:	60e0      	str	r0, [r4, #12]
 800873c:	2104      	movs	r1, #4
 800873e:	6860      	ldr	r0, [r4, #4]
 8008740:	f7ff ff82 	bl	8008648 <std>
 8008744:	68a0      	ldr	r0, [r4, #8]
 8008746:	2201      	movs	r2, #1
 8008748:	2109      	movs	r1, #9
 800874a:	f7ff ff7d 	bl	8008648 <std>
 800874e:	68e0      	ldr	r0, [r4, #12]
 8008750:	2202      	movs	r2, #2
 8008752:	2112      	movs	r1, #18
 8008754:	f7ff ff78 	bl	8008648 <std>
 8008758:	2301      	movs	r3, #1
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	e7d2      	b.n	8008704 <__sinit+0xc>
 800875e:	bf00      	nop
 8008760:	08009e28 	.word	0x08009e28
 8008764:	08008691 	.word	0x08008691

08008768 <__sfp>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	4607      	mov	r7, r0
 800876c:	f7ff ffac 	bl	80086c8 <__sfp_lock_acquire>
 8008770:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <__sfp+0x84>)
 8008772:	681e      	ldr	r6, [r3, #0]
 8008774:	69b3      	ldr	r3, [r6, #24]
 8008776:	b913      	cbnz	r3, 800877e <__sfp+0x16>
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff ffbd 	bl	80086f8 <__sinit>
 800877e:	3648      	adds	r6, #72	; 0x48
 8008780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	d503      	bpl.n	8008790 <__sfp+0x28>
 8008788:	6833      	ldr	r3, [r6, #0]
 800878a:	b30b      	cbz	r3, 80087d0 <__sfp+0x68>
 800878c:	6836      	ldr	r6, [r6, #0]
 800878e:	e7f7      	b.n	8008780 <__sfp+0x18>
 8008790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008794:	b9d5      	cbnz	r5, 80087cc <__sfp+0x64>
 8008796:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <__sfp+0x88>)
 8008798:	60e3      	str	r3, [r4, #12]
 800879a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800879e:	6665      	str	r5, [r4, #100]	; 0x64
 80087a0:	f000 f84c 	bl	800883c <__retarget_lock_init_recursive>
 80087a4:	f7ff ff96 	bl	80086d4 <__sfp_lock_release>
 80087a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	61a5      	str	r5, [r4, #24]
 80087b4:	2208      	movs	r2, #8
 80087b6:	4629      	mov	r1, r5
 80087b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087bc:	f7fe fa10 	bl	8006be0 <memset>
 80087c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087c8:	4620      	mov	r0, r4
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	3468      	adds	r4, #104	; 0x68
 80087ce:	e7d9      	b.n	8008784 <__sfp+0x1c>
 80087d0:	2104      	movs	r1, #4
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ff62 	bl	800869c <__sfmoreglue>
 80087d8:	4604      	mov	r4, r0
 80087da:	6030      	str	r0, [r6, #0]
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1d5      	bne.n	800878c <__sfp+0x24>
 80087e0:	f7ff ff78 	bl	80086d4 <__sfp_lock_release>
 80087e4:	230c      	movs	r3, #12
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	e7ee      	b.n	80087c8 <__sfp+0x60>
 80087ea:	bf00      	nop
 80087ec:	08009e28 	.word	0x08009e28
 80087f0:	ffff0001 	.word	0xffff0001

080087f4 <_fwalk_reent>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	4606      	mov	r6, r0
 80087fa:	4688      	mov	r8, r1
 80087fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008800:	2700      	movs	r7, #0
 8008802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008806:	f1b9 0901 	subs.w	r9, r9, #1
 800880a:	d505      	bpl.n	8008818 <_fwalk_reent+0x24>
 800880c:	6824      	ldr	r4, [r4, #0]
 800880e:	2c00      	cmp	r4, #0
 8008810:	d1f7      	bne.n	8008802 <_fwalk_reent+0xe>
 8008812:	4638      	mov	r0, r7
 8008814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008818:	89ab      	ldrh	r3, [r5, #12]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d907      	bls.n	800882e <_fwalk_reent+0x3a>
 800881e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008822:	3301      	adds	r3, #1
 8008824:	d003      	beq.n	800882e <_fwalk_reent+0x3a>
 8008826:	4629      	mov	r1, r5
 8008828:	4630      	mov	r0, r6
 800882a:	47c0      	blx	r8
 800882c:	4307      	orrs	r7, r0
 800882e:	3568      	adds	r5, #104	; 0x68
 8008830:	e7e9      	b.n	8008806 <_fwalk_reent+0x12>
	...

08008834 <_localeconv_r>:
 8008834:	4800      	ldr	r0, [pc, #0]	; (8008838 <_localeconv_r+0x4>)
 8008836:	4770      	bx	lr
 8008838:	20000168 	.word	0x20000168

0800883c <__retarget_lock_init_recursive>:
 800883c:	4770      	bx	lr

0800883e <__retarget_lock_acquire_recursive>:
 800883e:	4770      	bx	lr

08008840 <__retarget_lock_release_recursive>:
 8008840:	4770      	bx	lr

08008842 <__swhatbuf_r>:
 8008842:	b570      	push	{r4, r5, r6, lr}
 8008844:	460e      	mov	r6, r1
 8008846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884a:	2900      	cmp	r1, #0
 800884c:	b096      	sub	sp, #88	; 0x58
 800884e:	4614      	mov	r4, r2
 8008850:	461d      	mov	r5, r3
 8008852:	da08      	bge.n	8008866 <__swhatbuf_r+0x24>
 8008854:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	602a      	str	r2, [r5, #0]
 800885c:	061a      	lsls	r2, r3, #24
 800885e:	d410      	bmi.n	8008882 <__swhatbuf_r+0x40>
 8008860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008864:	e00e      	b.n	8008884 <__swhatbuf_r+0x42>
 8008866:	466a      	mov	r2, sp
 8008868:	f001 f884 	bl	8009974 <_fstat_r>
 800886c:	2800      	cmp	r0, #0
 800886e:	dbf1      	blt.n	8008854 <__swhatbuf_r+0x12>
 8008870:	9a01      	ldr	r2, [sp, #4]
 8008872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800887a:	425a      	negs	r2, r3
 800887c:	415a      	adcs	r2, r3
 800887e:	602a      	str	r2, [r5, #0]
 8008880:	e7ee      	b.n	8008860 <__swhatbuf_r+0x1e>
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	2000      	movs	r0, #0
 8008886:	6023      	str	r3, [r4, #0]
 8008888:	b016      	add	sp, #88	; 0x58
 800888a:	bd70      	pop	{r4, r5, r6, pc}

0800888c <__smakebuf_r>:
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008890:	079d      	lsls	r5, r3, #30
 8008892:	4606      	mov	r6, r0
 8008894:	460c      	mov	r4, r1
 8008896:	d507      	bpl.n	80088a8 <__smakebuf_r+0x1c>
 8008898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	6123      	str	r3, [r4, #16]
 80088a0:	2301      	movs	r3, #1
 80088a2:	6163      	str	r3, [r4, #20]
 80088a4:	b002      	add	sp, #8
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	ab01      	add	r3, sp, #4
 80088aa:	466a      	mov	r2, sp
 80088ac:	f7ff ffc9 	bl	8008842 <__swhatbuf_r>
 80088b0:	9900      	ldr	r1, [sp, #0]
 80088b2:	4605      	mov	r5, r0
 80088b4:	4630      	mov	r0, r6
 80088b6:	f000 fc45 	bl	8009144 <_malloc_r>
 80088ba:	b948      	cbnz	r0, 80088d0 <__smakebuf_r+0x44>
 80088bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088c0:	059a      	lsls	r2, r3, #22
 80088c2:	d4ef      	bmi.n	80088a4 <__smakebuf_r+0x18>
 80088c4:	f023 0303 	bic.w	r3, r3, #3
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	e7e3      	b.n	8008898 <__smakebuf_r+0xc>
 80088d0:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <__smakebuf_r+0x7c>)
 80088d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	6020      	str	r0, [r4, #0]
 80088d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	9b00      	ldr	r3, [sp, #0]
 80088e0:	6163      	str	r3, [r4, #20]
 80088e2:	9b01      	ldr	r3, [sp, #4]
 80088e4:	6120      	str	r0, [r4, #16]
 80088e6:	b15b      	cbz	r3, 8008900 <__smakebuf_r+0x74>
 80088e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ec:	4630      	mov	r0, r6
 80088ee:	f001 f853 	bl	8009998 <_isatty_r>
 80088f2:	b128      	cbz	r0, 8008900 <__smakebuf_r+0x74>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	f043 0301 	orr.w	r3, r3, #1
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	89a0      	ldrh	r0, [r4, #12]
 8008902:	4305      	orrs	r5, r0
 8008904:	81a5      	strh	r5, [r4, #12]
 8008906:	e7cd      	b.n	80088a4 <__smakebuf_r+0x18>
 8008908:	08008691 	.word	0x08008691

0800890c <malloc>:
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <malloc+0xc>)
 800890e:	4601      	mov	r1, r0
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	f000 bc17 	b.w	8009144 <_malloc_r>
 8008916:	bf00      	nop
 8008918:	20000014 	.word	0x20000014

0800891c <memcpy>:
 800891c:	440a      	add	r2, r1
 800891e:	4291      	cmp	r1, r2
 8008920:	f100 33ff 	add.w	r3, r0, #4294967295
 8008924:	d100      	bne.n	8008928 <memcpy+0xc>
 8008926:	4770      	bx	lr
 8008928:	b510      	push	{r4, lr}
 800892a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800892e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008932:	4291      	cmp	r1, r2
 8008934:	d1f9      	bne.n	800892a <memcpy+0xe>
 8008936:	bd10      	pop	{r4, pc}

08008938 <_Balloc>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	b976      	cbnz	r6, 8008960 <_Balloc+0x28>
 8008942:	2010      	movs	r0, #16
 8008944:	f7ff ffe2 	bl	800890c <malloc>
 8008948:	4602      	mov	r2, r0
 800894a:	6260      	str	r0, [r4, #36]	; 0x24
 800894c:	b920      	cbnz	r0, 8008958 <_Balloc+0x20>
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <_Balloc+0x78>)
 8008950:	4818      	ldr	r0, [pc, #96]	; (80089b4 <_Balloc+0x7c>)
 8008952:	2166      	movs	r1, #102	; 0x66
 8008954:	f000 ffce 	bl	80098f4 <__assert_func>
 8008958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800895c:	6006      	str	r6, [r0, #0]
 800895e:	60c6      	str	r6, [r0, #12]
 8008960:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008962:	68f3      	ldr	r3, [r6, #12]
 8008964:	b183      	cbz	r3, 8008988 <_Balloc+0x50>
 8008966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896e:	b9b8      	cbnz	r0, 80089a0 <_Balloc+0x68>
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f605 	lsl.w	r6, r1, r5
 8008976:	1d72      	adds	r2, r6, #5
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fb60 	bl	8009040 <_calloc_r>
 8008980:	b160      	cbz	r0, 800899c <_Balloc+0x64>
 8008982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008986:	e00e      	b.n	80089a6 <_Balloc+0x6e>
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	2104      	movs	r1, #4
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fb57 	bl	8009040 <_calloc_r>
 8008992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008994:	60f0      	str	r0, [r6, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <_Balloc+0x2e>
 800899c:	2000      	movs	r0, #0
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a6:	2300      	movs	r3, #0
 80089a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ac:	e7f7      	b.n	800899e <_Balloc+0x66>
 80089ae:	bf00      	nop
 80089b0:	08009e6d 	.word	0x08009e6d
 80089b4:	08009f50 	.word	0x08009f50

080089b8 <_Bfree>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b976      	cbnz	r6, 80089e0 <_Bfree+0x28>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7ff ffa2 	bl	800890c <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	6268      	str	r0, [r5, #36]	; 0x24
 80089cc:	b920      	cbnz	r0, 80089d8 <_Bfree+0x20>
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <_Bfree+0x3c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <_Bfree+0x40>)
 80089d2:	218a      	movs	r1, #138	; 0x8a
 80089d4:	f000 ff8e 	bl	80098f4 <__assert_func>
 80089d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089dc:	6006      	str	r6, [r0, #0]
 80089de:	60c6      	str	r6, [r0, #12]
 80089e0:	b13c      	cbz	r4, 80089f2 <_Bfree+0x3a>
 80089e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	08009e6d 	.word	0x08009e6d
 80089f8:	08009f50 	.word	0x08009f50

080089fc <__multadd>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	690d      	ldr	r5, [r1, #16]
 8008a02:	4607      	mov	r7, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	461e      	mov	r6, r3
 8008a08:	f101 0c14 	add.w	ip, r1, #20
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a12:	b299      	uxth	r1, r3
 8008a14:	fb02 6101 	mla	r1, r2, r1, r6
 8008a18:	0c1e      	lsrs	r6, r3, #16
 8008a1a:	0c0b      	lsrs	r3, r1, #16
 8008a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a20:	b289      	uxth	r1, r1
 8008a22:	3001      	adds	r0, #1
 8008a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a28:	4285      	cmp	r5, r0
 8008a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a32:	dcec      	bgt.n	8008a0e <__multadd+0x12>
 8008a34:	b30e      	cbz	r6, 8008a7a <__multadd+0x7e>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc19      	bgt.n	8008a70 <__multadd+0x74>
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	3101      	adds	r1, #1
 8008a42:	f7ff ff79 	bl	8008938 <_Balloc>
 8008a46:	4680      	mov	r8, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__multadd+0x5a>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <__multadd+0x84>)
 8008a4e:	480d      	ldr	r0, [pc, #52]	; (8008a84 <__multadd+0x88>)
 8008a50:	21b5      	movs	r1, #181	; 0xb5
 8008a52:	f000 ff4f 	bl	80098f4 <__assert_func>
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	3202      	adds	r2, #2
 8008a5a:	f104 010c 	add.w	r1, r4, #12
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	300c      	adds	r0, #12
 8008a62:	f7ff ff5b 	bl	800891c <memcpy>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff ffa5 	bl	80089b8 <_Bfree>
 8008a6e:	4644      	mov	r4, r8
 8008a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a74:	3501      	adds	r5, #1
 8008a76:	615e      	str	r6, [r3, #20]
 8008a78:	6125      	str	r5, [r4, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	08009edf 	.word	0x08009edf
 8008a84:	08009f50 	.word	0x08009f50

08008a88 <__hi0bits>:
 8008a88:	0c03      	lsrs	r3, r0, #16
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	b9d3      	cbnz	r3, 8008ac4 <__hi0bits+0x3c>
 8008a8e:	0400      	lsls	r0, r0, #16
 8008a90:	2310      	movs	r3, #16
 8008a92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a96:	bf04      	itt	eq
 8008a98:	0200      	lsleq	r0, r0, #8
 8008a9a:	3308      	addeq	r3, #8
 8008a9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008aa0:	bf04      	itt	eq
 8008aa2:	0100      	lsleq	r0, r0, #4
 8008aa4:	3304      	addeq	r3, #4
 8008aa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008aaa:	bf04      	itt	eq
 8008aac:	0080      	lsleq	r0, r0, #2
 8008aae:	3302      	addeq	r3, #2
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	db05      	blt.n	8008ac0 <__hi0bits+0x38>
 8008ab4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ab8:	f103 0301 	add.w	r3, r3, #1
 8008abc:	bf08      	it	eq
 8008abe:	2320      	moveq	r3, #32
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	4770      	bx	lr
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e7e4      	b.n	8008a92 <__hi0bits+0xa>

08008ac8 <__lo0bits>:
 8008ac8:	6803      	ldr	r3, [r0, #0]
 8008aca:	f013 0207 	ands.w	r2, r3, #7
 8008ace:	4601      	mov	r1, r0
 8008ad0:	d00b      	beq.n	8008aea <__lo0bits+0x22>
 8008ad2:	07da      	lsls	r2, r3, #31
 8008ad4:	d423      	bmi.n	8008b1e <__lo0bits+0x56>
 8008ad6:	0798      	lsls	r0, r3, #30
 8008ad8:	bf49      	itett	mi
 8008ada:	085b      	lsrmi	r3, r3, #1
 8008adc:	089b      	lsrpl	r3, r3, #2
 8008ade:	2001      	movmi	r0, #1
 8008ae0:	600b      	strmi	r3, [r1, #0]
 8008ae2:	bf5c      	itt	pl
 8008ae4:	600b      	strpl	r3, [r1, #0]
 8008ae6:	2002      	movpl	r0, #2
 8008ae8:	4770      	bx	lr
 8008aea:	b298      	uxth	r0, r3
 8008aec:	b9a8      	cbnz	r0, 8008b1a <__lo0bits+0x52>
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	2010      	movs	r0, #16
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	b90a      	cbnz	r2, 8008afa <__lo0bits+0x32>
 8008af6:	3008      	adds	r0, #8
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	071a      	lsls	r2, r3, #28
 8008afc:	bf04      	itt	eq
 8008afe:	091b      	lsreq	r3, r3, #4
 8008b00:	3004      	addeq	r0, #4
 8008b02:	079a      	lsls	r2, r3, #30
 8008b04:	bf04      	itt	eq
 8008b06:	089b      	lsreq	r3, r3, #2
 8008b08:	3002      	addeq	r0, #2
 8008b0a:	07da      	lsls	r2, r3, #31
 8008b0c:	d403      	bmi.n	8008b16 <__lo0bits+0x4e>
 8008b0e:	085b      	lsrs	r3, r3, #1
 8008b10:	f100 0001 	add.w	r0, r0, #1
 8008b14:	d005      	beq.n	8008b22 <__lo0bits+0x5a>
 8008b16:	600b      	str	r3, [r1, #0]
 8008b18:	4770      	bx	lr
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	e7e9      	b.n	8008af2 <__lo0bits+0x2a>
 8008b1e:	2000      	movs	r0, #0
 8008b20:	4770      	bx	lr
 8008b22:	2020      	movs	r0, #32
 8008b24:	4770      	bx	lr
	...

08008b28 <__i2b>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	f7ff ff03 	bl	8008938 <_Balloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	b928      	cbnz	r0, 8008b42 <__i2b+0x1a>
 8008b36:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <__i2b+0x24>)
 8008b38:	4805      	ldr	r0, [pc, #20]	; (8008b50 <__i2b+0x28>)
 8008b3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b3e:	f000 fed9 	bl	80098f4 <__assert_func>
 8008b42:	2301      	movs	r3, #1
 8008b44:	6144      	str	r4, [r0, #20]
 8008b46:	6103      	str	r3, [r0, #16]
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	08009edf 	.word	0x08009edf
 8008b50:	08009f50 	.word	0x08009f50

08008b54 <__multiply>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	4691      	mov	r9, r2
 8008b5a:	690a      	ldr	r2, [r1, #16]
 8008b5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	bfb8      	it	lt
 8008b64:	460b      	movlt	r3, r1
 8008b66:	460c      	mov	r4, r1
 8008b68:	bfbc      	itt	lt
 8008b6a:	464c      	movlt	r4, r9
 8008b6c:	4699      	movlt	r9, r3
 8008b6e:	6927      	ldr	r7, [r4, #16]
 8008b70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b74:	68a3      	ldr	r3, [r4, #8]
 8008b76:	6861      	ldr	r1, [r4, #4]
 8008b78:	eb07 060a 	add.w	r6, r7, sl
 8008b7c:	42b3      	cmp	r3, r6
 8008b7e:	b085      	sub	sp, #20
 8008b80:	bfb8      	it	lt
 8008b82:	3101      	addlt	r1, #1
 8008b84:	f7ff fed8 	bl	8008938 <_Balloc>
 8008b88:	b930      	cbnz	r0, 8008b98 <__multiply+0x44>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b44      	ldr	r3, [pc, #272]	; (8008ca0 <__multiply+0x14c>)
 8008b8e:	4845      	ldr	r0, [pc, #276]	; (8008ca4 <__multiply+0x150>)
 8008b90:	f240 115d 	movw	r1, #349	; 0x15d
 8008b94:	f000 feae 	bl	80098f4 <__assert_func>
 8008b98:	f100 0514 	add.w	r5, r0, #20
 8008b9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ba0:	462b      	mov	r3, r5
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	d321      	bcc.n	8008bec <__multiply+0x98>
 8008ba8:	f104 0314 	add.w	r3, r4, #20
 8008bac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bb0:	f109 0314 	add.w	r3, r9, #20
 8008bb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bb8:	9202      	str	r2, [sp, #8]
 8008bba:	1b3a      	subs	r2, r7, r4
 8008bbc:	3a15      	subs	r2, #21
 8008bbe:	f022 0203 	bic.w	r2, r2, #3
 8008bc2:	3204      	adds	r2, #4
 8008bc4:	f104 0115 	add.w	r1, r4, #21
 8008bc8:	428f      	cmp	r7, r1
 8008bca:	bf38      	it	cc
 8008bcc:	2204      	movcc	r2, #4
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	9a02      	ldr	r2, [sp, #8]
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d80c      	bhi.n	8008bf2 <__multiply+0x9e>
 8008bd8:	2e00      	cmp	r6, #0
 8008bda:	dd03      	ble.n	8008be4 <__multiply+0x90>
 8008bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d05a      	beq.n	8008c9a <__multiply+0x146>
 8008be4:	6106      	str	r6, [r0, #16]
 8008be6:	b005      	add	sp, #20
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	f843 2b04 	str.w	r2, [r3], #4
 8008bf0:	e7d8      	b.n	8008ba4 <__multiply+0x50>
 8008bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bf6:	f1ba 0f00 	cmp.w	sl, #0
 8008bfa:	d024      	beq.n	8008c46 <__multiply+0xf2>
 8008bfc:	f104 0e14 	add.w	lr, r4, #20
 8008c00:	46a9      	mov	r9, r5
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c0a:	f8d9 1000 	ldr.w	r1, [r9]
 8008c0e:	fa1f fb82 	uxth.w	fp, r2
 8008c12:	b289      	uxth	r1, r1
 8008c14:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c20:	4461      	add	r1, ip
 8008c22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c26:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c2e:	b289      	uxth	r1, r1
 8008c30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c34:	4577      	cmp	r7, lr
 8008c36:	f849 1b04 	str.w	r1, [r9], #4
 8008c3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c3e:	d8e2      	bhi.n	8008c06 <__multiply+0xb2>
 8008c40:	9a01      	ldr	r2, [sp, #4]
 8008c42:	f845 c002 	str.w	ip, [r5, r2]
 8008c46:	9a03      	ldr	r2, [sp, #12]
 8008c48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	f1b9 0f00 	cmp.w	r9, #0
 8008c52:	d020      	beq.n	8008c96 <__multiply+0x142>
 8008c54:	6829      	ldr	r1, [r5, #0]
 8008c56:	f104 0c14 	add.w	ip, r4, #20
 8008c5a:	46ae      	mov	lr, r5
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	f8bc b000 	ldrh.w	fp, [ip]
 8008c64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c68:	fb09 220b 	mla	r2, r9, fp, r2
 8008c6c:	4492      	add	sl, r2
 8008c6e:	b289      	uxth	r1, r1
 8008c70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c74:	f84e 1b04 	str.w	r1, [lr], #4
 8008c78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008c7c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c80:	0c12      	lsrs	r2, r2, #16
 8008c82:	fb09 1102 	mla	r1, r9, r2, r1
 8008c86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008c8a:	4567      	cmp	r7, ip
 8008c8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c90:	d8e6      	bhi.n	8008c60 <__multiply+0x10c>
 8008c92:	9a01      	ldr	r2, [sp, #4]
 8008c94:	50a9      	str	r1, [r5, r2]
 8008c96:	3504      	adds	r5, #4
 8008c98:	e79a      	b.n	8008bd0 <__multiply+0x7c>
 8008c9a:	3e01      	subs	r6, #1
 8008c9c:	e79c      	b.n	8008bd8 <__multiply+0x84>
 8008c9e:	bf00      	nop
 8008ca0:	08009edf 	.word	0x08009edf
 8008ca4:	08009f50 	.word	0x08009f50

08008ca8 <__pow5mult>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4615      	mov	r5, r2
 8008cae:	f012 0203 	ands.w	r2, r2, #3
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	d007      	beq.n	8008cc8 <__pow5mult+0x20>
 8008cb8:	4c25      	ldr	r4, [pc, #148]	; (8008d50 <__pow5mult+0xa8>)
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cc2:	f7ff fe9b 	bl	80089fc <__multadd>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	d03d      	beq.n	8008d48 <__pow5mult+0xa0>
 8008ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cce:	b97c      	cbnz	r4, 8008cf0 <__pow5mult+0x48>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7ff fe1b 	bl	800890c <malloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8008cda:	b928      	cbnz	r0, 8008ce8 <__pow5mult+0x40>
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <__pow5mult+0xac>)
 8008cde:	481e      	ldr	r0, [pc, #120]	; (8008d58 <__pow5mult+0xb0>)
 8008ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ce4:	f000 fe06 	bl	80098f4 <__assert_func>
 8008ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cec:	6004      	str	r4, [r0, #0]
 8008cee:	60c4      	str	r4, [r0, #12]
 8008cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf8:	b94c      	cbnz	r4, 8008d0e <__pow5mult+0x66>
 8008cfa:	f240 2171 	movw	r1, #625	; 0x271
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ff12 	bl	8008b28 <__i2b>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	07eb      	lsls	r3, r5, #31
 8008d14:	d50a      	bpl.n	8008d2c <__pow5mult+0x84>
 8008d16:	4639      	mov	r1, r7
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ff1a 	bl	8008b54 <__multiply>
 8008d20:	4639      	mov	r1, r7
 8008d22:	4680      	mov	r8, r0
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff fe47 	bl	80089b8 <_Bfree>
 8008d2a:	4647      	mov	r7, r8
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	d00b      	beq.n	8008d48 <__pow5mult+0xa0>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	b938      	cbnz	r0, 8008d44 <__pow5mult+0x9c>
 8008d34:	4622      	mov	r2, r4
 8008d36:	4621      	mov	r1, r4
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ff0b 	bl	8008b54 <__multiply>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f8c0 9000 	str.w	r9, [r0]
 8008d44:	4604      	mov	r4, r0
 8008d46:	e7e4      	b.n	8008d12 <__pow5mult+0x6a>
 8008d48:	4638      	mov	r0, r7
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	0800a0a0 	.word	0x0800a0a0
 8008d54:	08009e6d 	.word	0x08009e6d
 8008d58:	08009f50 	.word	0x08009f50

08008d5c <__lshift>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	6849      	ldr	r1, [r1, #4]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4691      	mov	r9, r2
 8008d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d74:	f108 0601 	add.w	r6, r8, #1
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	db0b      	blt.n	8008d94 <__lshift+0x38>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fddb 	bl	8008938 <_Balloc>
 8008d82:	4605      	mov	r5, r0
 8008d84:	b948      	cbnz	r0, 8008d9a <__lshift+0x3e>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b2a      	ldr	r3, [pc, #168]	; (8008e34 <__lshift+0xd8>)
 8008d8a:	482b      	ldr	r0, [pc, #172]	; (8008e38 <__lshift+0xdc>)
 8008d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d90:	f000 fdb0 	bl	80098f4 <__assert_func>
 8008d94:	3101      	adds	r1, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	e7ee      	b.n	8008d78 <__lshift+0x1c>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f100 0114 	add.w	r1, r0, #20
 8008da0:	f100 0210 	add.w	r2, r0, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	4553      	cmp	r3, sl
 8008da8:	db37      	blt.n	8008e1a <__lshift+0xbe>
 8008daa:	6920      	ldr	r0, [r4, #16]
 8008dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db0:	f104 0314 	add.w	r3, r4, #20
 8008db4:	f019 091f 	ands.w	r9, r9, #31
 8008db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008dc0:	d02f      	beq.n	8008e22 <__lshift+0xc6>
 8008dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008dc6:	468a      	mov	sl, r1
 8008dc8:	f04f 0c00 	mov.w	ip, #0
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	fa02 f209 	lsl.w	r2, r2, r9
 8008dd2:	ea42 020c 	orr.w	r2, r2, ip
 8008dd6:	f84a 2b04 	str.w	r2, [sl], #4
 8008dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dde:	4298      	cmp	r0, r3
 8008de0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008de4:	d8f2      	bhi.n	8008dcc <__lshift+0x70>
 8008de6:	1b03      	subs	r3, r0, r4
 8008de8:	3b15      	subs	r3, #21
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	3304      	adds	r3, #4
 8008df0:	f104 0215 	add.w	r2, r4, #21
 8008df4:	4290      	cmp	r0, r2
 8008df6:	bf38      	it	cc
 8008df8:	2304      	movcc	r3, #4
 8008dfa:	f841 c003 	str.w	ip, [r1, r3]
 8008dfe:	f1bc 0f00 	cmp.w	ip, #0
 8008e02:	d001      	beq.n	8008e08 <__lshift+0xac>
 8008e04:	f108 0602 	add.w	r6, r8, #2
 8008e08:	3e01      	subs	r6, #1
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	612e      	str	r6, [r5, #16]
 8008e0e:	4621      	mov	r1, r4
 8008e10:	f7ff fdd2 	bl	80089b8 <_Bfree>
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e1e:	3301      	adds	r3, #1
 8008e20:	e7c1      	b.n	8008da6 <__lshift+0x4a>
 8008e22:	3904      	subs	r1, #4
 8008e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e2c:	4298      	cmp	r0, r3
 8008e2e:	d8f9      	bhi.n	8008e24 <__lshift+0xc8>
 8008e30:	e7ea      	b.n	8008e08 <__lshift+0xac>
 8008e32:	bf00      	nop
 8008e34:	08009edf 	.word	0x08009edf
 8008e38:	08009f50 	.word	0x08009f50

08008e3c <__mcmp>:
 8008e3c:	b530      	push	{r4, r5, lr}
 8008e3e:	6902      	ldr	r2, [r0, #16]
 8008e40:	690c      	ldr	r4, [r1, #16]
 8008e42:	1b12      	subs	r2, r2, r4
 8008e44:	d10e      	bne.n	8008e64 <__mcmp+0x28>
 8008e46:	f100 0314 	add.w	r3, r0, #20
 8008e4a:	3114      	adds	r1, #20
 8008e4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e5c:	42a5      	cmp	r5, r4
 8008e5e:	d003      	beq.n	8008e68 <__mcmp+0x2c>
 8008e60:	d305      	bcc.n	8008e6e <__mcmp+0x32>
 8008e62:	2201      	movs	r2, #1
 8008e64:	4610      	mov	r0, r2
 8008e66:	bd30      	pop	{r4, r5, pc}
 8008e68:	4283      	cmp	r3, r0
 8008e6a:	d3f3      	bcc.n	8008e54 <__mcmp+0x18>
 8008e6c:	e7fa      	b.n	8008e64 <__mcmp+0x28>
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e72:	e7f7      	b.n	8008e64 <__mcmp+0x28>

08008e74 <__mdiff>:
 8008e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	460c      	mov	r4, r1
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4690      	mov	r8, r2
 8008e82:	f7ff ffdb 	bl	8008e3c <__mcmp>
 8008e86:	1e05      	subs	r5, r0, #0
 8008e88:	d110      	bne.n	8008eac <__mdiff+0x38>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff fd53 	bl	8008938 <_Balloc>
 8008e92:	b930      	cbnz	r0, 8008ea2 <__mdiff+0x2e>
 8008e94:	4b3a      	ldr	r3, [pc, #232]	; (8008f80 <__mdiff+0x10c>)
 8008e96:	4602      	mov	r2, r0
 8008e98:	f240 2132 	movw	r1, #562	; 0x232
 8008e9c:	4839      	ldr	r0, [pc, #228]	; (8008f84 <__mdiff+0x110>)
 8008e9e:	f000 fd29 	bl	80098f4 <__assert_func>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eac:	bfa4      	itt	ge
 8008eae:	4643      	movge	r3, r8
 8008eb0:	46a0      	movge	r8, r4
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008eb8:	bfa6      	itte	ge
 8008eba:	461c      	movge	r4, r3
 8008ebc:	2500      	movge	r5, #0
 8008ebe:	2501      	movlt	r5, #1
 8008ec0:	f7ff fd3a 	bl	8008938 <_Balloc>
 8008ec4:	b920      	cbnz	r0, 8008ed0 <__mdiff+0x5c>
 8008ec6:	4b2e      	ldr	r3, [pc, #184]	; (8008f80 <__mdiff+0x10c>)
 8008ec8:	4602      	mov	r2, r0
 8008eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ece:	e7e5      	b.n	8008e9c <__mdiff+0x28>
 8008ed0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ed4:	6926      	ldr	r6, [r4, #16]
 8008ed6:	60c5      	str	r5, [r0, #12]
 8008ed8:	f104 0914 	add.w	r9, r4, #20
 8008edc:	f108 0514 	add.w	r5, r8, #20
 8008ee0:	f100 0e14 	add.w	lr, r0, #20
 8008ee4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008eec:	f108 0210 	add.w	r2, r8, #16
 8008ef0:	46f2      	mov	sl, lr
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ef8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008efc:	fa1f f883 	uxth.w	r8, r3
 8008f00:	fa11 f18b 	uxtah	r1, r1, fp
 8008f04:	0c1b      	lsrs	r3, r3, #16
 8008f06:	eba1 0808 	sub.w	r8, r1, r8
 8008f0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f12:	fa1f f888 	uxth.w	r8, r8
 8008f16:	1419      	asrs	r1, r3, #16
 8008f18:	454e      	cmp	r6, r9
 8008f1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f1e:	f84a 3b04 	str.w	r3, [sl], #4
 8008f22:	d8e7      	bhi.n	8008ef4 <__mdiff+0x80>
 8008f24:	1b33      	subs	r3, r6, r4
 8008f26:	3b15      	subs	r3, #21
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	3415      	adds	r4, #21
 8008f30:	42a6      	cmp	r6, r4
 8008f32:	bf38      	it	cc
 8008f34:	2304      	movcc	r3, #4
 8008f36:	441d      	add	r5, r3
 8008f38:	4473      	add	r3, lr
 8008f3a:	469e      	mov	lr, r3
 8008f3c:	462e      	mov	r6, r5
 8008f3e:	4566      	cmp	r6, ip
 8008f40:	d30e      	bcc.n	8008f60 <__mdiff+0xec>
 8008f42:	f10c 0203 	add.w	r2, ip, #3
 8008f46:	1b52      	subs	r2, r2, r5
 8008f48:	f022 0203 	bic.w	r2, r2, #3
 8008f4c:	3d03      	subs	r5, #3
 8008f4e:	45ac      	cmp	ip, r5
 8008f50:	bf38      	it	cc
 8008f52:	2200      	movcc	r2, #0
 8008f54:	441a      	add	r2, r3
 8008f56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f5a:	b17b      	cbz	r3, 8008f7c <__mdiff+0x108>
 8008f5c:	6107      	str	r7, [r0, #16]
 8008f5e:	e7a3      	b.n	8008ea8 <__mdiff+0x34>
 8008f60:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f64:	fa11 f288 	uxtah	r2, r1, r8
 8008f68:	1414      	asrs	r4, r2, #16
 8008f6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f6e:	b292      	uxth	r2, r2
 8008f70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f74:	f84e 2b04 	str.w	r2, [lr], #4
 8008f78:	1421      	asrs	r1, r4, #16
 8008f7a:	e7e0      	b.n	8008f3e <__mdiff+0xca>
 8008f7c:	3f01      	subs	r7, #1
 8008f7e:	e7ea      	b.n	8008f56 <__mdiff+0xe2>
 8008f80:	08009edf 	.word	0x08009edf
 8008f84:	08009f50 	.word	0x08009f50

08008f88 <__d2b>:
 8008f88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	2101      	movs	r1, #1
 8008f90:	ec57 6b10 	vmov	r6, r7, d0
 8008f94:	4690      	mov	r8, r2
 8008f96:	f7ff fccf 	bl	8008938 <_Balloc>
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	b930      	cbnz	r0, 8008fac <__d2b+0x24>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	4b25      	ldr	r3, [pc, #148]	; (8009038 <__d2b+0xb0>)
 8008fa2:	4826      	ldr	r0, [pc, #152]	; (800903c <__d2b+0xb4>)
 8008fa4:	f240 310a 	movw	r1, #778	; 0x30a
 8008fa8:	f000 fca4 	bl	80098f4 <__assert_func>
 8008fac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fb4:	bb35      	cbnz	r5, 8009004 <__d2b+0x7c>
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	d028      	beq.n	800900e <__d2b+0x86>
 8008fbc:	4668      	mov	r0, sp
 8008fbe:	9600      	str	r6, [sp, #0]
 8008fc0:	f7ff fd82 	bl	8008ac8 <__lo0bits>
 8008fc4:	9900      	ldr	r1, [sp, #0]
 8008fc6:	b300      	cbz	r0, 800900a <__d2b+0x82>
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	f1c0 0320 	rsb	r3, r0, #32
 8008fce:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd2:	430b      	orrs	r3, r1
 8008fd4:	40c2      	lsrs	r2, r0
 8008fd6:	6163      	str	r3, [r4, #20]
 8008fd8:	9201      	str	r2, [sp, #4]
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	61a3      	str	r3, [r4, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bf14      	ite	ne
 8008fe2:	2202      	movne	r2, #2
 8008fe4:	2201      	moveq	r2, #1
 8008fe6:	6122      	str	r2, [r4, #16]
 8008fe8:	b1d5      	cbz	r5, 8009020 <__d2b+0x98>
 8008fea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fee:	4405      	add	r5, r0
 8008ff0:	f8c9 5000 	str.w	r5, [r9]
 8008ff4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ff8:	f8c8 0000 	str.w	r0, [r8]
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	b003      	add	sp, #12
 8009000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009008:	e7d5      	b.n	8008fb6 <__d2b+0x2e>
 800900a:	6161      	str	r1, [r4, #20]
 800900c:	e7e5      	b.n	8008fda <__d2b+0x52>
 800900e:	a801      	add	r0, sp, #4
 8009010:	f7ff fd5a 	bl	8008ac8 <__lo0bits>
 8009014:	9b01      	ldr	r3, [sp, #4]
 8009016:	6163      	str	r3, [r4, #20]
 8009018:	2201      	movs	r2, #1
 800901a:	6122      	str	r2, [r4, #16]
 800901c:	3020      	adds	r0, #32
 800901e:	e7e3      	b.n	8008fe8 <__d2b+0x60>
 8009020:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009024:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009028:	f8c9 0000 	str.w	r0, [r9]
 800902c:	6918      	ldr	r0, [r3, #16]
 800902e:	f7ff fd2b 	bl	8008a88 <__hi0bits>
 8009032:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009036:	e7df      	b.n	8008ff8 <__d2b+0x70>
 8009038:	08009edf 	.word	0x08009edf
 800903c:	08009f50 	.word	0x08009f50

08009040 <_calloc_r>:
 8009040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009042:	fba1 2402 	umull	r2, r4, r1, r2
 8009046:	b94c      	cbnz	r4, 800905c <_calloc_r+0x1c>
 8009048:	4611      	mov	r1, r2
 800904a:	9201      	str	r2, [sp, #4]
 800904c:	f000 f87a 	bl	8009144 <_malloc_r>
 8009050:	9a01      	ldr	r2, [sp, #4]
 8009052:	4605      	mov	r5, r0
 8009054:	b930      	cbnz	r0, 8009064 <_calloc_r+0x24>
 8009056:	4628      	mov	r0, r5
 8009058:	b003      	add	sp, #12
 800905a:	bd30      	pop	{r4, r5, pc}
 800905c:	220c      	movs	r2, #12
 800905e:	6002      	str	r2, [r0, #0]
 8009060:	2500      	movs	r5, #0
 8009062:	e7f8      	b.n	8009056 <_calloc_r+0x16>
 8009064:	4621      	mov	r1, r4
 8009066:	f7fd fdbb 	bl	8006be0 <memset>
 800906a:	e7f4      	b.n	8009056 <_calloc_r+0x16>

0800906c <_free_r>:
 800906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906e:	2900      	cmp	r1, #0
 8009070:	d044      	beq.n	80090fc <_free_r+0x90>
 8009072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009076:	9001      	str	r0, [sp, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	f1a1 0404 	sub.w	r4, r1, #4
 800907e:	bfb8      	it	lt
 8009080:	18e4      	addlt	r4, r4, r3
 8009082:	f000 fcd7 	bl	8009a34 <__malloc_lock>
 8009086:	4a1e      	ldr	r2, [pc, #120]	; (8009100 <_free_r+0x94>)
 8009088:	9801      	ldr	r0, [sp, #4]
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	b933      	cbnz	r3, 800909c <_free_r+0x30>
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	6014      	str	r4, [r2, #0]
 8009092:	b003      	add	sp, #12
 8009094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009098:	f000 bcd2 	b.w	8009a40 <__malloc_unlock>
 800909c:	42a3      	cmp	r3, r4
 800909e:	d908      	bls.n	80090b2 <_free_r+0x46>
 80090a0:	6825      	ldr	r5, [r4, #0]
 80090a2:	1961      	adds	r1, r4, r5
 80090a4:	428b      	cmp	r3, r1
 80090a6:	bf01      	itttt	eq
 80090a8:	6819      	ldreq	r1, [r3, #0]
 80090aa:	685b      	ldreq	r3, [r3, #4]
 80090ac:	1949      	addeq	r1, r1, r5
 80090ae:	6021      	streq	r1, [r4, #0]
 80090b0:	e7ed      	b.n	800908e <_free_r+0x22>
 80090b2:	461a      	mov	r2, r3
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	b10b      	cbz	r3, 80090bc <_free_r+0x50>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d9fa      	bls.n	80090b2 <_free_r+0x46>
 80090bc:	6811      	ldr	r1, [r2, #0]
 80090be:	1855      	adds	r5, r2, r1
 80090c0:	42a5      	cmp	r5, r4
 80090c2:	d10b      	bne.n	80090dc <_free_r+0x70>
 80090c4:	6824      	ldr	r4, [r4, #0]
 80090c6:	4421      	add	r1, r4
 80090c8:	1854      	adds	r4, r2, r1
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6011      	str	r1, [r2, #0]
 80090ce:	d1e0      	bne.n	8009092 <_free_r+0x26>
 80090d0:	681c      	ldr	r4, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	6053      	str	r3, [r2, #4]
 80090d6:	4421      	add	r1, r4
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	e7da      	b.n	8009092 <_free_r+0x26>
 80090dc:	d902      	bls.n	80090e4 <_free_r+0x78>
 80090de:	230c      	movs	r3, #12
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	e7d6      	b.n	8009092 <_free_r+0x26>
 80090e4:	6825      	ldr	r5, [r4, #0]
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	428b      	cmp	r3, r1
 80090ea:	bf04      	itt	eq
 80090ec:	6819      	ldreq	r1, [r3, #0]
 80090ee:	685b      	ldreq	r3, [r3, #4]
 80090f0:	6063      	str	r3, [r4, #4]
 80090f2:	bf04      	itt	eq
 80090f4:	1949      	addeq	r1, r1, r5
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	6054      	str	r4, [r2, #4]
 80090fa:	e7ca      	b.n	8009092 <_free_r+0x26>
 80090fc:	b003      	add	sp, #12
 80090fe:	bd30      	pop	{r4, r5, pc}
 8009100:	20000408 	.word	0x20000408

08009104 <sbrk_aligned>:
 8009104:	b570      	push	{r4, r5, r6, lr}
 8009106:	4e0e      	ldr	r6, [pc, #56]	; (8009140 <sbrk_aligned+0x3c>)
 8009108:	460c      	mov	r4, r1
 800910a:	6831      	ldr	r1, [r6, #0]
 800910c:	4605      	mov	r5, r0
 800910e:	b911      	cbnz	r1, 8009116 <sbrk_aligned+0x12>
 8009110:	f000 fb8a 	bl	8009828 <_sbrk_r>
 8009114:	6030      	str	r0, [r6, #0]
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 fb85 	bl	8009828 <_sbrk_r>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d00a      	beq.n	8009138 <sbrk_aligned+0x34>
 8009122:	1cc4      	adds	r4, r0, #3
 8009124:	f024 0403 	bic.w	r4, r4, #3
 8009128:	42a0      	cmp	r0, r4
 800912a:	d007      	beq.n	800913c <sbrk_aligned+0x38>
 800912c:	1a21      	subs	r1, r4, r0
 800912e:	4628      	mov	r0, r5
 8009130:	f000 fb7a 	bl	8009828 <_sbrk_r>
 8009134:	3001      	adds	r0, #1
 8009136:	d101      	bne.n	800913c <sbrk_aligned+0x38>
 8009138:	f04f 34ff 	mov.w	r4, #4294967295
 800913c:	4620      	mov	r0, r4
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	2000040c 	.word	0x2000040c

08009144 <_malloc_r>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	1ccd      	adds	r5, r1, #3
 800914a:	f025 0503 	bic.w	r5, r5, #3
 800914e:	3508      	adds	r5, #8
 8009150:	2d0c      	cmp	r5, #12
 8009152:	bf38      	it	cc
 8009154:	250c      	movcc	r5, #12
 8009156:	2d00      	cmp	r5, #0
 8009158:	4607      	mov	r7, r0
 800915a:	db01      	blt.n	8009160 <_malloc_r+0x1c>
 800915c:	42a9      	cmp	r1, r5
 800915e:	d905      	bls.n	800916c <_malloc_r+0x28>
 8009160:	230c      	movs	r3, #12
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	2600      	movs	r6, #0
 8009166:	4630      	mov	r0, r6
 8009168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800916c:	4e2e      	ldr	r6, [pc, #184]	; (8009228 <_malloc_r+0xe4>)
 800916e:	f000 fc61 	bl	8009a34 <__malloc_lock>
 8009172:	6833      	ldr	r3, [r6, #0]
 8009174:	461c      	mov	r4, r3
 8009176:	bb34      	cbnz	r4, 80091c6 <_malloc_r+0x82>
 8009178:	4629      	mov	r1, r5
 800917a:	4638      	mov	r0, r7
 800917c:	f7ff ffc2 	bl	8009104 <sbrk_aligned>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	4604      	mov	r4, r0
 8009184:	d14d      	bne.n	8009222 <_malloc_r+0xde>
 8009186:	6834      	ldr	r4, [r6, #0]
 8009188:	4626      	mov	r6, r4
 800918a:	2e00      	cmp	r6, #0
 800918c:	d140      	bne.n	8009210 <_malloc_r+0xcc>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	4631      	mov	r1, r6
 8009192:	4638      	mov	r0, r7
 8009194:	eb04 0803 	add.w	r8, r4, r3
 8009198:	f000 fb46 	bl	8009828 <_sbrk_r>
 800919c:	4580      	cmp	r8, r0
 800919e:	d13a      	bne.n	8009216 <_malloc_r+0xd2>
 80091a0:	6821      	ldr	r1, [r4, #0]
 80091a2:	3503      	adds	r5, #3
 80091a4:	1a6d      	subs	r5, r5, r1
 80091a6:	f025 0503 	bic.w	r5, r5, #3
 80091aa:	3508      	adds	r5, #8
 80091ac:	2d0c      	cmp	r5, #12
 80091ae:	bf38      	it	cc
 80091b0:	250c      	movcc	r5, #12
 80091b2:	4629      	mov	r1, r5
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7ff ffa5 	bl	8009104 <sbrk_aligned>
 80091ba:	3001      	adds	r0, #1
 80091bc:	d02b      	beq.n	8009216 <_malloc_r+0xd2>
 80091be:	6823      	ldr	r3, [r4, #0]
 80091c0:	442b      	add	r3, r5
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	e00e      	b.n	80091e4 <_malloc_r+0xa0>
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	1b52      	subs	r2, r2, r5
 80091ca:	d41e      	bmi.n	800920a <_malloc_r+0xc6>
 80091cc:	2a0b      	cmp	r2, #11
 80091ce:	d916      	bls.n	80091fe <_malloc_r+0xba>
 80091d0:	1961      	adds	r1, r4, r5
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	6025      	str	r5, [r4, #0]
 80091d6:	bf18      	it	ne
 80091d8:	6059      	strne	r1, [r3, #4]
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	bf08      	it	eq
 80091de:	6031      	streq	r1, [r6, #0]
 80091e0:	5162      	str	r2, [r4, r5]
 80091e2:	604b      	str	r3, [r1, #4]
 80091e4:	4638      	mov	r0, r7
 80091e6:	f104 060b 	add.w	r6, r4, #11
 80091ea:	f000 fc29 	bl	8009a40 <__malloc_unlock>
 80091ee:	f026 0607 	bic.w	r6, r6, #7
 80091f2:	1d23      	adds	r3, r4, #4
 80091f4:	1af2      	subs	r2, r6, r3
 80091f6:	d0b6      	beq.n	8009166 <_malloc_r+0x22>
 80091f8:	1b9b      	subs	r3, r3, r6
 80091fa:	50a3      	str	r3, [r4, r2]
 80091fc:	e7b3      	b.n	8009166 <_malloc_r+0x22>
 80091fe:	6862      	ldr	r2, [r4, #4]
 8009200:	42a3      	cmp	r3, r4
 8009202:	bf0c      	ite	eq
 8009204:	6032      	streq	r2, [r6, #0]
 8009206:	605a      	strne	r2, [r3, #4]
 8009208:	e7ec      	b.n	80091e4 <_malloc_r+0xa0>
 800920a:	4623      	mov	r3, r4
 800920c:	6864      	ldr	r4, [r4, #4]
 800920e:	e7b2      	b.n	8009176 <_malloc_r+0x32>
 8009210:	4634      	mov	r4, r6
 8009212:	6876      	ldr	r6, [r6, #4]
 8009214:	e7b9      	b.n	800918a <_malloc_r+0x46>
 8009216:	230c      	movs	r3, #12
 8009218:	603b      	str	r3, [r7, #0]
 800921a:	4638      	mov	r0, r7
 800921c:	f000 fc10 	bl	8009a40 <__malloc_unlock>
 8009220:	e7a1      	b.n	8009166 <_malloc_r+0x22>
 8009222:	6025      	str	r5, [r4, #0]
 8009224:	e7de      	b.n	80091e4 <_malloc_r+0xa0>
 8009226:	bf00      	nop
 8009228:	20000408 	.word	0x20000408

0800922c <__ssputs_r>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	688e      	ldr	r6, [r1, #8]
 8009232:	429e      	cmp	r6, r3
 8009234:	4682      	mov	sl, r0
 8009236:	460c      	mov	r4, r1
 8009238:	4690      	mov	r8, r2
 800923a:	461f      	mov	r7, r3
 800923c:	d838      	bhi.n	80092b0 <__ssputs_r+0x84>
 800923e:	898a      	ldrh	r2, [r1, #12]
 8009240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009244:	d032      	beq.n	80092ac <__ssputs_r+0x80>
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	6909      	ldr	r1, [r1, #16]
 800924a:	eba5 0901 	sub.w	r9, r5, r1
 800924e:	6965      	ldr	r5, [r4, #20]
 8009250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009258:	3301      	adds	r3, #1
 800925a:	444b      	add	r3, r9
 800925c:	106d      	asrs	r5, r5, #1
 800925e:	429d      	cmp	r5, r3
 8009260:	bf38      	it	cc
 8009262:	461d      	movcc	r5, r3
 8009264:	0553      	lsls	r3, r2, #21
 8009266:	d531      	bpl.n	80092cc <__ssputs_r+0xa0>
 8009268:	4629      	mov	r1, r5
 800926a:	f7ff ff6b 	bl	8009144 <_malloc_r>
 800926e:	4606      	mov	r6, r0
 8009270:	b950      	cbnz	r0, 8009288 <__ssputs_r+0x5c>
 8009272:	230c      	movs	r3, #12
 8009274:	f8ca 3000 	str.w	r3, [sl]
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	6921      	ldr	r1, [r4, #16]
 800928a:	464a      	mov	r2, r9
 800928c:	f7ff fb46 	bl	800891c <memcpy>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	6126      	str	r6, [r4, #16]
 800929e:	6165      	str	r5, [r4, #20]
 80092a0:	444e      	add	r6, r9
 80092a2:	eba5 0509 	sub.w	r5, r5, r9
 80092a6:	6026      	str	r6, [r4, #0]
 80092a8:	60a5      	str	r5, [r4, #8]
 80092aa:	463e      	mov	r6, r7
 80092ac:	42be      	cmp	r6, r7
 80092ae:	d900      	bls.n	80092b2 <__ssputs_r+0x86>
 80092b0:	463e      	mov	r6, r7
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	4632      	mov	r2, r6
 80092b6:	4641      	mov	r1, r8
 80092b8:	f000 fba2 	bl	8009a00 <memmove>
 80092bc:	68a3      	ldr	r3, [r4, #8]
 80092be:	1b9b      	subs	r3, r3, r6
 80092c0:	60a3      	str	r3, [r4, #8]
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	4433      	add	r3, r6
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	2000      	movs	r0, #0
 80092ca:	e7db      	b.n	8009284 <__ssputs_r+0x58>
 80092cc:	462a      	mov	r2, r5
 80092ce:	f000 fbbd 	bl	8009a4c <_realloc_r>
 80092d2:	4606      	mov	r6, r0
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1e1      	bne.n	800929c <__ssputs_r+0x70>
 80092d8:	6921      	ldr	r1, [r4, #16]
 80092da:	4650      	mov	r0, sl
 80092dc:	f7ff fec6 	bl	800906c <_free_r>
 80092e0:	e7c7      	b.n	8009272 <__ssputs_r+0x46>
	...

080092e4 <_svfiprintf_r>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4698      	mov	r8, r3
 80092ea:	898b      	ldrh	r3, [r1, #12]
 80092ec:	061b      	lsls	r3, r3, #24
 80092ee:	b09d      	sub	sp, #116	; 0x74
 80092f0:	4607      	mov	r7, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	4614      	mov	r4, r2
 80092f6:	d50e      	bpl.n	8009316 <_svfiprintf_r+0x32>
 80092f8:	690b      	ldr	r3, [r1, #16]
 80092fa:	b963      	cbnz	r3, 8009316 <_svfiprintf_r+0x32>
 80092fc:	2140      	movs	r1, #64	; 0x40
 80092fe:	f7ff ff21 	bl	8009144 <_malloc_r>
 8009302:	6028      	str	r0, [r5, #0]
 8009304:	6128      	str	r0, [r5, #16]
 8009306:	b920      	cbnz	r0, 8009312 <_svfiprintf_r+0x2e>
 8009308:	230c      	movs	r3, #12
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e0d1      	b.n	80094b6 <_svfiprintf_r+0x1d2>
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	616b      	str	r3, [r5, #20]
 8009316:	2300      	movs	r3, #0
 8009318:	9309      	str	r3, [sp, #36]	; 0x24
 800931a:	2320      	movs	r3, #32
 800931c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009320:	f8cd 800c 	str.w	r8, [sp, #12]
 8009324:	2330      	movs	r3, #48	; 0x30
 8009326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094d0 <_svfiprintf_r+0x1ec>
 800932a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800932e:	f04f 0901 	mov.w	r9, #1
 8009332:	4623      	mov	r3, r4
 8009334:	469a      	mov	sl, r3
 8009336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800933a:	b10a      	cbz	r2, 8009340 <_svfiprintf_r+0x5c>
 800933c:	2a25      	cmp	r2, #37	; 0x25
 800933e:	d1f9      	bne.n	8009334 <_svfiprintf_r+0x50>
 8009340:	ebba 0b04 	subs.w	fp, sl, r4
 8009344:	d00b      	beq.n	800935e <_svfiprintf_r+0x7a>
 8009346:	465b      	mov	r3, fp
 8009348:	4622      	mov	r2, r4
 800934a:	4629      	mov	r1, r5
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff ff6d 	bl	800922c <__ssputs_r>
 8009352:	3001      	adds	r0, #1
 8009354:	f000 80aa 	beq.w	80094ac <_svfiprintf_r+0x1c8>
 8009358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935a:	445a      	add	r2, fp
 800935c:	9209      	str	r2, [sp, #36]	; 0x24
 800935e:	f89a 3000 	ldrb.w	r3, [sl]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80a2 	beq.w	80094ac <_svfiprintf_r+0x1c8>
 8009368:	2300      	movs	r3, #0
 800936a:	f04f 32ff 	mov.w	r2, #4294967295
 800936e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009372:	f10a 0a01 	add.w	sl, sl, #1
 8009376:	9304      	str	r3, [sp, #16]
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800937e:	931a      	str	r3, [sp, #104]	; 0x68
 8009380:	4654      	mov	r4, sl
 8009382:	2205      	movs	r2, #5
 8009384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009388:	4851      	ldr	r0, [pc, #324]	; (80094d0 <_svfiprintf_r+0x1ec>)
 800938a:	f7f6 ff31 	bl	80001f0 <memchr>
 800938e:	9a04      	ldr	r2, [sp, #16]
 8009390:	b9d8      	cbnz	r0, 80093ca <_svfiprintf_r+0xe6>
 8009392:	06d0      	lsls	r0, r2, #27
 8009394:	bf44      	itt	mi
 8009396:	2320      	movmi	r3, #32
 8009398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800939c:	0711      	lsls	r1, r2, #28
 800939e:	bf44      	itt	mi
 80093a0:	232b      	movmi	r3, #43	; 0x2b
 80093a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a6:	f89a 3000 	ldrb.w	r3, [sl]
 80093aa:	2b2a      	cmp	r3, #42	; 0x2a
 80093ac:	d015      	beq.n	80093da <_svfiprintf_r+0xf6>
 80093ae:	9a07      	ldr	r2, [sp, #28]
 80093b0:	4654      	mov	r4, sl
 80093b2:	2000      	movs	r0, #0
 80093b4:	f04f 0c0a 	mov.w	ip, #10
 80093b8:	4621      	mov	r1, r4
 80093ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093be:	3b30      	subs	r3, #48	; 0x30
 80093c0:	2b09      	cmp	r3, #9
 80093c2:	d94e      	bls.n	8009462 <_svfiprintf_r+0x17e>
 80093c4:	b1b0      	cbz	r0, 80093f4 <_svfiprintf_r+0x110>
 80093c6:	9207      	str	r2, [sp, #28]
 80093c8:	e014      	b.n	80093f4 <_svfiprintf_r+0x110>
 80093ca:	eba0 0308 	sub.w	r3, r0, r8
 80093ce:	fa09 f303 	lsl.w	r3, r9, r3
 80093d2:	4313      	orrs	r3, r2
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	46a2      	mov	sl, r4
 80093d8:	e7d2      	b.n	8009380 <_svfiprintf_r+0x9c>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	1d19      	adds	r1, r3, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	9103      	str	r1, [sp, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfbb      	ittet	lt
 80093e6:	425b      	neglt	r3, r3
 80093e8:	f042 0202 	orrlt.w	r2, r2, #2
 80093ec:	9307      	strge	r3, [sp, #28]
 80093ee:	9307      	strlt	r3, [sp, #28]
 80093f0:	bfb8      	it	lt
 80093f2:	9204      	strlt	r2, [sp, #16]
 80093f4:	7823      	ldrb	r3, [r4, #0]
 80093f6:	2b2e      	cmp	r3, #46	; 0x2e
 80093f8:	d10c      	bne.n	8009414 <_svfiprintf_r+0x130>
 80093fa:	7863      	ldrb	r3, [r4, #1]
 80093fc:	2b2a      	cmp	r3, #42	; 0x2a
 80093fe:	d135      	bne.n	800946c <_svfiprintf_r+0x188>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	1d1a      	adds	r2, r3, #4
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	9203      	str	r2, [sp, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	bfb8      	it	lt
 800940c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009410:	3402      	adds	r4, #2
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094e0 <_svfiprintf_r+0x1fc>
 8009418:	7821      	ldrb	r1, [r4, #0]
 800941a:	2203      	movs	r2, #3
 800941c:	4650      	mov	r0, sl
 800941e:	f7f6 fee7 	bl	80001f0 <memchr>
 8009422:	b140      	cbz	r0, 8009436 <_svfiprintf_r+0x152>
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	eba0 000a 	sub.w	r0, r0, sl
 800942a:	fa03 f000 	lsl.w	r0, r3, r0
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	4303      	orrs	r3, r0
 8009432:	3401      	adds	r4, #1
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4826      	ldr	r0, [pc, #152]	; (80094d4 <_svfiprintf_r+0x1f0>)
 800943c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009440:	2206      	movs	r2, #6
 8009442:	f7f6 fed5 	bl	80001f0 <memchr>
 8009446:	2800      	cmp	r0, #0
 8009448:	d038      	beq.n	80094bc <_svfiprintf_r+0x1d8>
 800944a:	4b23      	ldr	r3, [pc, #140]	; (80094d8 <_svfiprintf_r+0x1f4>)
 800944c:	bb1b      	cbnz	r3, 8009496 <_svfiprintf_r+0x1b2>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	3307      	adds	r3, #7
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	3308      	adds	r3, #8
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	4433      	add	r3, r6
 800945e:	9309      	str	r3, [sp, #36]	; 0x24
 8009460:	e767      	b.n	8009332 <_svfiprintf_r+0x4e>
 8009462:	fb0c 3202 	mla	r2, ip, r2, r3
 8009466:	460c      	mov	r4, r1
 8009468:	2001      	movs	r0, #1
 800946a:	e7a5      	b.n	80093b8 <_svfiprintf_r+0xd4>
 800946c:	2300      	movs	r3, #0
 800946e:	3401      	adds	r4, #1
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	4619      	mov	r1, r3
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4620      	mov	r0, r4
 800947a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947e:	3a30      	subs	r2, #48	; 0x30
 8009480:	2a09      	cmp	r2, #9
 8009482:	d903      	bls.n	800948c <_svfiprintf_r+0x1a8>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c5      	beq.n	8009414 <_svfiprintf_r+0x130>
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	e7c3      	b.n	8009414 <_svfiprintf_r+0x130>
 800948c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	e7f0      	b.n	8009478 <_svfiprintf_r+0x194>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <_svfiprintf_r+0x1f8>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4638      	mov	r0, r7
 80094a2:	f7fd fc45 	bl	8006d30 <_printf_float>
 80094a6:	1c42      	adds	r2, r0, #1
 80094a8:	4606      	mov	r6, r0
 80094aa:	d1d6      	bne.n	800945a <_svfiprintf_r+0x176>
 80094ac:	89ab      	ldrh	r3, [r5, #12]
 80094ae:	065b      	lsls	r3, r3, #25
 80094b0:	f53f af2c 	bmi.w	800930c <_svfiprintf_r+0x28>
 80094b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b6:	b01d      	add	sp, #116	; 0x74
 80094b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <_svfiprintf_r+0x1f8>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4638      	mov	r0, r7
 80094c8:	f7fd fed6 	bl	8007278 <_printf_i>
 80094cc:	e7eb      	b.n	80094a6 <_svfiprintf_r+0x1c2>
 80094ce:	bf00      	nop
 80094d0:	0800a0ac 	.word	0x0800a0ac
 80094d4:	0800a0b6 	.word	0x0800a0b6
 80094d8:	08006d31 	.word	0x08006d31
 80094dc:	0800922d 	.word	0x0800922d
 80094e0:	0800a0b2 	.word	0x0800a0b2

080094e4 <__sfputc_r>:
 80094e4:	6893      	ldr	r3, [r2, #8]
 80094e6:	3b01      	subs	r3, #1
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	b410      	push	{r4}
 80094ec:	6093      	str	r3, [r2, #8]
 80094ee:	da08      	bge.n	8009502 <__sfputc_r+0x1e>
 80094f0:	6994      	ldr	r4, [r2, #24]
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	db01      	blt.n	80094fa <__sfputc_r+0x16>
 80094f6:	290a      	cmp	r1, #10
 80094f8:	d103      	bne.n	8009502 <__sfputc_r+0x1e>
 80094fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fe:	f7fe b8a5 	b.w	800764c <__swbuf_r>
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	1c58      	adds	r0, r3, #1
 8009506:	6010      	str	r0, [r2, #0]
 8009508:	7019      	strb	r1, [r3, #0]
 800950a:	4608      	mov	r0, r1
 800950c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009510:	4770      	bx	lr

08009512 <__sfputs_r>:
 8009512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009514:	4606      	mov	r6, r0
 8009516:	460f      	mov	r7, r1
 8009518:	4614      	mov	r4, r2
 800951a:	18d5      	adds	r5, r2, r3
 800951c:	42ac      	cmp	r4, r5
 800951e:	d101      	bne.n	8009524 <__sfputs_r+0x12>
 8009520:	2000      	movs	r0, #0
 8009522:	e007      	b.n	8009534 <__sfputs_r+0x22>
 8009524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009528:	463a      	mov	r2, r7
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff ffda 	bl	80094e4 <__sfputc_r>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d1f3      	bne.n	800951c <__sfputs_r+0xa>
 8009534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009538 <_vfiprintf_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	460d      	mov	r5, r1
 800953e:	b09d      	sub	sp, #116	; 0x74
 8009540:	4614      	mov	r4, r2
 8009542:	4698      	mov	r8, r3
 8009544:	4606      	mov	r6, r0
 8009546:	b118      	cbz	r0, 8009550 <_vfiprintf_r+0x18>
 8009548:	6983      	ldr	r3, [r0, #24]
 800954a:	b90b      	cbnz	r3, 8009550 <_vfiprintf_r+0x18>
 800954c:	f7ff f8d4 	bl	80086f8 <__sinit>
 8009550:	4b89      	ldr	r3, [pc, #548]	; (8009778 <_vfiprintf_r+0x240>)
 8009552:	429d      	cmp	r5, r3
 8009554:	d11b      	bne.n	800958e <_vfiprintf_r+0x56>
 8009556:	6875      	ldr	r5, [r6, #4]
 8009558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d405      	bmi.n	800956a <_vfiprintf_r+0x32>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	059a      	lsls	r2, r3, #22
 8009562:	d402      	bmi.n	800956a <_vfiprintf_r+0x32>
 8009564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009566:	f7ff f96a 	bl	800883e <__retarget_lock_acquire_recursive>
 800956a:	89ab      	ldrh	r3, [r5, #12]
 800956c:	071b      	lsls	r3, r3, #28
 800956e:	d501      	bpl.n	8009574 <_vfiprintf_r+0x3c>
 8009570:	692b      	ldr	r3, [r5, #16]
 8009572:	b9eb      	cbnz	r3, 80095b0 <_vfiprintf_r+0x78>
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f7fe f8ba 	bl	80076f0 <__swsetup_r>
 800957c:	b1c0      	cbz	r0, 80095b0 <_vfiprintf_r+0x78>
 800957e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009580:	07dc      	lsls	r4, r3, #31
 8009582:	d50e      	bpl.n	80095a2 <_vfiprintf_r+0x6a>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	b01d      	add	sp, #116	; 0x74
 800958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958e:	4b7b      	ldr	r3, [pc, #492]	; (800977c <_vfiprintf_r+0x244>)
 8009590:	429d      	cmp	r5, r3
 8009592:	d101      	bne.n	8009598 <_vfiprintf_r+0x60>
 8009594:	68b5      	ldr	r5, [r6, #8]
 8009596:	e7df      	b.n	8009558 <_vfiprintf_r+0x20>
 8009598:	4b79      	ldr	r3, [pc, #484]	; (8009780 <_vfiprintf_r+0x248>)
 800959a:	429d      	cmp	r5, r3
 800959c:	bf08      	it	eq
 800959e:	68f5      	ldreq	r5, [r6, #12]
 80095a0:	e7da      	b.n	8009558 <_vfiprintf_r+0x20>
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	0598      	lsls	r0, r3, #22
 80095a6:	d4ed      	bmi.n	8009584 <_vfiprintf_r+0x4c>
 80095a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095aa:	f7ff f949 	bl	8008840 <__retarget_lock_release_recursive>
 80095ae:	e7e9      	b.n	8009584 <_vfiprintf_r+0x4c>
 80095b0:	2300      	movs	r3, #0
 80095b2:	9309      	str	r3, [sp, #36]	; 0x24
 80095b4:	2320      	movs	r3, #32
 80095b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80095be:	2330      	movs	r3, #48	; 0x30
 80095c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009784 <_vfiprintf_r+0x24c>
 80095c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095c8:	f04f 0901 	mov.w	r9, #1
 80095cc:	4623      	mov	r3, r4
 80095ce:	469a      	mov	sl, r3
 80095d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d4:	b10a      	cbz	r2, 80095da <_vfiprintf_r+0xa2>
 80095d6:	2a25      	cmp	r2, #37	; 0x25
 80095d8:	d1f9      	bne.n	80095ce <_vfiprintf_r+0x96>
 80095da:	ebba 0b04 	subs.w	fp, sl, r4
 80095de:	d00b      	beq.n	80095f8 <_vfiprintf_r+0xc0>
 80095e0:	465b      	mov	r3, fp
 80095e2:	4622      	mov	r2, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	4630      	mov	r0, r6
 80095e8:	f7ff ff93 	bl	8009512 <__sfputs_r>
 80095ec:	3001      	adds	r0, #1
 80095ee:	f000 80aa 	beq.w	8009746 <_vfiprintf_r+0x20e>
 80095f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f4:	445a      	add	r2, fp
 80095f6:	9209      	str	r2, [sp, #36]	; 0x24
 80095f8:	f89a 3000 	ldrb.w	r3, [sl]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 80a2 	beq.w	8009746 <_vfiprintf_r+0x20e>
 8009602:	2300      	movs	r3, #0
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800960c:	f10a 0a01 	add.w	sl, sl, #1
 8009610:	9304      	str	r3, [sp, #16]
 8009612:	9307      	str	r3, [sp, #28]
 8009614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009618:	931a      	str	r3, [sp, #104]	; 0x68
 800961a:	4654      	mov	r4, sl
 800961c:	2205      	movs	r2, #5
 800961e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009622:	4858      	ldr	r0, [pc, #352]	; (8009784 <_vfiprintf_r+0x24c>)
 8009624:	f7f6 fde4 	bl	80001f0 <memchr>
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	b9d8      	cbnz	r0, 8009664 <_vfiprintf_r+0x12c>
 800962c:	06d1      	lsls	r1, r2, #27
 800962e:	bf44      	itt	mi
 8009630:	2320      	movmi	r3, #32
 8009632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009636:	0713      	lsls	r3, r2, #28
 8009638:	bf44      	itt	mi
 800963a:	232b      	movmi	r3, #43	; 0x2b
 800963c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009640:	f89a 3000 	ldrb.w	r3, [sl]
 8009644:	2b2a      	cmp	r3, #42	; 0x2a
 8009646:	d015      	beq.n	8009674 <_vfiprintf_r+0x13c>
 8009648:	9a07      	ldr	r2, [sp, #28]
 800964a:	4654      	mov	r4, sl
 800964c:	2000      	movs	r0, #0
 800964e:	f04f 0c0a 	mov.w	ip, #10
 8009652:	4621      	mov	r1, r4
 8009654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009658:	3b30      	subs	r3, #48	; 0x30
 800965a:	2b09      	cmp	r3, #9
 800965c:	d94e      	bls.n	80096fc <_vfiprintf_r+0x1c4>
 800965e:	b1b0      	cbz	r0, 800968e <_vfiprintf_r+0x156>
 8009660:	9207      	str	r2, [sp, #28]
 8009662:	e014      	b.n	800968e <_vfiprintf_r+0x156>
 8009664:	eba0 0308 	sub.w	r3, r0, r8
 8009668:	fa09 f303 	lsl.w	r3, r9, r3
 800966c:	4313      	orrs	r3, r2
 800966e:	9304      	str	r3, [sp, #16]
 8009670:	46a2      	mov	sl, r4
 8009672:	e7d2      	b.n	800961a <_vfiprintf_r+0xe2>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	1d19      	adds	r1, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	9103      	str	r1, [sp, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfbb      	ittet	lt
 8009680:	425b      	neglt	r3, r3
 8009682:	f042 0202 	orrlt.w	r2, r2, #2
 8009686:	9307      	strge	r3, [sp, #28]
 8009688:	9307      	strlt	r3, [sp, #28]
 800968a:	bfb8      	it	lt
 800968c:	9204      	strlt	r2, [sp, #16]
 800968e:	7823      	ldrb	r3, [r4, #0]
 8009690:	2b2e      	cmp	r3, #46	; 0x2e
 8009692:	d10c      	bne.n	80096ae <_vfiprintf_r+0x176>
 8009694:	7863      	ldrb	r3, [r4, #1]
 8009696:	2b2a      	cmp	r3, #42	; 0x2a
 8009698:	d135      	bne.n	8009706 <_vfiprintf_r+0x1ce>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	1d1a      	adds	r2, r3, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	9203      	str	r2, [sp, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bfb8      	it	lt
 80096a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80096aa:	3402      	adds	r4, #2
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009794 <_vfiprintf_r+0x25c>
 80096b2:	7821      	ldrb	r1, [r4, #0]
 80096b4:	2203      	movs	r2, #3
 80096b6:	4650      	mov	r0, sl
 80096b8:	f7f6 fd9a 	bl	80001f0 <memchr>
 80096bc:	b140      	cbz	r0, 80096d0 <_vfiprintf_r+0x198>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	eba0 000a 	sub.w	r0, r0, sl
 80096c4:	fa03 f000 	lsl.w	r0, r3, r0
 80096c8:	9b04      	ldr	r3, [sp, #16]
 80096ca:	4303      	orrs	r3, r0
 80096cc:	3401      	adds	r4, #1
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d4:	482c      	ldr	r0, [pc, #176]	; (8009788 <_vfiprintf_r+0x250>)
 80096d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096da:	2206      	movs	r2, #6
 80096dc:	f7f6 fd88 	bl	80001f0 <memchr>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d03f      	beq.n	8009764 <_vfiprintf_r+0x22c>
 80096e4:	4b29      	ldr	r3, [pc, #164]	; (800978c <_vfiprintf_r+0x254>)
 80096e6:	bb1b      	cbnz	r3, 8009730 <_vfiprintf_r+0x1f8>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	3307      	adds	r3, #7
 80096ec:	f023 0307 	bic.w	r3, r3, #7
 80096f0:	3308      	adds	r3, #8
 80096f2:	9303      	str	r3, [sp, #12]
 80096f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f6:	443b      	add	r3, r7
 80096f8:	9309      	str	r3, [sp, #36]	; 0x24
 80096fa:	e767      	b.n	80095cc <_vfiprintf_r+0x94>
 80096fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009700:	460c      	mov	r4, r1
 8009702:	2001      	movs	r0, #1
 8009704:	e7a5      	b.n	8009652 <_vfiprintf_r+0x11a>
 8009706:	2300      	movs	r3, #0
 8009708:	3401      	adds	r4, #1
 800970a:	9305      	str	r3, [sp, #20]
 800970c:	4619      	mov	r1, r3
 800970e:	f04f 0c0a 	mov.w	ip, #10
 8009712:	4620      	mov	r0, r4
 8009714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009718:	3a30      	subs	r2, #48	; 0x30
 800971a:	2a09      	cmp	r2, #9
 800971c:	d903      	bls.n	8009726 <_vfiprintf_r+0x1ee>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0c5      	beq.n	80096ae <_vfiprintf_r+0x176>
 8009722:	9105      	str	r1, [sp, #20]
 8009724:	e7c3      	b.n	80096ae <_vfiprintf_r+0x176>
 8009726:	fb0c 2101 	mla	r1, ip, r1, r2
 800972a:	4604      	mov	r4, r0
 800972c:	2301      	movs	r3, #1
 800972e:	e7f0      	b.n	8009712 <_vfiprintf_r+0x1da>
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <_vfiprintf_r+0x258>)
 8009738:	a904      	add	r1, sp, #16
 800973a:	4630      	mov	r0, r6
 800973c:	f7fd faf8 	bl	8006d30 <_printf_float>
 8009740:	4607      	mov	r7, r0
 8009742:	1c78      	adds	r0, r7, #1
 8009744:	d1d6      	bne.n	80096f4 <_vfiprintf_r+0x1bc>
 8009746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009748:	07d9      	lsls	r1, r3, #31
 800974a:	d405      	bmi.n	8009758 <_vfiprintf_r+0x220>
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	059a      	lsls	r2, r3, #22
 8009750:	d402      	bmi.n	8009758 <_vfiprintf_r+0x220>
 8009752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009754:	f7ff f874 	bl	8008840 <__retarget_lock_release_recursive>
 8009758:	89ab      	ldrh	r3, [r5, #12]
 800975a:	065b      	lsls	r3, r3, #25
 800975c:	f53f af12 	bmi.w	8009584 <_vfiprintf_r+0x4c>
 8009760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009762:	e711      	b.n	8009588 <_vfiprintf_r+0x50>
 8009764:	ab03      	add	r3, sp, #12
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	462a      	mov	r2, r5
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <_vfiprintf_r+0x258>)
 800976c:	a904      	add	r1, sp, #16
 800976e:	4630      	mov	r0, r6
 8009770:	f7fd fd82 	bl	8007278 <_printf_i>
 8009774:	e7e4      	b.n	8009740 <_vfiprintf_r+0x208>
 8009776:	bf00      	nop
 8009778:	08009f10 	.word	0x08009f10
 800977c:	08009f30 	.word	0x08009f30
 8009780:	08009ef0 	.word	0x08009ef0
 8009784:	0800a0ac 	.word	0x0800a0ac
 8009788:	0800a0b6 	.word	0x0800a0b6
 800978c:	08006d31 	.word	0x08006d31
 8009790:	08009513 	.word	0x08009513
 8009794:	0800a0b2 	.word	0x0800a0b2

08009798 <_putc_r>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	460d      	mov	r5, r1
 800979c:	4614      	mov	r4, r2
 800979e:	4606      	mov	r6, r0
 80097a0:	b118      	cbz	r0, 80097aa <_putc_r+0x12>
 80097a2:	6983      	ldr	r3, [r0, #24]
 80097a4:	b90b      	cbnz	r3, 80097aa <_putc_r+0x12>
 80097a6:	f7fe ffa7 	bl	80086f8 <__sinit>
 80097aa:	4b1c      	ldr	r3, [pc, #112]	; (800981c <_putc_r+0x84>)
 80097ac:	429c      	cmp	r4, r3
 80097ae:	d124      	bne.n	80097fa <_putc_r+0x62>
 80097b0:	6874      	ldr	r4, [r6, #4]
 80097b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b4:	07d8      	lsls	r0, r3, #31
 80097b6:	d405      	bmi.n	80097c4 <_putc_r+0x2c>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	0599      	lsls	r1, r3, #22
 80097bc:	d402      	bmi.n	80097c4 <_putc_r+0x2c>
 80097be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c0:	f7ff f83d 	bl	800883e <__retarget_lock_acquire_recursive>
 80097c4:	68a3      	ldr	r3, [r4, #8]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	da05      	bge.n	80097da <_putc_r+0x42>
 80097ce:	69a2      	ldr	r2, [r4, #24]
 80097d0:	4293      	cmp	r3, r2
 80097d2:	db1c      	blt.n	800980e <_putc_r+0x76>
 80097d4:	b2eb      	uxtb	r3, r5
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d019      	beq.n	800980e <_putc_r+0x76>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	701d      	strb	r5, [r3, #0]
 80097e2:	b2ed      	uxtb	r5, r5
 80097e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e6:	07da      	lsls	r2, r3, #31
 80097e8:	d405      	bmi.n	80097f6 <_putc_r+0x5e>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	059b      	lsls	r3, r3, #22
 80097ee:	d402      	bmi.n	80097f6 <_putc_r+0x5e>
 80097f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f2:	f7ff f825 	bl	8008840 <__retarget_lock_release_recursive>
 80097f6:	4628      	mov	r0, r5
 80097f8:	bd70      	pop	{r4, r5, r6, pc}
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <_putc_r+0x88>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	d101      	bne.n	8009804 <_putc_r+0x6c>
 8009800:	68b4      	ldr	r4, [r6, #8]
 8009802:	e7d6      	b.n	80097b2 <_putc_r+0x1a>
 8009804:	4b07      	ldr	r3, [pc, #28]	; (8009824 <_putc_r+0x8c>)
 8009806:	429c      	cmp	r4, r3
 8009808:	bf08      	it	eq
 800980a:	68f4      	ldreq	r4, [r6, #12]
 800980c:	e7d1      	b.n	80097b2 <_putc_r+0x1a>
 800980e:	4629      	mov	r1, r5
 8009810:	4622      	mov	r2, r4
 8009812:	4630      	mov	r0, r6
 8009814:	f7fd ff1a 	bl	800764c <__swbuf_r>
 8009818:	4605      	mov	r5, r0
 800981a:	e7e3      	b.n	80097e4 <_putc_r+0x4c>
 800981c:	08009f10 	.word	0x08009f10
 8009820:	08009f30 	.word	0x08009f30
 8009824:	08009ef0 	.word	0x08009ef0

08009828 <_sbrk_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d06      	ldr	r5, [pc, #24]	; (8009844 <_sbrk_r+0x1c>)
 800982c:	2300      	movs	r3, #0
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f7f9 fe0e 	bl	8003454 <_sbrk>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_sbrk_r+0x1a>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_sbrk_r+0x1a>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	20000410 	.word	0x20000410

08009848 <__sread>:
 8009848:	b510      	push	{r4, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009850:	f000 f92c 	bl	8009aac <_read_r>
 8009854:	2800      	cmp	r0, #0
 8009856:	bfab      	itete	ge
 8009858:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985a:	89a3      	ldrhlt	r3, [r4, #12]
 800985c:	181b      	addge	r3, r3, r0
 800985e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009862:	bfac      	ite	ge
 8009864:	6563      	strge	r3, [r4, #84]	; 0x54
 8009866:	81a3      	strhlt	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__swrite>:
 800986a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986e:	461f      	mov	r7, r3
 8009870:	898b      	ldrh	r3, [r1, #12]
 8009872:	05db      	lsls	r3, r3, #23
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	4616      	mov	r6, r2
 800987a:	d505      	bpl.n	8009888 <__swrite+0x1e>
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	2302      	movs	r3, #2
 8009882:	2200      	movs	r2, #0
 8009884:	f000 f898 	bl	80099b8 <_lseek_r>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800988e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	4628      	mov	r0, r5
 800989a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989e:	f000 b817 	b.w	80098d0 <_write_r>

080098a2 <__sseek>:
 80098a2:	b510      	push	{r4, lr}
 80098a4:	460c      	mov	r4, r1
 80098a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098aa:	f000 f885 	bl	80099b8 <_lseek_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	bf15      	itete	ne
 80098b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098be:	81a3      	strheq	r3, [r4, #12]
 80098c0:	bf18      	it	ne
 80098c2:	81a3      	strhne	r3, [r4, #12]
 80098c4:	bd10      	pop	{r4, pc}

080098c6 <__sclose>:
 80098c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ca:	f000 b831 	b.w	8009930 <_close_r>
	...

080098d0 <_write_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4d07      	ldr	r5, [pc, #28]	; (80098f0 <_write_r+0x20>)
 80098d4:	4604      	mov	r4, r0
 80098d6:	4608      	mov	r0, r1
 80098d8:	4611      	mov	r1, r2
 80098da:	2200      	movs	r2, #0
 80098dc:	602a      	str	r2, [r5, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	f7f9 fd67 	bl	80033b2 <_write>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_write_r+0x1e>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_write_r+0x1e>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20000410 	.word	0x20000410

080098f4 <__assert_func>:
 80098f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098f6:	4614      	mov	r4, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <__assert_func+0x2c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4605      	mov	r5, r0
 8009900:	68d8      	ldr	r0, [r3, #12]
 8009902:	b14c      	cbz	r4, 8009918 <__assert_func+0x24>
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <__assert_func+0x30>)
 8009906:	9100      	str	r1, [sp, #0]
 8009908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800990c:	4906      	ldr	r1, [pc, #24]	; (8009928 <__assert_func+0x34>)
 800990e:	462b      	mov	r3, r5
 8009910:	f000 f81e 	bl	8009950 <fiprintf>
 8009914:	f000 f8e9 	bl	8009aea <abort>
 8009918:	4b04      	ldr	r3, [pc, #16]	; (800992c <__assert_func+0x38>)
 800991a:	461c      	mov	r4, r3
 800991c:	e7f3      	b.n	8009906 <__assert_func+0x12>
 800991e:	bf00      	nop
 8009920:	20000014 	.word	0x20000014
 8009924:	0800a0bd 	.word	0x0800a0bd
 8009928:	0800a0ca 	.word	0x0800a0ca
 800992c:	0800a0f8 	.word	0x0800a0f8

08009930 <_close_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d06      	ldr	r5, [pc, #24]	; (800994c <_close_r+0x1c>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	602b      	str	r3, [r5, #0]
 800993c:	f7f9 fd55 	bl	80033ea <_close>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_close_r+0x1a>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_close_r+0x1a>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	20000410 	.word	0x20000410

08009950 <fiprintf>:
 8009950:	b40e      	push	{r1, r2, r3}
 8009952:	b503      	push	{r0, r1, lr}
 8009954:	4601      	mov	r1, r0
 8009956:	ab03      	add	r3, sp, #12
 8009958:	4805      	ldr	r0, [pc, #20]	; (8009970 <fiprintf+0x20>)
 800995a:	f853 2b04 	ldr.w	r2, [r3], #4
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	f7ff fde9 	bl	8009538 <_vfiprintf_r>
 8009966:	b002      	add	sp, #8
 8009968:	f85d eb04 	ldr.w	lr, [sp], #4
 800996c:	b003      	add	sp, #12
 800996e:	4770      	bx	lr
 8009970:	20000014 	.word	0x20000014

08009974 <_fstat_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	; (8009994 <_fstat_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	f7f9 fd3e 	bl	8003402 <_fstat>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_fstat_r+0x1c>
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	b103      	cbz	r3, 8009990 <_fstat_r+0x1c>
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	20000410 	.word	0x20000410

08009998 <_isatty_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d06      	ldr	r5, [pc, #24]	; (80099b4 <_isatty_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4604      	mov	r4, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	602b      	str	r3, [r5, #0]
 80099a4:	f7f9 fd3d 	bl	8003422 <_isatty>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_isatty_r+0x1a>
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_isatty_r+0x1a>
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	20000410 	.word	0x20000410

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7f9 fd36 	bl	8003438 <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000410 	.word	0x20000410

080099dc <__ascii_mbtowc>:
 80099dc:	b082      	sub	sp, #8
 80099de:	b901      	cbnz	r1, 80099e2 <__ascii_mbtowc+0x6>
 80099e0:	a901      	add	r1, sp, #4
 80099e2:	b142      	cbz	r2, 80099f6 <__ascii_mbtowc+0x1a>
 80099e4:	b14b      	cbz	r3, 80099fa <__ascii_mbtowc+0x1e>
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	600b      	str	r3, [r1, #0]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	1e10      	subs	r0, r2, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7fb      	b.n	80099f2 <__ascii_mbtowc+0x16>
 80099fa:	f06f 0001 	mvn.w	r0, #1
 80099fe:	e7f8      	b.n	80099f2 <__ascii_mbtowc+0x16>

08009a00 <memmove>:
 8009a00:	4288      	cmp	r0, r1
 8009a02:	b510      	push	{r4, lr}
 8009a04:	eb01 0402 	add.w	r4, r1, r2
 8009a08:	d902      	bls.n	8009a10 <memmove+0x10>
 8009a0a:	4284      	cmp	r4, r0
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	d807      	bhi.n	8009a20 <memmove+0x20>
 8009a10:	1e43      	subs	r3, r0, #1
 8009a12:	42a1      	cmp	r1, r4
 8009a14:	d008      	beq.n	8009a28 <memmove+0x28>
 8009a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a1e:	e7f8      	b.n	8009a12 <memmove+0x12>
 8009a20:	4402      	add	r2, r0
 8009a22:	4601      	mov	r1, r0
 8009a24:	428a      	cmp	r2, r1
 8009a26:	d100      	bne.n	8009a2a <memmove+0x2a>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a32:	e7f7      	b.n	8009a24 <memmove+0x24>

08009a34 <__malloc_lock>:
 8009a34:	4801      	ldr	r0, [pc, #4]	; (8009a3c <__malloc_lock+0x8>)
 8009a36:	f7fe bf02 	b.w	800883e <__retarget_lock_acquire_recursive>
 8009a3a:	bf00      	nop
 8009a3c:	20000404 	.word	0x20000404

08009a40 <__malloc_unlock>:
 8009a40:	4801      	ldr	r0, [pc, #4]	; (8009a48 <__malloc_unlock+0x8>)
 8009a42:	f7fe befd 	b.w	8008840 <__retarget_lock_release_recursive>
 8009a46:	bf00      	nop
 8009a48:	20000404 	.word	0x20000404

08009a4c <_realloc_r>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	4680      	mov	r8, r0
 8009a52:	4614      	mov	r4, r2
 8009a54:	460e      	mov	r6, r1
 8009a56:	b921      	cbnz	r1, 8009a62 <_realloc_r+0x16>
 8009a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	f7ff bb71 	b.w	8009144 <_malloc_r>
 8009a62:	b92a      	cbnz	r2, 8009a70 <_realloc_r+0x24>
 8009a64:	f7ff fb02 	bl	800906c <_free_r>
 8009a68:	4625      	mov	r5, r4
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a70:	f000 f842 	bl	8009af8 <_malloc_usable_size_r>
 8009a74:	4284      	cmp	r4, r0
 8009a76:	4607      	mov	r7, r0
 8009a78:	d802      	bhi.n	8009a80 <_realloc_r+0x34>
 8009a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a7e:	d812      	bhi.n	8009aa6 <_realloc_r+0x5a>
 8009a80:	4621      	mov	r1, r4
 8009a82:	4640      	mov	r0, r8
 8009a84:	f7ff fb5e 	bl	8009144 <_malloc_r>
 8009a88:	4605      	mov	r5, r0
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	d0ed      	beq.n	8009a6a <_realloc_r+0x1e>
 8009a8e:	42bc      	cmp	r4, r7
 8009a90:	4622      	mov	r2, r4
 8009a92:	4631      	mov	r1, r6
 8009a94:	bf28      	it	cs
 8009a96:	463a      	movcs	r2, r7
 8009a98:	f7fe ff40 	bl	800891c <memcpy>
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	f7ff fae4 	bl	800906c <_free_r>
 8009aa4:	e7e1      	b.n	8009a6a <_realloc_r+0x1e>
 8009aa6:	4635      	mov	r5, r6
 8009aa8:	e7df      	b.n	8009a6a <_realloc_r+0x1e>
	...

08009aac <_read_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	; (8009acc <_read_r+0x20>)
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	602a      	str	r2, [r5, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	f7f9 fc5c 	bl	8003378 <_read>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_read_r+0x1e>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_read_r+0x1e>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20000410 	.word	0x20000410

08009ad0 <__ascii_wctomb>:
 8009ad0:	b149      	cbz	r1, 8009ae6 <__ascii_wctomb+0x16>
 8009ad2:	2aff      	cmp	r2, #255	; 0xff
 8009ad4:	bf85      	ittet	hi
 8009ad6:	238a      	movhi	r3, #138	; 0x8a
 8009ad8:	6003      	strhi	r3, [r0, #0]
 8009ada:	700a      	strbls	r2, [r1, #0]
 8009adc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ae0:	bf98      	it	ls
 8009ae2:	2001      	movls	r0, #1
 8009ae4:	4770      	bx	lr
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	4770      	bx	lr

08009aea <abort>:
 8009aea:	b508      	push	{r3, lr}
 8009aec:	2006      	movs	r0, #6
 8009aee:	f000 f833 	bl	8009b58 <raise>
 8009af2:	2001      	movs	r0, #1
 8009af4:	f7f9 fc36 	bl	8003364 <_exit>

08009af8 <_malloc_usable_size_r>:
 8009af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afc:	1f18      	subs	r0, r3, #4
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	bfbc      	itt	lt
 8009b02:	580b      	ldrlt	r3, [r1, r0]
 8009b04:	18c0      	addlt	r0, r0, r3
 8009b06:	4770      	bx	lr

08009b08 <_raise_r>:
 8009b08:	291f      	cmp	r1, #31
 8009b0a:	b538      	push	{r3, r4, r5, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	d904      	bls.n	8009b1c <_raise_r+0x14>
 8009b12:	2316      	movs	r3, #22
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b1e:	b112      	cbz	r2, 8009b26 <_raise_r+0x1e>
 8009b20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b24:	b94b      	cbnz	r3, 8009b3a <_raise_r+0x32>
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 f830 	bl	8009b8c <_getpid_r>
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	4601      	mov	r1, r0
 8009b30:	4620      	mov	r0, r4
 8009b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b36:	f000 b817 	b.w	8009b68 <_kill_r>
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d00a      	beq.n	8009b54 <_raise_r+0x4c>
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	d103      	bne.n	8009b4a <_raise_r+0x42>
 8009b42:	2316      	movs	r3, #22
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7e7      	b.n	8009b1a <_raise_r+0x12>
 8009b4a:	2400      	movs	r4, #0
 8009b4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b50:	4628      	mov	r0, r5
 8009b52:	4798      	blx	r3
 8009b54:	2000      	movs	r0, #0
 8009b56:	e7e0      	b.n	8009b1a <_raise_r+0x12>

08009b58 <raise>:
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <raise+0xc>)
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	6818      	ldr	r0, [r3, #0]
 8009b5e:	f7ff bfd3 	b.w	8009b08 <_raise_r>
 8009b62:	bf00      	nop
 8009b64:	20000014 	.word	0x20000014

08009b68 <_kill_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_kill_r+0x20>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	f7f9 fbe5 	bl	8003344 <_kill>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d102      	bne.n	8009b84 <_kill_r+0x1c>
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	b103      	cbz	r3, 8009b84 <_kill_r+0x1c>
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
 8009b86:	bf00      	nop
 8009b88:	20000410 	.word	0x20000410

08009b8c <_getpid_r>:
 8009b8c:	f7f9 bbd2 	b.w	8003334 <_getpid>

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
