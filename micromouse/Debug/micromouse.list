
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080053f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080053f8  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed04  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002689  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  000313d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a02  00000000  00000000  00032e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121aa  00000000  00000000  0004a852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e306  00000000  00000000  0005c9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ead02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000ead54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053ac 	.word	0x080053ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080053ac 	.word	0x080053ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000d26:	2303      	movs	r3, #3
 8000d28:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e009      	b.n	8000d44 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f80c 	bl	8000d56 <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	7abb      	ldrb	r3, [r7, #10]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	ddf1      	ble.n	8000d30 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	460a      	mov	r2, r1
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	4613      	mov	r3, r2
 8000d64:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <turn_LED+0x1c>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <turn_LED+0x26>
 8000d70:	e008      	b.n	8000d84 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f809 	bl	8000d8c <turn_off_LED_color>
		return;
 8000d7a:	e003      	b.n	8000d84 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f824 	bl	8000dcc <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d811      	bhi.n	8000dc0 <turn_off_LED_color+0x34>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <turn_off_LED_color+0x18>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000dc1 	.word	0x08000dc1
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dc1 	.word	0x08000dc1
 8000db0:	08000db5 	.word	0x08000db5
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2120      	movs	r1, #32
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <turn_off_LED_color+0x3c>)
 8000dba:	f002 fadd 	bl	8003378 <HAL_GPIO_WritePin>
		return;
 8000dbe:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020000 	.word	0x40020000

08000dcc <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d811      	bhi.n	8000e00 <turn_on_LED_color+0x34>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <turn_on_LED_color+0x18>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000e01 	.word	0x08000e01
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e01 	.word	0x08000e01
 8000df0:	08000df5 	.word	0x08000df5
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <turn_on_LED_color+0x3c>)
 8000dfa:	f002 fabd 	bl	8003378 <HAL_GPIO_WritePin>
		return;
 8000dfe:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020000 	.word	0x40020000

08000e0c <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8000e12:	f001 fedd 	bl	8002bd0 <is_switch_on>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Test_Algo;  // TODO - Remove when not testing
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d00a      	beq.n	8000e3a <determine_algorithm+0x2e>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc0a      	bgt.n	8000e3e <determine_algorithm+0x32>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <determine_algorithm+0x26>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <determine_algorithm+0x2a>
 8000e30:	e005      	b.n	8000e3e <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e004      	b.n	8000e40 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e002      	b.n	8000e40 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e000      	b.n	8000e40 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8000e3e:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <do_search_algorithm>:

void do_search_algorithm(algorithm_type algo)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ff60 	bl	8000d18 <turn_LEDs_all>
	turn_LED(Red, On);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ff7b 	bl	8000d56 <turn_LED>
	turn_LED(Blue, On);
 8000e60:	2101      	movs	r1, #1
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff ff77 	bl	8000d56 <turn_LED>

	switch(algo)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d00c      	beq.n	8000e88 <do_search_algorithm+0x40>
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	dc0c      	bgt.n	8000e8c <do_search_algorithm+0x44>
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <do_search_algorithm+0x34>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d003      	beq.n	8000e82 <do_search_algorithm+0x3a>
 8000e7a:	e007      	b.n	8000e8c <do_search_algorithm+0x44>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 8000e7c:	f001 f8a2 	bl	8001fc4 <do_hug_left_algorithm>
		return;
 8000e80:	e004      	b.n	8000e8c <do_search_algorithm+0x44>
	case Flood_Fill_Algo:
		do_flood_fill_algorithm();
 8000e82:	f000 f815 	bl	8000eb0 <do_flood_fill_algorithm>
		return; // TODO
 8000e86:	e001      	b.n	8000e8c <do_search_algorithm+0x44>
	case Test_Algo:
		do_test_algorithm();
 8000e88:	f001 fed2 	bl	8002c30 <do_test_algorithm>
	}  // switch(algo)
}  // do_search_algorithm(algorithm_type algo)
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <complete_search_algorithm>:

void complete_search_algorithm()
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff3e 	bl	8000d18 <turn_LEDs_all>
	turn_LED(Red, On);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ff59 	bl	8000d56 <turn_LED>
	turn_LED(Green, On);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff ff55 	bl	8000d56 <turn_LED>
}  // complete_search_algorithm()
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <do_flood_fill_algorithm>:
#include "flood_fill.h"

void do_flood_fill_algorithm()
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000eb6:	af00      	add	r7, sp, #0
	// Initialize the maze
	flood_fill_maze maze;

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8000ebe:	e154      	b.n	800116a <do_flood_fill_algorithm+0x2ba>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 8000ec6:	e146      	b.n	8001156 <do_flood_fill_algorithm+0x2a6>
		{
			// Initialize distance grid
			if(i <= 7 && j <= 7) maze.distance_grid[i][j] = ((7 - i) + (7 - j));
 8000ec8:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000ecc:	2b07      	cmp	r3, #7
 8000ece:	d81c      	bhi.n	8000f0a <do_flood_fill_algorithm+0x5a>
 8000ed0:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d818      	bhi.n	8000f0a <do_flood_fill_algorithm+0x5a>
 8000ed8:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000edc:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2d9      	uxtb	r1, r3
 8000ee4:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000ee8:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000eec:	f1c1 010e 	rsb	r1, r1, #14
 8000ef0:	b2c8      	uxtb	r0, r1
 8000ef2:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000ef6:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	440a      	add	r2, r1
 8000efe:	4413      	add	r3, r2
 8000f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f04:	4602      	mov	r2, r0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e05e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i <= 7 && j > 7) maze.distance_grid[i][j] = ((7 - i) + (j - 8));
 8000f0a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	d81b      	bhi.n	8000f4a <do_flood_fill_algorithm+0x9a>
 8000f12:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d917      	bls.n	8000f4a <do_flood_fill_algorithm+0x9a>
 8000f1a:	f897 2816 	ldrb.w	r2, [r7, #2070]	; 0x816
 8000f1e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f2a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f2e:	3901      	subs	r1, #1
 8000f30:	b2c8      	uxtb	r0, r1
 8000f32:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000f36:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	440a      	add	r2, r1
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f44:	4602      	mov	r2, r0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e03e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j <= 7) maze.distance_grid[i][j] = ((i - 8) + (7 - j));
 8000f4a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d91b      	bls.n	8000f8a <do_flood_fill_algorithm+0xda>
 8000f52:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d817      	bhi.n	8000f8a <do_flood_fill_algorithm+0xda>
 8000f5a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f5e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b2d9      	uxtb	r1, r3
 8000f66:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f6a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f6e:	3901      	subs	r1, #1
 8000f70:	b2c8      	uxtb	r0, r1
 8000f72:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000f76:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	440a      	add	r2, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f84:	4602      	mov	r2, r0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e01e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j > 7) maze.distance_grid[i][j] = ((i - 8) + (j - 8));
 8000f8a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d91a      	bls.n	8000fc8 <do_flood_fill_algorithm+0x118>
 8000f92:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d916      	bls.n	8000fc8 <do_flood_fill_algorithm+0x118>
 8000f9a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f9e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2d9      	uxtb	r1, r3
 8000fa6:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000faa:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fae:	3910      	subs	r1, #16
 8000fb0:	b2c8      	uxtb	r0, r1
 8000fb2:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000fb6:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	440a      	add	r2, r1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	701a      	strb	r2, [r3, #0]

			// Initialize cell grid - assume no walls unless border by default
			maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 8000fc8:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8000fcc:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fd0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8000fd4:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8000fd8:	461a      	mov	r2, r3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	441a      	add	r2, r3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4403      	add	r3, r0
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 8000fee:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8000ff2:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ff6:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8000ffa:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8000ffe:	461a      	mov	r2, r3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	441a      	add	r2, r3
 8001004:	460b      	mov	r3, r1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	4403      	add	r3, r0
 8001010:	3301      	adds	r3, #1
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 8001016:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800101a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800101e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001022:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001026:	461a      	mov	r2, r3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	441a      	add	r2, r3
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	4403      	add	r3, r0
 8001038:	3302      	adds	r3, #2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 800103e:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8001042:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001046:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800104a:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800104e:	461a      	mov	r2, r3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	441a      	add	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	4403      	add	r3, r0
 8001060:	3303      	adds	r3, #3
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].visited = Is_Not_Visited;
 8001066:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800106a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800106e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001072:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001076:	461a      	mov	r2, r3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	441a      	add	r2, r3
 800107c:	460b      	mov	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	4403      	add	r3, r0
 8001088:	3304      	adds	r3, #4
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

			if(i == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 800108e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001092:	2b00      	cmp	r3, #0
 8001094:	d113      	bne.n	80010be <do_flood_fill_algorithm+0x20e>
 8001096:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800109a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800109e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80010a2:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80010a6:	461a      	mov	r2, r3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	441a      	add	r2, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	4403      	add	r3, r0
 80010b8:	3303      	adds	r3, #3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			if(j == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80010be:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d113      	bne.n	80010ee <do_flood_fill_algorithm+0x23e>
 80010c6:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80010ca:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010ce:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80010d2:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80010d6:	461a      	mov	r2, r3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	441a      	add	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	4403      	add	r3, r0
 80010e8:	3302      	adds	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
			if(i == MAP_SIZE - 1) maze.cell_grid[i][j].walls[East] = Wall_Here;
 80010ee:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d113      	bne.n	800111e <do_flood_fill_algorithm+0x26e>
 80010f6:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80010fa:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010fe:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001102:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001106:	461a      	mov	r2, r3
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	441a      	add	r2, r3
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	4403      	add	r3, r0
 8001118:	3301      	adds	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
			if(j == MAP_SIZE - 1) maze.cell_grid[i][j].walls[North] = Wall_Here;
 800111e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d112      	bne.n	800114c <do_flood_fill_algorithm+0x29c>
 8001126:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800112a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800112e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001132:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001136:	461a      	mov	r2, r3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	441a      	add	r2, r3
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	4403      	add	r3, r0
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800114c:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001150:	3301      	adds	r3, #1
 8001152:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 8001156:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f aeb4 	bls.w	8000ec8 <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001160:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001164:	3301      	adds	r3, #1
 8001166:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 800116a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea6 	bls.w	8000ec0 <do_flood_fill_algorithm+0x10>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
	maze_direction direction = desired_direction;  // the direction we're currently facing
 800117a:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 800117e:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);
 8001182:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd9c 	bl	8001cc8 <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we want to be in
 8001190:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001194:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001198:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800119c:	f2a2 620c 	subw	r2, r2, #1548	; 0x60c
 80011a0:	8812      	ldrh	r2, [r2, #0]
 80011a2:	801a      	strh	r2, [r3, #0]

	stack stack;

	while(1)
	{
		print_maze(&maze, c, direction);
 80011a4:	f897 2814 	ldrb.w	r2, [r7, #2068]	; 0x814
 80011a8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011ac:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011b0:	f507 7004 	add.w	r0, r7, #528	; 0x210
 80011b4:	6819      	ldr	r1, [r3, #0]
 80011b6:	f000 fd9b 	bl	8001cf0 <print_maze>
		switch(direction)
 80011ba:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d840      	bhi.n	8001244 <do_flood_fill_algorithm+0x394>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <do_flood_fill_algorithm+0x318>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	080011f7 	.word	0x080011f7
 80011d0:	08001211 	.word	0x08001211
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	08001245 	.word	0x08001245
		{
		case North:
			c.y += 1;
 80011dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011e0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011e4:	785b      	ldrb	r3, [r3, #1]
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011ee:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011f2:	705a      	strb	r2, [r3, #1]
			break;
 80011f4:	e026      	b.n	8001244 <do_flood_fill_algorithm+0x394>
		case East:
			c.x += 1;
 80011f6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011fa:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001208:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800120c:	701a      	strb	r2, [r3, #0]
			break;
 800120e:	e019      	b.n	8001244 <do_flood_fill_algorithm+0x394>
		case South:
			c.y -= 1;
 8001210:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001214:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	3b01      	subs	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001222:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001226:	705a      	strb	r2, [r3, #1]
			break;
 8001228:	e00c      	b.n	8001244 <do_flood_fill_algorithm+0x394>
		case West:
			c.x -= 1;
 800122a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800122e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800123c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001240:	701a      	strb	r2, [r3, #0]
			break;
 8001242:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)

		// Go forward one cell
		go_forward_one_unit();
 8001244:	f001 fa65 	bl	8002712 <go_forward_one_unit>
		// visiting_coord should now be the coordinate that we're on.

		if(!maze.cell_grid[c.x][c.y].visited)
 8001248:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800124c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001258:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	461c      	mov	r4, r3
 8001260:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001264:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 8001268:	4622      	mov	r2, r4
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4422      	add	r2, r4
 800126e:	4603      	mov	r3, r0
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4403      	add	r3, r0
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	440b      	add	r3, r1
 800127a:	3304      	adds	r3, #4
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 82a1 	bne.w	80017c6 <do_flood_fill_algorithm+0x916>
		{
			if(is_there_wall_on_direction(Left))
 8001284:	2000      	movs	r0, #0
 8001286:	f001 fd09 	bl	8002c9c <is_there_wall_on_direction>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80cc 	beq.w	800142a <do_flood_fill_algorithm+0x57a>
			{
				maze.cell_grid[c.x][c.y].walls[(direction - 1) % 4] = Wall_Here;
 8001292:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001296:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461c      	mov	r4, r3
 800129e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80012a2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	461d      	mov	r5, r3
 80012aa:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80012ae:	3b01      	subs	r3, #1
 80012b0:	425a      	negs	r2, r3
 80012b2:	f003 0103 	and.w	r1, r3, #3
 80012b6:	f002 0303 	and.w	r3, r2, #3
 80012ba:	bf58      	it	pl
 80012bc:	4259      	negpl	r1, r3
 80012be:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80012c2:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80012c6:	462a      	mov	r2, r5
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	442a      	add	r2, r5
 80012cc:	4623      	mov	r3, r4
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4423      	add	r3, r4
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	4403      	add	r3, r0
 80012d8:	440b      	add	r3, r1
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
				switch(direction)
 80012de:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	f200 8253 	bhi.w	800178e <do_flood_fill_algorithm+0x8de>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <do_flood_fill_algorithm+0x440>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001305 	.word	0x08001305
 80012f4:	0800134f 	.word	0x0800134f
 80012f8:	08001397 	.word	0x08001397
 80012fc:	080013e1 	.word	0x080013e1
 8001300:	0800178f 	.word	0x0800178f
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 8001304:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001308:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b0e      	cmp	r3, #14
 8001310:	f200 8224 	bhi.w	800175c <do_flood_fill_algorithm+0x8ac>
 8001314:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001318:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	1c59      	adds	r1, r3, #1
 8001320:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001324:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001328:	785b      	ldrb	r3, [r3, #1]
 800132a:	461c      	mov	r4, r3
 800132c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001330:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001334:	4622      	mov	r2, r4
 8001336:	0092      	lsls	r2, r2, #2
 8001338:	4422      	add	r2, r4
 800133a:	460b      	mov	r3, r1
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	4403      	add	r3, r0
 8001346:	3303      	adds	r3, #3
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
					break;
 800134c:	e206      	b.n	800175c <do_flood_fill_algorithm+0x8ac>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 800134e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001352:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 8201 	beq.w	8001760 <do_flood_fill_algorithm+0x8b0>
 800135e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001362:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800136e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001372:	785b      	ldrb	r3, [r3, #1]
 8001374:	3b01      	subs	r3, #1
 8001376:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800137a:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 800137e:	461a      	mov	r2, r3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	441a      	add	r2, r3
 8001384:	4603      	mov	r3, r0
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4403      	add	r3, r0
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	440b      	add	r3, r1
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
					break;
 8001394:	e1e4      	b.n	8001760 <do_flood_fill_algorithm+0x8b0>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001396:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800139a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 81df 	beq.w	8001764 <do_flood_fill_algorithm+0x8b4>
 80013a6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013aa:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	1e59      	subs	r1, r3, #1
 80013b2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013b6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	461c      	mov	r4, r3
 80013be:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013c2:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80013c6:	4622      	mov	r2, r4
 80013c8:	0092      	lsls	r2, r2, #2
 80013ca:	4422      	add	r2, r4
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4413      	add	r3, r2
 80013d6:	4403      	add	r3, r0
 80013d8:	3301      	adds	r3, #1
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
					break;
 80013de:	e1c1      	b.n	8001764 <do_flood_fill_algorithm+0x8b4>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 80013e0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013e4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	2b0e      	cmp	r3, #14
 80013ec:	f200 81bc 	bhi.w	8001768 <do_flood_fill_algorithm+0x8b8>
 80013f0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013f4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001400:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	3301      	adds	r3, #1
 8001408:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800140c:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001410:	461a      	mov	r2, r3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	441a      	add	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4403      	add	r3, r0
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	4413      	add	r3, r2
 8001420:	440b      	add	r3, r1
 8001422:	3302      	adds	r3, #2
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
					break;
 8001428:	e19e      	b.n	8001768 <do_flood_fill_algorithm+0x8b8>
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))
			else if(is_there_wall_on_direction(Front))
 800142a:	2001      	movs	r0, #1
 800142c:	f001 fc36 	bl	8002c9c <is_there_wall_on_direction>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80c3 	beq.w	80015be <do_flood_fill_algorithm+0x70e>
			{
				maze.cell_grid[c.x][c.y].walls[direction] = Wall_Here;
 8001438:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800143c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461c      	mov	r4, r3
 8001444:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001448:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	461d      	mov	r5, r3
 8001450:	f897 1814 	ldrb.w	r1, [r7, #2068]	; 0x814
 8001454:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001458:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800145c:	462a      	mov	r2, r5
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	442a      	add	r2, r5
 8001462:	4623      	mov	r3, r4
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4423      	add	r3, r4
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	4403      	add	r3, r0
 800146e:	440b      	add	r3, r1
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001474:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001478:	2b04      	cmp	r3, #4
 800147a:	f200 8188 	bhi.w	800178e <do_flood_fill_algorithm+0x8de>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <do_flood_fill_algorithm+0x5d4>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001499 	.word	0x08001499
 8001488:	080014e3 	.word	0x080014e3
 800148c:	0800152d 	.word	0x0800152d
 8001490:	08001575 	.word	0x08001575
 8001494:	0800178f 	.word	0x0800178f
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 8001498:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800149c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	2b0e      	cmp	r3, #14
 80014a4:	f200 8162 	bhi.w	800176c <do_flood_fill_algorithm+0x8bc>
 80014a8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014ac:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014b8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014bc:	785b      	ldrb	r3, [r3, #1]
 80014be:	3301      	adds	r3, #1
 80014c0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80014c4:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80014c8:	461a      	mov	r2, r3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	441a      	add	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4403      	add	r3, r0
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	440b      	add	r3, r1
 80014da:	3302      	adds	r3, #2
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
					break;
 80014e0:	e144      	b.n	800176c <do_flood_fill_algorithm+0x8bc>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 80014e2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014e6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b0e      	cmp	r3, #14
 80014ee:	f200 813f 	bhi.w	8001770 <do_flood_fill_algorithm+0x8c0>
 80014f2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014f6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	1c59      	adds	r1, r3, #1
 80014fe:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001502:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	461c      	mov	r4, r3
 800150a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800150e:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001512:	4622      	mov	r2, r4
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4422      	add	r2, r4
 8001518:	460b      	mov	r3, r1
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	4413      	add	r3, r2
 8001522:	4403      	add	r3, r0
 8001524:	3303      	adds	r3, #3
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
					break;
 800152a:	e121      	b.n	8001770 <do_flood_fill_algorithm+0x8c0>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 800152c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001530:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 811c 	beq.w	8001774 <do_flood_fill_algorithm+0x8c4>
 800153c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001540:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800154c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	3b01      	subs	r3, #1
 8001554:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001558:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 800155c:	461a      	mov	r2, r3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	441a      	add	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4403      	add	r3, r0
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	440b      	add	r3, r1
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
					break;
 8001572:	e0ff      	b.n	8001774 <do_flood_fill_algorithm+0x8c4>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001574:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001578:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80fa 	beq.w	8001778 <do_flood_fill_algorithm+0x8c8>
 8001584:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001588:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001594:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001598:	785b      	ldrb	r3, [r3, #1]
 800159a:	461c      	mov	r4, r3
 800159c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015a0:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80015a4:	4622      	mov	r2, r4
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4422      	add	r2, r4
 80015aa:	460b      	mov	r3, r1
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	4403      	add	r3, r0
 80015b6:	3301      	adds	r3, #1
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
					break;
 80015bc:	e0dc      	b.n	8001778 <do_flood_fill_algorithm+0x8c8>
				case Unknown:
					break;
				}  // switch(direction)

			}  // else if(is_there_wall_on_direction(Front))
			else if(is_there_wall_on_direction(Right))
 80015be:	2002      	movs	r0, #2
 80015c0:	f001 fb6c 	bl	8002c9c <is_there_wall_on_direction>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80d8 	beq.w	800177c <do_flood_fill_algorithm+0x8cc>
			{
				maze.cell_grid[c.x][c.y].walls[(direction + 1) % 4] = Wall_Here;
 80015cc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015d0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461c      	mov	r4, r3
 80015d8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015dc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	461d      	mov	r5, r3
 80015e4:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80015e8:	3301      	adds	r3, #1
 80015ea:	425a      	negs	r2, r3
 80015ec:	f003 0103 	and.w	r1, r3, #3
 80015f0:	f002 0303 	and.w	r3, r2, #3
 80015f4:	bf58      	it	pl
 80015f6:	4259      	negpl	r1, r3
 80015f8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015fc:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001600:	462a      	mov	r2, r5
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	442a      	add	r2, r5
 8001606:	4623      	mov	r3, r4
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4423      	add	r3, r4
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	4413      	add	r3, r2
 8001610:	4403      	add	r3, r0
 8001612:	440b      	add	r3, r1
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001618:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 800161c:	2b04      	cmp	r3, #4
 800161e:	f200 80b6 	bhi.w	800178e <do_flood_fill_algorithm+0x8de>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <do_flood_fill_algorithm+0x778>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	0800163d 	.word	0x0800163d
 800162c:	08001687 	.word	0x08001687
 8001630:	080016cf 	.word	0x080016cf
 8001634:	08001717 	.word	0x08001717
 8001638:	0800178f 	.word	0x0800178f
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 800163c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001640:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 809a 	beq.w	8001780 <do_flood_fill_algorithm+0x8d0>
 800164c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001650:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	1e59      	subs	r1, r3, #1
 8001658:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800165c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	461c      	mov	r4, r3
 8001664:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001668:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 800166c:	4622      	mov	r2, r4
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4422      	add	r2, r4
 8001672:	460b      	mov	r3, r1
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	4403      	add	r3, r0
 800167e:	3301      	adds	r3, #1
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
					break;
 8001684:	e07c      	b.n	8001780 <do_flood_fill_algorithm+0x8d0>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 8001686:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800168a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800168e:	785b      	ldrb	r3, [r3, #1]
 8001690:	2b0e      	cmp	r3, #14
 8001692:	d877      	bhi.n	8001784 <do_flood_fill_algorithm+0x8d4>
 8001694:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001698:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016a4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	3301      	adds	r3, #1
 80016ac:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80016b0:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80016b4:	461a      	mov	r2, r3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	441a      	add	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4403      	add	r3, r0
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	3302      	adds	r3, #2
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
					break;
 80016cc:	e05a      	b.n	8001784 <do_flood_fill_algorithm+0x8d4>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 80016ce:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016d2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b0e      	cmp	r3, #14
 80016da:	d855      	bhi.n	8001788 <do_flood_fill_algorithm+0x8d8>
 80016dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016e0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	1c59      	adds	r1, r3, #1
 80016e8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016ec:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	461c      	mov	r4, r3
 80016f4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016f8:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80016fc:	4622      	mov	r2, r4
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4422      	add	r2, r4
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	4413      	add	r3, r2
 800170c:	4403      	add	r3, r0
 800170e:	3303      	adds	r3, #3
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
					break;
 8001714:	e038      	b.n	8001788 <do_flood_fill_algorithm+0x8d8>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 8001716:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800171a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d033      	beq.n	800178c <do_flood_fill_algorithm+0x8dc>
 8001724:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001728:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001734:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001738:	785b      	ldrb	r3, [r3, #1]
 800173a:	3b01      	subs	r3, #1
 800173c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001740:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001744:	461a      	mov	r2, r3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	441a      	add	r2, r3
 800174a:	4603      	mov	r3, r0
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4403      	add	r3, r0
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	440b      	add	r3, r1
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
					break;
 800175a:	e017      	b.n	800178c <do_flood_fill_algorithm+0x8dc>
					break;
 800175c:	bf00      	nop
 800175e:	e016      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001760:	bf00      	nop
 8001762:	e014      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001764:	bf00      	nop
 8001766:	e012      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001768:	bf00      	nop
 800176a:	e010      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 800176c:	bf00      	nop
 800176e:	e00e      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001770:	bf00      	nop
 8001772:	e00c      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001774:	bf00      	nop
 8001776:	e00a      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001778:	bf00      	nop
 800177a:	e008      	b.n	800178e <do_flood_fill_algorithm+0x8de>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))
 800177c:	bf00      	nop
 800177e:	e006      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001780:	bf00      	nop
 8001782:	e004      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001784:	bf00      	nop
 8001786:	e002      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <do_flood_fill_algorithm+0x8de>
					break;
 800178c:	bf00      	nop


			maze.cell_grid[c.x][c.y].visited = 1;
 800178e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001792:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800179e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	461c      	mov	r4, r3
 80017a6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017aa:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 80017ae:	4622      	mov	r2, r4
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4422      	add	r2, r4
 80017b4:	4603      	mov	r3, r0
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4403      	add	r3, r0
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	440b      	add	r3, r1
 80017c0:	3304      	adds	r3, #4
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]

		}  // else if(!maze.cell_grid[c.x][c.y].visited)

		if(found_flood_fill_destination(&c, &maze))
 80017c6:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80017ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f8be 	bl	8001952 <found_flood_fill_destination>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d161      	bne.n	80018a0 <do_flood_fill_algorithm+0x9f0>
			return;
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, &c, &stack);
 80017dc:	1d3a      	adds	r2, r7, #4
 80017de:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80017e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f8d0 	bl	800198c <minus_one_neighbor>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815

		if(desired_direction == Unknown)
 80017f2:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d124      	bne.n	8001844 <do_flood_fill_algorithm+0x994>
		{
			while(!stack_is_empty(&stack))
 80017fa:	e011      	b.n	8001820 <do_flood_fill_algorithm+0x970>
			{
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f866 	bl	80018d0 <pop_stack>
 8001804:	4602      	mov	r2, r0
 8001806:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800180a:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800180e:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, &next_coordinate, &stack);
 8001810:	1d3a      	adds	r2, r7, #4
 8001812:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001816:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f8b6 	bl	800198c <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f842 	bl	80018ac <stack_is_empty>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0e6      	beq.n	80017fc <do_flood_fill_algorithm+0x94c>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, &c, &stack);
 800182e:	1d3a      	adds	r2, r7, #4
 8001830:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001834:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8a7 	bl	800198c <minus_one_neighbor>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
		}  // if(next_direction == Unknown)

		int difference = direction - desired_direction;
 8001844:	f897 2814 	ldrb.w	r2, [r7, #2068]	; 0x814
 8001848:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
		switch(difference % 4)
 8001852:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001856:	425a      	negs	r2, r3
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	bf58      	it	pl
 8001862:	4253      	negpl	r3, r2
 8001864:	2b03      	cmp	r3, #3
 8001866:	d816      	bhi.n	8001896 <do_flood_fill_algorithm+0x9e6>
 8001868:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <do_flood_fill_algorithm+0x9c0>)
 800186a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001897 	.word	0x08001897
 8001874:	08001881 	.word	0x08001881
 8001878:	08001889 	.word	0x08001889
 800187c:	0800188f 	.word	0x0800188f
		{
		case 0:
			break;
		case 1:
			rotate_direction_90(Left);
 8001880:	2000      	movs	r0, #0
 8001882:	f000 ff14 	bl	80026ae <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001886:	e006      	b.n	8001896 <do_flood_fill_algorithm+0x9e6>
		case 2:
			rotate_180_degrees();
 8001888:	f000 ff36 	bl	80026f8 <rotate_180_degrees>
			// TODO - might need to calibrate
			break;
 800188c:	e003      	b.n	8001896 <do_flood_fill_algorithm+0x9e6>
		case 3:
			rotate_direction_90(Right);
 800188e:	2002      	movs	r0, #2
 8001890:	f000 ff0d 	bl	80026ae <rotate_direction_90>
			// TODO - might need to calibrate
			break;
 8001894:	bf00      	nop
		}

		direction = desired_direction;
 8001896:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 800189a:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	{
 800189e:	e481      	b.n	80011a4 <do_flood_fill_algorithm+0x2f4>
			return;
 80018a0:	bf00      	nop

	}  // while(1)
}  // do_hug_left_algorithm()
 80018a2:	f607 0718 	addw	r7, r7, #2072	; 0x818
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdb0      	pop	{r4, r5, r7, pc}
 80018aa:	bf00      	nop

080018ac <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <pop_stack>:

coordinate pop_stack(stack *s)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018de:	3b01      	subs	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018ee:	3301      	adds	r3, #1
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	f107 020c 	add.w	r2, r7, #12
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	440b      	add	r3, r1
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	8013      	strh	r3, [r2, #0]
 80018fe:	2300      	movs	r3, #0
 8001900:	7b3a      	ldrb	r2, [r7, #12]
 8001902:	f362 0307 	bfi	r3, r2, #0, #8
 8001906:	7b7a      	ldrb	r2, [r7, #13]
 8001908:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <push_stack>:

void push_stack(stack* s, coordinate *c)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	s->index = s->index + 1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = *c;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	460a      	mov	r2, r1
 8001942:	8812      	ldrh	r2, [r2, #0]
 8001944:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <found_flood_fill_destination>:
		break;
	}  // switch(d)
}  // void move_forward_and_update(maze_direction d, Coordinate *c, Flood_Fill_Maze *m)

uint8_t found_flood_fill_destination(coordinate *c, flood_fill_maze *maze)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c->x][c->y] == 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	4619      	mov	r1, r3
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	0103      	lsls	r3, r0, #4
 800196c:	4413      	add	r3, r2
 800196e:	440b      	add	r3, r1
 8001970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf0c      	ite	eq
 800197a:	2301      	moveq	r3, #1
 800197c:	2300      	movne	r3, #0
 800197e:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(Coordinate *c, Flood_Fill_Maze *maze)
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate *c, stack *s)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
 8001998:	f44f 7382 	mov.w	r3, #260	; 0x104
 800199c:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c->x][c->y] - 1;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	4619      	mov	r1, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	0103      	lsls	r3, r0, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 80019c0:	2300      	movs	r3, #0
 80019c2:	757b      	strb	r3, [r7, #21]
 80019c4:	e103      	b.n	8001bce <minus_one_neighbor+0x242>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461c      	mov	r4, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	785b      	ldrb	r3, [r3, #1]
 80019d0:	7d79      	ldrb	r1, [r7, #21]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	461a      	mov	r2, r3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	441a      	add	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4423      	add	r3, r4
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	4403      	add	r3, r0
 80019e6:	440b      	add	r3, r1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80e3 	bne.w	8001bb6 <minus_one_neighbor+0x22a>
		{
			switch(i)
 80019f0:	7d7b      	ldrb	r3, [r7, #21]
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	f200 80e8 	bhi.w	8001bc8 <minus_one_neighbor+0x23c>
 80019f8:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <minus_one_neighbor+0x74>)
 80019fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fe:	bf00      	nop
 8001a00:	08001a15 	.word	0x08001a15
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001ae7 	.word	0x08001ae7
 8001a0c:	08001b4f 	.word	0x08001b4f
 8001a10:	08001bc9 	.word	0x08001bc9
			{
			case North:
				if(maze->distance_grid[c->x][c->y + 1] == target)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	440a      	add	r2, r1
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d101      	bne.n	8001a3c <minus_one_neighbor+0xb0>
				{
					return i;
 8001a38:	7d7b      	ldrb	r3, [r7, #21]
 8001a3a:	e140      	b.n	8001cbe <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y + 1] == target)
				if(maze->distance_grid[c->x][c->y + 1] < min_dist)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	3301      	adds	r3, #1
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	440a      	add	r2, r1
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	8afa      	ldrh	r2, [r7, #22]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	f240 80ad 	bls.w	8001bba <minus_one_neighbor+0x22e>
				{
					min_dist = maze->distance_grid[c->x][c->y + 1];
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	440a      	add	r2, r1
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y + 1] < min_dist)
				break;
 8001a7c:	e09d      	b.n	8001bba <minus_one_neighbor+0x22e>
			case East:
				if(maze->distance_grid[c->x + 1][c->y] == target)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3301      	adds	r3, #1
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	7852      	ldrb	r2, [r2, #1]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d101      	bne.n	8001aa6 <minus_one_neighbor+0x11a>
				{
					return i;
 8001aa2:	7d7b      	ldrb	r3, [r7, #21]
 8001aa4:	e10b      	b.n	8001cbe <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x + 1][c->y] == target)
				if(maze->distance_grid[c->x + 1][c->y] < min_dist)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	7852      	ldrb	r2, [r2, #1]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	8afa      	ldrh	r2, [r7, #22]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d97a      	bls.n	8001bbe <minus_one_neighbor+0x232>
				{
					min_dist = maze->distance_grid[c->x + 1][c->y];
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	3301      	adds	r3, #1
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	7852      	ldrb	r2, [r2, #1]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x + 1][c->y] < min_dist)
				break;
 8001ae4:	e06b      	b.n	8001bbe <minus_one_neighbor+0x232>
			case South:
				if(maze->distance_grid[c->x][c->y-1] == target)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	785b      	ldrb	r3, [r3, #1]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	440a      	add	r2, r1
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d101      	bne.n	8001b0e <minus_one_neighbor+0x182>
				{
					return i;
 8001b0a:	7d7b      	ldrb	r3, [r7, #21]
 8001b0c:	e0d7      	b.n	8001cbe <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y-1] == target)
				if(maze->distance_grid[c->x][c->y-1] < min_dist)
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	440a      	add	r2, r1
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	8afa      	ldrh	r2, [r7, #22]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d948      	bls.n	8001bc2 <minus_one_neighbor+0x236>
				{
					min_dist = maze->distance_grid[c->x][c->y-1];
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	440a      	add	r2, r1
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y-1] < min_dist)
				break;
 8001b4c:	e039      	b.n	8001bc2 <minus_one_neighbor+0x236>
			case West:
				if(maze->distance_grid[c->x-1][c->y] == target)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	7852      	ldrb	r2, [r2, #1]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d101      	bne.n	8001b76 <minus_one_neighbor+0x1ea>
				{
					return i;
 8001b72:	7d7b      	ldrb	r3, [r7, #21]
 8001b74:	e0a3      	b.n	8001cbe <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x-1][c->y] == target)
				if(maze->distance_grid[c->x-1][c->y] < min_dist)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	7852      	ldrb	r2, [r2, #1]
 8001b80:	4611      	mov	r1, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	8afa      	ldrh	r2, [r7, #22]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d916      	bls.n	8001bc6 <minus_one_neighbor+0x23a>
				{
					min_dist = maze->distance_grid[c->x-1][c->y];
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	7852      	ldrb	r2, [r2, #1]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x-1][c->y] < min_dist)
				break;
 8001bb4:	e007      	b.n	8001bc6 <minus_one_neighbor+0x23a>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001bb6:	bf00      	nop
 8001bb8:	e006      	b.n	8001bc8 <minus_one_neighbor+0x23c>
				break;
 8001bba:	bf00      	nop
 8001bbc:	e004      	b.n	8001bc8 <minus_one_neighbor+0x23c>
				break;
 8001bbe:	bf00      	nop
 8001bc0:	e002      	b.n	8001bc8 <minus_one_neighbor+0x23c>
				break;
 8001bc2:	bf00      	nop
 8001bc4:	e000      	b.n	8001bc8 <minus_one_neighbor+0x23c>
				break;
 8001bc6:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 8001bc8:	7d7b      	ldrb	r3, [r7, #21]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	757b      	strb	r3, [r7, #21]
 8001bce:	7d7b      	ldrb	r3, [r7, #21]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	f67f aef8 	bls.w	80019c6 <minus_one_neighbor+0x3a>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c->x][c->y] = min_dist + 1;
 8001bd6:	8afb      	ldrh	r3, [r7, #22]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	4614      	mov	r4, r2
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	7852      	ldrb	r2, [r2, #1]
 8001be4:	4610      	mov	r0, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	b2d9      	uxtb	r1, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	0123      	lsls	r3, r4, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	4403      	add	r3, r0
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	460a      	mov	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	753b      	strb	r3, [r7, #20]
 8001bfe:	e05a      	b.n	8001cb6 <minus_one_neighbor+0x32a>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461c      	mov	r4, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	7d39      	ldrb	r1, [r7, #20]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	441a      	add	r2, r3
 8001c14:	4623      	mov	r3, r4
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4423      	add	r3, r4
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4403      	add	r3, r0
 8001c20:	440b      	add	r3, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d143      	bne.n	8001cb0 <minus_one_neighbor+0x324>
		{
			coordinate temp;
			switch(i)
 8001c28:	7d3b      	ldrb	r3, [r7, #20]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d83a      	bhi.n	8001ca4 <minus_one_neighbor+0x318>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <minus_one_neighbor+0x2a8>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001c45 	.word	0x08001c45
 8001c38:	08001c5d 	.word	0x08001c5d
 8001c3c:	08001c75 	.word	0x08001c75
 8001c40:	08001c8d 	.word	0x08001c8d
			{
			case North:
				init_coordinate(&temp, c->x, c->y + 1);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	7819      	ldrb	r1, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f837 	bl	8001cc8 <init_coordinate>
				break;
 8001c5a:	e023      	b.n	8001ca4 <minus_one_neighbor+0x318>
			case East:
				init_coordinate(&temp, c->x + 1, c->y);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2d9      	uxtb	r1, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785a      	ldrb	r2, [r3, #1]
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f82b 	bl	8001cc8 <init_coordinate>
				break;
 8001c72:	e017      	b.n	8001ca4 <minus_one_neighbor+0x318>
			case South:
				init_coordinate(&temp, c->x, c->y - 1);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	7819      	ldrb	r1, [r3, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f81f 	bl	8001cc8 <init_coordinate>
				break;
 8001c8a:	e00b      	b.n	8001ca4 <minus_one_neighbor+0x318>
			case West:
				init_coordinate(&temp, c->x - 1, c->y);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2d9      	uxtb	r1, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	785a      	ldrb	r2, [r3, #1]
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f813 	bl	8001cc8 <init_coordinate>
				break;
 8001ca2:	bf00      	nop
			}  // switch(i)
			push_stack(s, &temp);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe34 	bl	8001918 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 8001cb0:	7d3b      	ldrb	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	753b      	strb	r3, [r7, #20]
 8001cb6:	7d3b      	ldrb	r3, [r7, #20]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d9a1      	bls.n	8001c00 <minus_one_neighbor+0x274>
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8001cbc:	2304      	movs	r3, #4
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd90      	pop	{r4, r7, pc}
 8001cc6:	bf00      	nop

08001cc8 <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	701a      	strb	r2, [r3, #0]
	c->y = y;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	705a      	strb	r2, [r3, #1]
}  // void init_coor(Coordinate *c, uint8_t x, uint8_t y)
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0d2      	sub	sp, #328	; 0x148
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001cfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cfe:	6018      	str	r0, [r3, #0]
 8001d00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001d04:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d08:	8019      	strh	r1, [r3, #0]
 8001d0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001d0e:	f2a3 1341 	subw	r3, r3, #321	; 0x141
 8001d12:	701a      	strb	r2, [r3, #0]
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001d1a:	e08c      	b.n	8001e36 <print_maze+0x146>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001d22:	e07e      	b.n	8001e22 <print_maze+0x132>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8001d24:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001d28:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001d2c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001d30:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	441a      	add	r2, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	4403      	add	r3, r0
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[East] << 1;
 8001d4e:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001d52:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001d56:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001d5a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001d5e:	6810      	ldr	r0, [r2, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	460b      	mov	r3, r1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	4413      	add	r3, r2
 8001d70:	4403      	add	r3, r0
 8001d72:	3301      	adds	r3, #1
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	b25a      	sxtb	r2, r3
 8001d7a:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[South] << 2;
 8001d86:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001d8a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001d8e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001d92:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001d96:	6810      	ldr	r0, [r2, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	441a      	add	r2, r3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	4403      	add	r3, r0
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	b25a      	sxtb	r2, r3
 8001db2:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b25b      	sxtb	r3, r3
 8001dba:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			number |= maze->cell_grid[i][j].walls[West] << 3;
 8001dbe:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001dc2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001dc6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001dca:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001dce:	6810      	ldr	r0, [r2, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	441a      	add	r2, r3
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4413      	add	r3, r2
 8001de0:	4403      	add	r3, r0
 8001de2:	3303      	adds	r3, #3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	b25a      	sxtb	r2, r3
 8001dea:	f997 3143 	ldrsb.w	r3, [r7, #323]	; 0x143
 8001dee:	4313      	orrs	r3, r2
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
			maze_map[i][j] = 'a' + number;
 8001df6:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8001dfa:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001dfe:	f897 1143 	ldrb.w	r1, [r7, #323]	; 0x143
 8001e02:	3161      	adds	r1, #97	; 0x61
 8001e04:	b2c8      	uxtb	r0, r1
 8001e06:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8001e0a:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	440a      	add	r2, r1
 8001e12:	4413      	add	r3, r2
 8001e14:	4602      	mov	r2, r0
 8001e16:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001e18:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 8001e22:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f af7c 	bls.w	8001d24 <print_maze+0x34>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001e2c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001e30:	3301      	adds	r3, #1
 8001e32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8001e36:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f af6e 	bls.w	8001d1c <print_maze+0x2c>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 8001e40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e44:	f2a3 1341 	subw	r3, r3, #321	; 0x141
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d864      	bhi.n	8001f18 <print_maze+0x228>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <print_maze+0x164>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e69 	.word	0x08001e69
 8001e58:	08001e95 	.word	0x08001e95
 8001e5c:	08001ec1 	.word	0x08001ec1
 8001e60:	08001eed 	.word	0x08001eed
 8001e64:	08001f19 	.word	0x08001f19
	{
	case North:
		maze_map[c.x][c.y] = 'N';
 8001e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e84:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001e88:	0103      	lsls	r3, r0, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	224e      	movs	r2, #78	; 0x4e
 8001e90:	701a      	strb	r2, [r3, #0]
		break;
 8001e92:	e041      	b.n	8001f18 <print_maze+0x228>
	case East:
		maze_map[c.x][c.y] = 'E';
 8001e94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ea4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001eb0:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001eb4:	0103      	lsls	r3, r0, #4
 8001eb6:	4413      	add	r3, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	2245      	movs	r2, #69	; 0x45
 8001ebc:	701a      	strb	r2, [r3, #0]
		break;
 8001ebe:	e02b      	b.n	8001f18 <print_maze+0x228>
	case South:
		maze_map[c.x][c.y] = 'S';
 8001ec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ec4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ed0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001edc:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001ee0:	0103      	lsls	r3, r0, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	2253      	movs	r2, #83	; 0x53
 8001ee8:	701a      	strb	r2, [r3, #0]
		break;
 8001eea:	e015      	b.n	8001f18 <print_maze+0x228>
	case West:
		maze_map[c.x][c.y] = 'W';
 8001eec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001ef0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001efc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f00:	785b      	ldrb	r3, [r3, #1]
 8001f02:	4619      	mov	r1, r3
 8001f04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f08:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8001f0c:	0103      	lsls	r3, r0, #4
 8001f0e:	4413      	add	r3, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	2257      	movs	r2, #87	; 0x57
 8001f14:	701a      	strb	r2, [r3, #0]
		break;
 8001f16:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001f1e:	e044      	b.n	8001faa <print_maze+0x2ba>
	{
		char buf[16];
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
 8001f26:	e017      	b.n	8001f58 <print_maze+0x268>
		{
			buf[i] = maze_map[i][j];
 8001f28:	f897 1145 	ldrb.w	r1, [r7, #325]	; 0x145
 8001f2c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8001f30:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8001f34:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8001f38:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8001f3c:	0109      	lsls	r1, r1, #4
 8001f3e:	4401      	add	r1, r0
 8001f40:	440a      	add	r2, r1
 8001f42:	7811      	ldrb	r1, [r2, #0]
 8001f44:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001f48:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8001f4c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001f4e:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
 8001f58:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d9e3      	bls.n	8001f28 <print_maze+0x238>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001f60:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f68:	2210      	movs	r2, #16
 8001f6a:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <print_maze+0x2d0>)
 8001f6c:	f002 fe7d 	bl	8004c6a <HAL_UART_Transmit>
		char buf2[30] = "\r\n";
 8001f70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001f74:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f78:	f640 220d 	movw	r2, #2573	; 0xa0d
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	831a      	strh	r2, [r3, #24]
		HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 8001f90:	f107 0110 	add.w	r1, r7, #16
 8001f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f98:	221e      	movs	r2, #30
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <print_maze+0x2d0>)
 8001f9c:	f002 fe65 	bl	8004c6a <HAL_UART_Transmit>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001fa0:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
 8001faa:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d9b6      	bls.n	8001f20 <print_maze+0x230>
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000148 	.word	0x20000148

08001fc4 <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 fe67 	bl	8002c9c <is_there_wall_on_direction>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 fb6a 	bl	80026ae <rotate_direction_90>
		go_forward_one_unit();
 8001fda:	f000 fb9a 	bl	8002712 <go_forward_one_unit>
 8001fde:	e018      	b.n	8002012 <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f000 fe5b 	bl	8002c9c <is_there_wall_on_direction>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d010      	beq.n	800200e <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8001fec:	2002      	movs	r0, #2
 8001fee:	f000 fe55 	bl	8002c9c <is_there_wall_on_direction>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8001ff8:	f000 fb7e 	bl	80026f8 <rotate_180_degrees>
			go_forward_one_unit();
 8001ffc:	f000 fb89 	bl	8002712 <go_forward_one_unit>
 8002000:	e007      	b.n	8002012 <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 8002002:	2002      	movs	r0, #2
 8002004:	f000 fb53 	bl	80026ae <rotate_direction_90>
			go_forward_one_unit();
 8002008:	f000 fb83 	bl	8002712 <go_forward_one_unit>
 800200c:	e001      	b.n	8002012 <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 800200e:	f000 fb80 	bl	8002712 <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 8002012:	f000 f808 	bl	8002026 <found_hugger_destination>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 800201c:	f7ff ffd2 	bl	8001fc4 <do_hug_left_algorithm>
 8002020:	e000      	b.n	8002024 <do_hug_left_algorithm+0x60>
		return;
 8002022:	bf00      	nop
}  // do_hug_left_algorithm()
 8002024:	bd80      	pop	{r7, pc}

08002026 <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 800202a:	2300      	movs	r3, #0
}  // found_hugger_destination()
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203e:	f000 fe6f 	bl	8002d20 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002042:	f000 f84f 	bl	80020e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002046:	f000 fa35 	bl	80024b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800204a:	f000 f901 	bl	8002250 <MX_TIM3_Init>
  MX_TIM4_Init();
 800204e:	f000 f959 	bl	8002304 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002052:	f000 f8a5 	bl	80021a0 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002056:	f000 f9af 	bl	80023b8 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 800205a:	f000 fa01 	bl	8002460 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 800205e:	2000      	movs	r0, #0
 8002060:	f7fe fe5a 	bl	8000d18 <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8002064:	2101      	movs	r1, #1
 8002066:	2000      	movs	r0, #0
 8002068:	f7fe fe75 	bl	8000d56 <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 800206c:	2001      	movs	r0, #1
 800206e:	f000 fb5c 	bl	800272a <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8002072:	f000 fadf 	bl	8002634 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <main+0x98>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <main+0x98>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 0204 	orr.w	r2, r2, #4
 8002084:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8002086:	2100      	movs	r1, #0
 8002088:	4812      	ldr	r0, [pc, #72]	; (80020d4 <main+0x9c>)
 800208a:	f001 fe37 	bl	8003cfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 800208e:	2104      	movs	r1, #4
 8002090:	4811      	ldr	r0, [pc, #68]	; (80020d8 <main+0xa0>)
 8002092:	f001 fe33 	bl	8003cfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 8002096:	2100      	movs	r1, #0
 8002098:	4810      	ldr	r0, [pc, #64]	; (80020dc <main+0xa4>)
 800209a:	f001 fe2f 	bl	8003cfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 800209e:	2104      	movs	r1, #4
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <main+0x98>)
 80020a2:	f001 fe2b 	bl	8003cfc <HAL_TIM_PWM_Start>

  manual_mode = 0;  // TODO - change to 1 once we can control manual_mode
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <main+0xa8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

  while (manual_mode) {
 80020ac:	e000      	b.n	80020b0 <main+0x78>
	  continue;  // stuck in infinite loop until interrupt is called
 80020ae:	bf00      	nop
  while (manual_mode) {
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <main+0xa8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1fa      	bne.n	80020ae <main+0x76>
  }

  uint8_t determined_algorithm = determine_algorithm();
 80020b8:	f7fe fea8 	bl	8000e0c <determine_algorithm>
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  do_search_algorithm(determined_algorithm);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fec0 	bl	8000e48 <do_search_algorithm>
  complete_search_algorithm();
 80020c8:	f7fe fee3 	bl	8000e92 <complete_search_algorithm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <main+0x94>
 80020ce:	bf00      	nop
 80020d0:	20000100 	.word	0x20000100
 80020d4:	200000b8 	.word	0x200000b8
 80020d8:	20000070 	.word	0x20000070
 80020dc:	20000028 	.word	0x20000028
 80020e0:	2000018c 	.word	0x2000018c

080020e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b094      	sub	sp, #80	; 0x50
 80020e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ea:	f107 0320 	add.w	r3, r7, #32
 80020ee:	2230      	movs	r2, #48	; 0x30
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 f952 	bl	800539c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <SystemClock_Config+0xb4>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a21      	ldr	r2, [pc, #132]	; (8002198 <SystemClock_Config+0xb4>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <SystemClock_Config+0xb4>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <SystemClock_Config+0xb8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <SystemClock_Config+0xb8>)
 800212e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <SystemClock_Config+0xb8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002140:	2302      	movs	r3, #2
 8002142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002144:	2301      	movs	r3, #1
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002148:	2310      	movs	r3, #16
 800214a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	4618      	mov	r0, r3
 8002156:	f001 f929 	bl	80033ac <HAL_RCC_OscConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002160:	f000 fa1e 	bl	80025a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002164:	230f      	movs	r3, #15
 8002166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f001 fb8c 	bl	800389c <HAL_RCC_ClockConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800218a:	f000 fa09 	bl	80025a0 <Error_Handler>
  }
}
 800218e:	bf00      	nop
 8002190:	3750      	adds	r7, #80	; 0x50
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <MX_TIM2_Init+0xac>)
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <MX_TIM2_Init+0xac>)
 80021cc:	229f      	movs	r2, #159	; 0x9f
 80021ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <MX_TIM2_Init+0xac>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <MX_TIM2_Init+0xac>)
 80021d8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80021dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <MX_TIM2_Init+0xac>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_TIM2_Init+0xac>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021ea:	4818      	ldr	r0, [pc, #96]	; (800224c <MX_TIM2_Init+0xac>)
 80021ec:	f001 fd36 	bl	8003c5c <HAL_TIM_PWM_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80021f6:	f000 f9d3 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002202:	f107 0320 	add.w	r3, r7, #32
 8002206:	4619      	mov	r1, r3
 8002208:	4810      	ldr	r0, [pc, #64]	; (800224c <MX_TIM2_Init+0xac>)
 800220a:	f002 fc5f 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002214:	f000 f9c4 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002218:	2360      	movs	r3, #96	; 0x60
 800221a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2200      	movs	r2, #0
 800222c:	4619      	mov	r1, r3
 800222e:	4807      	ldr	r0, [pc, #28]	; (800224c <MX_TIM2_Init+0xac>)
 8002230:	f002 f808 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800223a:	f000 f9b1 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800223e:	4803      	ldr	r0, [pc, #12]	; (800224c <MX_TIM2_Init+0xac>)
 8002240:	f000 fb5a 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000028 	.word	0x20000028

08002250 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	609a      	str	r2, [r3, #8]
 800226a:	60da      	str	r2, [r3, #12]
 800226c:	611a      	str	r2, [r3, #16]
 800226e:	615a      	str	r2, [r3, #20]
 8002270:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <MX_TIM3_Init+0xac>)
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <MX_TIM3_Init+0xb0>)
 8002276:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <MX_TIM3_Init+0xac>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_TIM3_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM3_Init+0xac>)
 8002286:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800228a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM3_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_TIM3_Init+0xac>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002298:	4818      	ldr	r0, [pc, #96]	; (80022fc <MX_TIM3_Init+0xac>)
 800229a:	f001 fcdf 	bl	8003c5c <HAL_TIM_PWM_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022a4:	f000 f97c 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	4619      	mov	r1, r3
 80022b6:	4811      	ldr	r0, [pc, #68]	; (80022fc <MX_TIM3_Init+0xac>)
 80022b8:	f002 fc08 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80022c2:	f000 f96d 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c6:	2360      	movs	r3, #96	; 0x60
 80022c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2204      	movs	r2, #4
 80022da:	4619      	mov	r1, r3
 80022dc:	4807      	ldr	r0, [pc, #28]	; (80022fc <MX_TIM3_Init+0xac>)
 80022de:	f001 ffb1 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80022e8:	f000 f95a 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022ec:	4803      	ldr	r0, [pc, #12]	; (80022fc <MX_TIM3_Init+0xac>)
 80022ee:	f000 fb03 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000070 	.word	0x20000070
 8002300:	40000400 	.word	0x40000400

08002304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	611a      	str	r2, [r3, #16]
 8002322:	615a      	str	r2, [r3, #20]
 8002324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <MX_TIM4_Init+0xac>)
 8002328:	4a22      	ldr	r2, [pc, #136]	; (80023b4 <MX_TIM4_Init+0xb0>)
 800232a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <MX_TIM4_Init+0xac>)
 800232e:	224f      	movs	r2, #79	; 0x4f
 8002330:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <MX_TIM4_Init+0xac>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM4_Init+0xac>)
 800233a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800233e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_TIM4_Init+0xac>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_TIM4_Init+0xac>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800234c:	4818      	ldr	r0, [pc, #96]	; (80023b0 <MX_TIM4_Init+0xac>)
 800234e:	f001 fc85 	bl	8003c5c <HAL_TIM_PWM_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002358:	f000 f922 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4619      	mov	r1, r3
 800236a:	4811      	ldr	r0, [pc, #68]	; (80023b0 <MX_TIM4_Init+0xac>)
 800236c:	f002 fbae 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002376:	f000 f913 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237a:	2360      	movs	r3, #96	; 0x60
 800237c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	4619      	mov	r1, r3
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM4_Init+0xac>)
 8002392:	f001 ff57 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800239c:	f000 f900 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM4_Init+0xac>)
 80023a2:	f000 faa9 	bl	80028f8 <HAL_TIM_MspPostInit>

}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200000b8 	.word	0x200000b8
 80023b4:	40000800 	.word	0x40000800

080023b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023c8:	463b      	mov	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023d6:	4a21      	ldr	r2, [pc, #132]	; (800245c <MX_TIM5_Init+0xa4>)
 80023d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023dc:	220f      	movs	r2, #15
 80023de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023e8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80023fa:	4817      	ldr	r0, [pc, #92]	; (8002458 <MX_TIM5_Init+0xa0>)
 80023fc:	f001 fd2e 	bl	8003e5c <HAL_TIM_IC_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002406:	f000 f8cb 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	480f      	ldr	r0, [pc, #60]	; (8002458 <MX_TIM5_Init+0xa0>)
 800241a:	f002 fb57 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002424:	f000 f8bc 	bl	80025a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002428:	2302      	movs	r3, #2
 800242a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800242c:	2301      	movs	r3, #1
 800242e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	2204      	movs	r2, #4
 800243c:	4619      	mov	r1, r3
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <MX_TIM5_Init+0xa0>)
 8002440:	f001 fe63 	bl	800410a <HAL_TIM_IC_ConfigChannel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800244a:	f000 f8a9 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000100 	.word	0x20000100
 800245c:	40000c00 	.word	0x40000c00

08002460 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART6_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800246c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002470:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USART6_UART_Init+0x4c>)
 8002498:	f002 fb9a 	bl	8004bd0 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f000 f87d 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000148 	.word	0x20000148
 80024b0:	40011400 	.word	0x40011400

080024b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a30      	ldr	r2, [pc, #192]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <MX_GPIO_Init+0xe0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <MX_GPIO_Init+0xe0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <MX_GPIO_Init+0xe0>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <MX_GPIO_Init+0xe0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002524:	481c      	ldr	r0, [pc, #112]	; (8002598 <MX_GPIO_Init+0xe4>)
 8002526:	f000 ff27 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SONIC_TRIGGER_GPIO_Port, SONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002530:	481a      	ldr	r0, [pc, #104]	; (800259c <MX_GPIO_Init+0xe8>)
 8002532:	f000 ff21 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 8002536:	f44f 7348 	mov.w	r3, #800	; 0x320
 800253a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	4812      	ldr	r0, [pc, #72]	; (8002598 <MX_GPIO_Init+0xe4>)
 8002550:	f000 fd8e 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8002554:	2340      	movs	r3, #64	; 0x40
 8002556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	4619      	mov	r1, r3
 8002566:	480c      	ldr	r0, [pc, #48]	; (8002598 <MX_GPIO_Init+0xe4>)
 8002568:	f000 fd82 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 800256c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <MX_GPIO_Init+0xe8>)
 8002586:	f000 fd73 	bl	8003070 <HAL_GPIO_Init>

}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020000 	.word	0x40020000
 800259c:	40020400 	.word	0x40020400

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <Error_Handler+0x8>
	...

080025ac <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <set_motor_speed+0x1c>
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d016      	beq.n	80025f4 <set_motor_speed+0x48>
 80025c6:	e02b      	b.n	8002620 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80025c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bfd4      	ite	le
 80025d0:	2301      	movle	r3, #1
 80025d2:	2300      	movgt	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025dc:	4812      	ldr	r0, [pc, #72]	; (8002628 <set_motor_speed+0x7c>)
 80025de:	f000 fecb 	bl	8003378 <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 80025e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	bfb8      	it	lt
 80025ea:	425b      	neglt	r3, r3
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <set_motor_speed+0x80>)
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80025f2:	e015      	b.n	8002620 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80025f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bfd4      	ite	le
 80025fc:	2301      	movle	r3, #1
 80025fe:	2300      	movgt	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <set_motor_speed+0x7c>)
 800260a:	f000 feb5 	bl	8003378 <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 800260e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	bfb8      	it	lt
 8002616:	425b      	neglt	r3, r3
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <set_motor_speed+0x84>)
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 800261e:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40020000 	.word	0x40020000
 800262c:	40000800 	.word	0x40000800
 8002630:	40000400 	.word	0x40000400

08002634 <stop_all_motors>:
{
	set_motor_speed(side, 0);
}  // stop_motors(motor_side side)

void stop_all_motors()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	set_motor_speed(Left_Motor, 0);
 8002638:	2100      	movs	r1, #0
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff ffb6 	bl	80025ac <set_motor_speed>
	set_motor_speed(Right_Motor, 0);
 8002640:	2100      	movs	r1, #0
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff ffb2 	bl	80025ac <set_motor_speed>
}  // stop_all_motors()
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <rotate_direction>:

void rotate_direction(direction d)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d00f      	beq.n	800267c <rotate_direction+0x30>
 800265c:	2b02      	cmp	r3, #2
 800265e:	dc17      	bgt.n	8002690 <rotate_direction+0x44>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <rotate_direction+0x1c>
 8002664:	2b01      	cmp	r3, #1
	case Left:
		set_motor_speed(Left_Motor, -200);
		set_motor_speed(Right_Motor, 200);
		return;
	case Front:
		return;
 8002666:	e013      	b.n	8002690 <rotate_direction+0x44>
		set_motor_speed(Left_Motor, -200);
 8002668:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff ff9d 	bl	80025ac <set_motor_speed>
		set_motor_speed(Right_Motor, 200);
 8002672:	21c8      	movs	r1, #200	; 0xc8
 8002674:	2001      	movs	r0, #1
 8002676:	f7ff ff99 	bl	80025ac <set_motor_speed>
		return;
 800267a:	e009      	b.n	8002690 <rotate_direction+0x44>
	case Right:
		set_motor_speed(Left_Motor, 200);
 800267c:	21c8      	movs	r1, #200	; 0xc8
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff ff94 	bl	80025ac <set_motor_speed>
		set_motor_speed(Right_Motor, -200);
 8002684:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8002688:	2001      	movs	r0, #1
 800268a:	f7ff ff8f 	bl	80025ac <set_motor_speed>
		return;
 800268e:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d)
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <motors_forward>:

void motors_forward()
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
	set_motor_speed(Left_Motor, 200);
 800269a:	21c8      	movs	r1, #200	; 0xc8
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff ff85 	bl	80025ac <set_motor_speed>
	set_motor_speed(Right_Motor, 200);
 80026a2:	21c8      	movs	r1, #200	; 0xc8
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff ff81 	bl	80025ac <set_motor_speed>
}  // void motors_forward()
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}

080026ae <rotate_direction_90>:
#include "mouse.h"

void rotate_direction_90(direction d)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	71fb      	strb	r3, [r7, #7]


	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d00f      	beq.n	80026de <rotate_direction_90+0x30>
 80026be:	2b02      	cmp	r3, #2
 80026c0:	dc17      	bgt.n	80026f2 <rotate_direction_90+0x44>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <rotate_direction_90+0x1c>
 80026c6:	2b01      	cmp	r3, #1
		rotate_direction(Left);
		HAL_Delay(445);
		stop_all_motors();
		return;
	case Front:
		return;
 80026c8:	e013      	b.n	80026f2 <rotate_direction_90+0x44>
		rotate_direction(Left);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff ffbe 	bl	800264c <rotate_direction>
		HAL_Delay(445);
 80026d0:	f240 10bd 	movw	r0, #445	; 0x1bd
 80026d4:	f000 fb96 	bl	8002e04 <HAL_Delay>
		stop_all_motors();
 80026d8:	f7ff ffac 	bl	8002634 <stop_all_motors>
		return;
 80026dc:	e009      	b.n	80026f2 <rotate_direction_90+0x44>
	case Right:
		rotate_direction(Right);
 80026de:	2002      	movs	r0, #2
 80026e0:	f7ff ffb4 	bl	800264c <rotate_direction>
		HAL_Delay(445);
 80026e4:	f240 10bd 	movw	r0, #445	; 0x1bd
 80026e8:	f000 fb8c 	bl	8002e04 <HAL_Delay>
		stop_all_motors();
 80026ec:	f7ff ffa2 	bl	8002634 <stop_all_motors>
		return;
 80026f0:	bf00      	nop
	}  // switch(d)
}  // rotate_direction_90(direction d)
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <rotate_180_degrees>:

void rotate_180_degrees()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7ff ffd6 	bl	80026ae <rotate_direction_90>
	HAL_Delay(200);
 8002702:	20c8      	movs	r0, #200	; 0xc8
 8002704:	f000 fb7e 	bl	8002e04 <HAL_Delay>
	rotate_direction_90(Left);
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff ffd0 	bl	80026ae <rotate_direction_90>

}  // rotate_180_degrees()
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}

08002712 <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8002712:	b580      	push	{r7, lr}
 8002714:	af00      	add	r7, sp, #0
	// TODO - make sure numbers are precise enough. need to tune
	motors_forward();
 8002716:	f7ff ffbe 	bl	8002696 <motors_forward>
	HAL_Delay(1000);
 800271a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271e:	f000 fb71 	bl	8002e04 <HAL_Delay>
	stop_all_motors();
 8002722:	f7ff ff87 	bl	8002634 <stop_all_motors>
}  // go_forward()
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d010      	beq.n	800275c <set_servo_angle+0x32>
 800273a:	2b02      	cmp	r3, #2
 800273c:	dc13      	bgt.n	8002766 <set_servo_angle+0x3c>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <set_servo_angle+0x1e>
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <set_servo_angle+0x28>
 8002746:	e00e      	b.n	8002766 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 225;
 8002748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274c:	22e1      	movs	r2, #225	; 0xe1
 800274e:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002750:	e009      	b.n	8002766 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 150;
 8002752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002756:	2296      	movs	r2, #150	; 0x96
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800275a:	e004      	b.n	8002766 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 75;
 800275c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002760:	224b      	movs	r2, #75	; 0x4b
 8002762:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8002764:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_MspInit+0x4c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_MspInit+0x4c>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_MspInit+0x4c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_MspInit+0x4c>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_MspInit+0x4c>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_MspInit+0x4c>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d10e      	bne.n	80027f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	4a1c      	ldr	r2, [pc, #112]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6413      	str	r3, [r2, #64]	; 0x40
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027ee:	e026      	b.n	800283e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_TIM_PWM_MspInit+0x90>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10e      	bne.n	8002818 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
}
 8002816:	e012      	b.n	800283e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_TIM_PWM_MspInit+0x94>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10d      	bne.n	800283e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_TIM_PWM_MspInit+0x8c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800

08002858 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1d      	ldr	r2, [pc, #116]	; (80028ec <HAL_TIM_IC_MspInit+0x94>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d133      	bne.n	80028e2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_TIM_IC_MspInit+0x98>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 80028b2:	2302      	movs	r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028c2:	2302      	movs	r3, #2
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4809      	ldr	r0, [pc, #36]	; (80028f4 <HAL_TIM_IC_MspInit+0x9c>)
 80028ce:	f000 fbcf 	bl	8003070 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	2032      	movs	r0, #50	; 0x32
 80028d8:	f000 fb93 	bl	8003002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028dc:	2032      	movs	r0, #50	; 0x32
 80028de:	f000 fbac 	bl	800303a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	; 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40000c00 	.word	0x40000c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020000 	.word	0x40020000

080028f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d11f      	bne.n	800295a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a33      	ldr	r2, [pc, #204]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b31      	ldr	r3, [pc, #196]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800293a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	4619      	mov	r1, r3
 8002952:	4828      	ldr	r0, [pc, #160]	; (80029f4 <HAL_TIM_MspPostInit+0xfc>)
 8002954:	f000 fb8c 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002958:	e046      	b.n	80029e8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_TIM_MspPostInit+0x100>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d11e      	bne.n	80029a2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a20      	ldr	r2, [pc, #128]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b1e      	ldr	r3, [pc, #120]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002990:	2302      	movs	r3, #2
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	4818      	ldr	r0, [pc, #96]	; (80029fc <HAL_TIM_MspPostInit+0x104>)
 800299c:	f000 fb68 	bl	8003070 <HAL_GPIO_Init>
}
 80029a0:	e022      	b.n	80029e8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_TIM_MspPostInit+0x108>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d11d      	bne.n	80029e8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	4a0e      	ldr	r2, [pc, #56]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	6313      	str	r3, [r2, #48]	; 0x30
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <HAL_TIM_MspPostInit+0xf8>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029d8:	2302      	movs	r3, #2
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <HAL_TIM_MspPostInit+0x10c>)
 80029e4:	f000 fb44 	bl	8003070 <HAL_GPIO_Init>
}
 80029e8:	bf00      	nop
 80029ea:	3728      	adds	r7, #40	; 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40000400 	.word	0x40000400
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40000800 	.word	0x40000800
 8002a04:	40020400 	.word	0x40020400

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <HAL_UART_MspInit+0xc0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d14a      	bne.n	8002ac0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a34:	f043 0320 	orr.w	r3, r3, #32
 8002a38:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_UART_MspInit+0xc4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <HAL_UART_MspInit+0xc8>)
 8002a9a:	f000 fae9 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ab0:	2308      	movs	r3, #8
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <HAL_UART_MspInit+0xcc>)
 8002abc:	f000 fad8 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40011400 	.word	0x40011400
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <NMI_Handler+0x4>

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b24:	f000 f94e 	bl	8002dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	0000      	movs	r0, r0
	...

08002b30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002b36:	4820      	ldr	r0, [pc, #128]	; (8002bb8 <TIM5_IRQHandler+0x88>)
 8002b38:	f001 f9df 	bl	8003efa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  if (risingEdgeInterrupt == 1)
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <TIM5_IRQHandler+0x8c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d106      	bne.n	8002b52 <TIM5_IRQHandler+0x22>
  {
	  TIM5->CNT = 0;
 8002b44:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <TIM5_IRQHandler+0x90>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
//	  TIM5->CCER = (TIM5->CCER & ~(0b1010)) | 0b0010;
	  risingEdgeInterrupt = 0;
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <TIM5_IRQHandler+0x8c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 8002b50:	e02a      	b.n	8002ba8 <TIM5_IRQHandler+0x78>
	  counter = TIM5->CNT;
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <TIM5_IRQHandler+0x90>)
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <TIM5_IRQHandler+0x94>)
 8002b5a:	601a      	str	r2, [r3, #0]
	  float inches = counter / 144.0;
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <TIM5_IRQHandler+0x94>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fc8b 	bl	800047c <__aeabi_i2d>
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <TIM5_IRQHandler+0x98>)
 8002b6c:	f7fd fe1a 	bl	80007a4 <__aeabi_ddiv>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	f7fd fefc 	bl	8000974 <__aeabi_d2f>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7fd fc8d 	bl	80004a0 <__aeabi_f2d>
 8002b86:	a30a      	add	r3, pc, #40	; (adr r3, 8002bb0 <TIM5_IRQHandler+0x80>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fce0 	bl	8000550 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fd feec 	bl	8000974 <__aeabi_d2f>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <TIM5_IRQHandler+0x9c>)
 8002ba0:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <TIM5_IRQHandler+0x8c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	851eb852 	.word	0x851eb852
 8002bb4:	400451eb 	.word	0x400451eb
 8002bb8:	20000100 	.word	0x20000100
 8002bbc:	20000190 	.word	0x20000190
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	20000194 	.word	0x20000194
 8002bc8:	40620000 	.word	0x40620000
 8002bcc:	20000198 	.word	0x20000198

08002bd0 <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 8002bd4:	2300      	movs	r3, #0
}   // is_switch_on()
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <test_wall_sensor>:
	rotate_360_degrees(Right);
	HAL_Delay(1000);
}  // void test_alternate_360()

void test_wall_sensor()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	uint8_t left_wall = is_there_wall_on_direction(Left);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f846 	bl	8002c9c <is_there_wall_on_direction>
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
	uint8_t right_wall = is_there_wall_on_direction(Right);
 8002c14:	2002      	movs	r0, #2
 8002c16:	f000 f841 	bl	8002c9c <is_there_wall_on_direction>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71bb      	strb	r3, [r7, #6]
	uint8_t front_wall = is_there_wall_on_direction(Front);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f000 f83c 	bl	8002c9c <is_there_wall_on_direction>
 8002c24:	4603      	mov	r3, r0
 8002c26:	717b      	strb	r3, [r7, #5]
}
 8002c28:	bf00      	nop
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0

//	test_alternate_left_right();
//	test_zig_zag();
//	test_turn_left();
	test_wall_sensor();
 8002c34:	f7ff ffe6 	bl	8002c04 <test_wall_sensor>
//	test_servo_angles();


	return do_test_algorithm();
 8002c38:	f7ff fffa 	bl	8002c30 <do_test_algorithm>
}  // do_test_algorithm()
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <distance_of_object_in_cm>:
int risingEdgeInterrupt;
int counter;
float centimeters;

int16_t distance_of_object_in_cm()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
//	TIM5->CCER = (TIM5->CCER & ~(0b1010)) | 0b0000;

//	counter = 0;
//	centimeters = 0;

	HAL_GPIO_WritePin(SONIC_TRIGGER_GPIO_Port, SONIC_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002c46:	2201      	movs	r2, #1
 8002c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4c:	4811      	ldr	r0, [pc, #68]	; (8002c94 <distance_of_object_in_cm+0x54>)
 8002c4e:	f000 fb93 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002c52:	200a      	movs	r0, #10
 8002c54:	f000 f8d6 	bl	8002e04 <HAL_Delay>
	HAL_GPIO_WritePin(SONIC_TRIGGER_GPIO_Port, SONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c5e:	480d      	ldr	r0, [pc, #52]	; (8002c94 <distance_of_object_in_cm+0x54>)
 8002c60:	f000 fb8a 	bl	8003378 <HAL_GPIO_WritePin>

//	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
	for (int i = 0; i < 38000; ++i) {
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	e002      	b.n	8002c70 <distance_of_object_in_cm+0x30>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f249 426f 	movw	r2, #37999	; 0x946f
 8002c76:	4293      	cmp	r3, r2
 8002c78:	ddf7      	ble.n	8002c6a <distance_of_object_in_cm+0x2a>
		continue;
	}
	return centimeters;
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <distance_of_object_in_cm+0x58>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	b21b      	sxth	r3, r3
}  // int16_t distance_of_object_in_cm()
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40020400 	.word	0x40020400
 8002c98:	20000198 	.word	0x20000198

08002c9c <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fd3e 	bl	800272a <set_servo_angle>
	HAL_Delay(100);
 8002cae:	2064      	movs	r0, #100	; 0x64
 8002cb0:	f000 f8a8 	bl	8002e04 <HAL_Delay>
	return distance_of_object_in_cm() < 18;
 8002cb4:	f7ff ffc4 	bl	8002c40 <distance_of_object_in_cm>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b11      	cmp	r3, #17
 8002cbc:	bfd4      	ite	le
 8002cbe:	2301      	movle	r3, #1
 8002cc0:	2300      	movgt	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
}  // is_there_wall_on_direction(direction d)
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ccc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd0:	480d      	ldr	r0, [pc, #52]	; (8002d08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd2:	490e      	ldr	r1, [pc, #56]	; (8002d0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd8:	e002      	b.n	8002ce0 <LoopCopyDataInit>

08002cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cde:	3304      	adds	r3, #4

08002ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce4:	d3f9      	bcc.n	8002cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce8:	4c0b      	ldr	r4, [pc, #44]	; (8002d18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cec:	e001      	b.n	8002cf2 <LoopFillZerobss>

08002cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf0:	3204      	adds	r2, #4

08002cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf4:	d3fb      	bcc.n	8002cee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cf6:	f7ff ff73 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfa:	f002 fb2b 	bl	8005354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfe:	f7ff f99b 	bl	8002038 <main>
  bx  lr    
 8002d02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d10:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 8002d14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d18:	200001a0 	.word	0x200001a0

08002d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC_IRQHandler>
	...

08002d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0d      	ldr	r2, [pc, #52]	; (8002d60 <HAL_Init+0x40>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_Init+0x40>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <HAL_Init+0x40>)
 8002d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_Init+0x40>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_Init+0x40>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f94f 	bl	8002fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4e:	200f      	movs	r0, #15
 8002d50:	f000 f808 	bl	8002d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d54:	f7ff fd0c 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_InitTick+0x54>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x58>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f967 	bl	8003056 <HAL_SYSTICK_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00e      	b.n	8002db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d80a      	bhi.n	8002dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f000 f92f 	bl	8003002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da4:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <HAL_InitTick+0x5c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000008 	.word	0x20000008
 8002dc0:	20000004 	.word	0x20000004

08002dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_IncTick+0x20>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <HAL_IncTick+0x24>)
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008
 8002de8:	2000019c 	.word	0x2000019c

08002dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return uwTick;
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_GetTick+0x14>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000019c 	.word	0x2000019c

08002e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e0c:	f7ff ffee 	bl	8002dec <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d005      	beq.n	8002e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_Delay+0x44>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4413      	add	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e2a:	bf00      	nop
 8002e2c:	f7ff ffde 	bl	8002dec <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8f7      	bhi.n	8002e2c <HAL_Delay+0x28>
  {
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000008 	.word	0x20000008

08002e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e7e:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <__NVIC_SetPriorityGrouping+0x44>)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e98:	4b04      	ldr	r3, [pc, #16]	; (8002eac <__NVIC_GetPriorityGrouping+0x18>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	db0b      	blt.n	8002eda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	4907      	ldr	r1, [pc, #28]	; (8002ee8 <__NVIC_EnableIRQ+0x38>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000e100 	.word	0xe000e100

08002eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	6039      	str	r1, [r7, #0]
 8002ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	db0a      	blt.n	8002f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	490c      	ldr	r1, [pc, #48]	; (8002f38 <__NVIC_SetPriority+0x4c>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	0112      	lsls	r2, r2, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f14:	e00a      	b.n	8002f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4908      	ldr	r1, [pc, #32]	; (8002f3c <__NVIC_SetPriority+0x50>)
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3b04      	subs	r3, #4
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	440b      	add	r3, r1
 8002f2a:	761a      	strb	r2, [r3, #24]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	bf28      	it	cs
 8002f5e:	2304      	movcs	r3, #4
 8002f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d902      	bls.n	8002f70 <NVIC_EncodePriority+0x30>
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3b03      	subs	r3, #3
 8002f6e:	e000      	b.n	8002f72 <NVIC_EncodePriority+0x32>
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	401a      	ands	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f88:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f98:	4313      	orrs	r3, r2
         );
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3724      	adds	r7, #36	; 0x24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fb8:	d301      	bcc.n	8002fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00f      	b.n	8002fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <SysTick_Config+0x40>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc6:	210f      	movs	r1, #15
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7ff ff8e 	bl	8002eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SysTick_Config+0x40>)
 8002fd8:	2207      	movs	r2, #7
 8002fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	e000e010 	.word	0xe000e010

08002fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff ff29 	bl	8002e4c <__NVIC_SetPriorityGrouping>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003014:	f7ff ff3e 	bl	8002e94 <__NVIC_GetPriorityGrouping>
 8003018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	6978      	ldr	r0, [r7, #20]
 8003020:	f7ff ff8e 	bl	8002f40 <NVIC_EncodePriority>
 8003024:	4602      	mov	r2, r0
 8003026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ff5d 	bl	8002eec <__NVIC_SetPriority>
}
 8003032:	bf00      	nop
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff31 	bl	8002eb0 <__NVIC_EnableIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffa2 	bl	8002fa8 <SysTick_Config>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e159      	b.n	8003340 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	f040 8148 	bne.w	800333a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d005      	beq.n	80030c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d130      	bne.n	8003124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 0201 	and.w	r2, r3, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d017      	beq.n	8003160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d123      	bne.n	80031b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	220f      	movs	r2, #15
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a2 	beq.w	800333a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	4a56      	ldr	r2, [pc, #344]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 8003200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	4b54      	ldr	r3, [pc, #336]	; (8003358 <HAL_GPIO_Init+0x2e8>)
 8003208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003212:	4a52      	ldr	r2, [pc, #328]	; (800335c <HAL_GPIO_Init+0x2ec>)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	3302      	adds	r3, #2
 800321a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	220f      	movs	r2, #15
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a49      	ldr	r2, [pc, #292]	; (8003360 <HAL_GPIO_Init+0x2f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d019      	beq.n	8003272 <HAL_GPIO_Init+0x202>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a48      	ldr	r2, [pc, #288]	; (8003364 <HAL_GPIO_Init+0x2f4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d013      	beq.n	800326e <HAL_GPIO_Init+0x1fe>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a47      	ldr	r2, [pc, #284]	; (8003368 <HAL_GPIO_Init+0x2f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00d      	beq.n	800326a <HAL_GPIO_Init+0x1fa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a46      	ldr	r2, [pc, #280]	; (800336c <HAL_GPIO_Init+0x2fc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <HAL_GPIO_Init+0x1f6>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a45      	ldr	r2, [pc, #276]	; (8003370 <HAL_GPIO_Init+0x300>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_GPIO_Init+0x1f2>
 800325e:	2304      	movs	r3, #4
 8003260:	e008      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003262:	2307      	movs	r3, #7
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003266:	2303      	movs	r3, #3
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x204>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x204>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x204>
 8003272:	2300      	movs	r3, #0
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003284:	4935      	ldr	r1, [pc, #212]	; (800335c <HAL_GPIO_Init+0x2ec>)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b38      	ldr	r3, [pc, #224]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b2d      	ldr	r3, [pc, #180]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_GPIO_Init+0x304>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_GPIO_Init+0x304>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003334:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3301      	adds	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	f67f aea2 	bls.w	800308c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40013800 	.word	0x40013800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e267      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d075      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b85      	ldr	r3, [pc, #532]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e242      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x74>
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a75      	ldr	r2, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6c      	ldr	r2, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003444:	4b69      	ldr	r3, [pc, #420]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7ff fcc2 	bl	8002dec <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7ff fcbe 	bl	8002dec <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e207      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xc0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff fcae 	bl	8002dec <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7ff fcaa 	bl	8002dec <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1f3      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c7      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e03a      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7ff fc63 	bl	8002dec <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352a:	f7ff fc5f 	bl	8002dec <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1a8      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7ff fc42 	bl	8002dec <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7ff fc3e 	bl	8002dec <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e187      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d036      	beq.n	8003604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7ff fc22 	bl	8002dec <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ac:	f7ff fc1e 	bl	8002dec <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e167      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80035c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x200>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7ff fc0b 	bl	8002dec <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	e00e      	b.n	80035f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035da:	f7ff fc07 	bl	8002dec <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d907      	bls.n	80035f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e150      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470000 	.word	0x42470000
 80035f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b88      	ldr	r3, [pc, #544]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ea      	bne.n	80035da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8097 	beq.w	8003740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b81      	ldr	r3, [pc, #516]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b7a      	ldr	r3, [pc, #488]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b77      	ldr	r3, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7ff fbc7 	bl	8002dec <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7ff fbc3 	bl	8002dec <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e10c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x2ea>
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x30c>
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	4b5c      	ldr	r3, [pc, #368]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5b      	ldr	r2, [pc, #364]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a57      	ldr	r2, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	4b55      	ldr	r3, [pc, #340]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7ff fb88 	bl	8002dec <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7ff fb84 	bl	8002dec <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0cb      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <HAL_RCC_OscConfig+0x334>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7ff fb72 	bl	8002dec <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7ff fb6e 	bl	8002dec <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0b5      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a1 	beq.w	800388c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d05c      	beq.n	8003810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d141      	bne.n	80037e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7ff fb42 	bl	8002dec <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7ff fb3e 	bl	8002dec <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e087      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	491b      	ldr	r1, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7ff fb17 	bl	8002dec <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7ff fb13 	bl	8002dec <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e05c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x416>
 80037e0:	e054      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7ff fb00 	bl	8002dec <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7ff fafc 	bl	8002dec <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e045      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
 800380e:	e03d      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e038      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4ec>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d028      	beq.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d121      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d11a      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0cc      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b68      	ldr	r3, [pc, #416]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d90c      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b8      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d119      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	2b03      	cmp	r3, #3
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e067      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4934      	ldr	r1, [pc, #208]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7ff fa2e 	bl	8002dec <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7ff fa2a 	bl	8002dec <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e04f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d20c      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e032      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a22:	f000 f821 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490a      	ldr	r1, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff f98e 	bl	8002d64 <HAL_InitTick>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	080053c4 	.word	0x080053c4
 8003a60:	20000000 	.word	0x20000000
 8003a64:	20000004 	.word	0x20000004

08003a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b090      	sub	sp, #64	; 0x40
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	2300      	movs	r3, #0
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	f200 80a1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x34>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9a:	e09b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003aa0:	e09b      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa6:	e098      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad4:	fb03 f201 	mul.w	r2, r3, r1
 8003ad8:	2300      	movs	r3, #0
 8003ada:	fb00 f303 	mul.w	r3, r0, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae8:	460a      	mov	r2, r1
 8003aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aee:	4413      	add	r3, r2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	2200      	movs	r2, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b02:	f7fc ff87 	bl	8000a14 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	e053      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	617a      	str	r2, [r7, #20]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b22:	f04f 0b00 	mov.w	fp, #0
 8003b26:	4652      	mov	r2, sl
 8003b28:	465b      	mov	r3, fp
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b42:	eb63 090b 	sbc.w	r9, r3, fp
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	00eb      	lsls	r3, r5, #3
 8003b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b70:	00e2      	lsls	r2, r4, #3
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	eb14 030a 	adds.w	r3, r4, sl
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	eb45 030b 	adc.w	r3, r5, fp
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bac:	f7fc ff32 	bl	8000a14 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3740      	adds	r7, #64	; 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	017d7840 	.word	0x017d7840

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	080053d4 	.word	0x080053d4

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	080053d4 	.word	0x080053d4

08003c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e041      	b.n	8003cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe fd9c 	bl	80027c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f000 fbc6 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_PWM_Start+0x24>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e022      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d109      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x3e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e015      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d109      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x58>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e008      	b.n	8003d66 <HAL_TIM_PWM_Start+0x6a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e068      	b.n	8003e40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x82>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x92>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xa2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_PWM_Start+0xaa>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fe66 	bl	8004a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_TIM_PWM_Start+0x14c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d107      	bne.n	8003dce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <HAL_TIM_PWM_Start+0x14c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d013      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIM_PWM_Start+0x150>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a17      	ldr	r2, [pc, #92]	; (8003e50 <HAL_TIM_PWM_Start+0x154>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a16      	ldr	r2, [pc, #88]	; (8003e54 <HAL_TIM_PWM_Start+0x158>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x10e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <HAL_TIM_PWM_Start+0x15c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b06      	cmp	r3, #6
 8003e1a:	d010      	beq.n	8003e3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2c:	e007      	b.n	8003e3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000

08003e5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fce8 	bl	8002858 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fac6 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d122      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d11b      	bne.n	8003f56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f06f 0202 	mvn.w	r2, #2
 8003f26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa57 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8003f42:	e005      	b.n	8003f50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fa49 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa5a 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d122      	bne.n	8003faa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d11b      	bne.n	8003faa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f06f 0204 	mvn.w	r2, #4
 8003f7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fa2d 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8003f96:	e005      	b.n	8003fa4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fa1f 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa30 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d122      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d11b      	bne.n	8003ffe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0208 	mvn.w	r2, #8
 8003fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fa03 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 8003fea:	e005      	b.n	8003ff8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f9f5 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa06 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d122      	bne.n	8004052 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d11b      	bne.n	8004052 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f06f 0210 	mvn.w	r2, #16
 8004022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2208      	movs	r2, #8
 8004028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f9d9 	bl	80043f0 <HAL_TIM_IC_CaptureCallback>
 800403e:	e005      	b.n	800404c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f9cb 	bl	80043dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9dc 	bl	8004404 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10e      	bne.n	800407e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0201 	mvn.w	r2, #1
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f9a5 	bl	80043c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b80      	cmp	r3, #128	; 0x80
 800408a:	d10e      	bne.n	80040aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b80      	cmp	r3, #128	; 0x80
 8004098:	d107      	bne.n	80040aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fd89 	bl	8004bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d10e      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d107      	bne.n	80040d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9a1 	bl	8004418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d10e      	bne.n	8004102 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f06f 0220 	mvn.w	r2, #32
 80040fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fd53 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004124:	2302      	movs	r3, #2
 8004126:	e088      	b.n	800423a <HAL_TIM_IC_ConfigChannel+0x130>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d11b      	bne.n	800416e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f000 fb7d 	bl	8004844 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 020c 	bic.w	r2, r2, #12
 8004158:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6999      	ldr	r1, [r3, #24]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	619a      	str	r2, [r3, #24]
 800416c:	e060      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d11c      	bne.n	80041ae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f000 fbc6 	bl	8004914 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004196:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	021a      	lsls	r2, r3, #8
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	619a      	str	r2, [r3, #24]
 80041ac:	e040      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f000 fbe3 	bl	800498e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 020c 	bic.w	r2, r2, #12
 80041d6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69d9      	ldr	r1, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	61da      	str	r2, [r3, #28]
 80041ea:	e021      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d11c      	bne.n	800422c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f000 fc00 	bl	8004a06 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004214:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69d9      	ldr	r1, [r3, #28]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	61da      	str	r2, [r3, #28]
 800422a:	e001      	b.n	8004230 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004238:	7dfb      	ldrb	r3, [r7, #23]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e0ae      	b.n	80043c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	f200 809f 	bhi.w	80043b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080043b1 	.word	0x080043b1
 8004280:	080043b1 	.word	0x080043b1
 8004284:	080043b1 	.word	0x080043b1
 8004288:	080042ed 	.word	0x080042ed
 800428c:	080043b1 	.word	0x080043b1
 8004290:	080043b1 	.word	0x080043b1
 8004294:	080043b1 	.word	0x080043b1
 8004298:	0800432f 	.word	0x0800432f
 800429c:	080043b1 	.word	0x080043b1
 80042a0:	080043b1 	.word	0x080043b1
 80042a4:	080043b1 	.word	0x080043b1
 80042a8:	0800436f 	.word	0x0800436f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f93a 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
      break;
 80042ea:	e064      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f980 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6999      	ldr	r1, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	619a      	str	r2, [r3, #24]
      break;
 800432c:	e043      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f9cb 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0208 	orr.w	r2, r2, #8
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0204 	bic.w	r2, r2, #4
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
      break;
 800436c:	e023      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fa15 	bl	80047a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	021a      	lsls	r2, r3, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a31      	ldr	r2, [pc, #196]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a30      	ldr	r2, [pc, #192]	; (8004518 <TIM_Base_SetConfig+0xec>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <TIM_Base_SetConfig+0xf0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d017      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <TIM_Base_SetConfig+0xec>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00f      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <TIM_Base_SetConfig+0xf0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <TIM_Base_SetConfig+0xf4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <TIM_Base_SetConfig+0xf8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <TIM_Base_SetConfig+0xfc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <TIM_OC1_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0308 	bic.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <TIM_OC1_SetConfig+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40010000 	.word	0x40010000

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <TIM_OC2_SetConfig+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC2_SetConfig+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d113      	bne.n	80046a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10d      	bne.n	800474a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40010000 	.word	0x40010000

080047a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <TIM_OC4_SetConfig+0x9c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d109      	bne.n	8004818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000

08004844 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a24      	ldr	r2, [pc, #144]	; (8004900 <TIM_TI1_SetConfig+0xbc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_TI1_SetConfig+0x56>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d00f      	beq.n	800489a <TIM_TI1_SetConfig+0x56>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <TIM_TI1_SetConfig+0xc0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_TI1_SetConfig+0x56>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a20      	ldr	r2, [pc, #128]	; (8004908 <TIM_TI1_SetConfig+0xc4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_TI1_SetConfig+0x56>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a1f      	ldr	r2, [pc, #124]	; (800490c <TIM_TI1_SetConfig+0xc8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_TI1_SetConfig+0x56>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <TIM_TI1_SetConfig+0xcc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <TIM_TI1_SetConfig+0x5a>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <TIM_TI1_SetConfig+0x5c>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0303 	bic.w	r3, r3, #3
 80048aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e003      	b.n	80048be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f023 030a 	bic.w	r3, r3, #10
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 030a 	and.w	r3, r3, #10
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000

08004914 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0210 	bic.w	r2, r3, #16
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	031b      	lsls	r3, r3, #12
 8004958:	b29b      	uxth	r3, r3
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004966:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800498e:	b480      	push	{r7}
 8004990:	b087      	sub	sp, #28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0303 	bic.w	r3, r3, #3
 80049ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80049de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b087      	sub	sp, #28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
 8004a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	031b      	lsls	r3, r3, #12
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1a      	ldr	r2, [r3, #32]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 031f 	and.w	r3, r3, #31
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e050      	b.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d018      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d013      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d009      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10c      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e03f      	b.n	8004c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd ff06 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f929 	bl	8004e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b08a      	sub	sp, #40	; 0x28
 8004c6e:	af02      	add	r7, sp, #8
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d17c      	bne.n	8004d84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_UART_Transmit+0x2c>
 8004c90:	88fb      	ldrh	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e075      	b.n	8004d86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_UART_Transmit+0x3e>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e06e      	b.n	8004d86 <HAL_UART_Transmit+0x11c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2221      	movs	r2, #33	; 0x21
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cbe:	f7fe f895 	bl	8002dec <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	88fa      	ldrh	r2, [r7, #6]
 8004cc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cd8:	d108      	bne.n	8004cec <HAL_UART_Transmit+0x82>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d104      	bne.n	8004cec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e003      	b.n	8004cf4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cfc:	e02a      	b.n	8004d54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f840 	bl	8004d8e <UART_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e036      	b.n	8004d86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	3302      	adds	r3, #2
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	e007      	b.n	8004d46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1cf      	bne.n	8004cfe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2140      	movs	r1, #64	; 0x40
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f810 	bl	8004d8e <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e006      	b.n	8004d86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e000      	b.n	8004d86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d84:	2302      	movs	r3, #2
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b090      	sub	sp, #64	; 0x40
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9e:	e050      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d04c      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8004dae:	f7fe f81d 	bl	8002dec <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d241      	bcs.n	8004e42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dde:	637a      	str	r2, [r7, #52]	; 0x34
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004de4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e12:	623a      	str	r2, [r7, #32]
 8004e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69f9      	ldr	r1, [r7, #28]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e00f      	b.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d09f      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3740      	adds	r7, #64	; 0x40
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e70:	b0c0      	sub	sp, #256	; 0x100
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e88:	68d9      	ldr	r1, [r3, #12]
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	ea40 0301 	orr.w	r3, r0, r1
 8004e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ec4:	f021 010c 	bic.w	r1, r1, #12
 8004ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee6:	6999      	ldr	r1, [r3, #24]
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	ea40 0301 	orr.w	r3, r0, r1
 8004ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b8f      	ldr	r3, [pc, #572]	; (8005138 <UART_SetConfig+0x2cc>)
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d005      	beq.n	8004f0c <UART_SetConfig+0xa0>
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b8d      	ldr	r3, [pc, #564]	; (800513c <UART_SetConfig+0x2d0>)
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d104      	bne.n	8004f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7fe fe92 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8004f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f14:	e003      	b.n	8004f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f16:	f7fe fe79 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 8004f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	f040 810c 	bne.w	8005144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f3e:	4622      	mov	r2, r4
 8004f40:	462b      	mov	r3, r5
 8004f42:	1891      	adds	r1, r2, r2
 8004f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f46:	415b      	adcs	r3, r3
 8004f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f4e:	4621      	mov	r1, r4
 8004f50:	eb12 0801 	adds.w	r8, r2, r1
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb43 0901 	adc.w	r9, r3, r1
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f6e:	4690      	mov	r8, r2
 8004f70:	4699      	mov	r9, r3
 8004f72:	4623      	mov	r3, r4
 8004f74:	eb18 0303 	adds.w	r3, r8, r3
 8004f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	eb49 0303 	adc.w	r3, r9, r3
 8004f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	18db      	adds	r3, r3, r3
 8004f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	eb42 0303 	adc.w	r3, r2, r3
 8004fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fb0:	f7fb fd30 	bl	8000a14 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b61      	ldr	r3, [pc, #388]	; (8005140 <UART_SetConfig+0x2d4>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	011c      	lsls	r4, r3, #4
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0b01 	adc.w	fp, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005004:	4692      	mov	sl, r2
 8005006:	469b      	mov	fp, r3
 8005008:	4643      	mov	r3, r8
 800500a:	eb1a 0303 	adds.w	r3, sl, r3
 800500e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005012:	464b      	mov	r3, r9
 8005014:	eb4b 0303 	adc.w	r3, fp, r3
 8005018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800502c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005030:	460b      	mov	r3, r1
 8005032:	18db      	adds	r3, r3, r3
 8005034:	643b      	str	r3, [r7, #64]	; 0x40
 8005036:	4613      	mov	r3, r2
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	647b      	str	r3, [r7, #68]	; 0x44
 800503e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005046:	f7fb fce5 	bl	8000a14 <__aeabi_uldivmod>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4611      	mov	r1, r2
 8005050:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <UART_SetConfig+0x2d4>)
 8005052:	fba3 2301 	umull	r2, r3, r3, r1
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2264      	movs	r2, #100	; 0x64
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	1acb      	subs	r3, r1, r3
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <UART_SetConfig+0x2d4>)
 8005068:	fba3 2302 	umull	r2, r3, r3, r2
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005074:	441c      	add	r4, r3
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507a:	2200      	movs	r2, #0
 800507c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005088:	4642      	mov	r2, r8
 800508a:	464b      	mov	r3, r9
 800508c:	1891      	adds	r1, r2, r2
 800508e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005090:	415b      	adcs	r3, r3
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005098:	4641      	mov	r1, r8
 800509a:	1851      	adds	r1, r2, r1
 800509c:	6339      	str	r1, [r7, #48]	; 0x30
 800509e:	4649      	mov	r1, r9
 80050a0:	414b      	adcs	r3, r1
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050b0:	4659      	mov	r1, fp
 80050b2:	00cb      	lsls	r3, r1, #3
 80050b4:	4651      	mov	r1, sl
 80050b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ba:	4651      	mov	r1, sl
 80050bc:	00ca      	lsls	r2, r1, #3
 80050be:	4610      	mov	r0, r2
 80050c0:	4619      	mov	r1, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	4642      	mov	r2, r8
 80050c6:	189b      	adds	r3, r3, r2
 80050c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050cc:	464b      	mov	r3, r9
 80050ce:	460a      	mov	r2, r1
 80050d0:	eb42 0303 	adc.w	r3, r2, r3
 80050d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005102:	f7fb fc87 	bl	8000a14 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <UART_SetConfig+0x2d4>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a08      	ldr	r2, [pc, #32]	; (8005140 <UART_SetConfig+0x2d4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	f003 0207 	and.w	r2, r3, #7
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4422      	add	r2, r4
 8005132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005134:	e105      	b.n	8005342 <UART_SetConfig+0x4d6>
 8005136:	bf00      	nop
 8005138:	40011000 	.word	0x40011000
 800513c:	40011400 	.word	0x40011400
 8005140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800514e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005156:	4642      	mov	r2, r8
 8005158:	464b      	mov	r3, r9
 800515a:	1891      	adds	r1, r2, r2
 800515c:	6239      	str	r1, [r7, #32]
 800515e:	415b      	adcs	r3, r3
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
 8005162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005166:	4641      	mov	r1, r8
 8005168:	1854      	adds	r4, r2, r1
 800516a:	4649      	mov	r1, r9
 800516c:	eb43 0501 	adc.w	r5, r3, r1
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	00eb      	lsls	r3, r5, #3
 800517a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800517e:	00e2      	lsls	r2, r4, #3
 8005180:	4614      	mov	r4, r2
 8005182:	461d      	mov	r5, r3
 8005184:	4643      	mov	r3, r8
 8005186:	18e3      	adds	r3, r4, r3
 8005188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800518c:	464b      	mov	r3, r9
 800518e:	eb45 0303 	adc.w	r3, r5, r3
 8005192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051b2:	4629      	mov	r1, r5
 80051b4:	008b      	lsls	r3, r1, #2
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051bc:	4621      	mov	r1, r4
 80051be:	008a      	lsls	r2, r1, #2
 80051c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051c4:	f7fb fc26 	bl	8000a14 <__aeabi_uldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4b60      	ldr	r3, [pc, #384]	; (8005350 <UART_SetConfig+0x4e4>)
 80051ce:	fba3 2302 	umull	r2, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	011c      	lsls	r4, r3, #4
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051e8:	4642      	mov	r2, r8
 80051ea:	464b      	mov	r3, r9
 80051ec:	1891      	adds	r1, r2, r2
 80051ee:	61b9      	str	r1, [r7, #24]
 80051f0:	415b      	adcs	r3, r3
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f8:	4641      	mov	r1, r8
 80051fa:	1851      	adds	r1, r2, r1
 80051fc:	6139      	str	r1, [r7, #16]
 80051fe:	4649      	mov	r1, r9
 8005200:	414b      	adcs	r3, r1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005210:	4659      	mov	r1, fp
 8005212:	00cb      	lsls	r3, r1, #3
 8005214:	4651      	mov	r1, sl
 8005216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800521a:	4651      	mov	r1, sl
 800521c:	00ca      	lsls	r2, r1, #3
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	4603      	mov	r3, r0
 8005224:	4642      	mov	r2, r8
 8005226:	189b      	adds	r3, r3, r2
 8005228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800522c:	464b      	mov	r3, r9
 800522e:	460a      	mov	r2, r1
 8005230:	eb42 0303 	adc.w	r3, r2, r3
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	67bb      	str	r3, [r7, #120]	; 0x78
 8005242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005250:	4649      	mov	r1, r9
 8005252:	008b      	lsls	r3, r1, #2
 8005254:	4641      	mov	r1, r8
 8005256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800525a:	4641      	mov	r1, r8
 800525c:	008a      	lsls	r2, r1, #2
 800525e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005262:	f7fb fbd7 	bl	8000a14 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <UART_SetConfig+0x4e4>)
 800526c:	fba3 1302 	umull	r1, r3, r3, r2
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	2164      	movs	r1, #100	; 0x64
 8005274:	fb01 f303 	mul.w	r3, r1, r3
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	3332      	adds	r3, #50	; 0x32
 800527e:	4a34      	ldr	r2, [pc, #208]	; (8005350 <UART_SetConfig+0x4e4>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800528a:	441c      	add	r4, r3
 800528c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005290:	2200      	movs	r2, #0
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	677a      	str	r2, [r7, #116]	; 0x74
 8005296:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800529a:	4642      	mov	r2, r8
 800529c:	464b      	mov	r3, r9
 800529e:	1891      	adds	r1, r2, r2
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	415b      	adcs	r3, r3
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052aa:	4641      	mov	r1, r8
 80052ac:	1851      	adds	r1, r2, r1
 80052ae:	6039      	str	r1, [r7, #0]
 80052b0:	4649      	mov	r1, r9
 80052b2:	414b      	adcs	r3, r1
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052c2:	4659      	mov	r1, fp
 80052c4:	00cb      	lsls	r3, r1, #3
 80052c6:	4651      	mov	r1, sl
 80052c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052cc:	4651      	mov	r1, sl
 80052ce:	00ca      	lsls	r2, r1, #3
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	4642      	mov	r2, r8
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	66bb      	str	r3, [r7, #104]	; 0x68
 80052dc:	464b      	mov	r3, r9
 80052de:	460a      	mov	r2, r1
 80052e0:	eb42 0303 	adc.w	r3, r2, r3
 80052e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	663b      	str	r3, [r7, #96]	; 0x60
 80052f0:	667a      	str	r2, [r7, #100]	; 0x64
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052fe:	4649      	mov	r1, r9
 8005300:	008b      	lsls	r3, r1, #2
 8005302:	4641      	mov	r1, r8
 8005304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005308:	4641      	mov	r1, r8
 800530a:	008a      	lsls	r2, r1, #2
 800530c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005310:	f7fb fb80 	bl	8000a14 <__aeabi_uldivmod>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4b0d      	ldr	r3, [pc, #52]	; (8005350 <UART_SetConfig+0x4e4>)
 800531a:	fba3 1302 	umull	r1, r3, r3, r2
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	2164      	movs	r1, #100	; 0x64
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	3332      	adds	r3, #50	; 0x32
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <UART_SetConfig+0x4e4>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	f003 020f 	and.w	r2, r3, #15
 8005338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4422      	add	r2, r4
 8005340:	609a      	str	r2, [r3, #8]
}
 8005342:	bf00      	nop
 8005344:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	51eb851f 	.word	0x51eb851f

08005354 <__libc_init_array>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4d0d      	ldr	r5, [pc, #52]	; (800538c <__libc_init_array+0x38>)
 8005358:	4c0d      	ldr	r4, [pc, #52]	; (8005390 <__libc_init_array+0x3c>)
 800535a:	1b64      	subs	r4, r4, r5
 800535c:	10a4      	asrs	r4, r4, #2
 800535e:	2600      	movs	r6, #0
 8005360:	42a6      	cmp	r6, r4
 8005362:	d109      	bne.n	8005378 <__libc_init_array+0x24>
 8005364:	4d0b      	ldr	r5, [pc, #44]	; (8005394 <__libc_init_array+0x40>)
 8005366:	4c0c      	ldr	r4, [pc, #48]	; (8005398 <__libc_init_array+0x44>)
 8005368:	f000 f820 	bl	80053ac <_init>
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	2600      	movs	r6, #0
 8005372:	42a6      	cmp	r6, r4
 8005374:	d105      	bne.n	8005382 <__libc_init_array+0x2e>
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	f855 3b04 	ldr.w	r3, [r5], #4
 800537c:	4798      	blx	r3
 800537e:	3601      	adds	r6, #1
 8005380:	e7ee      	b.n	8005360 <__libc_init_array+0xc>
 8005382:	f855 3b04 	ldr.w	r3, [r5], #4
 8005386:	4798      	blx	r3
 8005388:	3601      	adds	r6, #1
 800538a:	e7f2      	b.n	8005372 <__libc_init_array+0x1e>
 800538c:	080053e4 	.word	0x080053e4
 8005390:	080053e4 	.word	0x080053e4
 8005394:	080053e4 	.word	0x080053e4
 8005398:	080053e8 	.word	0x080053e8

0800539c <memset>:
 800539c:	4402      	add	r2, r0
 800539e:	4603      	mov	r3, r0
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d100      	bne.n	80053a6 <memset+0xa>
 80053a4:	4770      	bx	lr
 80053a6:	f803 1b01 	strb.w	r1, [r3], #1
 80053aa:	e7f9      	b.n	80053a0 <memset+0x4>

080053ac <_init>:
 80053ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ae:	bf00      	nop
 80053b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b2:	bc08      	pop	{r3}
 80053b4:	469e      	mov	lr, r3
 80053b6:	4770      	bx	lr

080053b8 <_fini>:
 80053b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ba:	bf00      	nop
 80053bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053be:	bc08      	pop	{r3}
 80053c0:	469e      	mov	lr, r3
 80053c2:	4770      	bx	lr
