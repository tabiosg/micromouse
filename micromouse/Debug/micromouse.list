
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a448  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ac  0800a5e8  0800a5e8  0001a5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae94  0800ae94  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae9c  0800ae9c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae9c  0800ae9c  0001ae9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aea0  0800aea0  0001aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800aea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001e8  0800b08c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  0800b08c  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001147d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddb  00000000  00000000  00031695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00034470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00035410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e4  00000000  00000000  00036238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157f6  00000000  00000000  0004fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900ea  00000000  00000000  00065412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f54fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000f554c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5d0 	.word	0x0800a5d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a5d0 	.word	0x0800a5d0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e009      	b.n	8000f88 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f80c 	bl	8000f9a <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	ddf1      	ble.n	8000f74 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turn_LED+0x1c>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <turn_LED+0x26>
 8000fb4:	e008      	b.n	8000fc8 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f809 	bl	8000fd0 <turn_off_LED_color>
		return;
 8000fbe:	e003      	b.n	8000fc8 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f824 	bl	8001010 <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d811      	bhi.n	8001004 <turn_off_LED_color+0x34>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <turn_off_LED_color+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08000ff9 	.word	0x08000ff9
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <turn_off_LED_color+0x3c>)
 8000ffe:	f003 fc75 	bl	80048ec <HAL_GPIO_WritePin>
		return;
 8001002:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d811      	bhi.n	8001044 <turn_on_LED_color+0x34>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <turn_on_LED_color+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001045 	.word	0x08001045
 800102c:	08001045 	.word	0x08001045
 8001030:	08001045 	.word	0x08001045
 8001034:	08001039 	.word	0x08001039
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <turn_on_LED_color+0x3c>)
 800103e:	f003 fc55 	bl	80048ec <HAL_GPIO_WritePin>
		return;
 8001042:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8001056:	f002 fe49 	bl	8003cec <is_switch_on>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Flood_Fill_Algo;  // TODO - Flood_Fill_Algo when not testing, Test_Algo when testing
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d00a      	beq.n	800107e <determine_algorithm+0x2e>
 8001068:	2b02      	cmp	r3, #2
 800106a:	dc0a      	bgt.n	8001082 <determine_algorithm+0x32>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <determine_algorithm+0x26>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <determine_algorithm+0x2a>
 8001074:	e005      	b.n	8001082 <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 800107e:	2302      	movs	r3, #2
 8001080:	e000      	b.n	8001084 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8001082:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <do_search_algorithm>:

uint8_t do_search_algorithm(algorithm_type algo)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff60 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7b 	bl	8000f9a <turn_LED>
	turn_LED(Blue, On);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff77 	bl	8000f9a <turn_LED>

	switch(algo)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d00e      	beq.n	80010d0 <do_search_algorithm+0x44>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc10      	bgt.n	80010d8 <do_search_algorithm+0x4c>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <do_search_algorithm+0x34>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d004      	beq.n	80010c8 <do_search_algorithm+0x3c>
 80010be:	e00b      	b.n	80010d8 <do_search_algorithm+0x4c>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 80010c0:	f001 fcc8 	bl	8002a54 <do_hug_left_algorithm>
		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e007      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Flood_Fill_Algo:
		return do_flood_fill_algorithm();
 80010c8:	f000 f81a 	bl	8001100 <do_flood_fill_algorithm>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e003      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Test_Algo:
		do_test_algorithm();
 80010d0:	f002 fef8 	bl	8003ec4 <do_test_algorithm>
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e7ff      	b.n	80010d8 <do_search_algorithm+0x4c>
	}  // switch(algo)
}  // uint8_t do_search_algorithm(algorithm_type algo)
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <complete_search_algorithm>:

void complete_search_algorithm()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff39 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff ff54 	bl	8000f9a <turn_LED>
	turn_LED(Green, On);
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff ff50 	bl	8000f9a <turn_LED>
}  // complete_search_algorithm()
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <do_flood_fill_algorithm>:
#include "flood_fill.h"

uint8_t do_flood_fill_algorithm()
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	f5ad 6d12 	sub.w	sp, sp, #2336	; 0x920
 8001106:	af02      	add	r7, sp, #8
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	*/

	// TEMPORARY - WE'RE USING A 4 BY 4 MAZE FOR THE DEMO
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3917 	strb.w	r3, [r7, #2327]	; 0x917
 800110e:	e0eb      	b.n	80012e8 <do_flood_fill_algorithm+0x1e8>
		{
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3916 	strb.w	r3, [r7, #2326]	; 0x916
 8001116:	e0dd      	b.n	80012d4 <do_flood_fill_algorithm+0x1d4>
			{
				// Initialize distance grid
				maze.distance_grid[i][j] = 10;
 8001118:	f897 2917 	ldrb.w	r2, [r7, #2327]	; 0x917
 800111c:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 8001120:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8001124:	f2a1 612c 	subw	r1, r1, #1580	; 0x62c
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	440a      	add	r2, r1
 800112c:	4413      	add	r3, r2
 800112e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001132:	220a      	movs	r2, #10
 8001134:	701a      	strb	r2, [r3, #0]

				// Initialize cell grid - assume no walls unless border by default
				maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 8001136:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 800113a:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 800113e:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001142:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 8001146:	461a      	mov	r2, r3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	441a      	add	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	4403      	add	r3, r0
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 800115c:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 8001160:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 8001164:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001168:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 800116c:	461a      	mov	r2, r3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	441a      	add	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	4403      	add	r3, r0
 800117e:	3301      	adds	r3, #1
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 8001184:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 8001188:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 800118c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001190:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 8001194:	461a      	mov	r2, r3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	441a      	add	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	4403      	add	r3, r0
 80011a6:	3302      	adds	r3, #2
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 80011ac:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 80011b0:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 80011b4:	f607 1218 	addw	r2, r7, #2328	; 0x918
 80011b8:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 80011bc:	461a      	mov	r2, r3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	441a      	add	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	4403      	add	r3, r0
 80011ce:	3303      	adds	r3, #3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].visited = Is_Not_Visited;
 80011d4:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 80011d8:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 80011dc:	f607 1218 	addw	r2, r7, #2328	; 0x918
 80011e0:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	441a      	add	r2, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	4403      	add	r3, r0
 80011f6:	3304      	adds	r3, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

				if(i == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80011fc:	f897 3917 	ldrb.w	r3, [r7, #2327]	; 0x917
 8001200:	2b00      	cmp	r3, #0
 8001202:	d113      	bne.n	800122c <do_flood_fill_algorithm+0x12c>
 8001204:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 8001208:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 800120c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001210:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 8001214:	461a      	mov	r2, r3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	441a      	add	r2, r3
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	4403      	add	r3, r0
 8001226:	3302      	adds	r3, #2
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
				if(j == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 800122c:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 8001230:	2b00      	cmp	r3, #0
 8001232:	d113      	bne.n	800125c <do_flood_fill_algorithm+0x15c>
 8001234:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 8001238:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 800123c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001240:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	441a      	add	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	4403      	add	r3, r0
 8001256:	3303      	adds	r3, #3
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
				if(i == MAP_SIZE - 1 || i == 3) maze.cell_grid[i][j].walls[North] = Wall_Here;
 800125c:	f897 3917 	ldrb.w	r3, [r7, #2327]	; 0x917
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d003      	beq.n	800126c <do_flood_fill_algorithm+0x16c>
 8001264:	f897 3917 	ldrb.w	r3, [r7, #2327]	; 0x917
 8001268:	2b03      	cmp	r3, #3
 800126a:	d112      	bne.n	8001292 <do_flood_fill_algorithm+0x192>
 800126c:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 8001270:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 8001274:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001278:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 800127c:	461a      	mov	r2, r3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	441a      	add	r2, r3
 8001282:	460b      	mov	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	4403      	add	r3, r0
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
				if(j == MAP_SIZE - 1 || j == 3) maze.cell_grid[i][j].walls[East] = Wall_Here;
 8001292:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d003      	beq.n	80012a2 <do_flood_fill_algorithm+0x1a2>
 800129a:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d113      	bne.n	80012ca <do_flood_fill_algorithm+0x1ca>
 80012a2:	f897 1917 	ldrb.w	r1, [r7, #2327]	; 0x917
 80012a6:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 80012aa:	f607 1218 	addw	r2, r7, #2328	; 0x918
 80012ae:	f2a2 602c 	subw	r0, r2, #1580	; 0x62c
 80012b2:	461a      	mov	r2, r3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	441a      	add	r2, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	4403      	add	r3, r0
 80012c4:	3301      	adds	r3, #1
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80012ca:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 80012ce:	3301      	adds	r3, #1
 80012d0:	f887 3916 	strb.w	r3, [r7, #2326]	; 0x916
 80012d4:	f897 3916 	ldrb.w	r3, [r7, #2326]	; 0x916
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	f67f af1d 	bls.w	8001118 <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80012de:	f897 3917 	ldrb.w	r3, [r7, #2327]	; 0x917
 80012e2:	3301      	adds	r3, #1
 80012e4:	f887 3917 	strb.w	r3, [r7, #2327]	; 0x917
 80012e8:	f897 3917 	ldrb.w	r3, [r7, #2327]	; 0x917
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	f67f af0f 	bls.w	8001110 <do_flood_fill_algorithm+0x10>

			}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	maze.distance_grid[0][0] = 6;
 80012f2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80012f6:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80012fa:	2206      	movs	r2, #6
 80012fc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
	maze.distance_grid[0][1] = 5;
 8001300:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001304:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
	maze.distance_grid[0][2] = 4;
 800130e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001312:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001316:	2204      	movs	r2, #4
 8001318:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
	maze.distance_grid[0][3] = 3;
 800131c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001320:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
	maze.distance_grid[1][0] = 5;
 800132a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800132e:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001332:	2205      	movs	r2, #5
 8001334:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	maze.distance_grid[1][1] = 4;
 8001338:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800133c:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001340:	2204      	movs	r2, #4
 8001342:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
	maze.distance_grid[1][2] = 3;
 8001346:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800134a:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800134e:	2203      	movs	r2, #3
 8001350:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
	maze.distance_grid[1][3] = 2;
 8001354:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001358:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800135c:	2202      	movs	r2, #2
 800135e:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
	maze.distance_grid[2][0] = 4;
 8001362:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001366:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800136a:	2204      	movs	r2, #4
 800136c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
	maze.distance_grid[2][1] = 3;
 8001370:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001374:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
	maze.distance_grid[2][2] = 2;
 800137e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001382:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	maze.distance_grid[2][3] = 1;
 800138c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001390:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
	maze.distance_grid[3][0] = 3;
 800139a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800139e:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
	maze.distance_grid[3][1] = 2;
 80013a8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80013ac:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
	maze.distance_grid[3][2] = 1;
 80013b6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80013ba:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
	maze.distance_grid[3][3] = 0;
 80013c4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80013c8:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 3915 	strb.w	r3, [r7, #2325]	; 0x915
	maze_direction direction = desired_direction;  // the direction we're currently facing
 80013d8:	f897 3915 	ldrb.w	r3, [r7, #2325]	; 0x915
 80013dc:	f887 3914 	strb.w	r3, [r7, #2324]	; 0x914
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);  // Always start in South, West corner facing North.
 80013e0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f999 	bl	8002720 <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we are currently in
 80013ee:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80013f2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80013f6:	f607 1218 	addw	r2, r7, #2328	; 0x918
 80013fa:	f5a2 62c6 	sub.w	r2, r2, #1584	; 0x630
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	801a      	strh	r2, [r3, #0]

	stack stack;
	stack.index = 0;
 8001402:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001406:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

	// TODO - BASICALLY COPY PASTING CODE

	printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001410:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001414:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001420:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	461a      	mov	r2, r3
 8001428:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 800142c:	48d5      	ldr	r0, [pc, #852]	; (8001784 <do_flood_fill_algorithm+0x684>)
 800142e:	f006 fd69 	bl	8007f04 <iprintf>
	char buf5[20];
	sprintf((char *)buf5, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8001432:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001436:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001442:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	4619      	mov	r1, r3
 800144a:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 800144e:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	460b      	mov	r3, r1
 8001456:	49cc      	ldr	r1, [pc, #816]	; (8001788 <do_flood_fill_algorithm+0x688>)
 8001458:	f006 fdf8 	bl	800804c <siprintf>
	HAL_UART_Transmit(&huart6, buf5, sizeof(buf5), 1000);
 800145c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	2214      	movs	r2, #20
 8001466:	48c9      	ldr	r0, [pc, #804]	; (800178c <do_flood_fill_algorithm+0x68c>)
 8001468:	f004 ff07 	bl	800627a <HAL_UART_Transmit>

	if (requested_manual_command != AUTON_CHAR)
 800146c:	4bc8      	ldr	r3, [pc, #800]	; (8001790 <do_flood_fill_algorithm+0x690>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b41      	cmp	r3, #65	; 0x41
 8001472:	d002      	beq.n	800147a <do_flood_fill_algorithm+0x37a>
	{
		return 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f000 bf5e 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Front))
 800147a:	2001      	movs	r0, #1
 800147c:	f002 fd4a 	bl	8003f14 <is_there_wall_on_direction>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d040      	beq.n	8001508 <do_flood_fill_algorithm+0x408>
	{
		maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 8001486:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800148a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	461c      	mov	r4, r3
 8001492:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001496:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461d      	mov	r5, r3
 800149e:	f897 1914 	ldrb.w	r1, [r7, #2324]	; 0x914
 80014a2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80014a6:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 80014aa:	462a      	mov	r2, r5
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	442a      	add	r2, r5
 80014b0:	4623      	mov	r3, r4
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4423      	add	r3, r4
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	4403      	add	r3, r0
 80014bc:	440b      	add	r3, r1
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
		if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 80014c2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80014c6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b0e      	cmp	r3, #14
 80014ce:	d81b      	bhi.n	8001508 <do_flood_fill_algorithm+0x408>
 80014d0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80014d4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	1c59      	adds	r1, r3, #1
 80014dc:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80014e0:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	461c      	mov	r4, r3
 80014e8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80014ec:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 80014f0:	4622      	mov	r2, r4
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4422      	add	r2, r4
 80014f6:	460b      	mov	r3, r1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	4403      	add	r3, r0
 8001502:	3302      	adds	r3, #2
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Front))

	if (requested_manual_command != AUTON_CHAR)
 8001508:	4ba1      	ldr	r3, [pc, #644]	; (8001790 <do_flood_fill_algorithm+0x690>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b41      	cmp	r3, #65	; 0x41
 800150e:	d002      	beq.n	8001516 <do_flood_fill_algorithm+0x416>
	{
		return 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f000 bf10 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Right))
 8001516:	2002      	movs	r0, #2
 8001518:	f002 fcfc 	bl	8003f14 <is_there_wall_on_direction>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d048      	beq.n	80015b4 <do_flood_fill_algorithm+0x4b4>
	{
		maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001522:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001526:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	461c      	mov	r4, r3
 800152e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001532:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461d      	mov	r5, r3
 800153a:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 800153e:	3301      	adds	r3, #1
 8001540:	425a      	negs	r2, r3
 8001542:	f003 0103 	and.w	r1, r3, #3
 8001546:	f002 0303 	and.w	r3, r2, #3
 800154a:	bf58      	it	pl
 800154c:	4259      	negpl	r1, r3
 800154e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001552:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001556:	462a      	mov	r2, r5
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	442a      	add	r2, r5
 800155c:	4623      	mov	r3, r4
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4423      	add	r3, r4
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	4413      	add	r3, r2
 8001566:	4403      	add	r3, r0
 8001568:	440b      	add	r3, r1
 800156a:	2201      	movs	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
		if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 800156e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001572:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01b      	beq.n	80015b4 <do_flood_fill_algorithm+0x4b4>
 800157c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001580:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	4618      	mov	r0, r3
 8001588:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800158c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001598:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 800159c:	461a      	mov	r2, r3
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	441a      	add	r2, r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4403      	add	r3, r0
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	3301      	adds	r3, #1
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Right))

	if (requested_manual_command != AUTON_CHAR)
 80015b4:	4b76      	ldr	r3, [pc, #472]	; (8001790 <do_flood_fill_algorithm+0x690>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b41      	cmp	r3, #65	; 0x41
 80015ba:	d002      	beq.n	80015c2 <do_flood_fill_algorithm+0x4c2>
	{
		return 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	f000 beba 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
	}  // if (requested_manual_command != AUTON_CHAR)

	maze.cell_grid[c.y][c.x].visited = 1;
 80015c2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80015c6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80015ca:	785b      	ldrb	r3, [r3, #1]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80015d2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461c      	mov	r4, r3
 80015da:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80015de:	f2a3 612c 	subw	r1, r3, #1580	; 0x62c
 80015e2:	4622      	mov	r2, r4
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4422      	add	r2, r4
 80015e8:	4603      	mov	r3, r0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4403      	add	r3, r0
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	3304      	adds	r3, #4
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]


	// need to figure next direction to go to and also update rest of distance grid.
	desired_direction = minus_one_neighbor(&maze, c, &stack);
 80015fa:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80015fe:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001602:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001606:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	f000 ff12 	bl	8002434 <minus_one_neighbor>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 3915 	strb.w	r3, [r7, #2325]	; 0x915

	if(desired_direction == Unknown)
 8001616:	f897 3915 	ldrb.w	r3, [r7, #2325]	; 0x915
 800161a:	2b04      	cmp	r3, #4
 800161c:	d14c      	bne.n	80016b8 <do_flood_fill_algorithm+0x5b8>
	{
		while(!stack_is_empty(&stack))
 800161e:	e035      	b.n	800168c <do_flood_fill_algorithm+0x58c>
		{
			if (requested_manual_command != AUTON_CHAR)
 8001620:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <do_flood_fill_algorithm+0x690>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b41      	cmp	r3, #65	; 0x41
 8001626:	d002      	beq.n	800162e <do_flood_fill_algorithm+0x52e>
			{
				return 0;
 8001628:	2300      	movs	r3, #0
 800162a:	f000 be84 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
			}  // if (requested_manual_command != AUTON_CHAR)
			if (stack.index >= 60)
 800162e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001632:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8001636:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800163a:	2b3b      	cmp	r3, #59	; 0x3b
 800163c:	d910      	bls.n	8001660 <do_flood_fill_algorithm+0x560>
			{
				char buf3[20];
				sprintf((char *)buf3, "&FAILED,,,,,,,,,,,,");
 800163e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001642:	4954      	ldr	r1, [pc, #336]	; (8001794 <do_flood_fill_algorithm+0x694>)
 8001644:	4618      	mov	r0, r3
 8001646:	f006 fd01 	bl	800804c <siprintf>
				HAL_UART_Transmit(&huart6, buf3, sizeof(buf3), 1000);
 800164a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	2214      	movs	r2, #20
 8001654:	484d      	ldr	r0, [pc, #308]	; (800178c <do_flood_fill_algorithm+0x68c>)
 8001656:	f004 fe10 	bl	800627a <HAL_UART_Transmit>
				return 0;
 800165a:	2300      	movs	r3, #0
 800165c:	f000 be6b 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
			}  // if (stack.index >= 100)
			// get the cell to test from the stack
			next_coordinate = pop_stack(&stack);
 8001660:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fe8b 	bl	8002380 <pop_stack>
 800166a:	4602      	mov	r2, r0
 800166c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001670:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001674:	801a      	strh	r2, [r3, #0]
			// find a neighbor cell with distance one less than current
			minus_one_neighbor(&maze, next_coordinate, &stack);
 8001676:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800167a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800167e:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001682:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	f000 fed4 	bl	8002434 <minus_one_neighbor>
		while(!stack_is_empty(&stack))
 800168c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fe63 	bl	800235c <stack_is_empty>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0c1      	beq.n	8001620 <do_flood_fill_algorithm+0x520>
		}  // while(stack.index != 0)
		// next_direction is the direction to go to next
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 800169c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80016a0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80016a4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80016a8:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	f000 fec1 	bl	8002434 <minus_one_neighbor>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f887 3915 	strb.w	r3, [r7, #2325]	; 0x915
	}  // if(next_direction == Unknown)
	int difference = desired_direction - direction + 4;
 80016b8:	f897 2915 	ldrb.w	r2, [r7, #2325]	; 0x915
 80016bc:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	3304      	adds	r3, #4
 80016c4:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
	char buf2[20];
	sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 80016c8:	f897 1914 	ldrb.w	r1, [r7, #2324]	; 0x914
 80016cc:	f897 4915 	ldrb.w	r4, [r7, #2325]	; 0x915
 80016d0:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 80016d4:	425a      	negs	r2, r3
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	bf58      	it	pl
 80016e0:	4253      	negpl	r3, r2
 80016e2:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	460a      	mov	r2, r1
 80016ec:	492a      	ldr	r1, [pc, #168]	; (8001798 <do_flood_fill_algorithm+0x698>)
 80016ee:	f006 fcad 	bl	800804c <siprintf>
	HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80016f2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80016f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fa:	2214      	movs	r2, #20
 80016fc:	4823      	ldr	r0, [pc, #140]	; (800178c <do_flood_fill_algorithm+0x68c>)
 80016fe:	f004 fdbc 	bl	800627a <HAL_UART_Transmit>
	switch(difference % 4)
 8001702:	f8d7 390c 	ldr.w	r3, [r7, #2316]	; 0x90c
 8001706:	425a      	negs	r2, r3
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	bf58      	it	pl
 8001712:	4253      	negpl	r3, r2
 8001714:	2b03      	cmp	r3, #3
 8001716:	d816      	bhi.n	8001746 <do_flood_fill_algorithm+0x646>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <do_flood_fill_algorithm+0x620>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	08001747 	.word	0x08001747
 8001724:	08001731 	.word	0x08001731
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
	{
	case 0:
		break;
	case 1:
		rotate_direction_90(Right);
 8001730:	2002      	movs	r0, #2
 8001732:	f001 ff95 	bl	8003660 <rotate_direction_90>
		break;
 8001736:	e006      	b.n	8001746 <do_flood_fill_algorithm+0x646>
	case 2:
		rotate_180_degrees();
 8001738:	f001 ffbb 	bl	80036b2 <rotate_180_degrees>
		break;
 800173c:	e003      	b.n	8001746 <do_flood_fill_algorithm+0x646>
	case 3:
		rotate_direction_90(Left);
 800173e:	2000      	movs	r0, #0
 8001740:	f001 ff8e 	bl	8003660 <rotate_direction_90>
		break;
 8001744:	bf00      	nop
	}

	direction = desired_direction;
 8001746:	f897 3915 	ldrb.w	r3, [r7, #2325]	; 0x915
 800174a:	f887 3914 	strb.w	r3, [r7, #2324]	; 0x914

	set_servo_angle(Front);
 800174e:	2001      	movs	r0, #1
 8001750:	f001 ffca 	bl	80036e8 <set_servo_angle>
	while(1)
	{
		if (requested_manual_command != AUTON_CHAR)
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <do_flood_fill_algorithm+0x690>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b41      	cmp	r3, #65	; 0x41
 800175a:	d002      	beq.n	8001762 <do_flood_fill_algorithm+0x662>
		{
			return 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f000 bdea 	b.w	8002336 <do_flood_fill_algorithm+0x1236>
		}  // if (requested_manual_command != AUTON_CHAR)

		switch(direction)
 8001762:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001766:	2b04      	cmp	r3, #4
 8001768:	d84c      	bhi.n	8001804 <do_flood_fill_algorithm+0x704>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <do_flood_fill_algorithm+0x670>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	0800179d 	.word	0x0800179d
 8001774:	080017b7 	.word	0x080017b7
 8001778:	080017d1 	.word	0x080017d1
 800177c:	080017eb 	.word	0x080017eb
 8001780:	08001805 	.word	0x08001805
 8001784:	0800a5e8 	.word	0x0800a5e8
 8001788:	0800a618 	.word	0x0800a618
 800178c:	200003b0 	.word	0x200003b0
 8001790:	20000001 	.word	0x20000001
 8001794:	0800a630 	.word	0x0800a630
 8001798:	0800a644 	.word	0x0800a644
		{
		case North:
			c.y += 1;
 800179c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017a0:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	3301      	adds	r3, #1
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017ae:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017b2:	705a      	strb	r2, [r3, #1]
			break;
 80017b4:	e026      	b.n	8001804 <do_flood_fill_algorithm+0x704>
		case East:
			c.x += 1;
 80017b6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017ba:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017c8:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017cc:	701a      	strb	r2, [r3, #0]
			break;
 80017ce:	e019      	b.n	8001804 <do_flood_fill_algorithm+0x704>
		case South:
			c.y -= 1;
 80017d0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017d4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	3b01      	subs	r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017e2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017e6:	705a      	strb	r2, [r3, #1]
			break;
 80017e8:	e00c      	b.n	8001804 <do_flood_fill_algorithm+0x704>
		case West:
			c.x -= 1;
 80017ea:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017ee:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80017fc:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001800:	701a      	strb	r2, [r3, #0]
			break;
 8001802:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)


		if(!maze.cell_grid[c.y][c.x].visited)
 8001804:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001808:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	4618      	mov	r0, r3
 8001810:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001814:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461c      	mov	r4, r3
 800181c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001820:	f2a3 612c 	subw	r1, r3, #1580	; 0x62c
 8001824:	4622      	mov	r2, r4
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4422      	add	r2, r4
 800182a:	4603      	mov	r3, r0
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	4413      	add	r3, r2
 8001834:	440b      	add	r3, r1
 8001836:	3304      	adds	r3, #4
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 8459 	bne.w	80020f2 <do_flood_fill_algorithm+0xff2>
		{
			// Move in direction for unvisited cell
			go_forward_one_unit();
 8001840:	f001 ff44 	bl	80036cc <go_forward_one_unit>

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001844:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001848:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4619      	mov	r1, r3
 8001850:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001854:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	461a      	mov	r2, r3
 800185c:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001860:	48d5      	ldr	r0, [pc, #852]	; (8001bb8 <do_flood_fill_algorithm+0xab8>)
 8001862:	f006 fb4f 	bl	8007f04 <iprintf>
			char buf[20];
			sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8001866:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800186a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001876:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	4619      	mov	r1, r3
 800187e:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001882:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	460b      	mov	r3, r1
 800188a:	49cc      	ldr	r1, [pc, #816]	; (8001bbc <do_flood_fill_algorithm+0xabc>)
 800188c:	f006 fbde 	bl	800804c <siprintf>
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001890:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001898:	2214      	movs	r2, #20
 800189a:	48c9      	ldr	r0, [pc, #804]	; (8001bc0 <do_flood_fill_algorithm+0xac0>)
 800189c:	f004 fced 	bl	800627a <HAL_UART_Transmit>

			set_servo_angle(Front);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f001 ff21 	bl	80036e8 <set_servo_angle>
			HAL_Delay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018aa:	f002 fc75 	bl	8004198 <HAL_Delay>
			float distance_front_cm = distance_of_object_in_cm();
 80018ae:	f002 fb19 	bl	8003ee4 <distance_of_object_in_cm>
 80018b2:	f607 1308 	addw	r3, r7, #2312	; 0x908
 80018b6:	ed83 0a00 	vstr	s0, [r3]
			char buf_front[20];
			printf(distance_front_cm < 16 ? "There is a wall in front.\r\n" : "There is no wall in front.\r\n");
 80018ba:	f607 1308 	addw	r3, r7, #2312	; 0x908
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	d501      	bpl.n	80018d4 <do_flood_fill_algorithm+0x7d4>
 80018d0:	4bbc      	ldr	r3, [pc, #752]	; (8001bc4 <do_flood_fill_algorithm+0xac4>)
 80018d2:	e000      	b.n	80018d6 <do_flood_fill_algorithm+0x7d6>
 80018d4:	4bbc      	ldr	r3, [pc, #752]	; (8001bc8 <do_flood_fill_algorithm+0xac8>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f006 fb14 	bl	8007f04 <iprintf>
			memcpy(buf_front, distance_front_cm < 16 ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 80018dc:	f607 1308 	addw	r3, r7, #2312	; 0x908
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d501      	bpl.n	80018f6 <do_flood_fill_algorithm+0x7f6>
 80018f2:	4ab6      	ldr	r2, [pc, #728]	; (8001bcc <do_flood_fill_algorithm+0xacc>)
 80018f4:	e000      	b.n	80018f8 <do_flood_fill_algorithm+0x7f8>
 80018f6:	4ab6      	ldr	r2, [pc, #728]	; (8001bd0 <do_flood_fill_algorithm+0xad0>)
 80018f8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80018fc:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 8001900:	461c      	mov	r4, r3
 8001902:	4615      	mov	r5, r2
 8001904:	6828      	ldr	r0, [r5, #0]
 8001906:	6869      	ldr	r1, [r5, #4]
 8001908:	68aa      	ldr	r2, [r5, #8]
 800190a:	68eb      	ldr	r3, [r5, #12]
 800190c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190e:	6928      	ldr	r0, [r5, #16]
 8001910:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_front, sizeof(buf_front), 1000);
 8001912:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	2214      	movs	r2, #20
 800191c:	48a8      	ldr	r0, [pc, #672]	; (8001bc0 <do_flood_fill_algorithm+0xac0>)
 800191e:	f004 fcac 	bl	800627a <HAL_UART_Transmit>


			// DONE TO MAKE SURE CORRECT DISTANCE FROM FRONT WALL
			float front_wall_cm = distance_front_cm;
 8001922:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f607 1204 	addw	r2, r7, #2308	; 0x904
 800192c:	6013      	str	r3, [r2, #0]
			float desired_front_distance_cm = 5.5f;
 800192e:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <do_flood_fill_algorithm+0xad4>)
 8001930:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8001934:	6013      	str	r3, [r2, #0]
			float front_wall_remainder_cm = front_wall_cm;
 8001936:	f607 1304 	addw	r3, r7, #2308	; 0x904
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 8001940:	6013      	str	r3, [r2, #0]
			while (front_wall_remainder_cm > 18.0f)
 8001942:	e00b      	b.n	800195c <do_flood_fill_algorithm+0x85c>
			{
				front_wall_remainder_cm -= 18.0f;
 8001944:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8001950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001954:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001958:	edc3 7a00 	vstr	s15, [r3]
			while (front_wall_remainder_cm > 18.0f)
 800195c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	dce8      	bgt.n	8001944 <do_flood_fill_algorithm+0x844>
			}
			float front_wall_error_cm = front_wall_remainder_cm - desired_front_distance_cm;  // positive number means we're too far away
 8001972:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001976:	ed93 7a00 	vldr	s14, [r3]
 800197a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001986:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 800198a:	edc3 7a00 	vstr	s15, [r3]
			float front_wall_error_in = front_wall_error_cm * 0.39;
 800198e:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	a385      	add	r3, pc, #532	; (adr r3, 8001bb0 <do_flood_fill_algorithm+0xab0>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe33 	bl	8000608 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f905 	bl	8000bb8 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f607 02f8 	addw	r2, r7, #2296	; 0x8f8
 80019b4:	6013      	str	r3, [r2, #0]
			if (front_wall_error_in > 0)
 80019b6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd14      	ble.n	80019f2 <do_flood_fill_algorithm+0x8f2>
			{
				motors_forward(1);
 80019c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019cc:	f001 fdc0 	bl	8003550 <motors_forward>
				HAL_Delay(front_wall_error_in * 100.0f);
 80019d0:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bd8 <do_flood_fill_algorithm+0xad8>
 80019dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e4:	ee17 0a90 	vmov	r0, s15
 80019e8:	f002 fbd6 	bl	8004198 <HAL_Delay>
				stop_all_motors();
 80019ec:	f001 fd02 	bl	80033f4 <stop_all_motors>
 80019f0:	e013      	b.n	8001a1a <do_flood_fill_algorithm+0x91a>
			}
			else
			{
				motors_backward(1);
 80019f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019f6:	f001 fdef 	bl	80035d8 <motors_backward>
				HAL_Delay(front_wall_error_in * -100.0f);
 80019fa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001bdc <do_flood_fill_algorithm+0xadc>
 8001a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0e:	ee17 0a90 	vmov	r0, s15
 8001a12:	f002 fbc1 	bl	8004198 <HAL_Delay>
				stop_all_motors();
 8001a16:	f001 fced 	bl	80033f4 <stop_all_motors>
			}

			set_servo_angle(Left);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f001 fe64 	bl	80036e8 <set_servo_angle>
			HAL_Delay(1000);
 8001a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a24:	f002 fbb8 	bl	8004198 <HAL_Delay>
			float distance_left_cm = distance_of_object_in_cm();
 8001a28:	f002 fa5c 	bl	8003ee4 <distance_of_object_in_cm>
 8001a2c:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8001a30:	ed83 0a00 	vstr	s0, [r3]
			char buf_left[20];
			printf(distance_left_cm < 16 ? "There is a wall on the left.\r\n" : "There is no wall on the left.\r\n");
 8001a34:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d501      	bpl.n	8001a4e <do_flood_fill_algorithm+0x94e>
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <do_flood_fill_algorithm+0xae0>)
 8001a4c:	e000      	b.n	8001a50 <do_flood_fill_algorithm+0x950>
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <do_flood_fill_algorithm+0xae4>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 fa57 	bl	8007f04 <iprintf>
			memcpy(buf_left, distance_left_cm < 16 ? "\%LEFT,1,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 8001a56:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d501      	bpl.n	8001a70 <do_flood_fill_algorithm+0x970>
 8001a6c:	4a5e      	ldr	r2, [pc, #376]	; (8001be8 <do_flood_fill_algorithm+0xae8>)
 8001a6e:	e000      	b.n	8001a72 <do_flood_fill_algorithm+0x972>
 8001a70:	4a5e      	ldr	r2, [pc, #376]	; (8001bec <do_flood_fill_algorithm+0xaec>)
 8001a72:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001a76:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	4615      	mov	r5, r2
 8001a7e:	6828      	ldr	r0, [r5, #0]
 8001a80:	6869      	ldr	r1, [r5, #4]
 8001a82:	68aa      	ldr	r2, [r5, #8]
 8001a84:	68eb      	ldr	r3, [r5, #12]
 8001a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a88:	6928      	ldr	r0, [r5, #16]
 8001a8a:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_left, sizeof(buf_left), 1000);
 8001a8c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	2214      	movs	r2, #20
 8001a96:	484a      	ldr	r0, [pc, #296]	; (8001bc0 <do_flood_fill_algorithm+0xac0>)
 8001a98:	f004 fbef 	bl	800627a <HAL_UART_Transmit>



			set_servo_angle(Right);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f001 fe23 	bl	80036e8 <set_servo_angle>
			HAL_Delay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa6:	f002 fb77 	bl	8004198 <HAL_Delay>
			float distance_right_cm = distance_of_object_in_cm();
 8001aaa:	f002 fa1b 	bl	8003ee4 <distance_of_object_in_cm>
 8001aae:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001ab2:	ed83 0a00 	vstr	s0, [r3]

			char buf_right[20];
			printf(distance_right_cm < 16 ? "There is a wall on the right.\r\n" : "There is no wall on the right.\r\n");
 8001ab6:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	d501      	bpl.n	8001ad0 <do_flood_fill_algorithm+0x9d0>
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <do_flood_fill_algorithm+0xaf0>)
 8001ace:	e000      	b.n	8001ad2 <do_flood_fill_algorithm+0x9d2>
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <do_flood_fill_algorithm+0xaf4>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f006 fa16 	bl	8007f04 <iprintf>
			memcpy(buf_right, distance_right_cm < 16 ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 8001ad8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d501      	bpl.n	8001af2 <do_flood_fill_algorithm+0x9f2>
 8001aee:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <do_flood_fill_algorithm+0xaf8>)
 8001af0:	e000      	b.n	8001af4 <do_flood_fill_algorithm+0x9f4>
 8001af2:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <do_flood_fill_algorithm+0xafc>)
 8001af4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001af8:	f6a3 03d8 	subw	r3, r3, #2264	; 0x8d8
 8001afc:	461c      	mov	r4, r3
 8001afe:	4615      	mov	r5, r2
 8001b00:	6828      	ldr	r0, [r5, #0]
 8001b02:	6869      	ldr	r1, [r5, #4]
 8001b04:	68aa      	ldr	r2, [r5, #8]
 8001b06:	68eb      	ldr	r3, [r5, #12]
 8001b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b0a:	6928      	ldr	r0, [r5, #16]
 8001b0c:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_right, sizeof(buf_right), 1000);
 8001b0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	2214      	movs	r2, #20
 8001b18:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <do_flood_fill_algorithm+0xac0>)
 8001b1a:	f004 fbae 	bl	800627a <HAL_UART_Transmit>


			set_servo_angle(Front);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f001 fde2 	bl	80036e8 <set_servo_angle>

			if(distance_left_cm < 16)
 8001b24:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	f140 80f9 	bpl.w	8001d2e <do_flood_fill_algorithm+0xc2e>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 3) % 4] = Wall_Here;
 8001b3c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001b40:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	461c      	mov	r4, r3
 8001b48:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001b4c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461d      	mov	r5, r3
 8001b54:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001b58:	3303      	adds	r3, #3
 8001b5a:	425a      	negs	r2, r3
 8001b5c:	f003 0103 	and.w	r1, r3, #3
 8001b60:	f002 0303 	and.w	r3, r2, #3
 8001b64:	bf58      	it	pl
 8001b66:	4259      	negpl	r1, r3
 8001b68:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001b6c:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001b70:	462a      	mov	r2, r5
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	442a      	add	r2, r5
 8001b76:	4623      	mov	r3, r4
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4423      	add	r3, r4
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	4413      	add	r3, r2
 8001b80:	4403      	add	r3, r0
 8001b82:	440b      	add	r3, r1
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001b88:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	f200 80ce 	bhi.w	8001d2e <do_flood_fill_algorithm+0xc2e>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <do_flood_fill_algorithm+0xa98>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001c01 	.word	0x08001c01
 8001b9c:	08001c4b 	.word	0x08001c4b
 8001ba0:	08001c91 	.word	0x08001c91
 8001ba4:	08001cd9 	.word	0x08001cd9
 8001ba8:	08001d2f 	.word	0x08001d2f
 8001bac:	f3af 8000 	nop.w
 8001bb0:	8f5c28f6 	.word	0x8f5c28f6
 8001bb4:	3fd8f5c2 	.word	0x3fd8f5c2
 8001bb8:	0800a5e8 	.word	0x0800a5e8
 8001bbc:	0800a618 	.word	0x0800a618
 8001bc0:	200003b0 	.word	0x200003b0
 8001bc4:	0800a65c 	.word	0x0800a65c
 8001bc8:	0800a678 	.word	0x0800a678
 8001bcc:	0800a698 	.word	0x0800a698
 8001bd0:	0800a6ac 	.word	0x0800a6ac
 8001bd4:	40b00000 	.word	0x40b00000
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	c2c80000 	.word	0xc2c80000
 8001be0:	0800a6c0 	.word	0x0800a6c0
 8001be4:	0800a6e0 	.word	0x0800a6e0
 8001be8:	0800a700 	.word	0x0800a700
 8001bec:	0800a714 	.word	0x0800a714
 8001bf0:	0800a728 	.word	0x0800a728
 8001bf4:	0800a748 	.word	0x0800a748
 8001bf8:	0800a76c 	.word	0x0800a76c
 8001bfc:	0800a780 	.word	0x0800a780
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001c00:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c04:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b0e      	cmp	r3, #14
 8001c0c:	f200 8088 	bhi.w	8001d20 <do_flood_fill_algorithm+0xc20>
 8001c10:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c14:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c18:	785b      	ldrb	r3, [r3, #1]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c20:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001c2c:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8001c30:	461a      	mov	r2, r3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	441a      	add	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4403      	add	r3, r0
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	4413      	add	r3, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	3303      	adds	r3, #3
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
					break;
 8001c48:	e06a      	b.n	8001d20 <do_flood_fill_algorithm+0xc20>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001c4a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c4e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d065      	beq.n	8001d24 <do_flood_fill_algorithm+0xc24>
 8001c58:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c5c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	1e59      	subs	r1, r3, #1
 8001c64:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c68:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461c      	mov	r4, r3
 8001c70:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c74:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001c78:	4622      	mov	r2, r4
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4422      	add	r2, r4
 8001c7e:	460b      	mov	r3, r1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	440b      	add	r3, r1
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4413      	add	r3, r2
 8001c88:	4403      	add	r3, r0
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
					break;
 8001c8e:	e049      	b.n	8001d24 <do_flood_fill_algorithm+0xc24>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001c90:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001c94:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <do_flood_fill_algorithm+0xc28>
 8001c9e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001ca2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001cae:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001cba:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	441a      	add	r2, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4403      	add	r3, r0
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
					break;
 8001cd6:	e027      	b.n	8001d28 <do_flood_fill_algorithm+0xc28>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001cd8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001cdc:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	2b0e      	cmp	r3, #14
 8001ce4:	d822      	bhi.n	8001d2c <do_flood_fill_algorithm+0xc2c>
 8001ce6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001cea:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	1c59      	adds	r1, r3, #1
 8001cf2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001cf6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001d02:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001d06:	4622      	mov	r2, r4
 8001d08:	0092      	lsls	r2, r2, #2
 8001d0a:	4422      	add	r2, r4
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	4403      	add	r3, r0
 8001d18:	3302      	adds	r3, #2
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
					break;
 8001d1e:	e005      	b.n	8001d2c <do_flood_fill_algorithm+0xc2c>
					break;
 8001d20:	bf00      	nop
 8001d22:	e004      	b.n	8001d2e <do_flood_fill_algorithm+0xc2e>
					break;
 8001d24:	bf00      	nop
 8001d26:	e002      	b.n	8001d2e <do_flood_fill_algorithm+0xc2e>
					break;
 8001d28:	bf00      	nop
 8001d2a:	e000      	b.n	8001d2e <do_flood_fill_algorithm+0xc2e>
					break;
 8001d2c:	bf00      	nop
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))

			if (requested_manual_command != AUTON_CHAR)
 8001d2e:	4bc9      	ldr	r3, [pc, #804]	; (8002054 <do_flood_fill_algorithm+0xf54>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b41      	cmp	r3, #65	; 0x41
 8001d34:	d001      	beq.n	8001d3a <do_flood_fill_algorithm+0xc3a>
			{
				return 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e2fd      	b.n	8002336 <do_flood_fill_algorithm+0x1236>
			}  // if (requested_manual_command != AUTON_CHAR)

			if(distance_front_cm < 16)
 8001d3a:	f607 1308 	addw	r3, r7, #2312	; 0x908
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	f140 80c8 	bpl.w	8001ee2 <do_flood_fill_algorithm+0xde2>
			{
				maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 8001d52:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001d56:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001d62:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461d      	mov	r5, r3
 8001d6a:	f897 1914 	ldrb.w	r1, [r7, #2324]	; 0x914
 8001d6e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001d72:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001d76:	462a      	mov	r2, r5
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	442a      	add	r2, r5
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4423      	add	r3, r4
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	4403      	add	r3, r0
 8001d88:	440b      	add	r3, r1
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001d8e:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	f200 80a5 	bhi.w	8001ee2 <do_flood_fill_algorithm+0xde2>
 8001d98:	a201      	add	r2, pc, #4	; (adr r2, 8001da0 <do_flood_fill_algorithm+0xca0>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001db5 	.word	0x08001db5
 8001da4:	08001dff 	.word	0x08001dff
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e8d 	.word	0x08001e8d
 8001db0:	08001ee3 	.word	0x08001ee3
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001db4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001db8:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	2b0e      	cmp	r3, #14
 8001dc0:	f200 8088 	bhi.w	8001ed4 <do_flood_fill_algorithm+0xdd4>
 8001dc4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001dc8:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	1c59      	adds	r1, r3, #1
 8001dd0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001dd4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461c      	mov	r4, r3
 8001ddc:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001de0:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001de4:	4622      	mov	r2, r4
 8001de6:	0092      	lsls	r2, r2, #2
 8001de8:	4422      	add	r2, r4
 8001dea:	460b      	mov	r3, r1
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	4403      	add	r3, r0
 8001df6:	3302      	adds	r3, #2
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
					break;
 8001dfc:	e06a      	b.n	8001ed4 <do_flood_fill_algorithm+0xdd4>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001dfe:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e02:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b0e      	cmp	r3, #14
 8001e0a:	d865      	bhi.n	8001ed8 <do_flood_fill_algorithm+0xdd8>
 8001e0c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e10:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e1c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001e28:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	441a      	add	r2, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4403      	add	r3, r0
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3303      	adds	r3, #3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
					break;
 8001e44:	e048      	b.n	8001ed8 <do_flood_fill_algorithm+0xdd8>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001e46:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e4a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d043      	beq.n	8001edc <do_flood_fill_algorithm+0xddc>
 8001e54:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e58:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e5c:	785b      	ldrb	r3, [r3, #1]
 8001e5e:	1e59      	subs	r1, r3, #1
 8001e60:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e64:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e70:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001e74:	4622      	mov	r2, r4
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	4422      	add	r2, r4
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	4403      	add	r3, r0
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
					break;
 8001e8a:	e027      	b.n	8001edc <do_flood_fill_algorithm+0xddc>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001e8c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e90:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d022      	beq.n	8001ee0 <do_flood_fill_algorithm+0xde0>
 8001e9a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001e9e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001eaa:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001eb6:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8001eba:	461a      	mov	r2, r3
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	441a      	add	r2, r3
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3301      	adds	r3, #1
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
					break;
 8001ed2:	e005      	b.n	8001ee0 <do_flood_fill_algorithm+0xde0>
					break;
 8001ed4:	bf00      	nop
 8001ed6:	e004      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001ed8:	bf00      	nop
 8001eda:	e002      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001ee0:	bf00      	nop
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Front))

			if (requested_manual_command != AUTON_CHAR)
 8001ee2:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <do_flood_fill_algorithm+0xf54>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b41      	cmp	r3, #65	; 0x41
 8001ee8:	d001      	beq.n	8001eee <do_flood_fill_algorithm+0xdee>
			{
				return 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e223      	b.n	8002336 <do_flood_fill_algorithm+0x1236>
			}  // if (requested_manual_command != AUTON_CHAR)

			if(distance_right_cm < 16)
 8001eee:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	f140 80d3 	bpl.w	80020ac <do_flood_fill_algorithm+0xfac>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001f06:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f0a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001f0e:	785b      	ldrb	r3, [r3, #1]
 8001f10:	461c      	mov	r4, r3
 8001f12:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f16:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001f22:	3301      	adds	r3, #1
 8001f24:	425a      	negs	r2, r3
 8001f26:	f003 0103 	and.w	r1, r3, #3
 8001f2a:	f002 0303 	and.w	r3, r2, #3
 8001f2e:	bf58      	it	pl
 8001f30:	4259      	negpl	r1, r3
 8001f32:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f36:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	442a      	add	r2, r5
 8001f40:	4623      	mov	r3, r4
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4423      	add	r3, r4
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	440b      	add	r3, r1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001f52:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	f200 80a8 	bhi.w	80020ac <do_flood_fill_algorithm+0xfac>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <do_flood_fill_algorithm+0xe64>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f79 	.word	0x08001f79
 8001f68:	08001fc3 	.word	0x08001fc3
 8001f6c:	0800200b 	.word	0x0800200b
 8001f70:	08002059 	.word	0x08002059
 8001f74:	080020ad 	.word	0x080020ad
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001f78:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f7c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 808b 	beq.w	800209e <do_flood_fill_algorithm+0xf9e>
 8001f88:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f8c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001f98:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8001fa4:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8001fa8:	461a      	mov	r2, r3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4403      	add	r3, r0
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	4413      	add	r3, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3301      	adds	r3, #1
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
					break;
 8001fc0:	e06d      	b.n	800209e <do_flood_fill_algorithm+0xf9e>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001fc2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001fc6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	2b0e      	cmp	r3, #14
 8001fce:	d868      	bhi.n	80020a2 <do_flood_fill_algorithm+0xfa2>
 8001fd0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001fd4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001fd8:	785b      	ldrb	r3, [r3, #1]
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001fe0:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8001fec:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8001ff0:	4622      	mov	r2, r4
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4422      	add	r2, r4
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	4413      	add	r3, r2
 8002000:	4403      	add	r3, r0
 8002002:	3302      	adds	r3, #2
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
					break;
 8002008:	e04b      	b.n	80020a2 <do_flood_fill_algorithm+0xfa2>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 800200a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800200e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b0e      	cmp	r3, #14
 8002016:	d846      	bhi.n	80020a6 <do_flood_fill_algorithm+0xfa6>
 8002018:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800201c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	4618      	mov	r0, r3
 8002024:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002028:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8002034:	f2a2 612c 	subw	r1, r2, #1580	; 0x62c
 8002038:	461a      	mov	r2, r3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	441a      	add	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4403      	add	r3, r0
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	440b      	add	r3, r1
 800204a:	3303      	adds	r3, #3
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
					break;
 8002050:	e029      	b.n	80020a6 <do_flood_fill_algorithm+0xfa6>
 8002052:	bf00      	nop
 8002054:	20000001 	.word	0x20000001
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8002058:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800205c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002060:	785b      	ldrb	r3, [r3, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d021      	beq.n	80020aa <do_flood_fill_algorithm+0xfaa>
 8002066:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800206a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800206e:	785b      	ldrb	r3, [r3, #1]
 8002070:	1e59      	subs	r1, r3, #1
 8002072:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002076:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461c      	mov	r4, r3
 800207e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002082:	f2a3 602c 	subw	r0, r3, #1580	; 0x62c
 8002086:	4622      	mov	r2, r4
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4422      	add	r2, r4
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	4403      	add	r3, r0
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
					break;
 800209c:	e005      	b.n	80020aa <do_flood_fill_algorithm+0xfaa>
					break;
 800209e:	bf00      	nop
 80020a0:	e004      	b.n	80020ac <do_flood_fill_algorithm+0xfac>
					break;
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <do_flood_fill_algorithm+0xfac>
					break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <do_flood_fill_algorithm+0xfac>
					break;
 80020aa:	bf00      	nop
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))

			if (requested_manual_command != AUTON_CHAR)
 80020ac:	4ba4      	ldr	r3, [pc, #656]	; (8002340 <do_flood_fill_algorithm+0x1240>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b41      	cmp	r3, #65	; 0x41
 80020b2:	d001      	beq.n	80020b8 <do_flood_fill_algorithm+0xfb8>
			{
				return 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e13e      	b.n	8002336 <do_flood_fill_algorithm+0x1236>
			}  // if (requested_manual_command != AUTON_CHAR)

			maze.cell_grid[c.y][c.x].visited = 1;
 80020b8:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80020bc:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80020c8:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461c      	mov	r4, r3
 80020d0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80020d4:	f2a3 612c 	subw	r1, r3, #1580	; 0x62c
 80020d8:	4622      	mov	r2, r4
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4422      	add	r2, r4
 80020de:	4603      	mov	r3, r0
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4403      	add	r3, r0
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	3304      	adds	r3, #4
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e03a      	b.n	8002168 <do_flood_fill_algorithm+0x1068>

		}  // if(!maze.cell_grid[c.y][c.x].visited)
		else
		{
			// Move in direction for visited cell
			go_forward_one_unit();
 80020f2:	f001 faeb 	bl	80036cc <go_forward_one_unit>

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 80020f6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80020fa:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002106:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800210a:	785b      	ldrb	r3, [r3, #1]
 800210c:	461a      	mov	r2, r3
 800210e:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8002112:	488c      	ldr	r0, [pc, #560]	; (8002344 <do_flood_fill_algorithm+0x1244>)
 8002114:	f005 fef6 	bl	8007f04 <iprintf>
			char buf[20];
			sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8002118:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800211c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002128:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	4619      	mov	r1, r3
 8002130:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 8002134:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	460b      	mov	r3, r1
 800213c:	4982      	ldr	r1, [pc, #520]	; (8002348 <do_flood_fill_algorithm+0x1248>)
 800213e:	f005 ff85 	bl	800804c <siprintf>
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002142:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214a:	2214      	movs	r2, #20
 800214c:	487f      	ldr	r0, [pc, #508]	; (800234c <do_flood_fill_algorithm+0x124c>)
 800214e:	f004 f894 	bl	800627a <HAL_UART_Transmit>

			print_maze(&maze, c, direction);
 8002152:	f897 2914 	ldrb.w	r2, [r7, #2324]	; 0x914
 8002156:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800215a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800215e:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	f000 faf0 	bl	8002748 <print_maze>
		}

		// DONE TO MAKE SURE CORRECT ANGLE

		if(found_flood_fill_destination(c, &maze))
 8002168:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 800216c:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002170:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002174:	4611      	mov	r1, r2
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	f000 f942 	bl	8002400 <found_flood_fill_destination>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d047      	beq.n	8002212 <do_flood_fill_algorithm+0x1112>
		{
			set_servo_angle(Front);
 8002182:	2001      	movs	r0, #1
 8002184:	f001 fab0 	bl	80036e8 <set_servo_angle>

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8002188:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800218c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002198:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800219c:	785b      	ldrb	r3, [r3, #1]
 800219e:	461a      	mov	r2, r3
 80021a0:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 80021a4:	4867      	ldr	r0, [pc, #412]	; (8002344 <do_flood_fill_algorithm+0x1244>)
 80021a6:	f005 fead 	bl	8007f04 <iprintf>
			char buf5[20];
			sprintf((char *)buf5, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 80021aa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80021ae:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80021ba:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80021be:	785b      	ldrb	r3, [r3, #1]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 80021c6:	f107 0018 	add.w	r0, r7, #24
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	495e      	ldr	r1, [pc, #376]	; (8002348 <do_flood_fill_algorithm+0x1248>)
 80021d0:	f005 ff3c 	bl	800804c <siprintf>
			HAL_UART_Transmit(&huart6, buf5, sizeof(buf5), 1000);
 80021d4:	f107 0118 	add.w	r1, r7, #24
 80021d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021dc:	2214      	movs	r2, #20
 80021de:	485b      	ldr	r0, [pc, #364]	; (800234c <do_flood_fill_algorithm+0x124c>)
 80021e0:	f004 f84b 	bl	800627a <HAL_UART_Transmit>

			printf("Completed maze!\r\n");
 80021e4:	485a      	ldr	r0, [pc, #360]	; (8002350 <do_flood_fill_algorithm+0x1250>)
 80021e6:	f005 ff29 	bl	800803c <puts>
			char buf[20];
			memcpy(buf, "&COMPLETED,,,,,,,,,", 20);
 80021ea:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80021ee:	f6a3 1314 	subw	r3, r3, #2324	; 0x914
 80021f2:	4a58      	ldr	r2, [pc, #352]	; (8002354 <do_flood_fill_algorithm+0x1254>)
 80021f4:	461c      	mov	r4, r3
 80021f6:	4615      	mov	r5, r2
 80021f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002200:	1d39      	adds	r1, r7, #4
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	2214      	movs	r2, #20
 8002208:	4850      	ldr	r0, [pc, #320]	; (800234c <do_flood_fill_algorithm+0x124c>)
 800220a:	f004 f836 	bl	800627a <HAL_UART_Transmit>
			return 1;
 800220e:	2301      	movs	r3, #1
 8002210:	e091      	b.n	8002336 <do_flood_fill_algorithm+0x1236>
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8002212:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002216:	f607 1318 	addw	r3, r7, #2328	; 0x918
 800221a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800221e:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	f000 f906 	bl	8002434 <minus_one_neighbor>
 8002228:	4603      	mov	r3, r0
 800222a:	f887 3915 	strb.w	r3, [r7, #2325]	; 0x915

		if(desired_direction == Unknown)
 800222e:	f897 3915 	ldrb.w	r3, [r7, #2325]	; 0x915
 8002232:	2b04      	cmp	r3, #4
 8002234:	d132      	bne.n	800229c <do_flood_fill_algorithm+0x119c>
		{
			while(!stack_is_empty(&stack))
 8002236:	e01b      	b.n	8002270 <do_flood_fill_algorithm+0x1170>
			{
				if (requested_manual_command != AUTON_CHAR)
 8002238:	4b41      	ldr	r3, [pc, #260]	; (8002340 <do_flood_fill_algorithm+0x1240>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b41      	cmp	r3, #65	; 0x41
 800223e:	d001      	beq.n	8002244 <do_flood_fill_algorithm+0x1144>
				{
					return 0;
 8002240:	2300      	movs	r3, #0
 8002242:	e078      	b.n	8002336 <do_flood_fill_algorithm+0x1236>
				}  // if (requested_manual_command != AUTON_CHAR)
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 8002244:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f899 	bl	8002380 <pop_stack>
 800224e:	4602      	mov	r2, r0
 8002250:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002254:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8002258:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, next_coordinate, &stack);
 800225a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800225e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002262:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8002266:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 800226a:	6819      	ldr	r1, [r3, #0]
 800226c:	f000 f8e2 	bl	8002434 <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 8002270:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f871 	bl	800235c <stack_is_empty>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0db      	beq.n	8002238 <do_flood_fill_algorithm+0x1138>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, c, &stack);
 8002280:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002284:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8002288:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800228c:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 8002290:	6819      	ldr	r1, [r3, #0]
 8002292:	f000 f8cf 	bl	8002434 <minus_one_neighbor>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 3915 	strb.w	r3, [r7, #2325]	; 0x915
		}  // if(next_direction == Unknown)
		int difference = desired_direction - direction + 4;
 800229c:	f897 2915 	ldrb.w	r2, [r7, #2325]	; 0x915
 80022a0:	f897 3914 	ldrb.w	r3, [r7, #2324]	; 0x914
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	3304      	adds	r3, #4
 80022a8:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
		char buf2[20];
		sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 80022ac:	f897 1914 	ldrb.w	r1, [r7, #2324]	; 0x914
 80022b0:	f897 4915 	ldrb.w	r4, [r7, #2325]	; 0x915
 80022b4:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80022b8:	425a      	negs	r2, r3
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	f002 0203 	and.w	r2, r2, #3
 80022c2:	bf58      	it	pl
 80022c4:	4253      	negpl	r3, r2
 80022c6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4623      	mov	r3, r4
 80022ce:	460a      	mov	r2, r1
 80022d0:	4921      	ldr	r1, [pc, #132]	; (8002358 <do_flood_fill_algorithm+0x1258>)
 80022d2:	f005 febb 	bl	800804c <siprintf>
		HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80022d6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	2214      	movs	r2, #20
 80022e0:	481a      	ldr	r0, [pc, #104]	; (800234c <do_flood_fill_algorithm+0x124c>)
 80022e2:	f003 ffca 	bl	800627a <HAL_UART_Transmit>
		switch(difference % 4)
 80022e6:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	; 0x8ec
 80022ea:	425a      	negs	r2, r3
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	f002 0203 	and.w	r2, r2, #3
 80022f4:	bf58      	it	pl
 80022f6:	4253      	negpl	r3, r2
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d816      	bhi.n	800232a <do_flood_fill_algorithm+0x122a>
 80022fc:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <do_flood_fill_algorithm+0x1204>)
 80022fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002302:	bf00      	nop
 8002304:	0800232b 	.word	0x0800232b
 8002308:	08002315 	.word	0x08002315
 800230c:	0800231d 	.word	0x0800231d
 8002310:	08002323 	.word	0x08002323
		{
		case 0:
			break;
		case 1:
			rotate_direction_90(Right);
 8002314:	2002      	movs	r0, #2
 8002316:	f001 f9a3 	bl	8003660 <rotate_direction_90>
			break;
 800231a:	e006      	b.n	800232a <do_flood_fill_algorithm+0x122a>
		case 2:
			rotate_180_degrees();
 800231c:	f001 f9c9 	bl	80036b2 <rotate_180_degrees>
			break;
 8002320:	e003      	b.n	800232a <do_flood_fill_algorithm+0x122a>
		case 3:
			rotate_direction_90(Left);
 8002322:	2000      	movs	r0, #0
 8002324:	f001 f99c 	bl	8003660 <rotate_direction_90>
			break;
 8002328:	bf00      	nop
		}


		direction = desired_direction;
 800232a:	f897 3915 	ldrb.w	r3, [r7, #2325]	; 0x915
 800232e:	f887 3914 	strb.w	r3, [r7, #2324]	; 0x914
	{
 8002332:	f7ff ba0f 	b.w	8001754 <do_flood_fill_algorithm+0x654>

	}  // while(1)
}  // do_hug_left_algorithm()
 8002336:	4618      	mov	r0, r3
 8002338:	f607 1718 	addw	r7, r7, #2328	; 0x918
 800233c:	46bd      	mov	sp, r7
 800233e:	bdb0      	pop	{r4, r5, r7, pc}
 8002340:	20000001 	.word	0x20000001
 8002344:	0800a5e8 	.word	0x0800a5e8
 8002348:	0800a618 	.word	0x0800a618
 800234c:	200003b0 	.word	0x200003b0
 8002350:	0800a794 	.word	0x0800a794
 8002354:	0800a7a8 	.word	0x0800a7a8
 8002358:	0800a644 	.word	0x0800a644

0800235c <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800236a:	2b00      	cmp	r3, #0
 800236c:	bf0c      	ite	eq
 800236e:	2301      	moveq	r3, #1
 8002370:	2300      	movne	r3, #0
 8002372:	b2db      	uxtb	r3, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <pop_stack>:

coordinate pop_stack(stack *s)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800238e:	3b01      	subs	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800239e:	3301      	adds	r3, #1
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	f107 020c 	add.w	r2, r7, #12
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	440b      	add	r3, r1
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	8013      	strh	r3, [r2, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	7b3a      	ldrb	r2, [r7, #12]
 80023b2:	f362 0307 	bfi	r3, r2, #0, #8
 80023b6:	7b7a      	ldrb	r2, [r7, #13]
 80023b8:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <push_stack>:

void push_stack(stack* s, coordinate c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	8039      	strh	r1, [r7, #0]
	s->index = s->index + 1;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80023d8:	3301      	adds	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = c;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	463a      	mov	r2, r7
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <found_flood_fill_destination>:

uint8_t found_flood_fill_destination(coordinate c, flood_fill_maze *maze)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	80b8      	strh	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c.y][c.x] == 0;
 800240a:	797b      	ldrb	r3, [r7, #5]
 800240c:	793a      	ldrb	r2, [r7, #4]
 800240e:	4611      	mov	r1, r2
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	4413      	add	r3, r2
 8002416:	440b      	add	r3, r1
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf0c      	ite	eq
 8002422:	2301      	moveq	r3, #1
 8002424:	2300      	movne	r3, #0
 8002426:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(coordinate c, Flood_Fill_Maze *maze)
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate c, stack *s)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	8139      	strh	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	print_distance_grid(maze);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fad1 	bl	80029e8 <print_distance_grid>
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
 8002446:	f44f 7382 	mov.w	r3, #260	; 0x104
 800244a:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c.y][c.x] - 1;
 800244c:	7a7b      	ldrb	r3, [r7, #9]
 800244e:	7a3a      	ldrb	r2, [r7, #8]
 8002450:	4611      	mov	r1, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	440b      	add	r3, r1
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29b      	uxth	r3, r3
 8002466:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 8002468:	2300      	movs	r3, #0
 800246a:	757b      	strb	r3, [r7, #21]
 800246c:	e0e9      	b.n	8002642 <minus_one_neighbor+0x20e>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 800246e:	7a7b      	ldrb	r3, [r7, #9]
 8002470:	461c      	mov	r4, r3
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	7d79      	ldrb	r1, [r7, #21]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	461a      	mov	r2, r3
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	441a      	add	r2, r3
 800247e:	4623      	mov	r3, r4
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4423      	add	r3, r4
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	4403      	add	r3, r0
 800248a:	440b      	add	r3, r1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 80cb 	bne.w	800262a <minus_one_neighbor+0x1f6>
		{
			switch(i)
 8002494:	7d7b      	ldrb	r3, [r7, #21]
 8002496:	2b04      	cmp	r3, #4
 8002498:	f200 80d0 	bhi.w	800263c <minus_one_neighbor+0x208>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <minus_one_neighbor+0x70>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024b9 	.word	0x080024b9
 80024a8:	08002517 	.word	0x08002517
 80024ac:	08002573 	.word	0x08002573
 80024b0:	080025cf 	.word	0x080025cf
 80024b4:	0800263d 	.word	0x0800263d
			{
			case North:
				if(maze->distance_grid[c.y+1][c.x] == target)
 80024b8:	7a7b      	ldrb	r3, [r7, #9]
 80024ba:	3301      	adds	r3, #1
 80024bc:	7a3a      	ldrb	r2, [r7, #8]
 80024be:	4611      	mov	r1, r2
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4413      	add	r3, r2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d101      	bne.n	80024dc <minus_one_neighbor+0xa8>
				{
					return i;
 80024d8:	7d7b      	ldrb	r3, [r7, #21]
 80024da:	e11c      	b.n	8002716 <minus_one_neighbor+0x2e2>
				}  // if(maze->distance_grid[c.y+1][c.x] == target)
				if(maze->distance_grid[c.y+1][c.x] < min_dist)
 80024dc:	7a7b      	ldrb	r3, [r7, #9]
 80024de:	3301      	adds	r3, #1
 80024e0:	7a3a      	ldrb	r2, [r7, #8]
 80024e2:	4611      	mov	r1, r2
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	4413      	add	r3, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	8afa      	ldrh	r2, [r7, #22]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	f240 8099 	bls.w	800262e <minus_one_neighbor+0x1fa>
				{
					min_dist = maze->distance_grid[c.y+1][c.x];
 80024fc:	7a7b      	ldrb	r3, [r7, #9]
 80024fe:	3301      	adds	r3, #1
 8002500:	7a3a      	ldrb	r2, [r7, #8]
 8002502:	4611      	mov	r1, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	440b      	add	r3, r1
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y+1][c.x] < min_dist)
				break;
 8002514:	e08b      	b.n	800262e <minus_one_neighbor+0x1fa>
			case East:
				if(maze->distance_grid[c.y][c.x+1] == target)
 8002516:	7a7b      	ldrb	r3, [r7, #9]
 8002518:	461a      	mov	r2, r3
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	68f9      	ldr	r1, [r7, #12]
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	440a      	add	r2, r1
 8002524:	4413      	add	r3, r2
 8002526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002532:	429a      	cmp	r2, r3
 8002534:	d101      	bne.n	800253a <minus_one_neighbor+0x106>
				{
					return i;
 8002536:	7d7b      	ldrb	r3, [r7, #21]
 8002538:	e0ed      	b.n	8002716 <minus_one_neighbor+0x2e2>
				}  // if(maze->distance_grid[c.y][c.x+1] == target)
				if(maze->distance_grid[c.y][c.x+1] < min_dist)
 800253a:	7a7b      	ldrb	r3, [r7, #9]
 800253c:	461a      	mov	r2, r3
 800253e:	7a3b      	ldrb	r3, [r7, #8]
 8002540:	3301      	adds	r3, #1
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	440a      	add	r2, r1
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	8afa      	ldrh	r2, [r7, #22]
 8002554:	429a      	cmp	r2, r3
 8002556:	d96c      	bls.n	8002632 <minus_one_neighbor+0x1fe>
				{
					min_dist = maze->distance_grid[c.y][c.x+1];
 8002558:	7a7b      	ldrb	r3, [r7, #9]
 800255a:	461a      	mov	r2, r3
 800255c:	7a3b      	ldrb	r3, [r7, #8]
 800255e:	3301      	adds	r3, #1
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	440a      	add	r2, r1
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x+1] < min_dist)
				break;
 8002570:	e05f      	b.n	8002632 <minus_one_neighbor+0x1fe>
			case South:
				if(maze->distance_grid[c.y-1][c.x] == target)
 8002572:	7a7b      	ldrb	r3, [r7, #9]
 8002574:	3b01      	subs	r3, #1
 8002576:	7a3a      	ldrb	r2, [r7, #8]
 8002578:	4611      	mov	r1, r2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4413      	add	r3, r2
 8002580:	440b      	add	r3, r1
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800258e:	429a      	cmp	r2, r3
 8002590:	d101      	bne.n	8002596 <minus_one_neighbor+0x162>
				{
					return i;
 8002592:	7d7b      	ldrb	r3, [r7, #21]
 8002594:	e0bf      	b.n	8002716 <minus_one_neighbor+0x2e2>
				}  // if(maze->distance_grid[c.y-1][c.x] == target)
				if(maze->distance_grid[c.y-1][c.x] < min_dist)
 8002596:	7a7b      	ldrb	r3, [r7, #9]
 8002598:	3b01      	subs	r3, #1
 800259a:	7a3a      	ldrb	r2, [r7, #8]
 800259c:	4611      	mov	r1, r2
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4413      	add	r3, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	8afa      	ldrh	r2, [r7, #22]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d940      	bls.n	8002636 <minus_one_neighbor+0x202>
				{
					min_dist = maze->distance_grid[c.y-1][c.x];
 80025b4:	7a7b      	ldrb	r3, [r7, #9]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	7a3a      	ldrb	r2, [r7, #8]
 80025ba:	4611      	mov	r1, r2
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y-1][c.x] < min_dist)
				break;
 80025cc:	e033      	b.n	8002636 <minus_one_neighbor+0x202>
			case West:
				if(maze->distance_grid[c.y][c.x-1] == target)
 80025ce:	7a7b      	ldrb	r3, [r7, #9]
 80025d0:	461a      	mov	r2, r3
 80025d2:	7a3b      	ldrb	r3, [r7, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	68f9      	ldr	r1, [r7, #12]
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	440a      	add	r2, r1
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d101      	bne.n	80025f2 <minus_one_neighbor+0x1be>
				{
					return i;
 80025ee:	7d7b      	ldrb	r3, [r7, #21]
 80025f0:	e091      	b.n	8002716 <minus_one_neighbor+0x2e2>
				}  // if(maze->distance_grid[c.y][c.x-1] == target)
				if(maze->distance_grid[c.y][c.x-1] < min_dist)
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	461a      	mov	r2, r3
 80025f6:	7a3b      	ldrb	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	68f9      	ldr	r1, [r7, #12]
 80025fc:	0112      	lsls	r2, r2, #4
 80025fe:	440a      	add	r2, r1
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	8afa      	ldrh	r2, [r7, #22]
 800260c:	429a      	cmp	r2, r3
 800260e:	d914      	bls.n	800263a <minus_one_neighbor+0x206>
				{
					min_dist = maze->distance_grid[c.y][c.x-1];
 8002610:	7a7b      	ldrb	r3, [r7, #9]
 8002612:	461a      	mov	r2, r3
 8002614:	7a3b      	ldrb	r3, [r7, #8]
 8002616:	3b01      	subs	r3, #1
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	0112      	lsls	r2, r2, #4
 800261c:	440a      	add	r2, r1
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x-1] < min_dist)
				break;
 8002628:	e007      	b.n	800263a <minus_one_neighbor+0x206>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 800262a:	bf00      	nop
 800262c:	e006      	b.n	800263c <minus_one_neighbor+0x208>
				break;
 800262e:	bf00      	nop
 8002630:	e004      	b.n	800263c <minus_one_neighbor+0x208>
				break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <minus_one_neighbor+0x208>
				break;
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <minus_one_neighbor+0x208>
				break;
 800263a:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 800263c:	7d7b      	ldrb	r3, [r7, #21]
 800263e:	3301      	adds	r3, #1
 8002640:	757b      	strb	r3, [r7, #21]
 8002642:	7d7b      	ldrb	r3, [r7, #21]
 8002644:	2b03      	cmp	r3, #3
 8002646:	f67f af12 	bls.w	800246e <minus_one_neighbor+0x3a>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c.y][c.x] = min_dist + 1;
 800264a:	8afb      	ldrh	r3, [r7, #22]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	7a7a      	ldrb	r2, [r7, #9]
 8002650:	4614      	mov	r4, r2
 8002652:	7a3a      	ldrb	r2, [r7, #8]
 8002654:	4610      	mov	r0, r2
 8002656:	3301      	adds	r3, #1
 8002658:	b2d9      	uxtb	r1, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	0123      	lsls	r3, r4, #4
 800265e:	4413      	add	r3, r2
 8002660:	4403      	add	r3, r0
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	460a      	mov	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 800266a:	2300      	movs	r3, #0
 800266c:	753b      	strb	r3, [r7, #20]
 800266e:	e04e      	b.n	800270e <minus_one_neighbor+0x2da>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8002670:	7a7b      	ldrb	r3, [r7, #9]
 8002672:	461c      	mov	r4, r3
 8002674:	7a3b      	ldrb	r3, [r7, #8]
 8002676:	7d39      	ldrb	r1, [r7, #20]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	441a      	add	r2, r3
 8002680:	4623      	mov	r3, r4
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4423      	add	r3, r4
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	4403      	add	r3, r0
 800268c:	440b      	add	r3, r1
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d139      	bne.n	8002708 <minus_one_neighbor+0x2d4>
		{
			coordinate temp;
			switch(i)
 8002694:	7d3b      	ldrb	r3, [r7, #20]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d832      	bhi.n	8002700 <minus_one_neighbor+0x2cc>
 800269a:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <minus_one_neighbor+0x26c>)
 800269c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026c5 	.word	0x080026c5
 80026a8:	080026d9 	.word	0x080026d9
 80026ac:	080026ed 	.word	0x080026ed
			{
			case North:
				init_coordinate(&temp, c.x, c.y + 1);
 80026b0:	7a39      	ldrb	r1, [r7, #8]
 80026b2:	7a7b      	ldrb	r3, [r7, #9]
 80026b4:	3301      	adds	r3, #1
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f82f 	bl	8002720 <init_coordinate>
				break;
 80026c2:	e01d      	b.n	8002700 <minus_one_neighbor+0x2cc>
			case East:
				init_coordinate(&temp, c.x + 1, c.y);
 80026c4:	7a3b      	ldrb	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2d9      	uxtb	r1, r3
 80026ca:	7a7a      	ldrb	r2, [r7, #9]
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 f825 	bl	8002720 <init_coordinate>
				break;
 80026d6:	e013      	b.n	8002700 <minus_one_neighbor+0x2cc>
			case South:
				init_coordinate(&temp, c.x, c.y - 1);
 80026d8:	7a39      	ldrb	r1, [r7, #8]
 80026da:	7a7b      	ldrb	r3, [r7, #9]
 80026dc:	3b01      	subs	r3, #1
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f81b 	bl	8002720 <init_coordinate>
				break;
 80026ea:	e009      	b.n	8002700 <minus_one_neighbor+0x2cc>
			case West:
				init_coordinate(&temp, c.x - 1, c.y);
 80026ec:	7a3b      	ldrb	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b2d9      	uxtb	r1, r3
 80026f2:	7a7a      	ldrb	r2, [r7, #9]
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f811 	bl	8002720 <init_coordinate>
				break;
 80026fe:	bf00      	nop
			}  // switch(i)
			push_stack(s, temp);
 8002700:	6939      	ldr	r1, [r7, #16]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe60 	bl	80023c8 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 8002708:	7d3b      	ldrb	r3, [r7, #20]
 800270a:	3301      	adds	r3, #1
 800270c:	753b      	strb	r3, [r7, #20]
 800270e:	7d3b      	ldrb	r3, [r7, #20]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d9ad      	bls.n	8002670 <minus_one_neighbor+0x23c>
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8002714:	2304      	movs	r3, #4
}
 8002716:	4618      	mov	r0, r3
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	bf00      	nop

08002720 <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
 800272c:	4613      	mov	r3, r2
 800272e:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	701a      	strb	r2, [r3, #0]
	c->y = y;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	78ba      	ldrb	r2, [r7, #2]
 800273a:	705a      	strb	r2, [r3, #1]
}  // void init_coor(coordinate c, uint8_t x, uint8_t y)
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0c6      	sub	sp, #280	; 0x118
 800274c:	af00      	add	r7, sp, #0
 800274e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002752:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002756:	6018      	str	r0, [r3, #0]
 8002758:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800275c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002760:	8019      	strh	r1, [r3, #0]
 8002762:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002766:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800276a:	701a      	strb	r2, [r3, #0]
	printf("Printing maze grid. \r\n");
 800276c:	489c      	ldr	r0, [pc, #624]	; (80029e0 <print_maze+0x298>)
 800276e:	f005 fc65 	bl	800803c <puts>
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8002772:	2300      	movs	r3, #0
 8002774:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002778:	e08c      	b.n	8002894 <print_maze+0x14c>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002780:	e07e      	b.n	8002880 <print_maze+0x138>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8002782:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8002786:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800278a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800278e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002792:	6810      	ldr	r0, [r2, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	441a      	add	r2, r3
 800279a:	460b      	mov	r3, r1
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	4403      	add	r3, r0
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[East] << 1;
 80027ac:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 80027b0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80027b4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80027b8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80027bc:	6810      	ldr	r0, [r2, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	441a      	add	r2, r3
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	4413      	add	r3, r2
 80027ce:	4403      	add	r3, r0
 80027d0:	3301      	adds	r3, #1
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	b25a      	sxtb	r2, r3
 80027d8:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[South] << 2;
 80027e4:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 80027e8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80027ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80027f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80027f4:	6810      	ldr	r0, [r2, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	0092      	lsls	r2, r2, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	4413      	add	r3, r2
 8002806:	4403      	add	r3, r0
 8002808:	3302      	adds	r3, #2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	b25a      	sxtb	r2, r3
 8002810:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8002814:	4313      	orrs	r3, r2
 8002816:	b25b      	sxtb	r3, r3
 8002818:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[West] << 3;
 800281c:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8002820:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002824:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002828:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800282c:	6810      	ldr	r0, [r2, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	441a      	add	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4413      	add	r3, r2
 800283e:	4403      	add	r3, r0
 8002840:	3303      	adds	r3, #3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	b25a      	sxtb	r2, r3
 8002848:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 800284c:	4313      	orrs	r3, r2
 800284e:	b25b      	sxtb	r3, r3
 8002850:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			maze_map[i][j] = 'a' + number;
 8002854:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8002858:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800285c:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 8002860:	3161      	adds	r1, #97	; 0x61
 8002862:	b2c8      	uxtb	r0, r1
 8002864:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002868:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	440a      	add	r2, r1
 8002870:	4413      	add	r3, r2
 8002872:	4602      	mov	r2, r0
 8002874:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002876:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800287a:	3301      	adds	r3, #1
 800287c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002880:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002884:	2b0f      	cmp	r3, #15
 8002886:	f67f af7c 	bls.w	8002782 <print_maze+0x3a>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 800288a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800288e:	3301      	adds	r3, #1
 8002890:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002898:	2b0f      	cmp	r3, #15
 800289a:	f67f af6e 	bls.w	800277a <print_maze+0x32>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 800289e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028a2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d865      	bhi.n	8002978 <print_maze+0x230>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <print_maze+0x16c>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c9 	.word	0x080028c9
 80028b8:	080028f5 	.word	0x080028f5
 80028bc:	08002921 	.word	0x08002921
 80028c0:	0800294d 	.word	0x0800294d
 80028c4:	08002979 	.word	0x08002979
	{
	case North:
		maze_map[c.y][c.x] = 'N';
 80028c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028e4:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80028e8:	0103      	lsls	r3, r0, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	224e      	movs	r2, #78	; 0x4e
 80028f0:	701a      	strb	r2, [r3, #0]
		break;
 80028f2:	e041      	b.n	8002978 <print_maze+0x230>
	case East:
		maze_map[c.y][c.x] = 'E';
 80028f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80028f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	4618      	mov	r0, r3
 8002900:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002904:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002910:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002914:	0103      	lsls	r3, r0, #4
 8002916:	4413      	add	r3, r2
 8002918:	440b      	add	r3, r1
 800291a:	2245      	movs	r2, #69	; 0x45
 800291c:	701a      	strb	r2, [r3, #0]
		break;
 800291e:	e02b      	b.n	8002978 <print_maze+0x230>
	case South:
		maze_map[c.y][c.x] = 'S';
 8002920:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	4618      	mov	r0, r3
 800292c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002930:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800293c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002940:	0103      	lsls	r3, r0, #4
 8002942:	4413      	add	r3, r2
 8002944:	440b      	add	r3, r1
 8002946:	2253      	movs	r2, #83	; 0x53
 8002948:	701a      	strb	r2, [r3, #0]
		break;
 800294a:	e015      	b.n	8002978 <print_maze+0x230>
	case West:
		maze_map[c.y][c.x] = 'W';
 800294c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002950:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	4618      	mov	r0, r3
 8002958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800295c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002968:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800296c:	0103      	lsls	r3, r0, #4
 800296e:	4413      	add	r3, r2
 8002970:	440b      	add	r3, r1
 8002972:	2257      	movs	r2, #87	; 0x57
 8002974:	701a      	strb	r2, [r3, #0]
		break;
 8002976:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 8002978:	230f      	movs	r3, #15
 800297a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800297e:	e024      	b.n	80029ca <print_maze+0x282>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8002986:	e013      	b.n	80029b0 <print_maze+0x268>
		{
			printf("%c", maze_map[i][j]);
 8002988:	f997 2115 	ldrsb.w	r2, [r7, #277]	; 0x115
 800298c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002990:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002994:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	440a      	add	r2, r1
 800299c:	4413      	add	r3, r2
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f005 fac7 	bl	8007f34 <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80029a6:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80029aa:	3301      	adds	r3, #1
 80029ac:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 80029b0:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d9e7      	bls.n	8002988 <print_maze+0x240>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)

		printf("\r\n");
 80029b8:	480a      	ldr	r0, [pc, #40]	; (80029e4 <print_maze+0x29c>)
 80029ba:	f005 fb3f 	bl	800803c <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 80029be:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80029ca:	f997 3115 	ldrsb.w	r3, [r7, #277]	; 0x115
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	dad6      	bge.n	8002980 <print_maze+0x238>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_maze(flood_fill_maze *m, coordinate c)
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	0800a7bc 	.word	0x0800a7bc
 80029e4:	0800a7d4 	.word	0x0800a7d4

080029e8 <print_distance_grid>:

void print_distance_grid(flood_fill_maze *maze)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

	printf("Printing distance grid. \r\n");
 80029f0:	4816      	ldr	r0, [pc, #88]	; (8002a4c <print_distance_grid+0x64>)
 80029f2:	f005 fb23 	bl	800803c <puts>

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 80029f6:	230f      	movs	r3, #15
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e01d      	b.n	8002a38 <print_distance_grid+0x50>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80029fc:	2300      	movs	r3, #0
 80029fe:	73bb      	strb	r3, [r7, #14]
 8002a00:	e010      	b.n	8002a24 <print_distance_grid+0x3c>
		{
			printf("%c", 'a' + maze->distance_grid[i][j]);
 8002a02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	440a      	add	r2, r1
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	3361      	adds	r3, #97	; 0x61
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f005 fa8b 	bl	8007f34 <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	3301      	adds	r3, #1
 8002a22:	73bb      	strb	r3, [r7, #14]
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d9eb      	bls.n	8002a02 <print_distance_grid+0x1a>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		printf("\r\n");
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <print_distance_grid+0x68>)
 8002a2c:	f005 fb06 	bl	800803c <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dadd      	bge.n	80029fc <print_distance_grid+0x14>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_distance_grid(flood_fill_maze *maze)
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	0800a7d8 	.word	0x0800a7d8
 8002a50:	0800a7d4 	.word	0x0800a7d4

08002a54 <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f001 fa5b 	bl	8003f14 <is_there_wall_on_direction>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f000 fdfb 	bl	8003660 <rotate_direction_90>
		go_forward_one_unit();
 8002a6a:	f000 fe2f 	bl	80036cc <go_forward_one_unit>
 8002a6e:	e018      	b.n	8002aa2 <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8002a70:	2001      	movs	r0, #1
 8002a72:	f001 fa4f 	bl	8003f14 <is_there_wall_on_direction>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f001 fa49 	bl	8003f14 <is_there_wall_on_direction>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8002a88:	f000 fe13 	bl	80036b2 <rotate_180_degrees>
			go_forward_one_unit();
 8002a8c:	f000 fe1e 	bl	80036cc <go_forward_one_unit>
 8002a90:	e007      	b.n	8002aa2 <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 8002a92:	2002      	movs	r0, #2
 8002a94:	f000 fde4 	bl	8003660 <rotate_direction_90>
			go_forward_one_unit();
 8002a98:	f000 fe18 	bl	80036cc <go_forward_one_unit>
 8002a9c:	e001      	b.n	8002aa2 <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 8002a9e:	f000 fe15 	bl	80036cc <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 8002aa2:	f000 f808 	bl	8002ab6 <found_hugger_destination>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 8002aac:	f7ff ffd2 	bl	8002a54 <do_hug_left_algorithm>
 8002ab0:	e000      	b.n	8002ab4 <do_hug_left_algorithm+0x60>
		return;
 8002ab2:	bf00      	nop
}  // do_hug_left_algorithm()
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 8002aba:	2300      	movs	r3, #0
}  // found_hugger_destination()
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8002ad0:	2047      	movs	r0, #71	; 0x47
 8002ad2:	f001 fccc 	bl	800446e <HAL_NVIC_DisableIRQ>
	// Save the last command

	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ad6:	2047      	movs	r0, #71	; 0x47
 8002ad8:	f001 fcbb 	bl	8004452 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002adc:	2201      	movs	r2, #1
 8002ade:	4913      	ldr	r1, [pc, #76]	; (8002b2c <HAL_UART_RxCpltCallback+0x64>)
 8002ae0:	4813      	ldr	r0, [pc, #76]	; (8002b30 <HAL_UART_RxCpltCallback+0x68>)
 8002ae2:	f003 fc5c 	bl	800639e <HAL_UART_Receive_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]

	//	__HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d011      	beq.n	8002b14 <HAL_UART_RxCpltCallback+0x4c>
		Error_Handler();
 8002af0:	f000 fbb0 	bl	8003254 <Error_Handler>
		HAL_UART_Abort_IT(&huart6);
 8002af4:	480e      	ldr	r0, [pc, #56]	; (8002b30 <HAL_UART_RxCpltCallback+0x68>)
 8002af6:	f003 fc83 	bl	8006400 <HAL_UART_Abort_IT>
		SET_BIT(huart6.Instance->CR3, USART_CR3_EIE);
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_UART_RxCpltCallback+0x68>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_UART_RxCpltCallback+0x68>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	615a      	str	r2, [r3, #20]
		HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4907      	ldr	r1, [pc, #28]	; (8002b2c <HAL_UART_RxCpltCallback+0x64>)
 8002b0e:	4808      	ldr	r0, [pc, #32]	; (8002b30 <HAL_UART_RxCpltCallback+0x68>)
 8002b10:	f003 fc45 	bl	800639e <HAL_UART_Receive_IT>
	}
	HAL_NVIC_ClearPendingIRQ(USART6_IRQn);
 8002b14:	2047      	movs	r0, #71	; 0x47
 8002b16:	f001 fcc4 	bl	80044a2 <HAL_NVIC_ClearPendingIRQ>
	requested_manual_command = UART6_rxBuffer[0];
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_UART_RxCpltCallback+0x64>)
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_UART_RxCpltCallback+0x6c>)
 8002b20:	701a      	strb	r2, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200003f4 	.word	0x200003f4
 8002b30:	200003b0 	.word	0x200003b0
 8002b34:	20000001 	.word	0x20000001

08002b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b3e:	f001 fab9 	bl	80040b4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b42:	f000 f8b7 	bl	8002cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b46:	f000 fb15 	bl	8003174 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002b4a:	f000 f969 	bl	8002e20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b4e:	f000 f9c1 	bl	8002ed4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002b52:	f000 f90d 	bl	8002d70 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002b56:	f000 fa17 	bl	8002f88 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8002b5a:	f000 fae1 	bl	8003120 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8002b5e:	f000 fa67 	bl	8003030 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8002b62:	f000 fab3 	bl	80030cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe f9f8 	bl	8000f5c <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe fa13 	bl	8000f9a <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 8002b74:	2001      	movs	r0, #1
 8002b76:	f000 fdb7 	bl	80036e8 <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8002b7a:	f000 fc3b 	bl	80033f4 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 8002b7e:	4b40      	ldr	r3, [pc, #256]	; (8002c80 <main+0x148>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <main+0x148>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0204 	orr.w	r2, r2, #4
 8002b8c:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8002b8e:	2100      	movs	r1, #0
 8002b90:	483c      	ldr	r0, [pc, #240]	; (8002c84 <main+0x14c>)
 8002b92:	f002 fbbb 	bl	800530c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 8002b96:	2104      	movs	r1, #4
 8002b98:	483b      	ldr	r0, [pc, #236]	; (8002c88 <main+0x150>)
 8002b9a:	f002 fbb7 	bl	800530c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	483a      	ldr	r0, [pc, #232]	; (8002c8c <main+0x154>)
 8002ba2:	f002 fbb3 	bl	800530c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	4835      	ldr	r0, [pc, #212]	; (8002c80 <main+0x148>)
 8002baa:	f002 fbaf 	bl	800530c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  // Sonic Trigger PWM
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4837      	ldr	r0, [pc, #220]	; (8002c90 <main+0x158>)
 8002bb2:	f002 fbab 	bl	800530c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4936      	ldr	r1, [pc, #216]	; (8002c94 <main+0x15c>)
 8002bba:	4837      	ldr	r0, [pc, #220]	; (8002c98 <main+0x160>)
 8002bbc:	f003 fbef 	bl	800639e <HAL_UART_Receive_IT>
  uint8_t determined_algorithm = determine_algorithm();
 8002bc0:	f7fe fa46 	bl	8001050 <determine_algorithm>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  requested_manual_command = S_CHAR;  // TODO - change to S_CHAR if manual mode is supported, AUTON_CHAR if not
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <main+0x164>)
 8002bcc:	2238      	movs	r2, #56	; 0x38
 8002bce:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    set_servo_angle(Front);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f000 fd89 	bl	80036e8 <set_servo_angle>
    if (current_manual_command != COMPLETED_CHAR)
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <main+0x168>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b2d      	cmp	r3, #45	; 0x2d
 8002bdc:	d01c      	beq.n	8002c18 <main+0xe0>
    {
		printf("Currently changing to manual mode.\r\n");
 8002bde:	4831      	ldr	r0, [pc, #196]	; (8002ca4 <main+0x16c>)
 8002be0:	f005 fa2c 	bl	800803c <puts>
		char buf[20];
		memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
 8002be4:	4b30      	ldr	r3, [pc, #192]	; (8002ca8 <main+0x170>)
 8002be6:	1d3c      	adds	r4, r7, #4
 8002be8:	461d      	mov	r5, r3
 8002bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002bf2:	1d39      	adds	r1, r7, #4
 8002bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf8:	2214      	movs	r2, #20
 8002bfa:	4827      	ldr	r0, [pc, #156]	; (8002c98 <main+0x160>)
 8002bfc:	f003 fb3d 	bl	800627a <HAL_UART_Transmit>
    }  // if (current_manual_command != COMPLETED_CHAR && current_manual_command != S_CHAR)

	  while (current_manual_command != AUTON_CHAR)
 8002c00:	e00a      	b.n	8002c18 <main+0xe0>
	  {
//			printf("Currently changing to manual mode.\r\n");
//			char buf[20];
//			memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
//			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		  if(requested_manual_command != current_manual_command)
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <main+0x164>)
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <main+0x168>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d004      	beq.n	8002c18 <main+0xe0>
		  {
			  execute_manual_command(requested_manual_command);
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <main+0x164>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fb24 	bl	8003260 <execute_manual_command>
	  while (current_manual_command != AUTON_CHAR)
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <main+0x168>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b41      	cmp	r3, #65	; 0x41
 8002c1e:	d1f0      	bne.n	8002c02 <main+0xca>
		  }  // if(requested_manual_command != current_manual_command)
	  }  // while (current_manual_command != AUTON_CHAR)

    set_servo_angle(Front);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f000 fd61 	bl	80036e8 <set_servo_angle>
    printf("Changing to autonomous mode.\r\n");
 8002c26:	4821      	ldr	r0, [pc, #132]	; (8002cac <main+0x174>)
 8002c28:	f005 fa08 	bl	800803c <puts>
    char buf[20];
    memcpy(buf, "&AUTONOMOUS,,,,,,,,", 20);
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <main+0x178>)
 8002c2e:	f107 0418 	add.w	r4, r7, #24
 8002c32:	461d      	mov	r5, r3
 8002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002c3c:	f107 0118 	add.w	r1, r7, #24
 8002c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c44:	2214      	movs	r2, #20
 8002c46:	4814      	ldr	r0, [pc, #80]	; (8002c98 <main+0x160>)
 8002c48:	f003 fb17 	bl	800627a <HAL_UART_Transmit>

	  uint8_t completed = do_search_algorithm(determined_algorithm);
 8002c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fa1b 	bl	800108c <do_search_algorithm>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  
    if (completed)
 8002c5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <main+0x13e>
    {
      complete_search_algorithm();
 8002c64:	f7fe fa3c 	bl	80010e0 <complete_search_algorithm>
      requested_manual_command = COMPLETED_CHAR;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <main+0x164>)
 8002c6a:	222d      	movs	r2, #45	; 0x2d
 8002c6c:	701a      	strb	r2, [r3, #0]
      current_manual_command = COMPLETED_CHAR;
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <main+0x168>)
 8002c70:	222d      	movs	r2, #45	; 0x2d
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e7ac      	b.n	8002bd0 <main+0x98>
    }  // if (completed)
    else
    {
	  current_manual_command = S_CHAR;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <main+0x168>)
 8002c78:	2238      	movs	r2, #56	; 0x38
 8002c7a:	701a      	strb	r2, [r3, #0]
  {
 8002c7c:	e7a8      	b.n	8002bd0 <main+0x98>
 8002c7e:	bf00      	nop
 8002c80:	200002dc 	.word	0x200002dc
 8002c84:	20000294 	.word	0x20000294
 8002c88:	2000024c 	.word	0x2000024c
 8002c8c:	20000204 	.word	0x20000204
 8002c90:	20000324 	.word	0x20000324
 8002c94:	200003f4 	.word	0x200003f4
 8002c98:	200003b0 	.word	0x200003b0
 8002c9c:	20000001 	.word	0x20000001
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	0800a7f4 	.word	0x0800a7f4
 8002ca8:	0800a818 	.word	0x0800a818
 8002cac:	0800a82c 	.word	0x0800a82c
 8002cb0:	0800a84c 	.word	0x0800a84c

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	; 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2230      	movs	r2, #48	; 0x30
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 fcac 	bl	8007620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <SystemClock_Config+0xb4>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <SystemClock_Config+0xb4>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <SystemClock_Config+0xb4>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <SystemClock_Config+0xb8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <SystemClock_Config+0xb8>)
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <SystemClock_Config+0xb8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d18:	2310      	movs	r3, #16
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d20:	f107 0320 	add.w	r3, r7, #32
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 fdfb 	bl	8004920 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002d30:	f000 fa90 	bl	8003254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d34:	230f      	movs	r3, #15
 8002d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f85e 	bl	8004e10 <HAL_RCC_ClockConfig>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002d5a:	f000 fa7b 	bl	8003254 <Error_Handler>
  }
}
 8002d5e:	bf00      	nop
 8002d60:	3750      	adds	r7, #80	; 0x50
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000

08002d70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d76:	f107 0320 	add.w	r3, r7, #32
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	611a      	str	r2, [r3, #16]
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002d9c:	229f      	movs	r2, #159	; 0x9f
 8002d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002da8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002dac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dba:	4818      	ldr	r0, [pc, #96]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002dbc:	f002 fa57 	bl	800526e <HAL_TIM_PWM_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002dc6:	f000 fa45 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd2:	f107 0320 	add.w	r3, r7, #32
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4810      	ldr	r0, [pc, #64]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002dda:	f003 f97f 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002de4:	f000 fa36 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de8:	2360      	movs	r3, #96	; 0x60
 8002dea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4807      	ldr	r0, [pc, #28]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002e00:	f002 fd28 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002e0a:	f000 fa23 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e0e:	4803      	ldr	r0, [pc, #12]	; (8002e1c <MX_TIM2_Init+0xac>)
 8002e10:	f000 fd74 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002e14:	bf00      	nop
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000204 	.word	0x20000204

08002e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e26:	f107 0320 	add.w	r3, r7, #32
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	615a      	str	r2, [r3, #20]
 8002e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <MX_TIM3_Init+0xb0>)
 8002e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e68:	4818      	ldr	r0, [pc, #96]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e6a:	f002 fa00 	bl	800526e <HAL_TIM_PWM_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002e74:	f000 f9ee 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e80:	f107 0320 	add.w	r3, r7, #32
 8002e84:	4619      	mov	r1, r3
 8002e86:	4811      	ldr	r0, [pc, #68]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002e88:	f003 f928 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002e92:	f000 f9df 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e96:	2360      	movs	r3, #96	; 0x60
 8002e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4807      	ldr	r0, [pc, #28]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002eae:	f002 fcd1 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002eb8:	f000 f9cc 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <MX_TIM3_Init+0xac>)
 8002ebe:	f000 fd1d 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	2000024c 	.word	0x2000024c
 8002ed0:	40000400 	.word	0x40000400

08002ed4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	f107 0320 	add.w	r3, r7, #32
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	615a      	str	r2, [r3, #20]
 8002ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <MX_TIM4_Init+0xb0>)
 8002efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002efe:	224f      	movs	r2, #79	; 0x4f
 8002f00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f1c:	4818      	ldr	r0, [pc, #96]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f1e:	f002 f9a6 	bl	800526e <HAL_TIM_PWM_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002f28:	f000 f994 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f34:	f107 0320 	add.w	r3, r7, #32
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4811      	ldr	r0, [pc, #68]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f3c:	f003 f8ce 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002f46:	f000 f985 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f4a:	2360      	movs	r3, #96	; 0x60
 8002f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4807      	ldr	r0, [pc, #28]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f62:	f002 fc77 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002f6c:	f000 f972 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <MX_TIM4_Init+0xac>)
 8002f72:	f000 fcc3 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8002f76:	bf00      	nop
 8002f78:	3728      	adds	r7, #40	; 0x28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000294 	.word	0x20000294
 8002f84:	40000800 	.word	0x40000800

08002f88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f8e:	f107 0310 	add.w	r3, r7, #16
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f98:	463b      	mov	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fa6:	4a21      	ldr	r2, [pc, #132]	; (800302c <MX_TIM5_Init+0xa4>)
 8002fa8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002faa:	4b1f      	ldr	r3, [pc, #124]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fac:	220f      	movs	r2, #15
 8002fae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc4:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002fca:	4817      	ldr	r0, [pc, #92]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fcc:	f002 fa4e 	bl	800546c <HAL_TIM_IC_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002fd6:	f000 f93d 	bl	8003254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480f      	ldr	r0, [pc, #60]	; (8003028 <MX_TIM5_Init+0xa0>)
 8002fea:	f003 f877 	bl	80060dc <HAL_TIMEx_MasterConfigSynchronization>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002ff4:	f000 f92e 	bl	8003254 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003008:	463b      	mov	r3, r7
 800300a:	2204      	movs	r2, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4806      	ldr	r0, [pc, #24]	; (8003028 <MX_TIM5_Init+0xa0>)
 8003010:	f002 fb83 	bl	800571a <HAL_TIM_IC_ConfigChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800301a:	f000 f91b 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200002dc 	.word	0x200002dc
 800302c:	40000c00 	.word	0x40000c00

08003030 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	615a      	str	r2, [r3, #20]
 8003046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <MX_TIM10_Init+0x94>)
 800304a:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <MX_TIM10_Init+0x98>)
 800304c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <MX_TIM10_Init+0x94>)
 8003050:	229f      	movs	r2, #159	; 0x9f
 8003052:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <MX_TIM10_Init+0x94>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_TIM10_Init+0x94>)
 800305c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8003060:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <MX_TIM10_Init+0x94>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003068:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <MX_TIM10_Init+0x94>)
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800306e:	4815      	ldr	r0, [pc, #84]	; (80030c4 <MX_TIM10_Init+0x94>)
 8003070:	f002 f8ae 	bl	80051d0 <HAL_TIM_Base_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800307a:	f000 f8eb 	bl	8003254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800307e:	4811      	ldr	r0, [pc, #68]	; (80030c4 <MX_TIM10_Init+0x94>)
 8003080:	f002 f8f5 	bl	800526e <HAL_TIM_PWM_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800308a:	f000 f8e3 	bl	8003254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308e:	2360      	movs	r3, #96	; 0x60
 8003090:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	2200      	movs	r2, #0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4807      	ldr	r0, [pc, #28]	; (80030c4 <MX_TIM10_Init+0x94>)
 80030a6:	f002 fbd5 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80030b0:	f000 f8d0 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80030b4:	4803      	ldr	r0, [pc, #12]	; (80030c4 <MX_TIM10_Init+0x94>)
 80030b6:	f000 fc21 	bl	80038fc <HAL_TIM_MspPostInit>

}
 80030ba:	bf00      	nop
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000324 	.word	0x20000324
 80030c8:	40014400 	.word	0x40014400

080030cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <MX_USART2_UART_Init+0x50>)
 80030d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030f2:	220c      	movs	r2, #12
 80030f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003102:	4805      	ldr	r0, [pc, #20]	; (8003118 <MX_USART2_UART_Init+0x4c>)
 8003104:	f003 f86c 	bl	80061e0 <HAL_UART_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800310e:	f000 f8a1 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	2000036c 	.word	0x2000036c
 800311c:	40004400 	.word	0x40004400

08003120 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <MX_USART6_UART_Init+0x50>)
 8003128:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <MX_USART6_UART_Init+0x4c>)
 800312c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003130:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <MX_USART6_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003146:	220c      	movs	r2, #12
 8003148:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <MX_USART6_UART_Init+0x4c>)
 800314c:	2200      	movs	r2, #0
 800314e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003156:	4805      	ldr	r0, [pc, #20]	; (800316c <MX_USART6_UART_Init+0x4c>)
 8003158:	f003 f842 	bl	80061e0 <HAL_UART_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003162:	f000 f877 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200003b0 	.word	0x200003b0
 8003170:	40011400 	.word	0x40011400

08003174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <MX_GPIO_Init+0xb4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a25      	ldr	r2, [pc, #148]	; (8003228 <MX_GPIO_Init+0xb4>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b23      	ldr	r3, [pc, #140]	; (8003228 <MX_GPIO_Init+0xb4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6313      	str	r3, [r2, #48]	; 0x30
 80031b6:	4b1c      	ldr	r3, [pc, #112]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	607b      	str	r3, [r7, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a17      	ldr	r2, [pc, #92]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <MX_GPIO_Init+0xb4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 80031de:	2200      	movs	r2, #0
 80031e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80031e4:	4811      	ldr	r0, [pc, #68]	; (800322c <MX_GPIO_Init+0xb8>)
 80031e6:	f001 fb81 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 80031ea:	f44f 7348 	mov.w	r3, #800	; 0x320
 80031ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	4619      	mov	r1, r3
 8003202:	480a      	ldr	r0, [pc, #40]	; (800322c <MX_GPIO_Init+0xb8>)
 8003204:	f001 f9ee 	bl	80045e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <MX_GPIO_Init+0xb8>)
 800321c:	f001 f9e2 	bl	80045e4 <HAL_GPIO_Init>

}
 8003220:	bf00      	nop
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	40020000 	.word	0x40020000

08003230 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003238:	1d39      	adds	r1, r7, #4
 800323a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800323e:	2201      	movs	r2, #1
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <__io_putchar+0x20>)
 8003242:	f003 f81a 	bl	800627a <HAL_UART_Transmit>
  return ch;
 8003246:	687b      	ldr	r3, [r7, #4]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	2000036c 	.word	0x2000036c

08003254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
}
 800325a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800325c:	e7fe      	b.n	800325c <Error_Handler+0x8>
	...

08003260 <execute_manual_command>:
#include "manual_control.h"

void execute_manual_command(char command)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]

	switch(command)
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	3b32      	subs	r3, #50	; 0x32
 800326e:	2b0f      	cmp	r3, #15
 8003270:	d837      	bhi.n	80032e2 <execute_manual_command+0x82>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <execute_manual_command+0x18>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032e3 	.word	0x080032e3
 8003280:	080032b9 	.word	0x080032b9
 8003284:	080032d7 	.word	0x080032d7
 8003288:	080032c5 	.word	0x080032c5
 800328c:	080032e3 	.word	0x080032e3
 8003290:	080032dd 	.word	0x080032dd
 8003294:	080032e3 	.word	0x080032e3
 8003298:	080032e3 	.word	0x080032e3
 800329c:	080032e3 	.word	0x080032e3
 80032a0:	080032e3 	.word	0x080032e3
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	080032e3 	.word	0x080032e3
 80032ac:	080032e3 	.word	0x080032e3
 80032b0:	080032e3 	.word	0x080032e3
 80032b4:	080032dd 	.word	0x080032dd
	{
	case LEFT_CHAR:
		manual_turn(Left, 0.6);
 80032b8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80032f4 <execute_manual_command+0x94>
 80032bc:	2000      	movs	r0, #0
 80032be:	f000 f81f 	bl	8003300 <manual_turn>
		break;
 80032c2:	e00f      	b.n	80032e4 <execute_manual_command+0x84>
	case RIGHT_CHAR:
		manual_turn(Right, 0.6);
 80032c4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80032f4 <execute_manual_command+0x94>
 80032c8:	2002      	movs	r0, #2
 80032ca:	f000 f819 	bl	8003300 <manual_turn>
		break;
 80032ce:	e009      	b.n	80032e4 <execute_manual_command+0x84>
	case FORWARD_CHAR:
		manual_forward();
 80032d0:	f000 f827 	bl	8003322 <manual_forward>
		break;
 80032d4:	e006      	b.n	80032e4 <execute_manual_command+0x84>
	case BACKWARD_CHAR:
		manual_backward();
 80032d6:	f000 f82c 	bl	8003332 <manual_backward>
		break;
 80032da:	e003      	b.n	80032e4 <execute_manual_command+0x84>
	case AUTON_CHAR:
	case S_CHAR:
		manual_stop();
 80032dc:	f000 f831 	bl	8003342 <manual_stop>
		break;
 80032e0:	e000      	b.n	80032e4 <execute_manual_command+0x84>
	default:
		break;
 80032e2:	bf00      	nop
	}  // switch(command)
	current_manual_command = requested_manual_command;
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <execute_manual_command+0x98>)
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <execute_manual_command+0x9c>)
 80032ea:	701a      	strb	r2, [r3, #0]


}  // void execute_manual_command(char message[30])
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	3f19999a 	.word	0x3f19999a
 80032f8:	20000001 	.word	0x20000001
 80032fc:	20000000 	.word	0x20000000

08003300 <manual_turn>:

void manual_turn(direction d, float speed_1)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	ed87 0a00 	vstr	s0, [r7]
 800330c:	71fb      	strb	r3, [r7, #7]
	rotate_direction(d, speed_1);
 800330e:	79fb      	ldrb	r3, [r7, #7]
 8003310:	ed97 0a00 	vldr	s0, [r7]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f891 	bl	800343c <rotate_direction>
}  // void manual_turn(direction d)
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <manual_forward>:

void manual_forward()
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
	motors_forward(0.5);
 8003326:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800332a:	f000 f911 	bl	8003550 <motors_forward>
}  // void manual_forward()
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}

08003332 <manual_backward>:

void manual_backward()
{
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
	motors_backward(0.5);
 8003336:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800333a:	f000 f94d 	bl	80035d8 <motors_backward>
}  // void manual_backward()
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}

08003342 <manual_stop>:

void manual_stop()
{
 8003342:	b580      	push	{r7, lr}
 8003344:	af00      	add	r7, sp, #0
	stop_all_motors();
 8003346:	f000 f855 	bl	80033f4 <stop_all_motors>
}  // void manual_stop()
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	460a      	mov	r2, r1
 800335a:	71fb      	strb	r3, [r7, #7]
 800335c:	4613      	mov	r3, r2
 800335e:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <set_motor_speed+0x1c>
 8003366:	2b01      	cmp	r3, #1
 8003368:	d016      	beq.n	8003398 <set_motor_speed+0x48>
 800336a:	e02b      	b.n	80033c4 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800336c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	bfd4      	ite	le
 8003374:	2301      	movle	r3, #1
 8003376:	2300      	movgt	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003380:	4812      	ldr	r0, [pc, #72]	; (80033cc <set_motor_speed+0x7c>)
 8003382:	f001 fab3 	bl	80048ec <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 8003386:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfb8      	it	lt
 800338e:	425b      	neglt	r3, r3
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <set_motor_speed+0x80>)
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8003396:	e015      	b.n	80033c4 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003398:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	bfd4      	ite	le
 80033a0:	2301      	movle	r3, #1
 80033a2:	2300      	movgt	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ac:	4807      	ldr	r0, [pc, #28]	; (80033cc <set_motor_speed+0x7c>)
 80033ae:	f001 fa9d 	bl	80048ec <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 80033b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bfb8      	it	lt
 80033ba:	425b      	neglt	r3, r3
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <set_motor_speed+0x84>)
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 80033c2:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40020000 	.word	0x40020000
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000400 	.word	0x40000400

080033d8 <stop_motor>:

void stop_motor(motor_side side)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
	set_motor_speed(side, 0);
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ffb2 	bl	8003350 <set_motor_speed>
}  // stop_motor(motor_side side)
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <stop_all_motors>:

void stop_all_motors()
{
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
	printf("Currently stopping the motors.\r\n");
 80033fa:	480d      	ldr	r0, [pc, #52]	; (8003430 <stop_all_motors+0x3c>)
 80033fc:	f004 fe1e 	bl	800803c <puts>
	char buf[20];
	memcpy(buf, "$STOP,,,,,,,,,,,,,,", 20);
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <stop_all_motors+0x40>)
 8003402:	1d3c      	adds	r4, r7, #4
 8003404:	461d      	mov	r5, r3
 8003406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800340e:	1d39      	adds	r1, r7, #4
 8003410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003414:	2214      	movs	r2, #20
 8003416:	4808      	ldr	r0, [pc, #32]	; (8003438 <stop_all_motors+0x44>)
 8003418:	f002 ff2f 	bl	800627a <HAL_UART_Transmit>
	stop_motor(Left_Motor);
 800341c:	2000      	movs	r0, #0
 800341e:	f7ff ffdb 	bl	80033d8 <stop_motor>
	stop_motor(Right_Motor);
 8003422:	2001      	movs	r0, #1
 8003424:	f7ff ffd8 	bl	80033d8 <stop_motor>
}  // stop_all_motors()
 8003428:	bf00      	nop
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bdb0      	pop	{r4, r5, r7, pc}
 8003430:	0800a860 	.word	0x0800a860
 8003434:	0800a880 	.word	0x0800a880
 8003438:	200003b0 	.word	0x200003b0

0800343c <rotate_direction>:

void rotate_direction(direction d, float speed_1)
{
 800343c:	b5b0      	push	{r4, r5, r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	ed87 0a00 	vstr	s0, [r7]
 8003448:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	char buf[20];
	switch(d)
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d037      	beq.n	80034c0 <rotate_direction+0x84>
 8003450:	2b02      	cmp	r3, #2
 8003452:	dc67      	bgt.n	8003524 <rotate_direction+0xe8>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <rotate_direction+0x20>
 8003458:	2b01      	cmp	r3, #1
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
		return;
	case Front:
		return;
 800345a:	e063      	b.n	8003524 <rotate_direction+0xe8>
		printf("Currently rotating left.\r\n");
 800345c:	4833      	ldr	r0, [pc, #204]	; (800352c <rotate_direction+0xf0>)
 800345e:	f004 fded 	bl	800803c <puts>
		memcpy(buf, "$LEFT,,,,,,,,,,,,,,", 20);
 8003462:	4b33      	ldr	r3, [pc, #204]	; (8003530 <rotate_direction+0xf4>)
 8003464:	f107 040c 	add.w	r4, r7, #12
 8003468:	461d      	mov	r5, r3
 800346a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003472:	f107 010c 	add.w	r1, r7, #12
 8003476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347a:	2214      	movs	r2, #20
 800347c:	482d      	ldr	r0, [pc, #180]	; (8003534 <rotate_direction+0xf8>)
 800347e:	f002 fefc 	bl	800627a <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 8003482:	edd7 7a00 	vldr	s15, [r7]
 8003486:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003538 <rotate_direction+0xfc>
 800348a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800348e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003492:	ee17 3a90 	vmov	r3, s15
 8003496:	b21b      	sxth	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	2000      	movs	r0, #0
 800349c:	f7ff ff58 	bl	8003350 <set_motor_speed>
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 80034a0:	edd7 7a00 	vldr	s15, [r7]
 80034a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800353c <rotate_direction+0x100>
 80034a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b0:	ee17 3a90 	vmov	r3, s15
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	2001      	movs	r0, #1
 80034ba:	f7ff ff49 	bl	8003350 <set_motor_speed>
		return;
 80034be:	e031      	b.n	8003524 <rotate_direction+0xe8>
	case Right:
		printf("Currently rotating right.\r\n");
 80034c0:	481f      	ldr	r0, [pc, #124]	; (8003540 <rotate_direction+0x104>)
 80034c2:	f004 fdbb 	bl	800803c <puts>
		memcpy(buf, "$RIGHT,,,,,,,,,,,,,", 20);
 80034c6:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <rotate_direction+0x108>)
 80034c8:	f107 040c 	add.w	r4, r7, #12
 80034cc:	461d      	mov	r5, r3
 80034ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80034d6:	f107 010c 	add.w	r1, r7, #12
 80034da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034de:	2214      	movs	r2, #20
 80034e0:	4814      	ldr	r0, [pc, #80]	; (8003534 <rotate_direction+0xf8>)
 80034e2:	f002 feca 	bl	800627a <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 80034e6:	edd7 7a00 	vldr	s15, [r7]
 80034ea:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003548 <rotate_direction+0x10c>
 80034ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f6:	ee17 3a90 	vmov	r3, s15
 80034fa:	b21b      	sxth	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	2000      	movs	r0, #0
 8003500:	f7ff ff26 	bl	8003350 <set_motor_speed>
		set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 8003504:	edd7 7a00 	vldr	s15, [r7]
 8003508:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800354c <rotate_direction+0x110>
 800350c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003514:	ee17 3a90 	vmov	r3, s15
 8003518:	b21b      	sxth	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff ff17 	bl	8003350 <set_motor_speed>
		return;
 8003522:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d, float speed_1)
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bdb0      	pop	{r4, r5, r7, pc}
 800352a:	bf00      	nop
 800352c:	0800a894 	.word	0x0800a894
 8003530:	0800a8b0 	.word	0x0800a8b0
 8003534:	200003b0 	.word	0x200003b0
 8003538:	c32c0000 	.word	0xc32c0000
 800353c:	43480000 	.word	0x43480000
 8003540:	0800a8c4 	.word	0x0800a8c4
 8003544:	0800a8e0 	.word	0x0800a8e0
 8003548:	432c0000 	.word	0x432c0000
 800354c:	c3480000 	.word	0xc3480000

08003550 <motors_forward>:

void motors_forward(float speed_1)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors forward.\r\n");
 800355a:	481a      	ldr	r0, [pc, #104]	; (80035c4 <motors_forward+0x74>)
 800355c:	f004 fd6e 	bl	800803c <puts>
	char buf[20];
	memcpy(buf, "$FORWARD,,,,,,,,,,,", 20);
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <motors_forward+0x78>)
 8003562:	f107 040c 	add.w	r4, r7, #12
 8003566:	461d      	mov	r5, r3
 8003568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800356a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800356c:	682b      	ldr	r3, [r5, #0]
 800356e:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003570:	f107 010c 	add.w	r1, r7, #12
 8003574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003578:	2214      	movs	r2, #20
 800357a:	4814      	ldr	r0, [pc, #80]	; (80035cc <motors_forward+0x7c>)
 800357c:	f002 fe7d 	bl	800627a <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 8003580:	edd7 7a01 	vldr	s15, [r7, #4]
 8003584:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80035d0 <motors_forward+0x80>
 8003588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800358c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	b21b      	sxth	r3, r3
 8003596:	4619      	mov	r1, r3
 8003598:	2000      	movs	r0, #0
 800359a:	f7ff fed9 	bl	8003350 <set_motor_speed>
	set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 800359e:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80035d4 <motors_forward+0x84>
 80035a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ae:	ee17 3a90 	vmov	r3, s15
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	4619      	mov	r1, r3
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7ff feca 	bl	8003350 <set_motor_speed>
}  // void motors_forward(float speed_1)
 80035bc:	bf00      	nop
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bdb0      	pop	{r4, r5, r7, pc}
 80035c4:	0800a8f4 	.word	0x0800a8f4
 80035c8:	0800a910 	.word	0x0800a910
 80035cc:	200003b0 	.word	0x200003b0
 80035d0:	c32c0000 	.word	0xc32c0000
 80035d4:	c3480000 	.word	0xc3480000

080035d8 <motors_backward>:

void motors_backward(float speed_1)
{
 80035d8:	b5b0      	push	{r4, r5, r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors backward.\r\n");
 80035e2:	481a      	ldr	r0, [pc, #104]	; (800364c <motors_backward+0x74>)
 80035e4:	f004 fd2a 	bl	800803c <puts>
	char buf[20];
	memcpy(buf, "$BACKWARD,,,,,,,,,,", 20);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <motors_backward+0x78>)
 80035ea:	f107 040c 	add.w	r4, r7, #12
 80035ee:	461d      	mov	r5, r3
 80035f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80035f8:	f107 010c 	add.w	r1, r7, #12
 80035fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003600:	2214      	movs	r2, #20
 8003602:	4814      	ldr	r0, [pc, #80]	; (8003654 <motors_backward+0x7c>)
 8003604:	f002 fe39 	bl	800627a <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 8003608:	edd7 7a01 	vldr	s15, [r7, #4]
 800360c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003658 <motors_backward+0x80>
 8003610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003618:	ee17 3a90 	vmov	r3, s15
 800361c:	b21b      	sxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	2000      	movs	r0, #0
 8003622:	f7ff fe95 	bl	8003350 <set_motor_speed>
	set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 8003626:	edd7 7a01 	vldr	s15, [r7, #4]
 800362a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800365c <motors_backward+0x84>
 800362e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003636:	ee17 3a90 	vmov	r3, s15
 800363a:	b21b      	sxth	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	2001      	movs	r0, #1
 8003640:	f7ff fe86 	bl	8003350 <set_motor_speed>
}  // void motors_backward(float speed_1)
 8003644:	bf00      	nop
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bdb0      	pop	{r4, r5, r7, pc}
 800364c:	0800a924 	.word	0x0800a924
 8003650:	0800a944 	.word	0x0800a944
 8003654:	200003b0 	.word	0x200003b0
 8003658:	432c0000 	.word	0x432c0000
 800365c:	43480000 	.word	0x43480000

08003660 <rotate_direction_90>:
#include "mouse.h"

void rotate_direction_90(direction d)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]


	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d011      	beq.n	8003694 <rotate_direction_90+0x34>
 8003670:	2b02      	cmp	r3, #2
 8003672:	dc1b      	bgt.n	80036ac <rotate_direction_90+0x4c>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <rotate_direction_90+0x1c>
 8003678:	2b01      	cmp	r3, #1
//		motors_forward(1);
//		HAL_Delay(60);
		stop_all_motors();
		return;
	case Front:
		return;
 800367a:	e017      	b.n	80036ac <rotate_direction_90+0x4c>
		rotate_direction(Left, 1);
 800367c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003680:	2000      	movs	r0, #0
 8003682:	f7ff fedb 	bl	800343c <rotate_direction>
		HAL_Delay(390);
 8003686:	f44f 70c3 	mov.w	r0, #390	; 0x186
 800368a:	f000 fd85 	bl	8004198 <HAL_Delay>
		stop_all_motors();
 800368e:	f7ff feb1 	bl	80033f4 <stop_all_motors>
		return;
 8003692:	e00b      	b.n	80036ac <rotate_direction_90+0x4c>
	case Right:
//		motors_backward(1);
//		HAL_Delay(30);
		rotate_direction(Right, 1);
 8003694:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003698:	2002      	movs	r0, #2
 800369a:	f7ff fecf 	bl	800343c <rotate_direction>
		HAL_Delay(400);
 800369e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80036a2:	f000 fd79 	bl	8004198 <HAL_Delay>
//		motors_forward(1);
//		HAL_Delay(30);
		stop_all_motors();
 80036a6:	f7ff fea5 	bl	80033f4 <stop_all_motors>
		return;
 80036aa:	bf00      	nop
	}  // switch(d)
}  // rotate_direction_90(direction d)
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <rotate_180_degrees>:

void rotate_180_degrees()
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7ff ffd2 	bl	8003660 <rotate_direction_90>
	HAL_Delay(200);
 80036bc:	20c8      	movs	r0, #200	; 0xc8
 80036be:	f000 fd6b 	bl	8004198 <HAL_Delay>
	rotate_direction_90(Left);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7ff ffcc 	bl	8003660 <rotate_direction_90>

}  // rotate_180_degrees()
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}

080036cc <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
	motors_forward(1);
 80036d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80036d4:	f7ff ff3c 	bl	8003550 <motors_forward>
	HAL_Delay(640);
 80036d8:	f44f 7020 	mov.w	r0, #640	; 0x280
 80036dc:	f000 fd5c 	bl	8004198 <HAL_Delay>
	stop_all_motors();
 80036e0:	f7ff fe88 	bl	80033f4 <stop_all_motors>
}  // go_forward()
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d010      	beq.n	800371a <set_servo_angle+0x32>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	dc13      	bgt.n	8003724 <set_servo_angle+0x3c>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <set_servo_angle+0x1e>
 8003700:	2b01      	cmp	r3, #1
 8003702:	d005      	beq.n	8003710 <set_servo_angle+0x28>
 8003704:	e00e      	b.n	8003724 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 180;
 8003706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800370a:	22b4      	movs	r2, #180	; 0xb4
 800370c:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800370e:	e009      	b.n	8003724 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 100;
 8003710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003714:	2264      	movs	r2, #100	; 0x64
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8003718:	e004      	b.n	8003724 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 20;
 800371a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800371e:	2214      	movs	r2, #20
 8003720:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 8003722:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_MspInit+0x4c>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_MspInit+0x4c>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <HAL_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_MspInit+0x4c>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <HAL_MspInit+0x4c>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_MspInit+0x4c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037ae:	e026      	b.n	80037fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_TIM_PWM_MspInit+0x90>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10e      	bne.n	80037d8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]
}
 80037d6:	e012      	b.n	80037fe <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_TIM_PWM_MspInit+0x94>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10d      	bne.n	80037fe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_TIM_PWM_MspInit+0x8c>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800

08003818 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_TIM_IC_MspInit+0x94>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d133      	bne.n	80038a2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a1b      	ldr	r2, [pc, #108]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_TIM_IC_MspInit+0x98>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 8003872:	2302      	movs	r3, #2
 8003874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003882:	2302      	movs	r3, #2
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <HAL_TIM_IC_MspInit+0x9c>)
 800388e:	f000 fea9 	bl	80045e4 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	2032      	movs	r0, #50	; 0x32
 8003898:	f000 fdbf 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800389c:	2032      	movs	r0, #50	; 0x32
 800389e:	f000 fdd8 	bl	8004452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <HAL_TIM_Base_MspInit+0x3c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_TIM_Base_MspInit+0x40>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_TIM_Base_MspInit+0x40>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <HAL_TIM_Base_MspInit+0x40>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40023800 	.word	0x40023800

080038fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d11f      	bne.n	800395e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800394c:	2301      	movs	r3, #1
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	4619      	mov	r1, r3
 8003956:	483b      	ldr	r0, [pc, #236]	; (8003a44 <HAL_TIM_MspPostInit+0x148>)
 8003958:	f000 fe44 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800395c:	e06b      	b.n	8003a36 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a39      	ldr	r2, [pc, #228]	; (8003a48 <HAL_TIM_MspPostInit+0x14c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d11e      	bne.n	80039a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	4a33      	ldr	r2, [pc, #204]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6313      	str	r3, [r2, #48]	; 0x30
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003994:	2302      	movs	r3, #2
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4619      	mov	r1, r3
 800399e:	482b      	ldr	r0, [pc, #172]	; (8003a4c <HAL_TIM_MspPostInit+0x150>)
 80039a0:	f000 fe20 	bl	80045e4 <HAL_GPIO_Init>
}
 80039a4:	e047      	b.n	8003a36 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <HAL_TIM_MspPostInit+0x154>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d11e      	bne.n	80039ee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	4b1f      	ldr	r3, [pc, #124]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039dc:	2302      	movs	r3, #2
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 80039e0:	f107 031c 	add.w	r3, r7, #28
 80039e4:	4619      	mov	r1, r3
 80039e6:	481b      	ldr	r0, [pc, #108]	; (8003a54 <HAL_TIM_MspPostInit+0x158>)
 80039e8:	f000 fdfc 	bl	80045e4 <HAL_GPIO_Init>
}
 80039ec:	e023      	b.n	8003a36 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_TIM_MspPostInit+0x15c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d11e      	bne.n	8003a36 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003a02:	f043 0302 	orr.w	r3, r3, #2
 8003a06:	6313      	str	r3, [r2, #48]	; 0x30
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_TIM_MspPostInit+0x144>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 8003a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	f107 031c 	add.w	r3, r7, #28
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4808      	ldr	r0, [pc, #32]	; (8003a54 <HAL_TIM_MspPostInit+0x158>)
 8003a32:	f000 fdd7 	bl	80045e4 <HAL_GPIO_Init>
}
 8003a36:	bf00      	nop
 8003a38:	3730      	adds	r7, #48	; 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40020000 	.word	0x40020000
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40020400 	.word	0x40020400
 8003a58:	40014400 	.word	0x40014400

08003a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a45      	ldr	r2, [pc, #276]	; (8003b90 <HAL_UART_MspInit+0x134>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d12c      	bne.n	8003ad8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_PRINT_USB_Pin|GPIO_PIN_3;
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ac6:	2307      	movs	r3, #7
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4831      	ldr	r0, [pc, #196]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003ad2:	f000 fd87 	bl	80045e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003ad6:	e057      	b.n	8003b88 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2f      	ldr	r2, [pc, #188]	; (8003b9c <HAL_UART_MspInit+0x140>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d152      	bne.n	8003b88 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003aec:	f043 0320 	orr.w	r3, r3, #32
 8003af0:	6453      	str	r3, [r2, #68]	; 0x44
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <HAL_UART_MspInit+0x138>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b42:	2303      	movs	r3, #3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b46:	2308      	movs	r3, #8
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4813      	ldr	r0, [pc, #76]	; (8003ba0 <HAL_UART_MspInit+0x144>)
 8003b52:	f000 fd47 	bl	80045e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b68:	2308      	movs	r3, #8
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4809      	ldr	r0, [pc, #36]	; (8003b98 <HAL_UART_MspInit+0x13c>)
 8003b74:	f000 fd36 	bl	80045e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2047      	movs	r0, #71	; 0x47
 8003b7e:	f000 fc4c 	bl	800441a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b82:	2047      	movs	r0, #71	; 0x47
 8003b84:	f000 fc65 	bl	8004452 <HAL_NVIC_EnableIRQ>
}
 8003b88:	bf00      	nop
 8003b8a:	3730      	adds	r7, #48	; 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40004400 	.word	0x40004400
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	40020800 	.word	0x40020800

08003ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ba8:	e7fe      	b.n	8003ba8 <NMI_Handler+0x4>

08003baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003baa:	b480      	push	{r7}
 8003bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bae:	e7fe      	b.n	8003bae <HardFault_Handler+0x4>

08003bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bb4:	e7fe      	b.n	8003bb4 <MemManage_Handler+0x4>

08003bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bba:	e7fe      	b.n	8003bba <BusFault_Handler+0x4>

08003bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <UsageFault_Handler+0x4>

08003bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bf0:	f000 fab2 	bl	8004158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003bfe:	4830      	ldr	r0, [pc, #192]	; (8003cc0 <TIM5_IRQHandler+0xc8>)
 8003c00:	f001 fc83 	bl	800550a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  if (risingEdgeInterrupt == 1)
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <TIM5_IRQHandler+0xcc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d118      	bne.n	8003c3e <TIM5_IRQHandler+0x46>
  {
	TIM5->CCER &= ~(1 << 7);
 8003c0c:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a2d      	ldr	r2, [pc, #180]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c16:	6213      	str	r3, [r2, #32]
	TIM5->CCER &= ~(1 << 5);
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c1e:	f023 0320 	bic.w	r3, r3, #32
 8003c22:	6213      	str	r3, [r2, #32]
	TIM5->CCER |= (1 << 5);
 8003c24:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	4a27      	ldr	r2, [pc, #156]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c2a:	f043 0320 	orr.w	r3, r3, #32
 8003c2e:	6213      	str	r3, [r2, #32]
	TIM5->CNT = 0;
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
	risingEdgeInterrupt = 0;
 8003c36:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <TIM5_IRQHandler+0xcc>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 8003c3c:	e036      	b.n	8003cac <TIM5_IRQHandler+0xb4>
	  counter = TIM5->CNT;
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <TIM5_IRQHandler+0xd4>)
 8003c46:	601a      	str	r2, [r3, #0]
	  TIM5->CCER &= ~(1 << 7);
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c52:	6213      	str	r3, [r2, #32]
	  TIM5->CCER &= ~(1 << 5);
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <TIM5_IRQHandler+0xd0>)
 8003c5a:	f023 0320 	bic.w	r3, r3, #32
 8003c5e:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <TIM5_IRQHandler+0xd4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fc65 	bl	8000534 <__aeabi_i2d>
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <TIM5_IRQHandler+0xd8>)
 8003c70:	f7fc fdf4 	bl	800085c <__aeabi_ddiv>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f7fc ff9c 	bl	8000bb8 <__aeabi_d2f>
 8003c80:	4603      	mov	r3, r0
 8003c82:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fc fc67 	bl	8000558 <__aeabi_f2d>
 8003c8a:	a30b      	add	r3, pc, #44	; (adr r3, 8003cb8 <TIM5_IRQHandler+0xc0>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f7fc fcba 	bl	8000608 <__aeabi_dmul>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc ff8c 	bl	8000bb8 <__aeabi_d2f>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <TIM5_IRQHandler+0xdc>)
 8003ca4:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <TIM5_IRQHandler+0xcc>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	f3af 8000 	nop.w
 8003cb8:	851eb852 	.word	0x851eb852
 8003cbc:	400451eb 	.word	0x400451eb
 8003cc0:	200002dc 	.word	0x200002dc
 8003cc4:	20000008 	.word	0x20000008
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	200003fc 	.word	0x200003fc
 8003cd0:	40620000 	.word	0x40620000
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <USART6_IRQHandler+0x10>)
 8003cde:	f002 fca3 	bl	8006628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200003b0 	.word	0x200003b0

08003cec <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 8003cf0:	2300      	movs	r3, #0
}   // is_switch_on()
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	return 1;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <_kill>:

int _kill(int pid, int sig)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d16:	f003 fc59 	bl	80075cc <__errno>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2216      	movs	r2, #22
 8003d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_exit>:

void _exit (int status)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d34:	f04f 31ff 	mov.w	r1, #4294967295
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ffe7 	bl	8003d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d3e:	e7fe      	b.n	8003d3e <_exit+0x12>

08003d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e00a      	b.n	8003d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d52:	f3af 8000 	nop.w
 8003d56:	4601      	mov	r1, r0
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	60ba      	str	r2, [r7, #8]
 8003d5e:	b2ca      	uxtb	r2, r1
 8003d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	3301      	adds	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	dbf0      	blt.n	8003d52 <_read+0x12>
	}

return len;
 8003d70:	687b      	ldr	r3, [r7, #4]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e009      	b.n	8003da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fa4b 	bl	8003230 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	dbf1      	blt.n	8003d8c <_write+0x12>
	}
	return len;
 8003da8:	687b      	ldr	r3, [r7, #4]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_close>:

int _close(int file)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
	return -1;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dda:	605a      	str	r2, [r3, #4]
	return 0;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_isatty>:

int _isatty(int file)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	return 1;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e24:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <_sbrk+0x5c>)
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <_sbrk+0x60>)
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <_sbrk+0x64>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <_sbrk+0x64>)
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <_sbrk+0x68>)
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e3e:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <_sbrk+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d207      	bcs.n	8003e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e4c:	f003 fbbe 	bl	80075cc <__errno>
 8003e50:	4603      	mov	r3, r0
 8003e52:	220c      	movs	r2, #12
 8003e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e009      	b.n	8003e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <_sbrk+0x64>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <_sbrk+0x64>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4413      	add	r3, r2
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <_sbrk+0x64>)
 8003e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20020000 	.word	0x20020000
 8003e7c:	00000400 	.word	0x00000400
 8003e80:	200003f8 	.word	0x200003f8
 8003e84:	20000418 	.word	0x20000418

08003e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e8c:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <SystemInit+0x20>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <SystemInit+0x20>)
 8003e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <test_turn_left>:
#include "test.h"

void test_turn_left()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	rotate_direction_90(Right);
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f7ff fbd5 	bl	8003660 <rotate_direction_90>
	HAL_Delay(1000);
 8003eb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eba:	f000 f96d 	bl	8004198 <HAL_Delay>
}  // void test_turn_left()
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	if (requested_manual_command != AUTON_CHAR)
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <do_test_algorithm+0x1c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b41      	cmp	r3, #65	; 0x41
 8003ece:	d104      	bne.n	8003eda <do_test_algorithm+0x16>
	}


//	test_alternate_left_right();
//	test_zig_zag();
	test_turn_left();
 8003ed0:	f7ff ffec 	bl	8003eac <test_turn_left>
//	go_forward_one_unit();
//	HAL_Delay(2000);

//	distance_of_object_in_cm();

	return do_test_algorithm();
 8003ed4:	f7ff fff6 	bl	8003ec4 <do_test_algorithm>
 8003ed8:	e000      	b.n	8003edc <do_test_algorithm+0x18>
		return;
 8003eda:	bf00      	nop
}  // do_test_algorithm()
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000001 	.word	0x20000001

08003ee4 <distance_of_object_in_cm>:
int risingEdgeInterrupt = 1;
int counter;
float centimeters = 18;

float distance_of_object_in_cm()
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	printf("Distance is %f cm\r\n", centimeters);
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <distance_of_object_in_cm+0x28>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fb33 	bl	8000558 <__aeabi_f2d>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4806      	ldr	r0, [pc, #24]	; (8003f10 <distance_of_object_in_cm+0x2c>)
 8003ef8:	f004 f804 	bl	8007f04 <iprintf>
	return centimeters;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <distance_of_object_in_cm+0x28>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	ee07 3a90 	vmov	s15, r3
}  // float distance_of_object_in_cm()
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000000c 	.word	0x2000000c
 8003f10:	0800a958 	.word	0x0800a958

08003f14 <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fbe1 	bl	80036e8 <set_servo_angle>
	HAL_Delay(1000);
 8003f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f2a:	f000 f935 	bl	8004198 <HAL_Delay>
	float distance_cm = distance_of_object_in_cm();
 8003f2e:	f7ff ffd9 	bl	8003ee4 <distance_of_object_in_cm>
 8003f32:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	uint8_t wall_detected = distance_cm < 16 ;
 8003f36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f3a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	bf4c      	ite	mi
 8003f48:	2301      	movmi	r3, #1
 8003f4a:	2300      	movpl	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char buf[20];
	switch(d)
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d03e      	beq.n	8003fd6 <is_there_wall_on_direction+0xc2>
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	dc58      	bgt.n	800400e <is_there_wall_on_direction+0xfa>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <is_there_wall_on_direction+0x52>
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d01c      	beq.n	8003f9e <is_there_wall_on_direction+0x8a>
 8003f64:	e053      	b.n	800400e <is_there_wall_on_direction+0xfa>
	{
	case Left:
		printf(wall_detected ? "There is a wall on the left.\r\n" : "There is no wall on the left.\r\n");
 8003f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <is_there_wall_on_direction+0x5e>
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <is_there_wall_on_direction+0x118>)
 8003f70:	e000      	b.n	8003f74 <is_there_wall_on_direction+0x60>
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <is_there_wall_on_direction+0x11c>)
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 ffc5 	bl	8007f04 <iprintf>
		memcpy(buf, wall_detected ? "\%LEFT,1,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 8003f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <is_there_wall_on_direction+0x72>
 8003f82:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <is_there_wall_on_direction+0x120>)
 8003f84:	e000      	b.n	8003f88 <is_there_wall_on_direction+0x74>
 8003f86:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <is_there_wall_on_direction+0x124>)
 8003f88:	f107 040c 	add.w	r4, r7, #12
 8003f8c:	461d      	mov	r5, r3
 8003f8e:	6828      	ldr	r0, [r5, #0]
 8003f90:	6869      	ldr	r1, [r5, #4]
 8003f92:	68aa      	ldr	r2, [r5, #8]
 8003f94:	68eb      	ldr	r3, [r5, #12]
 8003f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f98:	6928      	ldr	r0, [r5, #16]
 8003f9a:	6020      	str	r0, [r4, #0]
		break;
 8003f9c:	e037      	b.n	800400e <is_there_wall_on_direction+0xfa>
	case Front:
		printf(wall_detected ? "There is a wall in front.\r\n" : "There is no wall in front.\r\n");
 8003f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <is_there_wall_on_direction+0x96>
 8003fa6:	4b25      	ldr	r3, [pc, #148]	; (800403c <is_there_wall_on_direction+0x128>)
 8003fa8:	e000      	b.n	8003fac <is_there_wall_on_direction+0x98>
 8003faa:	4b25      	ldr	r3, [pc, #148]	; (8004040 <is_there_wall_on_direction+0x12c>)
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 ffa9 	bl	8007f04 <iprintf>
		memcpy(buf, wall_detected ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 8003fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <is_there_wall_on_direction+0xaa>
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <is_there_wall_on_direction+0x130>)
 8003fbc:	e000      	b.n	8003fc0 <is_there_wall_on_direction+0xac>
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <is_there_wall_on_direction+0x134>)
 8003fc0:	f107 040c 	add.w	r4, r7, #12
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	6828      	ldr	r0, [r5, #0]
 8003fc8:	6869      	ldr	r1, [r5, #4]
 8003fca:	68aa      	ldr	r2, [r5, #8]
 8003fcc:	68eb      	ldr	r3, [r5, #12]
 8003fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fd0:	6928      	ldr	r0, [r5, #16]
 8003fd2:	6020      	str	r0, [r4, #0]
		break;
 8003fd4:	e01b      	b.n	800400e <is_there_wall_on_direction+0xfa>
	case Right:
		printf(wall_detected ? "There is a wall on the right.\r\n" : "There is no wall on the right.\r\n");
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <is_there_wall_on_direction+0xce>
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <is_there_wall_on_direction+0x138>)
 8003fe0:	e000      	b.n	8003fe4 <is_there_wall_on_direction+0xd0>
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <is_there_wall_on_direction+0x13c>)
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 ff8d 	bl	8007f04 <iprintf>
		memcpy(buf, wall_detected ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 8003fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <is_there_wall_on_direction+0xe2>
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <is_there_wall_on_direction+0x140>)
 8003ff4:	e000      	b.n	8003ff8 <is_there_wall_on_direction+0xe4>
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <is_there_wall_on_direction+0x144>)
 8003ff8:	f107 040c 	add.w	r4, r7, #12
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	6828      	ldr	r0, [r5, #0]
 8004000:	6869      	ldr	r1, [r5, #4]
 8004002:	68aa      	ldr	r2, [r5, #8]
 8004004:	68eb      	ldr	r3, [r5, #12]
 8004006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004008:	6928      	ldr	r0, [r5, #16]
 800400a:	6020      	str	r0, [r4, #0]
		break;
 800400c:	bf00      	nop
	}  // switch(d)
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800400e:	f107 010c 	add.w	r1, r7, #12
 8004012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004016:	2214      	movs	r2, #20
 8004018:	4810      	ldr	r0, [pc, #64]	; (800405c <is_there_wall_on_direction+0x148>)
 800401a:	f002 f92e 	bl	800627a <HAL_UART_Transmit>
	return wall_detected;
 800401e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}  // is_there_wall_on_direction(direction d)
 8004022:	4618      	mov	r0, r3
 8004024:	3728      	adds	r7, #40	; 0x28
 8004026:	46bd      	mov	sp, r7
 8004028:	bdb0      	pop	{r4, r5, r7, pc}
 800402a:	bf00      	nop
 800402c:	0800a96c 	.word	0x0800a96c
 8004030:	0800a98c 	.word	0x0800a98c
 8004034:	0800a9ac 	.word	0x0800a9ac
 8004038:	0800a9c0 	.word	0x0800a9c0
 800403c:	0800a9d4 	.word	0x0800a9d4
 8004040:	0800a9f0 	.word	0x0800a9f0
 8004044:	0800aa10 	.word	0x0800aa10
 8004048:	0800aa24 	.word	0x0800aa24
 800404c:	0800aa38 	.word	0x0800aa38
 8004050:	0800aa58 	.word	0x0800aa58
 8004054:	0800aa7c 	.word	0x0800aa7c
 8004058:	0800aa90 	.word	0x0800aa90
 800405c:	200003b0 	.word	0x200003b0

08004060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 8004060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004066:	490e      	ldr	r1, [pc, #56]	; (80040a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004068:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0b      	ldr	r2, [pc, #44]	; (80040a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800407c:	4c0b      	ldr	r4, [pc, #44]	; (80040ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
   b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800408a:	f7ff fefd 	bl	8003e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800408e:	f003 faa3 	bl	80075d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004092:	f7fe fd51 	bl	8002b38 <main>
  bx  lr    
 8004096:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8004098:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800409c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80040a4:	0800aea4 	.word	0x0800aea4
  ldr r2, =_sbss
 80040a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80040ac:	20000414 	.word	0x20000414

080040b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b0:	e7fe      	b.n	80040b0 <ADC_IRQHandler>
	...

080040b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <HAL_Init+0x40>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <HAL_Init+0x40>)
 80040be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_Init+0x40>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_Init+0x40>)
 80040ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_Init+0x40>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <HAL_Init+0x40>)
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040dc:	2003      	movs	r0, #3
 80040de:	f000 f991 	bl	8004404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040e2:	200f      	movs	r0, #15
 80040e4:	f000 f808 	bl	80040f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040e8:	f7ff fb22 	bl	8003730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00

080040f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_InitTick+0x54>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_InitTick+0x58>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f9b7 	bl	800448a <HAL_SYSTICK_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e00e      	b.n	8004144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b0f      	cmp	r3, #15
 800412a:	d80a      	bhi.n	8004142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800412c:	2200      	movs	r2, #0
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	f000 f971 	bl	800441a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <HAL_InitTick+0x5c>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000004 	.word	0x20000004
 8004150:	20000014 	.word	0x20000014
 8004154:	20000010 	.word	0x20000010

08004158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_IncTick+0x20>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_IncTick+0x24>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4413      	add	r3, r2
 8004168:	4a04      	ldr	r2, [pc, #16]	; (800417c <HAL_IncTick+0x24>)
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000014 	.word	0x20000014
 800417c:	20000400 	.word	0x20000400

08004180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return uwTick;
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_GetTick+0x14>)
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000400 	.word	0x20000400

08004198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7ff ffee 	bl	8004180 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d005      	beq.n	80041be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <HAL_Delay+0x44>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041be:	bf00      	nop
 80041c0:	f7ff ffde 	bl	8004180 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d8f7      	bhi.n	80041c0 <HAL_Delay+0x28>
  {
  }
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000014 	.word	0x20000014

080041e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041fc:	4013      	ands	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004212:	4a04      	ldr	r2, [pc, #16]	; (8004224 <__NVIC_SetPriorityGrouping+0x44>)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	60d3      	str	r3, [r2, #12]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <__NVIC_GetPriorityGrouping+0x18>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0307 	and.w	r3, r3, #7
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	2b00      	cmp	r3, #0
 8004254:	db0b      	blt.n	800426e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	f003 021f 	and.w	r2, r3, #31
 800425c:	4907      	ldr	r1, [pc, #28]	; (800427c <__NVIC_EnableIRQ+0x38>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2001      	movs	r0, #1
 8004266:	fa00 f202 	lsl.w	r2, r0, r2
 800426a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100

08004280 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db12      	blt.n	80042b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	490a      	ldr	r1, [pc, #40]	; (80042c4 <__NVIC_DisableIRQ+0x44>)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2001      	movs	r0, #1
 80042a2:	fa00 f202 	lsl.w	r2, r0, r2
 80042a6:	3320      	adds	r3, #32
 80042a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042ac:	f3bf 8f4f 	dsb	sy
}
 80042b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042b2:	f3bf 8f6f 	isb	sy
}
 80042b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100

080042c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	db0c      	blt.n	80042f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	f003 021f 	and.w	r2, r3, #31
 80042e0:	4907      	ldr	r1, [pc, #28]	; (8004300 <__NVIC_ClearPendingIRQ+0x38>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2001      	movs	r0, #1
 80042ea:	fa00 f202 	lsl.w	r2, r0, r2
 80042ee:	3360      	adds	r3, #96	; 0x60
 80042f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000e100 	.word	0xe000e100

08004304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	6039      	str	r1, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db0a      	blt.n	800432e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	490c      	ldr	r1, [pc, #48]	; (8004350 <__NVIC_SetPriority+0x4c>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	0112      	lsls	r2, r2, #4
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	440b      	add	r3, r1
 8004328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800432c:	e00a      	b.n	8004344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	b2da      	uxtb	r2, r3
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <__NVIC_SetPriority+0x50>)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	3b04      	subs	r3, #4
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	440b      	add	r3, r1
 8004342:	761a      	strb	r2, [r3, #24]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	; 0x24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f1c3 0307 	rsb	r3, r3, #7
 8004372:	2b04      	cmp	r3, #4
 8004374:	bf28      	it	cs
 8004376:	2304      	movcs	r3, #4
 8004378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3304      	adds	r3, #4
 800437e:	2b06      	cmp	r3, #6
 8004380:	d902      	bls.n	8004388 <NVIC_EncodePriority+0x30>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	3b03      	subs	r3, #3
 8004386:	e000      	b.n	800438a <NVIC_EncodePriority+0x32>
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	f04f 32ff 	mov.w	r2, #4294967295
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	401a      	ands	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	43d9      	mvns	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b0:	4313      	orrs	r3, r2
         );
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	; 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
	...

080043c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043d0:	d301      	bcc.n	80043d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d2:	2301      	movs	r3, #1
 80043d4:	e00f      	b.n	80043f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <SysTick_Config+0x40>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043de:	210f      	movs	r1, #15
 80043e0:	f04f 30ff 	mov.w	r0, #4294967295
 80043e4:	f7ff ff8e 	bl	8004304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <SysTick_Config+0x40>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <SysTick_Config+0x40>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff fee7 	bl	80041e0 <__NVIC_SetPriorityGrouping>
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441a:	b580      	push	{r7, lr}
 800441c:	b086      	sub	sp, #24
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800442c:	f7ff fefc 	bl	8004228 <__NVIC_GetPriorityGrouping>
 8004430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff8e 	bl	8004358 <NVIC_EncodePriority>
 800443c:	4602      	mov	r2, r0
 800443e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff ff5d 	bl	8004304 <__NVIC_SetPriority>
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff feef 	bl	8004244 <__NVIC_EnableIRQ>
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	4603      	mov	r3, r0
 8004476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff feff 	bl	8004280 <__NVIC_DisableIRQ>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff94 	bl	80043c0 <SysTick_Config>
 8004498:	4603      	mov	r3, r0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff09 	bl	80042c8 <__NVIC_ClearPendingIRQ>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044cc:	f7ff fe58 	bl	8004180 <HAL_GetTick>
 80044d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d008      	beq.n	80044f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2280      	movs	r2, #128	; 0x80
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e052      	b.n	8004596 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0216 	bic.w	r2, r2, #22
 80044fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d103      	bne.n	8004520 <HAL_DMA_Abort+0x62>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	2b00      	cmp	r3, #0
 800451e:	d007      	beq.n	8004530 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0208 	bic.w	r2, r2, #8
 800452e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004540:	e013      	b.n	800456a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004542:	f7ff fe1d 	bl	8004180 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b05      	cmp	r3, #5
 800454e:	d90c      	bls.n	800456a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e015      	b.n	8004596 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e4      	bne.n	8004542 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	223f      	movs	r2, #63	; 0x3f
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d004      	beq.n	80045bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2280      	movs	r2, #128	; 0x80
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e00c      	b.n	80045d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2205      	movs	r2, #5
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e159      	b.n	80048b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004600:	2201      	movs	r2, #1
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	429a      	cmp	r2, r3
 800461a:	f040 8148 	bne.w	80048ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d005      	beq.n	8004636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004632:	2b02      	cmp	r3, #2
 8004634:	d130      	bne.n	8004698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800466c:	2201      	movs	r2, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0201 	and.w	r2, r3, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d017      	beq.n	80046d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d123      	bne.n	8004728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	08da      	lsrs	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3208      	adds	r2, #8
 80046e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	220f      	movs	r2, #15
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	08da      	lsrs	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3208      	adds	r2, #8
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2203      	movs	r2, #3
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0203 	and.w	r2, r3, #3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a2 	beq.w	80048ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_GPIO_Init+0x2e8>)
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	4a56      	ldr	r2, [pc, #344]	; (80048cc <HAL_GPIO_Init+0x2e8>)
 8004774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004778:	6453      	str	r3, [r2, #68]	; 0x44
 800477a:	4b54      	ldr	r3, [pc, #336]	; (80048cc <HAL_GPIO_Init+0x2e8>)
 800477c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004786:	4a52      	ldr	r2, [pc, #328]	; (80048d0 <HAL_GPIO_Init+0x2ec>)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	3302      	adds	r3, #2
 800478e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	220f      	movs	r2, #15
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a49      	ldr	r2, [pc, #292]	; (80048d4 <HAL_GPIO_Init+0x2f0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d019      	beq.n	80047e6 <HAL_GPIO_Init+0x202>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a48      	ldr	r2, [pc, #288]	; (80048d8 <HAL_GPIO_Init+0x2f4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d013      	beq.n	80047e2 <HAL_GPIO_Init+0x1fe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a47      	ldr	r2, [pc, #284]	; (80048dc <HAL_GPIO_Init+0x2f8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00d      	beq.n	80047de <HAL_GPIO_Init+0x1fa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <HAL_GPIO_Init+0x2fc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <HAL_GPIO_Init+0x1f6>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a45      	ldr	r2, [pc, #276]	; (80048e4 <HAL_GPIO_Init+0x300>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_GPIO_Init+0x1f2>
 80047d2:	2304      	movs	r3, #4
 80047d4:	e008      	b.n	80047e8 <HAL_GPIO_Init+0x204>
 80047d6:	2307      	movs	r3, #7
 80047d8:	e006      	b.n	80047e8 <HAL_GPIO_Init+0x204>
 80047da:	2303      	movs	r3, #3
 80047dc:	e004      	b.n	80047e8 <HAL_GPIO_Init+0x204>
 80047de:	2302      	movs	r3, #2
 80047e0:	e002      	b.n	80047e8 <HAL_GPIO_Init+0x204>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_GPIO_Init+0x204>
 80047e6:	2300      	movs	r3, #0
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f002 0203 	and.w	r2, r2, #3
 80047ee:	0092      	lsls	r2, r2, #2
 80047f0:	4093      	lsls	r3, r2
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f8:	4935      	ldr	r1, [pc, #212]	; (80048d0 <HAL_GPIO_Init+0x2ec>)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	3302      	adds	r3, #2
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_GPIO_Init+0x304>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800482a:	4a2f      	ldr	r2, [pc, #188]	; (80048e8 <HAL_GPIO_Init+0x304>)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_GPIO_Init+0x304>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <HAL_GPIO_Init+0x304>)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_GPIO_Init+0x304>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800487e:	4a1a      	ldr	r2, [pc, #104]	; (80048e8 <HAL_GPIO_Init+0x304>)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004884:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <HAL_GPIO_Init+0x304>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a8:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <HAL_GPIO_Init+0x304>)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	f67f aea2 	bls.w	8004600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	3724      	adds	r7, #36	; 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40013800 	.word	0x40013800
 80048d4:	40020000 	.word	0x40020000
 80048d8:	40020400 	.word	0x40020400
 80048dc:	40020800 	.word	0x40020800
 80048e0:	40020c00 	.word	0x40020c00
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40013c00 	.word	0x40013c00

080048ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
 80048f8:	4613      	mov	r3, r2
 80048fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048fc:	787b      	ldrb	r3, [r7, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004908:	e003      	b.n	8004912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	041a      	lsls	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e267      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d075      	beq.n	8004a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493e:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
 8004946:	2b04      	cmp	r3, #4
 8004948:	d00c      	beq.n	8004964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494a:	4b85      	ldr	r3, [pc, #532]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004952:	2b08      	cmp	r3, #8
 8004954:	d112      	bne.n	800497c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004956:	4b82      	ldr	r3, [pc, #520]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004962:	d10b      	bne.n	800497c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	4b7e      	ldr	r3, [pc, #504]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d05b      	beq.n	8004a28 <HAL_RCC_OscConfig+0x108>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d157      	bne.n	8004a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e242      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d106      	bne.n	8004994 <HAL_RCC_OscConfig+0x74>
 8004986:	4b76      	ldr	r3, [pc, #472]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a75      	ldr	r2, [pc, #468]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e01d      	b.n	80049d0 <HAL_RCC_OscConfig+0xb0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x98>
 800499e:	4b70      	ldr	r3, [pc, #448]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6f      	ldr	r2, [pc, #444]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b6d      	ldr	r3, [pc, #436]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6c      	ldr	r2, [pc, #432]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0xb0>
 80049b8:	4b69      	ldr	r3, [pc, #420]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a68      	ldr	r2, [pc, #416]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a65      	ldr	r2, [pc, #404]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7ff fbd2 	bl	8004180 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e0:	f7ff fbce 	bl	8004180 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	; 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e207      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b5b      	ldr	r3, [pc, #364]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0xc0>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a00:	f7ff fbbe 	bl	8004180 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7ff fbba 	bl	8004180 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e1f3      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	4b51      	ldr	r3, [pc, #324]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0xe8>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d063      	beq.n	8004afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a36:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d11c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d116      	bne.n	8004a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	4b41      	ldr	r3, [pc, #260]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_RCC_OscConfig+0x152>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e1c7      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4937      	ldr	r1, [pc, #220]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	e03a      	b.n	8004afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7ff fb73 	bl	8004180 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a9e:	f7ff fb6f 	bl	8004180 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1a8      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abc:	4b28      	ldr	r3, [pc, #160]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4925      	ldr	r1, [pc, #148]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
 8004ad0:	e015      	b.n	8004afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7ff fb52 	bl	8004180 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ae0:	f7ff fb4e 	bl	8004180 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e187      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d036      	beq.n	8004b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b12:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <HAL_RCC_OscConfig+0x248>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b18:	f7ff fb32 	bl	8004180 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b20:	f7ff fb2e 	bl	8004180 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e167      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_OscConfig+0x240>)
 8004b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x200>
 8004b3e:	e01b      	b.n	8004b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCC_OscConfig+0x248>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b46:	f7ff fb1b 	bl	8004180 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4c:	e00e      	b.n	8004b6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b4e:	f7ff fb17 	bl	8004180 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d907      	bls.n	8004b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e150      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
 8004b60:	40023800 	.word	0x40023800
 8004b64:	42470000 	.word	0x42470000
 8004b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b6c:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1ea      	bne.n	8004b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8097 	beq.w	8004cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b8a:	4b81      	ldr	r3, [pc, #516]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10f      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	4b7d      	ldr	r3, [pc, #500]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a7c      	ldr	r2, [pc, #496]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b7a      	ldr	r3, [pc, #488]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	4b77      	ldr	r3, [pc, #476]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d118      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc2:	4b74      	ldr	r3, [pc, #464]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a73      	ldr	r2, [pc, #460]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bce:	f7ff fad7 	bl	8004180 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd6:	f7ff fad3 	bl	8004180 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e10c      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x474>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x2ea>
 8004bfc:	4b64      	ldr	r3, [pc, #400]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	4a63      	ldr	r2, [pc, #396]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70
 8004c08:	e01c      	b.n	8004c44 <HAL_RCC_OscConfig+0x324>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b05      	cmp	r3, #5
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x30c>
 8004c12:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a5e      	ldr	r2, [pc, #376]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	4b5c      	ldr	r3, [pc, #368]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a5b      	ldr	r2, [pc, #364]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0x324>
 8004c2c:	4b58      	ldr	r3, [pc, #352]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a54      	ldr	r2, [pc, #336]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	f023 0304 	bic.w	r3, r3, #4
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d015      	beq.n	8004c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4c:	f7ff fa98 	bl	8004180 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c54:	f7ff fa94 	bl	8004180 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e0cb      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6a:	4b49      	ldr	r3, [pc, #292]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0ee      	beq.n	8004c54 <HAL_RCC_OscConfig+0x334>
 8004c76:	e014      	b.n	8004ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7ff fa82 	bl	8004180 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c80:	f7ff fa7e 	bl	8004180 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0b5      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c96:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ee      	bne.n	8004c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	4a38      	ldr	r2, [pc, #224]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a1 	beq.w	8004e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cbe:	4b34      	ldr	r3, [pc, #208]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d05c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d141      	bne.n	8004d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd2:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7ff fa52 	bl	8004180 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7ff fa4e 	bl	8004180 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e087      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	019b      	lsls	r3, r3, #6
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	3b01      	subs	r3, #1
 8004d18:	041b      	lsls	r3, r3, #16
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	061b      	lsls	r3, r3, #24
 8004d22:	491b      	ldr	r1, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7ff fa27 	bl	8004180 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d36:	f7ff fa23 	bl	8004180 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e05c      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d48:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0x416>
 8004d54:	e054      	b.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d56:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <HAL_RCC_OscConfig+0x478>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7ff fa10 	bl	8004180 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d64:	f7ff fa0c 	bl	8004180 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e045      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_OscConfig+0x470>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x444>
 8004d82:	e03d      	b.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e038      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
 8004d90:	40023800 	.word	0x40023800
 8004d94:	40007000 	.word	0x40007000
 8004d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCC_OscConfig+0x4ec>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d028      	beq.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d121      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d11a      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d111      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	3b01      	subs	r3, #1
 8004de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800

08004e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0cc      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b68      	ldr	r3, [pc, #416]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d90c      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d044      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d119      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d003      	beq.n	8004ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b3f      	ldr	r3, [pc, #252]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e06f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ede:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e067      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b37      	ldr	r3, [pc, #220]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4934      	ldr	r1, [pc, #208]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f00:	f7ff f93e 	bl	8004180 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7ff f93a 	bl	8004180 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f30:	4b25      	ldr	r3, [pc, #148]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d20c      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff f89e 	bl	80040f8 <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	0800aaa4 	.word	0x0800aaa4
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	20000010 	.word	0x20000010

08004fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe0:	b090      	sub	sp, #64	; 0x40
 8004fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fec:	2300      	movs	r3, #0
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 030c 	and.w	r3, r3, #12
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d00d      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x40>
 8005000:	2b08      	cmp	r3, #8
 8005002:	f200 80a1 	bhi.w	8005148 <HAL_RCC_GetSysClockFreq+0x16c>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x34>
 800500a:	2b04      	cmp	r3, #4
 800500c:	d003      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x3a>
 800500e:	e09b      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_GetSysClockFreq+0x184>)
 8005012:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005014:	e09b      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005016:	4b53      	ldr	r3, [pc, #332]	; (8005164 <HAL_RCC_GetSysClockFreq+0x188>)
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800501a:	e098      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800501c:	4b4f      	ldr	r3, [pc, #316]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005024:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005026:	4b4d      	ldr	r3, [pc, #308]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	2200      	movs	r2, #0
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	627a      	str	r2, [r7, #36]	; 0x24
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005044:	2100      	movs	r1, #0
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <HAL_RCC_GetSysClockFreq+0x188>)
 8005048:	fb03 f201 	mul.w	r2, r3, r1
 800504c:	2300      	movs	r3, #0
 800504e:	fb00 f303 	mul.w	r3, r0, r3
 8005052:	4413      	add	r3, r2
 8005054:	4a43      	ldr	r2, [pc, #268]	; (8005164 <HAL_RCC_GetSysClockFreq+0x188>)
 8005056:	fba0 1202 	umull	r1, r2, r0, r2
 800505a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800505c:	460a      	mov	r2, r1
 800505e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005062:	4413      	add	r3, r2
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005068:	2200      	movs	r2, #0
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005076:	f7fb fdef 	bl	8000c58 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4613      	mov	r3, r2
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005082:	e053      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005084:	4b35      	ldr	r3, [pc, #212]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	2200      	movs	r2, #0
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	617a      	str	r2, [r7, #20]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005096:	f04f 0b00 	mov.w	fp, #0
 800509a:	4652      	mov	r2, sl
 800509c:	465b      	mov	r3, fp
 800509e:	f04f 0000 	mov.w	r0, #0
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	0159      	lsls	r1, r3, #5
 80050a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ac:	0150      	lsls	r0, r2, #5
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	ebb2 080a 	subs.w	r8, r2, sl
 80050b6:	eb63 090b 	sbc.w	r9, r3, fp
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ce:	ebb2 0408 	subs.w	r4, r2, r8
 80050d2:	eb63 0509 	sbc.w	r5, r3, r9
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	00eb      	lsls	r3, r5, #3
 80050e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e4:	00e2      	lsls	r2, r4, #3
 80050e6:	4614      	mov	r4, r2
 80050e8:	461d      	mov	r5, r3
 80050ea:	eb14 030a 	adds.w	r3, r4, sl
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	eb45 030b 	adc.w	r3, r5, fp
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005102:	4629      	mov	r1, r5
 8005104:	028b      	lsls	r3, r1, #10
 8005106:	4621      	mov	r1, r4
 8005108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800510c:	4621      	mov	r1, r4
 800510e:	028a      	lsls	r2, r1, #10
 8005110:	4610      	mov	r0, r2
 8005112:	4619      	mov	r1, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	2200      	movs	r2, #0
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	60fa      	str	r2, [r7, #12]
 800511c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005120:	f7fb fd9a 	bl	8000c58 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_GetSysClockFreq+0x180>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800513c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCC_GetSysClockFreq+0x184>)
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800514c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005150:	4618      	mov	r0, r3
 8005152:	3740      	adds	r7, #64	; 0x40
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	017d7840 	.word	0x017d7840

08005168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000004 	.word	0x20000004

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	0800aab4 	.word	0x0800aab4

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800aab4 	.word	0x0800aab4

080051d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e041      	b.n	8005266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7fe fb5e 	bl	80038b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fc14 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e041      	b.n	8005304 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7fe fa73 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f000 fbc5 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_TIM_PWM_Start+0x24>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e022      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d109      	bne.n	800534a <HAL_TIM_PWM_Start+0x3e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	bf14      	ite	ne
 8005342:	2301      	movne	r3, #1
 8005344:	2300      	moveq	r3, #0
 8005346:	b2db      	uxtb	r3, r3
 8005348:	e015      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d109      	bne.n	8005364 <HAL_TIM_PWM_Start+0x58>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	e008      	b.n	8005376 <HAL_TIM_PWM_Start+0x6a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	bf14      	ite	ne
 8005370:	2301      	movne	r3, #1
 8005372:	2300      	moveq	r3, #0
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e068      	b.n	8005450 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_TIM_PWM_Start+0x82>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800538c:	e013      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d104      	bne.n	800539e <HAL_TIM_PWM_Start+0x92>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	e00b      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	e003      	b.n	80053b6 <HAL_TIM_PWM_Start+0xaa>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2201      	movs	r2, #1
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 fe66 	bl	8006090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a23      	ldr	r2, [pc, #140]	; (8005458 <HAL_TIM_PWM_Start+0x14c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d107      	bne.n	80053de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <HAL_TIM_PWM_Start+0x14c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d018      	beq.n	800541a <HAL_TIM_PWM_Start+0x10e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d013      	beq.n	800541a <HAL_TIM_PWM_Start+0x10e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_TIM_PWM_Start+0x150>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIM_PWM_Start+0x10e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <HAL_TIM_PWM_Start+0x154>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIM_PWM_Start+0x10e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a16      	ldr	r2, [pc, #88]	; (8005464 <HAL_TIM_PWM_Start+0x158>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIM_PWM_Start+0x10e>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a14      	ldr	r2, [pc, #80]	; (8005468 <HAL_TIM_PWM_Start+0x15c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d111      	bne.n	800543e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d010      	beq.n	800544e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543c:	e007      	b.n	800544e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40014000 	.word	0x40014000

0800546c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e041      	b.n	8005502 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe f9c0 	bl	8003818 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 fac6 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d122      	bne.n	8005566 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d11b      	bne.n	8005566 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0202 	mvn.w	r2, #2
 8005536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f003 0303 	and.w	r3, r3, #3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa57 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 8005552:	e005      	b.n	8005560 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa49 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa5a 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b04      	cmp	r3, #4
 8005572:	d122      	bne.n	80055ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b04      	cmp	r3, #4
 8005580:	d11b      	bne.n	80055ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0204 	mvn.w	r2, #4
 800558a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa2d 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 80055a6:	e005      	b.n	80055b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 fa1f 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa30 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d122      	bne.n	800560e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0208 	mvn.w	r2, #8
 80055de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2204      	movs	r2, #4
 80055e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa03 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 80055fa:	e005      	b.n	8005608 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f9f5 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa06 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d122      	bne.n	8005662 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0310 	and.w	r3, r3, #16
 8005626:	2b10      	cmp	r3, #16
 8005628:	d11b      	bne.n	8005662 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0210 	mvn.w	r2, #16
 8005632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2208      	movs	r2, #8
 8005638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9d9 	bl	8005a00 <HAL_TIM_IC_CaptureCallback>
 800564e:	e005      	b.n	800565c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9cb 	bl	80059ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f9dc 	bl	8005a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10e      	bne.n	800568e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d107      	bne.n	800568e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0201 	mvn.w	r2, #1
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9a5 	bl	80059d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d10e      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a6:	2b80      	cmp	r3, #128	; 0x80
 80056a8:	d107      	bne.n	80056ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fd89 	bl	80061cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d10e      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d107      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f9a1 	bl	8005a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d10e      	bne.n	8005712 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d107      	bne.n	8005712 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0220 	mvn.w	r2, #32
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fd53 	bl	80061b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b086      	sub	sp, #24
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005734:	2302      	movs	r3, #2
 8005736:	e088      	b.n	800584a <HAL_TIM_IC_ConfigChannel+0x130>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11b      	bne.n	800577e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f000 fb7d 	bl	8005e54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699a      	ldr	r2, [r3, #24]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 020c 	bic.w	r2, r2, #12
 8005768:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6999      	ldr	r1, [r3, #24]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	619a      	str	r2, [r3, #24]
 800577c:	e060      	b.n	8005840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d11c      	bne.n	80057be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fbc6 	bl	8005f24 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6999      	ldr	r1, [r3, #24]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	021a      	lsls	r2, r3, #8
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	619a      	str	r2, [r3, #24]
 80057bc:	e040      	b.n	8005840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d11b      	bne.n	80057fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f000 fbe3 	bl	8005f9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69da      	ldr	r2, [r3, #28]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 020c 	bic.w	r2, r2, #12
 80057e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69d9      	ldr	r1, [r3, #28]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
 80057fa:	e021      	b.n	8005840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d11c      	bne.n	800583c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	6819      	ldr	r1, [r3, #0]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f000 fc00 	bl	8006016 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005824:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69d9      	ldr	r1, [r3, #28]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	021a      	lsls	r2, r3, #8
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	61da      	str	r2, [r3, #28]
 800583a:	e001      	b.n	8005840 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800586e:	2302      	movs	r3, #2
 8005870:	e0ae      	b.n	80059d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	f200 809f 	bhi.w	80059c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005882:	a201      	add	r2, pc, #4	; (adr r2, 8005888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080059c1 	.word	0x080059c1
 8005890:	080059c1 	.word	0x080059c1
 8005894:	080059c1 	.word	0x080059c1
 8005898:	080058fd 	.word	0x080058fd
 800589c:	080059c1 	.word	0x080059c1
 80058a0:	080059c1 	.word	0x080059c1
 80058a4:	080059c1 	.word	0x080059c1
 80058a8:	0800593f 	.word	0x0800593f
 80058ac:	080059c1 	.word	0x080059c1
 80058b0:	080059c1 	.word	0x080059c1
 80058b4:	080059c1 	.word	0x080059c1
 80058b8:	0800597f 	.word	0x0800597f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f93a 	bl	8005b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0208 	orr.w	r2, r2, #8
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	619a      	str	r2, [r3, #24]
      break;
 80058fa:	e064      	b.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 f980 	bl	8005c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6999      	ldr	r1, [r3, #24]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	619a      	str	r2, [r3, #24]
      break;
 800593c:	e043      	b.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 f9cb 	bl	8005ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0208 	orr.w	r2, r2, #8
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0204 	bic.w	r2, r2, #4
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	61da      	str	r2, [r3, #28]
      break;
 800597c:	e023      	b.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fa15 	bl	8005db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69d9      	ldr	r1, [r3, #28]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	61da      	str	r2, [r3, #28]
      break;
 80059be:	e002      	b.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75fb      	strb	r3, [r7, #23]
      break;
 80059c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a34      	ldr	r2, [pc, #208]	; (8005b20 <TIM_Base_SetConfig+0xe4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00f      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5a:	d00b      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a31      	ldr	r2, [pc, #196]	; (8005b24 <TIM_Base_SetConfig+0xe8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a30      	ldr	r2, [pc, #192]	; (8005b28 <TIM_Base_SetConfig+0xec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0x38>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2f      	ldr	r2, [pc, #188]	; (8005b2c <TIM_Base_SetConfig+0xf0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d108      	bne.n	8005a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <TIM_Base_SetConfig+0xe4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01b      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d017      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a22      	ldr	r2, [pc, #136]	; (8005b24 <TIM_Base_SetConfig+0xe8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <TIM_Base_SetConfig+0xec>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00f      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <TIM_Base_SetConfig+0xf0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <TIM_Base_SetConfig+0xf4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <TIM_Base_SetConfig+0xf8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_Base_SetConfig+0x8a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <TIM_Base_SetConfig+0xfc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d108      	bne.n	8005ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <TIM_Base_SetConfig+0xe4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	615a      	str	r2, [r3, #20]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0201 	bic.w	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f023 0302 	bic.w	r3, r3, #2
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <TIM_OC1_SetConfig+0xc8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d10c      	bne.n	8005bb2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0308 	bic.w	r3, r3, #8
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f023 0304 	bic.w	r3, r3, #4
 8005bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a13      	ldr	r2, [pc, #76]	; (8005c04 <TIM_OC1_SetConfig+0xc8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40010000 	.word	0x40010000

08005c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0210 	bic.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0320 	bic.w	r3, r3, #32
 8005c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <TIM_OC2_SetConfig+0xd4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10d      	bne.n	8005c84 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a15      	ldr	r2, [pc, #84]	; (8005cdc <TIM_OC2_SetConfig+0xd4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000

08005ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_OC3_SetConfig+0xd0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10d      	bne.n	8005d5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <TIM_OC3_SetConfig+0xd0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d113      	bne.n	8005d8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	621a      	str	r2, [r3, #32]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	40010000 	.word	0x40010000

08005db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	031b      	lsls	r3, r3, #12
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <TIM_OC4_SetConfig+0x9c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d109      	bne.n	8005e28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	019b      	lsls	r3, r3, #6
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000

08005e54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f023 0201 	bic.w	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a24      	ldr	r2, [pc, #144]	; (8005f10 <TIM_TI1_SetConfig+0xbc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_TI1_SetConfig+0x56>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d00f      	beq.n	8005eaa <TIM_TI1_SetConfig+0x56>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <TIM_TI1_SetConfig+0xc0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_TI1_SetConfig+0x56>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <TIM_TI1_SetConfig+0xc4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_TI1_SetConfig+0x56>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <TIM_TI1_SetConfig+0xc8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_TI1_SetConfig+0x56>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <TIM_TI1_SetConfig+0xcc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d101      	bne.n	8005eae <TIM_TI1_SetConfig+0x5a>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e000      	b.n	8005eb0 <TIM_TI1_SetConfig+0x5c>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e003      	b.n	8005ece <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f023 030a 	bic.w	r3, r3, #10
 8005ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f003 030a 	and.w	r3, r3, #10
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40014000 	.word	0x40014000

08005f24 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0210 	bic.w	r2, r3, #16
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b087      	sub	sp, #28
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006042:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006054:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	b29b      	uxth	r3, r3
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006068:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	621a      	str	r2, [r3, #32]
}
 8006084:	bf00      	nop
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2201      	movs	r2, #1
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a1a      	ldr	r2, [r3, #32]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	401a      	ands	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	fa01 f303 	lsl.w	r3, r1, r3
 80060c8:	431a      	orrs	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	621a      	str	r2, [r3, #32]
}
 80060ce:	bf00      	nop
 80060d0:	371c      	adds	r7, #28
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e050      	b.n	8006196 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d018      	beq.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d013      	beq.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d00e      	beq.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a16      	ldr	r2, [pc, #88]	; (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d009      	beq.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d10c      	bne.n	8006184 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	4313      	orrs	r3, r2
 800617a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40010000 	.word	0x40010000
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00
 80061b4:	40014000 	.word	0x40014000

080061b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e03f      	b.n	8006272 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fd fc28 	bl	8003a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2224      	movs	r2, #36	; 0x24
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006222:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 ff5d 	bl	80070e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006238:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006248:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006258:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b08a      	sub	sp, #40	; 0x28
 800627e:	af02      	add	r7, sp, #8
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b20      	cmp	r3, #32
 8006298:	d17c      	bne.n	8006394 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_UART_Transmit+0x2c>
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e075      	b.n	8006396 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_UART_Transmit+0x3e>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e06e      	b.n	8006396 <HAL_UART_Transmit+0x11c>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2221      	movs	r2, #33	; 0x21
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ce:	f7fd ff57 	bl	8004180 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	88fa      	ldrh	r2, [r7, #6]
 80062de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d108      	bne.n	80062fc <HAL_UART_Transmit+0x82>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d104      	bne.n	80062fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e003      	b.n	8006304 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800630c:	e02a      	b.n	8006364 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fc3d 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e036      	b.n	8006396 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	3302      	adds	r3, #2
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	e007      	b.n	8006356 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1cf      	bne.n	800630e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2200      	movs	r2, #0
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f000 fc0d 	bl	8006b98 <UART_WaitOnFlagUntilTimeout>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e006      	b.n	8006396 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3720      	adds	r7, #32
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	d11d      	bne.n	80063f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <HAL_UART_Receive_IT+0x26>
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e016      	b.n	80063f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Receive_IT+0x38>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e00f      	b.n	80063f6 <HAL_UART_Receive_IT+0x58>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	461a      	mov	r2, r3
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fc42 	bl	8006c74 <UART_Start_Receive_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	e000      	b.n	80063f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b0a2      	sub	sp, #136	; 0x88
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8006408:	2301      	movs	r3, #1
 800640a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800641e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006420:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006434:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800643a:	e841 2300 	strex	r3, r2, [r1]
 800643e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1e3      	bne.n	800640e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3314      	adds	r3, #20
 8006464:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006466:	65ba      	str	r2, [r7, #88]	; 0x58
 8006468:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800646c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e5      	bne.n	8006446 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	2b01      	cmp	r3, #1
 8006480:	d119      	bne.n	80064b6 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	f023 0310 	bic.w	r3, r3, #16
 8006498:	67bb      	str	r3, [r7, #120]	; 0x78
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064a2:	647a      	str	r2, [r7, #68]	; 0x44
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00f      	beq.n	80064de <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d104      	bne.n	80064d6 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	4a53      	ldr	r2, [pc, #332]	; (8006620 <HAL_UART_Abort_IT+0x220>)
 80064d2:	651a      	str	r2, [r3, #80]	; 0x50
 80064d4:	e003      	b.n	80064de <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	2200      	movs	r2, #0
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00f      	beq.n	8006506 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d104      	bne.n	80064fe <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	4a4a      	ldr	r2, [pc, #296]	; (8006624 <HAL_UART_Abort_IT+0x224>)
 80064fa:	651a      	str	r2, [r3, #80]	; 0x50
 80064fc:	e003      	b.n	8006506 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	2200      	movs	r2, #0
 8006504:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006510:	2b80      	cmp	r3, #128	; 0x80
 8006512:	d12d      	bne.n	8006570 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	623b      	str	r3, [r7, #32]
   return(result);
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652a:	677b      	str	r3, [r7, #116]	; 0x74
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006534:	633a      	str	r2, [r7, #48]	; 0x30
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800653a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00f      	beq.n	8006570 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe f822 	bl	800459e <HAL_DMA_Abort_IT>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	2200      	movs	r2, #0
 8006566:	651a      	str	r2, [r3, #80]	; 0x50
 8006568:	e002      	b.n	8006570 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800656a:	2300      	movs	r3, #0
 800656c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d130      	bne.n	80065e0 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	60fb      	str	r3, [r7, #12]
   return(result);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	673b      	str	r3, [r7, #112]	; 0x70
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3314      	adds	r3, #20
 800659c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800659e:	61fa      	str	r2, [r7, #28]
 80065a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	617b      	str	r3, [r7, #20]
   return(result);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e5      	bne.n	800657e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d012      	beq.n	80065e0 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fd ffed 	bl	800459e <HAL_DMA_Abort_IT>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	2200      	movs	r2, #0
 80065d0:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80065d2:	2301      	movs	r3, #1
 80065d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d8:	e002      	b.n	80065e0 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80065e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d116      	bne.n	8006616 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 faab 	bl	8006b6c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3788      	adds	r7, #136	; 0x88
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	08006ddf 	.word	0x08006ddf
 8006624:	08006e3f 	.word	0x08006e3f

08006628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b0ba      	sub	sp, #232	; 0xe8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10f      	bne.n	800668e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
 800667a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fc71 	bl	8006f6e <UART_Receive_IT>
      return;
 800668c:	e256      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800668e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80de 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
 8006698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80d1 	beq.w	8006854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00b      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f043 0201 	orr.w	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00b      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
 80066e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f043 0202 	orr.w	r2, r3, #2
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
 8006706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f043 0204 	orr.w	r2, r3, #4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d011      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
 800672a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	f043 0208 	orr.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 81ed 	beq.w	8006b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fbfc 	bl	8006f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	bf0c      	ite	eq
 8006784:	2301      	moveq	r3, #1
 8006786:	2300      	movne	r3, #0
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <HAL_UART_IRQHandler+0x17a>
 800679a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d04f      	beq.n	8006842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 faa4 	bl	8006cf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d141      	bne.n	800683a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067c4:	e853 3f00 	ldrex	r3, [r3]
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1d9      	bne.n	80067b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680e:	4a7d      	ldr	r2, [pc, #500]	; (8006a04 <HAL_UART_IRQHandler+0x3dc>)
 8006810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd fec1 	bl	800459e <HAL_DMA_Abort_IT>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006830:	e00e      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f990 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	e00a      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f98c 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e006      	b.n	8006850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f988 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800684e:	e170      	b.n	8006b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	bf00      	nop
    return;
 8006852:	e16e      	b.n	8006b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 814a 	bne.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8143 	beq.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800686c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 813c 	beq.w	8006af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	f040 80b4 	bne.w	8006a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8140 	beq.w	8006b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068be:	429a      	cmp	r2, r3
 80068c0:	f080 8139 	bcs.w	8006b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d6:	f000 8088 	beq.w	80069ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800690a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800691e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1d9      	bne.n	80068da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3314      	adds	r3, #20
 800692c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800694a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800694e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800695c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e1      	bne.n	8006926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800698c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e3      	bne.n	8006962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80069ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fd fd6a 	bl	80044be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f8c0 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a00:	e099      	b.n	8006b36 <HAL_UART_IRQHandler+0x50e>
 8006a02:	bf00      	nop
 8006a04:	08006db7 	.word	0x08006db7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 808b 	beq.w	8006b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8086 	beq.w	8006b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a52:	647a      	str	r2, [r7, #68]	; 0x44
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e3      	bne.n	8006a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	623b      	str	r3, [r7, #32]
   return(result);
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0310 	bic.w	r3, r3, #16
 8006ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	330c      	adds	r3, #12
 8006acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006ad0:	61fa      	str	r2, [r7, #28]
 8006ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	69b9      	ldr	r1, [r7, #24]
 8006ad6:	69fa      	ldr	r2, [r7, #28]
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e3      	bne.n	8006aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f848 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af0:	e023      	b.n	8006b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <HAL_UART_IRQHandler+0x4ea>
 8006afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f9c7 	bl	8006e9e <UART_Transmit_IT>
    return;
 8006b10:	e014      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00e      	beq.n	8006b3c <HAL_UART_IRQHandler+0x514>
 8006b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa07 	bl	8006f3e <UART_EndTransmit_IT>
    return;
 8006b30:	e004      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
    return;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
      return;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_UART_IRQHandler+0x514>
      return;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	37e8      	adds	r7, #232	; 0xe8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b090      	sub	sp, #64	; 0x40
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba8:	e050      	b.n	8006c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb0:	d04c      	beq.n	8006c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d007      	beq.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb8:	f7fd fae2 	bl	8004180 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d241      	bcs.n	8006c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006be8:	637a      	str	r2, [r7, #52]	; 0x34
 8006bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	e853 3f00 	ldrex	r3, [r3]
 8006c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f023 0301 	bic.w	r3, r3, #1
 8006c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c1c:	623a      	str	r2, [r7, #32]
 8006c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	69f9      	ldr	r1, [r7, #28]
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e5      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e00f      	b.n	8006c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4013      	ands	r3, r2
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2301      	moveq	r3, #1
 8006c5e:	2300      	movne	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d09f      	beq.n	8006baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3740      	adds	r7, #64	; 0x40
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	88fa      	ldrh	r2, [r7, #6]
 8006c8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2222      	movs	r2, #34	; 0x22
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0201 	orr.w	r2, r2, #1
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0220 	orr.w	r2, r2, #32
 8006ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b095      	sub	sp, #84	; 0x54
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d18:	643a      	str	r2, [r7, #64]	; 0x40
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e5      	bne.n	8006cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3314      	adds	r3, #20
 8006d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3314      	adds	r3, #20
 8006d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d119      	bne.n	8006d9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f023 0310 	bic.w	r3, r3, #16
 8006d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d88:	61ba      	str	r2, [r7, #24]
 8006d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6979      	ldr	r1, [r7, #20]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	613b      	str	r3, [r7, #16]
   return(result);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006daa:	bf00      	nop
 8006dac:	3754      	adds	r7, #84	; 0x54
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fec1 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	2200      	movs	r2, #0
 8006df2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d004      	beq.n	8006e06 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d117      	bne.n	8006e36 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fe9c 	bl	8006b6c <HAL_UART_AbortCpltCallback>
 8006e34:	e000      	b.n	8006e38 <UART_DMATxAbortCallback+0x5a>
      return;
 8006e36:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	2200      	movs	r2, #0
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d117      	bne.n	8006e96 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fe6c 	bl	8006b6c <HAL_UART_AbortCpltCallback>
 8006e94:	e000      	b.n	8006e98 <UART_DMARxAbortCallback+0x5a>
      return;
 8006e96:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b21      	cmp	r3, #33	; 0x21
 8006eb0:	d13e      	bne.n	8006f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	d114      	bne.n	8006ee6 <UART_Transmit_IT+0x48>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d110      	bne.n	8006ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	1c9a      	adds	r2, r3, #2
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	621a      	str	r2, [r3, #32]
 8006ee4:	e008      	b.n	8006ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6211      	str	r1, [r2, #32]
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	4619      	mov	r1, r3
 8006f06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10f      	bne.n	8006f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fdf0 	bl	8006b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b08c      	sub	sp, #48	; 0x30
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b22      	cmp	r3, #34	; 0x22
 8006f80:	f040 80ab 	bne.w	80070da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8c:	d117      	bne.n	8006fbe <UART_Receive_IT+0x50>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d113      	bne.n	8006fbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	1c9a      	adds	r2, r3, #2
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28
 8006fbc:	e026      	b.n	800700c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd0:	d007      	beq.n	8006fe2 <UART_Receive_IT+0x74>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <UART_Receive_IT+0x82>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d106      	bne.n	8006ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e008      	b.n	8007002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29b      	uxth	r3, r3
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	4619      	mov	r1, r3
 800701a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800701c:	2b00      	cmp	r3, #0
 800701e:	d15a      	bne.n	80070d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0220 	bic.w	r2, r2, #32
 800702e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800703e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0201 	bic.w	r2, r2, #1
 800704e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705c:	2b01      	cmp	r3, #1
 800705e:	d135      	bne.n	80070cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	613b      	str	r3, [r7, #16]
   return(result);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	330c      	adds	r3, #12
 8007084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007086:	623a      	str	r2, [r7, #32]
 8007088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	69f9      	ldr	r1, [r7, #28]
 800708c:	6a3a      	ldr	r2, [r7, #32]
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	61bb      	str	r3, [r7, #24]
   return(result);
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e5      	bne.n	8007066 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d10a      	bne.n	80070be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fd5b 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
 80070ca:	e002      	b.n	80070d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fb fcfb 	bl	8002ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e002      	b.n	80070dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070da:	2302      	movs	r3, #2
  }
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3730      	adds	r7, #48	; 0x30
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e8:	b0c0      	sub	sp, #256	; 0x100
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	68d9      	ldr	r1, [r3, #12]
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	ea40 0301 	orr.w	r3, r0, r1
 800710c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800710e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	431a      	orrs	r2, r3
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	431a      	orrs	r2, r3
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	4313      	orrs	r3, r2
 800712c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800713c:	f021 010c 	bic.w	r1, r1, #12
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800714a:	430b      	orrs	r3, r1
 800714c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800715e:	6999      	ldr	r1, [r3, #24]
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	ea40 0301 	orr.w	r3, r0, r1
 800716a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b8f      	ldr	r3, [pc, #572]	; (80073b0 <UART_SetConfig+0x2cc>)
 8007174:	429a      	cmp	r2, r3
 8007176:	d005      	beq.n	8007184 <UART_SetConfig+0xa0>
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	4b8d      	ldr	r3, [pc, #564]	; (80073b4 <UART_SetConfig+0x2d0>)
 8007180:	429a      	cmp	r2, r3
 8007182:	d104      	bne.n	800718e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe f810 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8007188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800718c:	e003      	b.n	8007196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800718e:	f7fd fff7 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8007192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	f040 810c 	bne.w	80073bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071b6:	4622      	mov	r2, r4
 80071b8:	462b      	mov	r3, r5
 80071ba:	1891      	adds	r1, r2, r2
 80071bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071be:	415b      	adcs	r3, r3
 80071c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071c6:	4621      	mov	r1, r4
 80071c8:	eb12 0801 	adds.w	r8, r2, r1
 80071cc:	4629      	mov	r1, r5
 80071ce:	eb43 0901 	adc.w	r9, r3, r1
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e6:	4690      	mov	r8, r2
 80071e8:	4699      	mov	r9, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	eb18 0303 	adds.w	r3, r8, r3
 80071f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071f4:	462b      	mov	r3, r5
 80071f6:	eb49 0303 	adc.w	r3, r9, r3
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800720a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800720e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007212:	460b      	mov	r3, r1
 8007214:	18db      	adds	r3, r3, r3
 8007216:	653b      	str	r3, [r7, #80]	; 0x50
 8007218:	4613      	mov	r3, r2
 800721a:	eb42 0303 	adc.w	r3, r2, r3
 800721e:	657b      	str	r3, [r7, #84]	; 0x54
 8007220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007228:	f7f9 fd16 	bl	8000c58 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4b61      	ldr	r3, [pc, #388]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007232:	fba3 2302 	umull	r2, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	011c      	lsls	r4, r3, #4
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800723e:	2200      	movs	r2, #0
 8007240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800724c:	4642      	mov	r2, r8
 800724e:	464b      	mov	r3, r9
 8007250:	1891      	adds	r1, r2, r2
 8007252:	64b9      	str	r1, [r7, #72]	; 0x48
 8007254:	415b      	adcs	r3, r3
 8007256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800725c:	4641      	mov	r1, r8
 800725e:	eb12 0a01 	adds.w	sl, r2, r1
 8007262:	4649      	mov	r1, r9
 8007264:	eb43 0b01 	adc.w	fp, r3, r1
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800727c:	4692      	mov	sl, r2
 800727e:	469b      	mov	fp, r3
 8007280:	4643      	mov	r3, r8
 8007282:	eb1a 0303 	adds.w	r3, sl, r3
 8007286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800728a:	464b      	mov	r3, r9
 800728c:	eb4b 0303 	adc.w	r3, fp, r3
 8007290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072a8:	460b      	mov	r3, r1
 80072aa:	18db      	adds	r3, r3, r3
 80072ac:	643b      	str	r3, [r7, #64]	; 0x40
 80072ae:	4613      	mov	r3, r2
 80072b0:	eb42 0303 	adc.w	r3, r2, r3
 80072b4:	647b      	str	r3, [r7, #68]	; 0x44
 80072b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072be:	f7f9 fccb 	bl	8000c58 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	4b3b      	ldr	r3, [pc, #236]	; (80073b8 <UART_SetConfig+0x2d4>)
 80072ca:	fba3 2301 	umull	r2, r3, r3, r1
 80072ce:	095b      	lsrs	r3, r3, #5
 80072d0:	2264      	movs	r2, #100	; 0x64
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	1acb      	subs	r3, r1, r3
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072de:	4b36      	ldr	r3, [pc, #216]	; (80073b8 <UART_SetConfig+0x2d4>)
 80072e0:	fba3 2302 	umull	r2, r3, r3, r2
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072ec:	441c      	add	r4, r3
 80072ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007300:	4642      	mov	r2, r8
 8007302:	464b      	mov	r3, r9
 8007304:	1891      	adds	r1, r2, r2
 8007306:	63b9      	str	r1, [r7, #56]	; 0x38
 8007308:	415b      	adcs	r3, r3
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007310:	4641      	mov	r1, r8
 8007312:	1851      	adds	r1, r2, r1
 8007314:	6339      	str	r1, [r7, #48]	; 0x30
 8007316:	4649      	mov	r1, r9
 8007318:	414b      	adcs	r3, r1
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007328:	4659      	mov	r1, fp
 800732a:	00cb      	lsls	r3, r1, #3
 800732c:	4651      	mov	r1, sl
 800732e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007332:	4651      	mov	r1, sl
 8007334:	00ca      	lsls	r2, r1, #3
 8007336:	4610      	mov	r0, r2
 8007338:	4619      	mov	r1, r3
 800733a:	4603      	mov	r3, r0
 800733c:	4642      	mov	r2, r8
 800733e:	189b      	adds	r3, r3, r2
 8007340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007344:	464b      	mov	r3, r9
 8007346:	460a      	mov	r2, r1
 8007348:	eb42 0303 	adc.w	r3, r2, r3
 800734c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800735c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007364:	460b      	mov	r3, r1
 8007366:	18db      	adds	r3, r3, r3
 8007368:	62bb      	str	r3, [r7, #40]	; 0x28
 800736a:	4613      	mov	r3, r2
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800737a:	f7f9 fc6d 	bl	8000c58 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007384:	fba3 1302 	umull	r1, r3, r3, r2
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	2164      	movs	r1, #100	; 0x64
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	3332      	adds	r3, #50	; 0x32
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <UART_SetConfig+0x2d4>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	f003 0207 	and.w	r2, r3, #7
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4422      	add	r2, r4
 80073aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073ac:	e105      	b.n	80075ba <UART_SetConfig+0x4d6>
 80073ae:	bf00      	nop
 80073b0:	40011000 	.word	0x40011000
 80073b4:	40011400 	.word	0x40011400
 80073b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ce:	4642      	mov	r2, r8
 80073d0:	464b      	mov	r3, r9
 80073d2:	1891      	adds	r1, r2, r2
 80073d4:	6239      	str	r1, [r7, #32]
 80073d6:	415b      	adcs	r3, r3
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
 80073da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073de:	4641      	mov	r1, r8
 80073e0:	1854      	adds	r4, r2, r1
 80073e2:	4649      	mov	r1, r9
 80073e4:	eb43 0501 	adc.w	r5, r3, r1
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	00eb      	lsls	r3, r5, #3
 80073f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f6:	00e2      	lsls	r2, r4, #3
 80073f8:	4614      	mov	r4, r2
 80073fa:	461d      	mov	r5, r3
 80073fc:	4643      	mov	r3, r8
 80073fe:	18e3      	adds	r3, r4, r3
 8007400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007404:	464b      	mov	r3, r9
 8007406:	eb45 0303 	adc.w	r3, r5, r3
 800740a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800741a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800742a:	4629      	mov	r1, r5
 800742c:	008b      	lsls	r3, r1, #2
 800742e:	4621      	mov	r1, r4
 8007430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007434:	4621      	mov	r1, r4
 8007436:	008a      	lsls	r2, r1, #2
 8007438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800743c:	f7f9 fc0c 	bl	8000c58 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b60      	ldr	r3, [pc, #384]	; (80075c8 <UART_SetConfig+0x4e4>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011c      	lsls	r4, r3, #4
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800745c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	61b9      	str	r1, [r7, #24]
 8007468:	415b      	adcs	r3, r3
 800746a:	61fb      	str	r3, [r7, #28]
 800746c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007470:	4641      	mov	r1, r8
 8007472:	1851      	adds	r1, r2, r1
 8007474:	6139      	str	r1, [r7, #16]
 8007476:	4649      	mov	r1, r9
 8007478:	414b      	adcs	r3, r1
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007488:	4659      	mov	r1, fp
 800748a:	00cb      	lsls	r3, r1, #3
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007492:	4651      	mov	r1, sl
 8007494:	00ca      	lsls	r2, r1, #3
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	4603      	mov	r3, r0
 800749c:	4642      	mov	r2, r8
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074a4:	464b      	mov	r3, r9
 80074a6:	460a      	mov	r2, r1
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074c8:	4649      	mov	r1, r9
 80074ca:	008b      	lsls	r3, r1, #2
 80074cc:	4641      	mov	r1, r8
 80074ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d2:	4641      	mov	r1, r8
 80074d4:	008a      	lsls	r2, r1, #2
 80074d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074da:	f7f9 fbbd 	bl	8000c58 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4b39      	ldr	r3, [pc, #228]	; (80075c8 <UART_SetConfig+0x4e4>)
 80074e4:	fba3 1302 	umull	r1, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2164      	movs	r1, #100	; 0x64
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	3332      	adds	r3, #50	; 0x32
 80074f6:	4a34      	ldr	r2, [pc, #208]	; (80075c8 <UART_SetConfig+0x4e4>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007502:	441c      	add	r4, r3
 8007504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007508:	2200      	movs	r2, #0
 800750a:	673b      	str	r3, [r7, #112]	; 0x70
 800750c:	677a      	str	r2, [r7, #116]	; 0x74
 800750e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007512:	4642      	mov	r2, r8
 8007514:	464b      	mov	r3, r9
 8007516:	1891      	adds	r1, r2, r2
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	415b      	adcs	r3, r3
 800751c:	60fb      	str	r3, [r7, #12]
 800751e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007522:	4641      	mov	r1, r8
 8007524:	1851      	adds	r1, r2, r1
 8007526:	6039      	str	r1, [r7, #0]
 8007528:	4649      	mov	r1, r9
 800752a:	414b      	adcs	r3, r1
 800752c:	607b      	str	r3, [r7, #4]
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800753a:	4659      	mov	r1, fp
 800753c:	00cb      	lsls	r3, r1, #3
 800753e:	4651      	mov	r1, sl
 8007540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007544:	4651      	mov	r1, sl
 8007546:	00ca      	lsls	r2, r1, #3
 8007548:	4610      	mov	r0, r2
 800754a:	4619      	mov	r1, r3
 800754c:	4603      	mov	r3, r0
 800754e:	4642      	mov	r2, r8
 8007550:	189b      	adds	r3, r3, r2
 8007552:	66bb      	str	r3, [r7, #104]	; 0x68
 8007554:	464b      	mov	r3, r9
 8007556:	460a      	mov	r2, r1
 8007558:	eb42 0303 	adc.w	r3, r2, r3
 800755c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	663b      	str	r3, [r7, #96]	; 0x60
 8007568:	667a      	str	r2, [r7, #100]	; 0x64
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	f04f 0300 	mov.w	r3, #0
 8007572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007576:	4649      	mov	r1, r9
 8007578:	008b      	lsls	r3, r1, #2
 800757a:	4641      	mov	r1, r8
 800757c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007580:	4641      	mov	r1, r8
 8007582:	008a      	lsls	r2, r1, #2
 8007584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007588:	f7f9 fb66 	bl	8000c58 <__aeabi_uldivmod>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <UART_SetConfig+0x4e4>)
 8007592:	fba3 1302 	umull	r1, r3, r3, r2
 8007596:	095b      	lsrs	r3, r3, #5
 8007598:	2164      	movs	r1, #100	; 0x64
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	3332      	adds	r3, #50	; 0x32
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <UART_SetConfig+0x4e4>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4422      	add	r2, r4
 80075b8:	609a      	str	r2, [r3, #8]
}
 80075ba:	bf00      	nop
 80075bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075c0:	46bd      	mov	sp, r7
 80075c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c6:	bf00      	nop
 80075c8:	51eb851f 	.word	0x51eb851f

080075cc <__errno>:
 80075cc:	4b01      	ldr	r3, [pc, #4]	; (80075d4 <__errno+0x8>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000018 	.word	0x20000018

080075d8 <__libc_init_array>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4d0d      	ldr	r5, [pc, #52]	; (8007610 <__libc_init_array+0x38>)
 80075dc:	4c0d      	ldr	r4, [pc, #52]	; (8007614 <__libc_init_array+0x3c>)
 80075de:	1b64      	subs	r4, r4, r5
 80075e0:	10a4      	asrs	r4, r4, #2
 80075e2:	2600      	movs	r6, #0
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	d109      	bne.n	80075fc <__libc_init_array+0x24>
 80075e8:	4d0b      	ldr	r5, [pc, #44]	; (8007618 <__libc_init_array+0x40>)
 80075ea:	4c0c      	ldr	r4, [pc, #48]	; (800761c <__libc_init_array+0x44>)
 80075ec:	f002 fff0 	bl	800a5d0 <_init>
 80075f0:	1b64      	subs	r4, r4, r5
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	2600      	movs	r6, #0
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	d105      	bne.n	8007606 <__libc_init_array+0x2e>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007600:	4798      	blx	r3
 8007602:	3601      	adds	r6, #1
 8007604:	e7ee      	b.n	80075e4 <__libc_init_array+0xc>
 8007606:	f855 3b04 	ldr.w	r3, [r5], #4
 800760a:	4798      	blx	r3
 800760c:	3601      	adds	r6, #1
 800760e:	e7f2      	b.n	80075f6 <__libc_init_array+0x1e>
 8007610:	0800ae9c 	.word	0x0800ae9c
 8007614:	0800ae9c 	.word	0x0800ae9c
 8007618:	0800ae9c 	.word	0x0800ae9c
 800761c:	0800aea0 	.word	0x0800aea0

08007620 <memset>:
 8007620:	4402      	add	r2, r0
 8007622:	4603      	mov	r3, r0
 8007624:	4293      	cmp	r3, r2
 8007626:	d100      	bne.n	800762a <memset+0xa>
 8007628:	4770      	bx	lr
 800762a:	f803 1b01 	strb.w	r1, [r3], #1
 800762e:	e7f9      	b.n	8007624 <memset+0x4>

08007630 <__cvt>:
 8007630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007634:	ec55 4b10 	vmov	r4, r5, d0
 8007638:	2d00      	cmp	r5, #0
 800763a:	460e      	mov	r6, r1
 800763c:	4619      	mov	r1, r3
 800763e:	462b      	mov	r3, r5
 8007640:	bfbb      	ittet	lt
 8007642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007646:	461d      	movlt	r5, r3
 8007648:	2300      	movge	r3, #0
 800764a:	232d      	movlt	r3, #45	; 0x2d
 800764c:	700b      	strb	r3, [r1, #0]
 800764e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007654:	4691      	mov	r9, r2
 8007656:	f023 0820 	bic.w	r8, r3, #32
 800765a:	bfbc      	itt	lt
 800765c:	4622      	movlt	r2, r4
 800765e:	4614      	movlt	r4, r2
 8007660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007664:	d005      	beq.n	8007672 <__cvt+0x42>
 8007666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800766a:	d100      	bne.n	800766e <__cvt+0x3e>
 800766c:	3601      	adds	r6, #1
 800766e:	2102      	movs	r1, #2
 8007670:	e000      	b.n	8007674 <__cvt+0x44>
 8007672:	2103      	movs	r1, #3
 8007674:	ab03      	add	r3, sp, #12
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	ab02      	add	r3, sp, #8
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	ec45 4b10 	vmov	d0, r4, r5
 8007680:	4653      	mov	r3, sl
 8007682:	4632      	mov	r2, r6
 8007684:	f000 fe50 	bl	8008328 <_dtoa_r>
 8007688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800768c:	4607      	mov	r7, r0
 800768e:	d102      	bne.n	8007696 <__cvt+0x66>
 8007690:	f019 0f01 	tst.w	r9, #1
 8007694:	d022      	beq.n	80076dc <__cvt+0xac>
 8007696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800769a:	eb07 0906 	add.w	r9, r7, r6
 800769e:	d110      	bne.n	80076c2 <__cvt+0x92>
 80076a0:	783b      	ldrb	r3, [r7, #0]
 80076a2:	2b30      	cmp	r3, #48	; 0x30
 80076a4:	d10a      	bne.n	80076bc <__cvt+0x8c>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	4620      	mov	r0, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7f9 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b2:	b918      	cbnz	r0, 80076bc <__cvt+0x8c>
 80076b4:	f1c6 0601 	rsb	r6, r6, #1
 80076b8:	f8ca 6000 	str.w	r6, [sl]
 80076bc:	f8da 3000 	ldr.w	r3, [sl]
 80076c0:	4499      	add	r9, r3
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 fa05 	bl	8000ad8 <__aeabi_dcmpeq>
 80076ce:	b108      	cbz	r0, 80076d4 <__cvt+0xa4>
 80076d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80076d4:	2230      	movs	r2, #48	; 0x30
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	454b      	cmp	r3, r9
 80076da:	d307      	bcc.n	80076ec <__cvt+0xbc>
 80076dc:	9b03      	ldr	r3, [sp, #12]
 80076de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e0:	1bdb      	subs	r3, r3, r7
 80076e2:	4638      	mov	r0, r7
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	b004      	add	sp, #16
 80076e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ec:	1c59      	adds	r1, r3, #1
 80076ee:	9103      	str	r1, [sp, #12]
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e7f0      	b.n	80076d6 <__cvt+0xa6>

080076f4 <__exponent>:
 80076f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076f6:	4603      	mov	r3, r0
 80076f8:	2900      	cmp	r1, #0
 80076fa:	bfb8      	it	lt
 80076fc:	4249      	neglt	r1, r1
 80076fe:	f803 2b02 	strb.w	r2, [r3], #2
 8007702:	bfb4      	ite	lt
 8007704:	222d      	movlt	r2, #45	; 0x2d
 8007706:	222b      	movge	r2, #43	; 0x2b
 8007708:	2909      	cmp	r1, #9
 800770a:	7042      	strb	r2, [r0, #1]
 800770c:	dd2a      	ble.n	8007764 <__exponent+0x70>
 800770e:	f10d 0407 	add.w	r4, sp, #7
 8007712:	46a4      	mov	ip, r4
 8007714:	270a      	movs	r7, #10
 8007716:	46a6      	mov	lr, r4
 8007718:	460a      	mov	r2, r1
 800771a:	fb91 f6f7 	sdiv	r6, r1, r7
 800771e:	fb07 1516 	mls	r5, r7, r6, r1
 8007722:	3530      	adds	r5, #48	; 0x30
 8007724:	2a63      	cmp	r2, #99	; 0x63
 8007726:	f104 34ff 	add.w	r4, r4, #4294967295
 800772a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800772e:	4631      	mov	r1, r6
 8007730:	dcf1      	bgt.n	8007716 <__exponent+0x22>
 8007732:	3130      	adds	r1, #48	; 0x30
 8007734:	f1ae 0502 	sub.w	r5, lr, #2
 8007738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800773c:	1c44      	adds	r4, r0, #1
 800773e:	4629      	mov	r1, r5
 8007740:	4561      	cmp	r1, ip
 8007742:	d30a      	bcc.n	800775a <__exponent+0x66>
 8007744:	f10d 0209 	add.w	r2, sp, #9
 8007748:	eba2 020e 	sub.w	r2, r2, lr
 800774c:	4565      	cmp	r5, ip
 800774e:	bf88      	it	hi
 8007750:	2200      	movhi	r2, #0
 8007752:	4413      	add	r3, r2
 8007754:	1a18      	subs	r0, r3, r0
 8007756:	b003      	add	sp, #12
 8007758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007762:	e7ed      	b.n	8007740 <__exponent+0x4c>
 8007764:	2330      	movs	r3, #48	; 0x30
 8007766:	3130      	adds	r1, #48	; 0x30
 8007768:	7083      	strb	r3, [r0, #2]
 800776a:	70c1      	strb	r1, [r0, #3]
 800776c:	1d03      	adds	r3, r0, #4
 800776e:	e7f1      	b.n	8007754 <__exponent+0x60>

08007770 <_printf_float>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b02 	vpush	{d8}
 8007778:	b08d      	sub	sp, #52	; 0x34
 800777a:	460c      	mov	r4, r1
 800777c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007780:	4616      	mov	r6, r2
 8007782:	461f      	mov	r7, r3
 8007784:	4605      	mov	r5, r0
 8007786:	f001 fd75 	bl	8009274 <_localeconv_r>
 800778a:	f8d0 a000 	ldr.w	sl, [r0]
 800778e:	4650      	mov	r0, sl
 8007790:	f7f8 fd26 	bl	80001e0 <strlen>
 8007794:	2300      	movs	r3, #0
 8007796:	930a      	str	r3, [sp, #40]	; 0x28
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	f8d8 3000 	ldr.w	r3, [r8]
 80077a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077a4:	3307      	adds	r3, #7
 80077a6:	f023 0307 	bic.w	r3, r3, #7
 80077aa:	f103 0208 	add.w	r2, r3, #8
 80077ae:	f8c8 2000 	str.w	r2, [r8]
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077c2:	9307      	str	r3, [sp, #28]
 80077c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80077c8:	ee08 0a10 	vmov	s16, r0
 80077cc:	4b9f      	ldr	r3, [pc, #636]	; (8007a4c <_printf_float+0x2dc>)
 80077ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	f7f9 f9b1 	bl	8000b3c <__aeabi_dcmpun>
 80077da:	bb88      	cbnz	r0, 8007840 <_printf_float+0xd0>
 80077dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077e0:	4b9a      	ldr	r3, [pc, #616]	; (8007a4c <_printf_float+0x2dc>)
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	f7f9 f98b 	bl	8000b00 <__aeabi_dcmple>
 80077ea:	bb48      	cbnz	r0, 8007840 <_printf_float+0xd0>
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4640      	mov	r0, r8
 80077f2:	4649      	mov	r1, r9
 80077f4:	f7f9 f97a 	bl	8000aec <__aeabi_dcmplt>
 80077f8:	b110      	cbz	r0, 8007800 <_printf_float+0x90>
 80077fa:	232d      	movs	r3, #45	; 0x2d
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007800:	4b93      	ldr	r3, [pc, #588]	; (8007a50 <_printf_float+0x2e0>)
 8007802:	4894      	ldr	r0, [pc, #592]	; (8007a54 <_printf_float+0x2e4>)
 8007804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007808:	bf94      	ite	ls
 800780a:	4698      	movls	r8, r3
 800780c:	4680      	movhi	r8, r0
 800780e:	2303      	movs	r3, #3
 8007810:	6123      	str	r3, [r4, #16]
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	f023 0204 	bic.w	r2, r3, #4
 8007818:	6022      	str	r2, [r4, #0]
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	9700      	str	r7, [sp, #0]
 8007820:	4633      	mov	r3, r6
 8007822:	aa0b      	add	r2, sp, #44	; 0x2c
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f9d8 	bl	8007bdc <_printf_common>
 800782c:	3001      	adds	r0, #1
 800782e:	f040 8090 	bne.w	8007952 <_printf_float+0x1e2>
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	b00d      	add	sp, #52	; 0x34
 8007838:	ecbd 8b02 	vpop	{d8}
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f9 f978 	bl	8000b3c <__aeabi_dcmpun>
 800784c:	b140      	cbz	r0, 8007860 <_printf_float+0xf0>
 800784e:	464b      	mov	r3, r9
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbc      	itt	lt
 8007854:	232d      	movlt	r3, #45	; 0x2d
 8007856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800785a:	487f      	ldr	r0, [pc, #508]	; (8007a58 <_printf_float+0x2e8>)
 800785c:	4b7f      	ldr	r3, [pc, #508]	; (8007a5c <_printf_float+0x2ec>)
 800785e:	e7d1      	b.n	8007804 <_printf_float+0x94>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007866:	9206      	str	r2, [sp, #24]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	d13f      	bne.n	80078ec <_printf_float+0x17c>
 800786c:	2306      	movs	r3, #6
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	6861      	ldr	r1, [r4, #4]
 8007874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007878:	2300      	movs	r3, #0
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	ab0a      	add	r3, sp, #40	; 0x28
 800787e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007882:	ab09      	add	r3, sp, #36	; 0x24
 8007884:	ec49 8b10 	vmov	d0, r8, r9
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007890:	4628      	mov	r0, r5
 8007892:	f7ff fecd 	bl	8007630 <__cvt>
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789a:	2b47      	cmp	r3, #71	; 0x47
 800789c:	4680      	mov	r8, r0
 800789e:	d108      	bne.n	80078b2 <_printf_float+0x142>
 80078a0:	1cc8      	adds	r0, r1, #3
 80078a2:	db02      	blt.n	80078aa <_printf_float+0x13a>
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	4299      	cmp	r1, r3
 80078a8:	dd41      	ble.n	800792e <_printf_float+0x1be>
 80078aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80078ae:	fa5f fb8b 	uxtb.w	fp, fp
 80078b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078b6:	d820      	bhi.n	80078fa <_printf_float+0x18a>
 80078b8:	3901      	subs	r1, #1
 80078ba:	465a      	mov	r2, fp
 80078bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078c0:	9109      	str	r1, [sp, #36]	; 0x24
 80078c2:	f7ff ff17 	bl	80076f4 <__exponent>
 80078c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c8:	1813      	adds	r3, r2, r0
 80078ca:	2a01      	cmp	r2, #1
 80078cc:	4681      	mov	r9, r0
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	dc02      	bgt.n	80078d8 <_printf_float+0x168>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	07d2      	lsls	r2, r2, #31
 80078d6:	d501      	bpl.n	80078dc <_printf_float+0x16c>
 80078d8:	3301      	adds	r3, #1
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d09c      	beq.n	800781e <_printf_float+0xae>
 80078e4:	232d      	movs	r3, #45	; 0x2d
 80078e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ea:	e798      	b.n	800781e <_printf_float+0xae>
 80078ec:	9a06      	ldr	r2, [sp, #24]
 80078ee:	2a47      	cmp	r2, #71	; 0x47
 80078f0:	d1be      	bne.n	8007870 <_printf_float+0x100>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1bc      	bne.n	8007870 <_printf_float+0x100>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e7b9      	b.n	800786e <_printf_float+0xfe>
 80078fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078fe:	d118      	bne.n	8007932 <_printf_float+0x1c2>
 8007900:	2900      	cmp	r1, #0
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	dd0b      	ble.n	800791e <_printf_float+0x1ae>
 8007906:	6121      	str	r1, [r4, #16]
 8007908:	b913      	cbnz	r3, 8007910 <_printf_float+0x1a0>
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	07d0      	lsls	r0, r2, #31
 800790e:	d502      	bpl.n	8007916 <_printf_float+0x1a6>
 8007910:	3301      	adds	r3, #1
 8007912:	440b      	add	r3, r1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	65a1      	str	r1, [r4, #88]	; 0x58
 8007918:	f04f 0900 	mov.w	r9, #0
 800791c:	e7de      	b.n	80078dc <_printf_float+0x16c>
 800791e:	b913      	cbnz	r3, 8007926 <_printf_float+0x1b6>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	07d2      	lsls	r2, r2, #31
 8007924:	d501      	bpl.n	800792a <_printf_float+0x1ba>
 8007926:	3302      	adds	r3, #2
 8007928:	e7f4      	b.n	8007914 <_printf_float+0x1a4>
 800792a:	2301      	movs	r3, #1
 800792c:	e7f2      	b.n	8007914 <_printf_float+0x1a4>
 800792e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007934:	4299      	cmp	r1, r3
 8007936:	db05      	blt.n	8007944 <_printf_float+0x1d4>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	6121      	str	r1, [r4, #16]
 800793c:	07d8      	lsls	r0, r3, #31
 800793e:	d5ea      	bpl.n	8007916 <_printf_float+0x1a6>
 8007940:	1c4b      	adds	r3, r1, #1
 8007942:	e7e7      	b.n	8007914 <_printf_float+0x1a4>
 8007944:	2900      	cmp	r1, #0
 8007946:	bfd4      	ite	le
 8007948:	f1c1 0202 	rsble	r2, r1, #2
 800794c:	2201      	movgt	r2, #1
 800794e:	4413      	add	r3, r2
 8007950:	e7e0      	b.n	8007914 <_printf_float+0x1a4>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	055a      	lsls	r2, r3, #21
 8007956:	d407      	bmi.n	8007968 <_printf_float+0x1f8>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	4642      	mov	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d12c      	bne.n	80079c0 <_printf_float+0x250>
 8007966:	e764      	b.n	8007832 <_printf_float+0xc2>
 8007968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800796c:	f240 80e0 	bls.w	8007b30 <_printf_float+0x3c0>
 8007970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	f7f9 f8ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800797c:	2800      	cmp	r0, #0
 800797e:	d034      	beq.n	80079ea <_printf_float+0x27a>
 8007980:	4a37      	ldr	r2, [pc, #220]	; (8007a60 <_printf_float+0x2f0>)
 8007982:	2301      	movs	r3, #1
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f af51 	beq.w	8007832 <_printf_float+0xc2>
 8007990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007994:	429a      	cmp	r2, r3
 8007996:	db02      	blt.n	800799e <_printf_float+0x22e>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07d8      	lsls	r0, r3, #31
 800799c:	d510      	bpl.n	80079c0 <_printf_float+0x250>
 800799e:	ee18 3a10 	vmov	r3, s16
 80079a2:	4652      	mov	r2, sl
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	f43f af41 	beq.w	8007832 <_printf_float+0xc2>
 80079b0:	f04f 0800 	mov.w	r8, #0
 80079b4:	f104 091a 	add.w	r9, r4, #26
 80079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4543      	cmp	r3, r8
 80079be:	dc09      	bgt.n	80079d4 <_printf_float+0x264>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	f100 8105 	bmi.w	8007bd2 <_printf_float+0x462>
 80079c8:	68e0      	ldr	r0, [r4, #12]
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	4298      	cmp	r0, r3
 80079ce:	bfb8      	it	lt
 80079d0:	4618      	movlt	r0, r3
 80079d2:	e730      	b.n	8007836 <_printf_float+0xc6>
 80079d4:	2301      	movs	r3, #1
 80079d6:	464a      	mov	r2, r9
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	f43f af27 	beq.w	8007832 <_printf_float+0xc2>
 80079e4:	f108 0801 	add.w	r8, r8, #1
 80079e8:	e7e6      	b.n	80079b8 <_printf_float+0x248>
 80079ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc39      	bgt.n	8007a64 <_printf_float+0x2f4>
 80079f0:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <_printf_float+0x2f0>)
 80079f2:	2301      	movs	r3, #1
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f af19 	beq.w	8007832 <_printf_float+0xc2>
 8007a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a04:	4313      	orrs	r3, r2
 8007a06:	d102      	bne.n	8007a0e <_printf_float+0x29e>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d5d8      	bpl.n	80079c0 <_printf_float+0x250>
 8007a0e:	ee18 3a10 	vmov	r3, s16
 8007a12:	4652      	mov	r2, sl
 8007a14:	4631      	mov	r1, r6
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f af09 	beq.w	8007832 <_printf_float+0xc2>
 8007a20:	f04f 0900 	mov.w	r9, #0
 8007a24:	f104 0a1a 	add.w	sl, r4, #26
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	425b      	negs	r3, r3
 8007a2c:	454b      	cmp	r3, r9
 8007a2e:	dc01      	bgt.n	8007a34 <_printf_float+0x2c4>
 8007a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a32:	e792      	b.n	800795a <_printf_float+0x1ea>
 8007a34:	2301      	movs	r3, #1
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f aef7 	beq.w	8007832 <_printf_float+0xc2>
 8007a44:	f109 0901 	add.w	r9, r9, #1
 8007a48:	e7ee      	b.n	8007a28 <_printf_float+0x2b8>
 8007a4a:	bf00      	nop
 8007a4c:	7fefffff 	.word	0x7fefffff
 8007a50:	0800aac0 	.word	0x0800aac0
 8007a54:	0800aac4 	.word	0x0800aac4
 8007a58:	0800aacc 	.word	0x0800aacc
 8007a5c:	0800aac8 	.word	0x0800aac8
 8007a60:	0800aad0 	.word	0x0800aad0
 8007a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	bfa8      	it	ge
 8007a6c:	461a      	movge	r2, r3
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	4691      	mov	r9, r2
 8007a72:	dc37      	bgt.n	8007ae4 <_printf_float+0x374>
 8007a74:	f04f 0b00 	mov.w	fp, #0
 8007a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7c:	f104 021a 	add.w	r2, r4, #26
 8007a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	eba3 0309 	sub.w	r3, r3, r9
 8007a88:	455b      	cmp	r3, fp
 8007a8a:	dc33      	bgt.n	8007af4 <_printf_float+0x384>
 8007a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a90:	429a      	cmp	r2, r3
 8007a92:	db3b      	blt.n	8007b0c <_printf_float+0x39c>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07da      	lsls	r2, r3, #31
 8007a98:	d438      	bmi.n	8007b0c <_printf_float+0x39c>
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aa0:	1a9a      	subs	r2, r3, r2
 8007aa2:	eba3 0901 	sub.w	r9, r3, r1
 8007aa6:	4591      	cmp	r9, r2
 8007aa8:	bfa8      	it	ge
 8007aaa:	4691      	movge	r9, r2
 8007aac:	f1b9 0f00 	cmp.w	r9, #0
 8007ab0:	dc35      	bgt.n	8007b1e <_printf_float+0x3ae>
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aba:	f104 0a1a 	add.w	sl, r4, #26
 8007abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	eba3 0309 	sub.w	r3, r3, r9
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	f77f af79 	ble.w	80079c0 <_printf_float+0x250>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f aeaa 	beq.w	8007832 <_printf_float+0xc2>
 8007ade:	f108 0801 	add.w	r8, r8, #1
 8007ae2:	e7ec      	b.n	8007abe <_printf_float+0x34e>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	d1c0      	bne.n	8007a74 <_printf_float+0x304>
 8007af2:	e69e      	b.n	8007832 <_printf_float+0xc2>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	9205      	str	r2, [sp, #20]
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f ae97 	beq.w	8007832 <_printf_float+0xc2>
 8007b04:	9a05      	ldr	r2, [sp, #20]
 8007b06:	f10b 0b01 	add.w	fp, fp, #1
 8007b0a:	e7b9      	b.n	8007a80 <_printf_float+0x310>
 8007b0c:	ee18 3a10 	vmov	r3, s16
 8007b10:	4652      	mov	r2, sl
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d1be      	bne.n	8007a9a <_printf_float+0x32a>
 8007b1c:	e689      	b.n	8007832 <_printf_float+0xc2>
 8007b1e:	9a05      	ldr	r2, [sp, #20]
 8007b20:	464b      	mov	r3, r9
 8007b22:	4442      	add	r2, r8
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d1c1      	bne.n	8007ab2 <_printf_float+0x342>
 8007b2e:	e680      	b.n	8007832 <_printf_float+0xc2>
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	dc01      	bgt.n	8007b3a <_printf_float+0x3ca>
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d538      	bpl.n	8007bac <_printf_float+0x43c>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	f43f ae74 	beq.w	8007832 <_printf_float+0xc2>
 8007b4a:	ee18 3a10 	vmov	r3, s16
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f ae6b 	beq.w	8007832 <_printf_float+0xc2>
 8007b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f7f8 ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b68:	b9d8      	cbnz	r0, 8007ba2 <_printf_float+0x432>
 8007b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6c:	f108 0201 	add.w	r2, r8, #1
 8007b70:	3b01      	subs	r3, #1
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	d10e      	bne.n	8007b9a <_printf_float+0x42a>
 8007b7c:	e659      	b.n	8007832 <_printf_float+0xc2>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4652      	mov	r2, sl
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f ae52 	beq.w	8007832 <_printf_float+0xc2>
 8007b8e:	f108 0801 	add.w	r8, r8, #1
 8007b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4543      	cmp	r3, r8
 8007b98:	dcf1      	bgt.n	8007b7e <_printf_float+0x40e>
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ba0:	e6dc      	b.n	800795c <_printf_float+0x1ec>
 8007ba2:	f04f 0800 	mov.w	r8, #0
 8007ba6:	f104 0a1a 	add.w	sl, r4, #26
 8007baa:	e7f2      	b.n	8007b92 <_printf_float+0x422>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4642      	mov	r2, r8
 8007bb0:	e7df      	b.n	8007b72 <_printf_float+0x402>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	464a      	mov	r2, r9
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae38 	beq.w	8007832 <_printf_float+0xc2>
 8007bc2:	f108 0801 	add.w	r8, r8, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	4543      	cmp	r3, r8
 8007bce:	dcf0      	bgt.n	8007bb2 <_printf_float+0x442>
 8007bd0:	e6fa      	b.n	80079c8 <_printf_float+0x258>
 8007bd2:	f04f 0800 	mov.w	r8, #0
 8007bd6:	f104 0919 	add.w	r9, r4, #25
 8007bda:	e7f4      	b.n	8007bc6 <_printf_float+0x456>

08007bdc <_printf_common>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	4616      	mov	r6, r2
 8007be2:	4699      	mov	r9, r3
 8007be4:	688a      	ldr	r2, [r1, #8]
 8007be6:	690b      	ldr	r3, [r1, #16]
 8007be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bec:	4293      	cmp	r3, r2
 8007bee:	bfb8      	it	lt
 8007bf0:	4613      	movlt	r3, r2
 8007bf2:	6033      	str	r3, [r6, #0]
 8007bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	b10a      	cbz	r2, 8007c02 <_printf_common+0x26>
 8007bfe:	3301      	adds	r3, #1
 8007c00:	6033      	str	r3, [r6, #0]
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	0699      	lsls	r1, r3, #26
 8007c06:	bf42      	ittt	mi
 8007c08:	6833      	ldrmi	r3, [r6, #0]
 8007c0a:	3302      	addmi	r3, #2
 8007c0c:	6033      	strmi	r3, [r6, #0]
 8007c0e:	6825      	ldr	r5, [r4, #0]
 8007c10:	f015 0506 	ands.w	r5, r5, #6
 8007c14:	d106      	bne.n	8007c24 <_printf_common+0x48>
 8007c16:	f104 0a19 	add.w	sl, r4, #25
 8007c1a:	68e3      	ldr	r3, [r4, #12]
 8007c1c:	6832      	ldr	r2, [r6, #0]
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	42ab      	cmp	r3, r5
 8007c22:	dc26      	bgt.n	8007c72 <_printf_common+0x96>
 8007c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c28:	1e13      	subs	r3, r2, #0
 8007c2a:	6822      	ldr	r2, [r4, #0]
 8007c2c:	bf18      	it	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	0692      	lsls	r2, r2, #26
 8007c32:	d42b      	bmi.n	8007c8c <_printf_common+0xb0>
 8007c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c38:	4649      	mov	r1, r9
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	47c0      	blx	r8
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d01e      	beq.n	8007c80 <_printf_common+0xa4>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	68e5      	ldr	r5, [r4, #12]
 8007c46:	6832      	ldr	r2, [r6, #0]
 8007c48:	f003 0306 	and.w	r3, r3, #6
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	bf08      	it	eq
 8007c50:	1aad      	subeq	r5, r5, r2
 8007c52:	68a3      	ldr	r3, [r4, #8]
 8007c54:	6922      	ldr	r2, [r4, #16]
 8007c56:	bf0c      	ite	eq
 8007c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c5c:	2500      	movne	r5, #0
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	bfc4      	itt	gt
 8007c62:	1a9b      	subgt	r3, r3, r2
 8007c64:	18ed      	addgt	r5, r5, r3
 8007c66:	2600      	movs	r6, #0
 8007c68:	341a      	adds	r4, #26
 8007c6a:	42b5      	cmp	r5, r6
 8007c6c:	d11a      	bne.n	8007ca4 <_printf_common+0xc8>
 8007c6e:	2000      	movs	r0, #0
 8007c70:	e008      	b.n	8007c84 <_printf_common+0xa8>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4652      	mov	r2, sl
 8007c76:	4649      	mov	r1, r9
 8007c78:	4638      	mov	r0, r7
 8007c7a:	47c0      	blx	r8
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d103      	bne.n	8007c88 <_printf_common+0xac>
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c88:	3501      	adds	r5, #1
 8007c8a:	e7c6      	b.n	8007c1a <_printf_common+0x3e>
 8007c8c:	18e1      	adds	r1, r4, r3
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	2030      	movs	r0, #48	; 0x30
 8007c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c96:	4422      	add	r2, r4
 8007c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	e7c7      	b.n	8007c34 <_printf_common+0x58>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4649      	mov	r1, r9
 8007caa:	4638      	mov	r0, r7
 8007cac:	47c0      	blx	r8
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d0e6      	beq.n	8007c80 <_printf_common+0xa4>
 8007cb2:	3601      	adds	r6, #1
 8007cb4:	e7d9      	b.n	8007c6a <_printf_common+0x8e>
	...

08007cb8 <_printf_i>:
 8007cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	7e0f      	ldrb	r7, [r1, #24]
 8007cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc0:	2f78      	cmp	r7, #120	; 0x78
 8007cc2:	4691      	mov	r9, r2
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	469a      	mov	sl, r3
 8007cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cce:	d807      	bhi.n	8007ce0 <_printf_i+0x28>
 8007cd0:	2f62      	cmp	r7, #98	; 0x62
 8007cd2:	d80a      	bhi.n	8007cea <_printf_i+0x32>
 8007cd4:	2f00      	cmp	r7, #0
 8007cd6:	f000 80d8 	beq.w	8007e8a <_printf_i+0x1d2>
 8007cda:	2f58      	cmp	r7, #88	; 0x58
 8007cdc:	f000 80a3 	beq.w	8007e26 <_printf_i+0x16e>
 8007ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ce8:	e03a      	b.n	8007d60 <_printf_i+0xa8>
 8007cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cee:	2b15      	cmp	r3, #21
 8007cf0:	d8f6      	bhi.n	8007ce0 <_printf_i+0x28>
 8007cf2:	a101      	add	r1, pc, #4	; (adr r1, 8007cf8 <_printf_i+0x40>)
 8007cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cf8:	08007d51 	.word	0x08007d51
 8007cfc:	08007d65 	.word	0x08007d65
 8007d00:	08007ce1 	.word	0x08007ce1
 8007d04:	08007ce1 	.word	0x08007ce1
 8007d08:	08007ce1 	.word	0x08007ce1
 8007d0c:	08007ce1 	.word	0x08007ce1
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007ce1 	.word	0x08007ce1
 8007d18:	08007ce1 	.word	0x08007ce1
 8007d1c:	08007ce1 	.word	0x08007ce1
 8007d20:	08007ce1 	.word	0x08007ce1
 8007d24:	08007e71 	.word	0x08007e71
 8007d28:	08007d95 	.word	0x08007d95
 8007d2c:	08007e53 	.word	0x08007e53
 8007d30:	08007ce1 	.word	0x08007ce1
 8007d34:	08007ce1 	.word	0x08007ce1
 8007d38:	08007e93 	.word	0x08007e93
 8007d3c:	08007ce1 	.word	0x08007ce1
 8007d40:	08007d95 	.word	0x08007d95
 8007d44:	08007ce1 	.word	0x08007ce1
 8007d48:	08007ce1 	.word	0x08007ce1
 8007d4c:	08007e5b 	.word	0x08007e5b
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	1d1a      	adds	r2, r3, #4
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	602a      	str	r2, [r5, #0]
 8007d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d60:	2301      	movs	r3, #1
 8007d62:	e0a3      	b.n	8007eac <_printf_i+0x1f4>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	6829      	ldr	r1, [r5, #0]
 8007d68:	0606      	lsls	r6, r0, #24
 8007d6a:	f101 0304 	add.w	r3, r1, #4
 8007d6e:	d50a      	bpl.n	8007d86 <_printf_i+0xce>
 8007d70:	680e      	ldr	r6, [r1, #0]
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	2e00      	cmp	r6, #0
 8007d76:	da03      	bge.n	8007d80 <_printf_i+0xc8>
 8007d78:	232d      	movs	r3, #45	; 0x2d
 8007d7a:	4276      	negs	r6, r6
 8007d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d80:	485e      	ldr	r0, [pc, #376]	; (8007efc <_printf_i+0x244>)
 8007d82:	230a      	movs	r3, #10
 8007d84:	e019      	b.n	8007dba <_printf_i+0x102>
 8007d86:	680e      	ldr	r6, [r1, #0]
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d8e:	bf18      	it	ne
 8007d90:	b236      	sxthne	r6, r6
 8007d92:	e7ef      	b.n	8007d74 <_printf_i+0xbc>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	6029      	str	r1, [r5, #0]
 8007d9c:	0601      	lsls	r1, r0, #24
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0xec>
 8007da0:	681e      	ldr	r6, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0xf2>
 8007da4:	0646      	lsls	r6, r0, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0xe8>
 8007da8:	881e      	ldrh	r6, [r3, #0]
 8007daa:	4854      	ldr	r0, [pc, #336]	; (8007efc <_printf_i+0x244>)
 8007dac:	2f6f      	cmp	r7, #111	; 0x6f
 8007dae:	bf0c      	ite	eq
 8007db0:	2308      	moveq	r3, #8
 8007db2:	230a      	movne	r3, #10
 8007db4:	2100      	movs	r1, #0
 8007db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dba:	6865      	ldr	r5, [r4, #4]
 8007dbc:	60a5      	str	r5, [r4, #8]
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	bfa2      	ittt	ge
 8007dc2:	6821      	ldrge	r1, [r4, #0]
 8007dc4:	f021 0104 	bicge.w	r1, r1, #4
 8007dc8:	6021      	strge	r1, [r4, #0]
 8007dca:	b90e      	cbnz	r6, 8007dd0 <_printf_i+0x118>
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	d04d      	beq.n	8007e6c <_printf_i+0x1b4>
 8007dd0:	4615      	mov	r5, r2
 8007dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dda:	5dc7      	ldrb	r7, [r0, r7]
 8007ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007de0:	4637      	mov	r7, r6
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	460e      	mov	r6, r1
 8007de6:	d9f4      	bls.n	8007dd2 <_printf_i+0x11a>
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d10b      	bne.n	8007e04 <_printf_i+0x14c>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	07de      	lsls	r6, r3, #31
 8007df0:	d508      	bpl.n	8007e04 <_printf_i+0x14c>
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6861      	ldr	r1, [r4, #4]
 8007df6:	4299      	cmp	r1, r3
 8007df8:	bfde      	ittt	le
 8007dfa:	2330      	movle	r3, #48	; 0x30
 8007dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e04:	1b52      	subs	r2, r2, r5
 8007e06:	6122      	str	r2, [r4, #16]
 8007e08:	f8cd a000 	str.w	sl, [sp]
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	aa03      	add	r2, sp, #12
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7ff fee2 	bl	8007bdc <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d14c      	bne.n	8007eb6 <_printf_i+0x1fe>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	b004      	add	sp, #16
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	4835      	ldr	r0, [pc, #212]	; (8007efc <_printf_i+0x244>)
 8007e28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e2c:	6829      	ldr	r1, [r5, #0]
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e34:	6029      	str	r1, [r5, #0]
 8007e36:	061d      	lsls	r5, r3, #24
 8007e38:	d514      	bpl.n	8007e64 <_printf_i+0x1ac>
 8007e3a:	07df      	lsls	r7, r3, #31
 8007e3c:	bf44      	itt	mi
 8007e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e42:	6023      	strmi	r3, [r4, #0]
 8007e44:	b91e      	cbnz	r6, 8007e4e <_printf_i+0x196>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	f023 0320 	bic.w	r3, r3, #32
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	2310      	movs	r3, #16
 8007e50:	e7b0      	b.n	8007db4 <_printf_i+0xfc>
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	f043 0320 	orr.w	r3, r3, #32
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	2378      	movs	r3, #120	; 0x78
 8007e5c:	4828      	ldr	r0, [pc, #160]	; (8007f00 <_printf_i+0x248>)
 8007e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e62:	e7e3      	b.n	8007e2c <_printf_i+0x174>
 8007e64:	0659      	lsls	r1, r3, #25
 8007e66:	bf48      	it	mi
 8007e68:	b2b6      	uxthmi	r6, r6
 8007e6a:	e7e6      	b.n	8007e3a <_printf_i+0x182>
 8007e6c:	4615      	mov	r5, r2
 8007e6e:	e7bb      	b.n	8007de8 <_printf_i+0x130>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	6826      	ldr	r6, [r4, #0]
 8007e74:	6961      	ldr	r1, [r4, #20]
 8007e76:	1d18      	adds	r0, r3, #4
 8007e78:	6028      	str	r0, [r5, #0]
 8007e7a:	0635      	lsls	r5, r6, #24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	d501      	bpl.n	8007e84 <_printf_i+0x1cc>
 8007e80:	6019      	str	r1, [r3, #0]
 8007e82:	e002      	b.n	8007e8a <_printf_i+0x1d2>
 8007e84:	0670      	lsls	r0, r6, #25
 8007e86:	d5fb      	bpl.n	8007e80 <_printf_i+0x1c8>
 8007e88:	8019      	strh	r1, [r3, #0]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	4615      	mov	r5, r2
 8007e90:	e7ba      	b.n	8007e08 <_printf_i+0x150>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	602a      	str	r2, [r5, #0]
 8007e98:	681d      	ldr	r5, [r3, #0]
 8007e9a:	6862      	ldr	r2, [r4, #4]
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	f7f8 f9a6 	bl	80001f0 <memchr>
 8007ea4:	b108      	cbz	r0, 8007eaa <_printf_i+0x1f2>
 8007ea6:	1b40      	subs	r0, r0, r5
 8007ea8:	6060      	str	r0, [r4, #4]
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb4:	e7a8      	b.n	8007e08 <_printf_i+0x150>
 8007eb6:	6923      	ldr	r3, [r4, #16]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	47d0      	blx	sl
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d0ab      	beq.n	8007e1c <_printf_i+0x164>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	079b      	lsls	r3, r3, #30
 8007ec8:	d413      	bmi.n	8007ef2 <_printf_i+0x23a>
 8007eca:	68e0      	ldr	r0, [r4, #12]
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	4298      	cmp	r0, r3
 8007ed0:	bfb8      	it	lt
 8007ed2:	4618      	movlt	r0, r3
 8007ed4:	e7a4      	b.n	8007e20 <_printf_i+0x168>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4632      	mov	r2, r6
 8007eda:	4649      	mov	r1, r9
 8007edc:	4640      	mov	r0, r8
 8007ede:	47d0      	blx	sl
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d09b      	beq.n	8007e1c <_printf_i+0x164>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	9903      	ldr	r1, [sp, #12]
 8007eea:	1a5b      	subs	r3, r3, r1
 8007eec:	42ab      	cmp	r3, r5
 8007eee:	dcf2      	bgt.n	8007ed6 <_printf_i+0x21e>
 8007ef0:	e7eb      	b.n	8007eca <_printf_i+0x212>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	f104 0619 	add.w	r6, r4, #25
 8007ef8:	e7f5      	b.n	8007ee6 <_printf_i+0x22e>
 8007efa:	bf00      	nop
 8007efc:	0800aad2 	.word	0x0800aad2
 8007f00:	0800aae3 	.word	0x0800aae3

08007f04 <iprintf>:
 8007f04:	b40f      	push	{r0, r1, r2, r3}
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <iprintf+0x2c>)
 8007f08:	b513      	push	{r0, r1, r4, lr}
 8007f0a:	681c      	ldr	r4, [r3, #0]
 8007f0c:	b124      	cbz	r4, 8007f18 <iprintf+0x14>
 8007f0e:	69a3      	ldr	r3, [r4, #24]
 8007f10:	b913      	cbnz	r3, 8007f18 <iprintf+0x14>
 8007f12:	4620      	mov	r0, r4
 8007f14:	f001 f910 	bl	8009138 <__sinit>
 8007f18:	ab05      	add	r3, sp, #20
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	68a1      	ldr	r1, [r4, #8]
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	4620      	mov	r0, r4
 8007f22:	f002 f829 	bl	8009f78 <_vfiprintf_r>
 8007f26:	b002      	add	sp, #8
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	b004      	add	sp, #16
 8007f2e:	4770      	bx	lr
 8007f30:	20000018 	.word	0x20000018

08007f34 <putchar>:
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <putchar+0x28>)
 8007f36:	b513      	push	{r0, r1, r4, lr}
 8007f38:	681c      	ldr	r4, [r3, #0]
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	b134      	cbz	r4, 8007f4c <putchar+0x18>
 8007f3e:	69a3      	ldr	r3, [r4, #24]
 8007f40:	b923      	cbnz	r3, 8007f4c <putchar+0x18>
 8007f42:	9001      	str	r0, [sp, #4]
 8007f44:	4620      	mov	r0, r4
 8007f46:	f001 f8f7 	bl	8009138 <__sinit>
 8007f4a:	9901      	ldr	r1, [sp, #4]
 8007f4c:	68a2      	ldr	r2, [r4, #8]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	b002      	add	sp, #8
 8007f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f56:	f002 b93f 	b.w	800a1d8 <_putc_r>
 8007f5a:	bf00      	nop
 8007f5c:	20000018 	.word	0x20000018

08007f60 <_puts_r>:
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	460e      	mov	r6, r1
 8007f64:	4605      	mov	r5, r0
 8007f66:	b118      	cbz	r0, 8007f70 <_puts_r+0x10>
 8007f68:	6983      	ldr	r3, [r0, #24]
 8007f6a:	b90b      	cbnz	r3, 8007f70 <_puts_r+0x10>
 8007f6c:	f001 f8e4 	bl	8009138 <__sinit>
 8007f70:	69ab      	ldr	r3, [r5, #24]
 8007f72:	68ac      	ldr	r4, [r5, #8]
 8007f74:	b913      	cbnz	r3, 8007f7c <_puts_r+0x1c>
 8007f76:	4628      	mov	r0, r5
 8007f78:	f001 f8de 	bl	8009138 <__sinit>
 8007f7c:	4b2c      	ldr	r3, [pc, #176]	; (8008030 <_puts_r+0xd0>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d120      	bne.n	8007fc4 <_puts_r+0x64>
 8007f82:	686c      	ldr	r4, [r5, #4]
 8007f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f86:	07db      	lsls	r3, r3, #31
 8007f88:	d405      	bmi.n	8007f96 <_puts_r+0x36>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	0598      	lsls	r0, r3, #22
 8007f8e:	d402      	bmi.n	8007f96 <_puts_r+0x36>
 8007f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f92:	f001 f974 	bl	800927e <__retarget_lock_acquire_recursive>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	0719      	lsls	r1, r3, #28
 8007f9a:	d51d      	bpl.n	8007fd8 <_puts_r+0x78>
 8007f9c:	6923      	ldr	r3, [r4, #16]
 8007f9e:	b1db      	cbz	r3, 8007fd8 <_puts_r+0x78>
 8007fa0:	3e01      	subs	r6, #1
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	60a3      	str	r3, [r4, #8]
 8007fac:	bb39      	cbnz	r1, 8007ffe <_puts_r+0x9e>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	da38      	bge.n	8008024 <_puts_r+0xc4>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	210a      	movs	r1, #10
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f868 	bl	800808c <__swbuf_r>
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	d011      	beq.n	8007fe4 <_puts_r+0x84>
 8007fc0:	250a      	movs	r5, #10
 8007fc2:	e011      	b.n	8007fe8 <_puts_r+0x88>
 8007fc4:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <_puts_r+0xd4>)
 8007fc6:	429c      	cmp	r4, r3
 8007fc8:	d101      	bne.n	8007fce <_puts_r+0x6e>
 8007fca:	68ac      	ldr	r4, [r5, #8]
 8007fcc:	e7da      	b.n	8007f84 <_puts_r+0x24>
 8007fce:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <_puts_r+0xd8>)
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	bf08      	it	eq
 8007fd4:	68ec      	ldreq	r4, [r5, #12]
 8007fd6:	e7d5      	b.n	8007f84 <_puts_r+0x24>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f000 f8a8 	bl	8008130 <__swsetup_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d0dd      	beq.n	8007fa0 <_puts_r+0x40>
 8007fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fe8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fea:	07da      	lsls	r2, r3, #31
 8007fec:	d405      	bmi.n	8007ffa <_puts_r+0x9a>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	059b      	lsls	r3, r3, #22
 8007ff2:	d402      	bmi.n	8007ffa <_puts_r+0x9a>
 8007ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff6:	f001 f943 	bl	8009280 <__retarget_lock_release_recursive>
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	bd70      	pop	{r4, r5, r6, pc}
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da04      	bge.n	800800c <_puts_r+0xac>
 8008002:	69a2      	ldr	r2, [r4, #24]
 8008004:	429a      	cmp	r2, r3
 8008006:	dc06      	bgt.n	8008016 <_puts_r+0xb6>
 8008008:	290a      	cmp	r1, #10
 800800a:	d004      	beq.n	8008016 <_puts_r+0xb6>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	6022      	str	r2, [r4, #0]
 8008012:	7019      	strb	r1, [r3, #0]
 8008014:	e7c5      	b.n	8007fa2 <_puts_r+0x42>
 8008016:	4622      	mov	r2, r4
 8008018:	4628      	mov	r0, r5
 800801a:	f000 f837 	bl	800808c <__swbuf_r>
 800801e:	3001      	adds	r0, #1
 8008020:	d1bf      	bne.n	8007fa2 <_puts_r+0x42>
 8008022:	e7df      	b.n	8007fe4 <_puts_r+0x84>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	250a      	movs	r5, #10
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	701d      	strb	r5, [r3, #0]
 800802e:	e7db      	b.n	8007fe8 <_puts_r+0x88>
 8008030:	0800aba4 	.word	0x0800aba4
 8008034:	0800abc4 	.word	0x0800abc4
 8008038:	0800ab84 	.word	0x0800ab84

0800803c <puts>:
 800803c:	4b02      	ldr	r3, [pc, #8]	; (8008048 <puts+0xc>)
 800803e:	4601      	mov	r1, r0
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f7ff bf8d 	b.w	8007f60 <_puts_r>
 8008046:	bf00      	nop
 8008048:	20000018 	.word	0x20000018

0800804c <siprintf>:
 800804c:	b40e      	push	{r1, r2, r3}
 800804e:	b500      	push	{lr}
 8008050:	b09c      	sub	sp, #112	; 0x70
 8008052:	ab1d      	add	r3, sp, #116	; 0x74
 8008054:	9002      	str	r0, [sp, #8]
 8008056:	9006      	str	r0, [sp, #24]
 8008058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800805c:	4809      	ldr	r0, [pc, #36]	; (8008084 <siprintf+0x38>)
 800805e:	9107      	str	r1, [sp, #28]
 8008060:	9104      	str	r1, [sp, #16]
 8008062:	4909      	ldr	r1, [pc, #36]	; (8008088 <siprintf+0x3c>)
 8008064:	f853 2b04 	ldr.w	r2, [r3], #4
 8008068:	9105      	str	r1, [sp, #20]
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	a902      	add	r1, sp, #8
 8008070:	f001 fe58 	bl	8009d24 <_svfiprintf_r>
 8008074:	9b02      	ldr	r3, [sp, #8]
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	b01c      	add	sp, #112	; 0x70
 800807c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008080:	b003      	add	sp, #12
 8008082:	4770      	bx	lr
 8008084:	20000018 	.word	0x20000018
 8008088:	ffff0208 	.word	0xffff0208

0800808c <__swbuf_r>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	460e      	mov	r6, r1
 8008090:	4614      	mov	r4, r2
 8008092:	4605      	mov	r5, r0
 8008094:	b118      	cbz	r0, 800809e <__swbuf_r+0x12>
 8008096:	6983      	ldr	r3, [r0, #24]
 8008098:	b90b      	cbnz	r3, 800809e <__swbuf_r+0x12>
 800809a:	f001 f84d 	bl	8009138 <__sinit>
 800809e:	4b21      	ldr	r3, [pc, #132]	; (8008124 <__swbuf_r+0x98>)
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d12b      	bne.n	80080fc <__swbuf_r+0x70>
 80080a4:	686c      	ldr	r4, [r5, #4]
 80080a6:	69a3      	ldr	r3, [r4, #24]
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	89a3      	ldrh	r3, [r4, #12]
 80080ac:	071a      	lsls	r2, r3, #28
 80080ae:	d52f      	bpl.n	8008110 <__swbuf_r+0x84>
 80080b0:	6923      	ldr	r3, [r4, #16]
 80080b2:	b36b      	cbz	r3, 8008110 <__swbuf_r+0x84>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	6820      	ldr	r0, [r4, #0]
 80080b8:	1ac0      	subs	r0, r0, r3
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	b2f6      	uxtb	r6, r6
 80080be:	4283      	cmp	r3, r0
 80080c0:	4637      	mov	r7, r6
 80080c2:	dc04      	bgt.n	80080ce <__swbuf_r+0x42>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 ffa2 	bl	8009010 <_fflush_r>
 80080cc:	bb30      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080ce:	68a3      	ldr	r3, [r4, #8]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	701e      	strb	r6, [r3, #0]
 80080dc:	6963      	ldr	r3, [r4, #20]
 80080de:	3001      	adds	r0, #1
 80080e0:	4283      	cmp	r3, r0
 80080e2:	d004      	beq.n	80080ee <__swbuf_r+0x62>
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d506      	bpl.n	80080f8 <__swbuf_r+0x6c>
 80080ea:	2e0a      	cmp	r6, #10
 80080ec:	d104      	bne.n	80080f8 <__swbuf_r+0x6c>
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 ff8d 	bl	8009010 <_fflush_r>
 80080f6:	b988      	cbnz	r0, 800811c <__swbuf_r+0x90>
 80080f8:	4638      	mov	r0, r7
 80080fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <__swbuf_r+0x9c>)
 80080fe:	429c      	cmp	r4, r3
 8008100:	d101      	bne.n	8008106 <__swbuf_r+0x7a>
 8008102:	68ac      	ldr	r4, [r5, #8]
 8008104:	e7cf      	b.n	80080a6 <__swbuf_r+0x1a>
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <__swbuf_r+0xa0>)
 8008108:	429c      	cmp	r4, r3
 800810a:	bf08      	it	eq
 800810c:	68ec      	ldreq	r4, [r5, #12]
 800810e:	e7ca      	b.n	80080a6 <__swbuf_r+0x1a>
 8008110:	4621      	mov	r1, r4
 8008112:	4628      	mov	r0, r5
 8008114:	f000 f80c 	bl	8008130 <__swsetup_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	d0cb      	beq.n	80080b4 <__swbuf_r+0x28>
 800811c:	f04f 37ff 	mov.w	r7, #4294967295
 8008120:	e7ea      	b.n	80080f8 <__swbuf_r+0x6c>
 8008122:	bf00      	nop
 8008124:	0800aba4 	.word	0x0800aba4
 8008128:	0800abc4 	.word	0x0800abc4
 800812c:	0800ab84 	.word	0x0800ab84

08008130 <__swsetup_r>:
 8008130:	4b32      	ldr	r3, [pc, #200]	; (80081fc <__swsetup_r+0xcc>)
 8008132:	b570      	push	{r4, r5, r6, lr}
 8008134:	681d      	ldr	r5, [r3, #0]
 8008136:	4606      	mov	r6, r0
 8008138:	460c      	mov	r4, r1
 800813a:	b125      	cbz	r5, 8008146 <__swsetup_r+0x16>
 800813c:	69ab      	ldr	r3, [r5, #24]
 800813e:	b913      	cbnz	r3, 8008146 <__swsetup_r+0x16>
 8008140:	4628      	mov	r0, r5
 8008142:	f000 fff9 	bl	8009138 <__sinit>
 8008146:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <__swsetup_r+0xd0>)
 8008148:	429c      	cmp	r4, r3
 800814a:	d10f      	bne.n	800816c <__swsetup_r+0x3c>
 800814c:	686c      	ldr	r4, [r5, #4]
 800814e:	89a3      	ldrh	r3, [r4, #12]
 8008150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008154:	0719      	lsls	r1, r3, #28
 8008156:	d42c      	bmi.n	80081b2 <__swsetup_r+0x82>
 8008158:	06dd      	lsls	r5, r3, #27
 800815a:	d411      	bmi.n	8008180 <__swsetup_r+0x50>
 800815c:	2309      	movs	r3, #9
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008164:	81a3      	strh	r3, [r4, #12]
 8008166:	f04f 30ff 	mov.w	r0, #4294967295
 800816a:	e03e      	b.n	80081ea <__swsetup_r+0xba>
 800816c:	4b25      	ldr	r3, [pc, #148]	; (8008204 <__swsetup_r+0xd4>)
 800816e:	429c      	cmp	r4, r3
 8008170:	d101      	bne.n	8008176 <__swsetup_r+0x46>
 8008172:	68ac      	ldr	r4, [r5, #8]
 8008174:	e7eb      	b.n	800814e <__swsetup_r+0x1e>
 8008176:	4b24      	ldr	r3, [pc, #144]	; (8008208 <__swsetup_r+0xd8>)
 8008178:	429c      	cmp	r4, r3
 800817a:	bf08      	it	eq
 800817c:	68ec      	ldreq	r4, [r5, #12]
 800817e:	e7e6      	b.n	800814e <__swsetup_r+0x1e>
 8008180:	0758      	lsls	r0, r3, #29
 8008182:	d512      	bpl.n	80081aa <__swsetup_r+0x7a>
 8008184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008186:	b141      	cbz	r1, 800819a <__swsetup_r+0x6a>
 8008188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818c:	4299      	cmp	r1, r3
 800818e:	d002      	beq.n	8008196 <__swsetup_r+0x66>
 8008190:	4630      	mov	r0, r6
 8008192:	f001 fc8b 	bl	8009aac <_free_r>
 8008196:	2300      	movs	r3, #0
 8008198:	6363      	str	r3, [r4, #52]	; 0x34
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081a0:	81a3      	strh	r3, [r4, #12]
 80081a2:	2300      	movs	r3, #0
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	6923      	ldr	r3, [r4, #16]
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f043 0308 	orr.w	r3, r3, #8
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	b94b      	cbnz	r3, 80081ca <__swsetup_r+0x9a>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c0:	d003      	beq.n	80081ca <__swsetup_r+0x9a>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4630      	mov	r0, r6
 80081c6:	f001 f881 	bl	80092cc <__smakebuf_r>
 80081ca:	89a0      	ldrh	r0, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	f010 0301 	ands.w	r3, r0, #1
 80081d4:	d00a      	beq.n	80081ec <__swsetup_r+0xbc>
 80081d6:	2300      	movs	r3, #0
 80081d8:	60a3      	str	r3, [r4, #8]
 80081da:	6963      	ldr	r3, [r4, #20]
 80081dc:	425b      	negs	r3, r3
 80081de:	61a3      	str	r3, [r4, #24]
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	b943      	cbnz	r3, 80081f6 <__swsetup_r+0xc6>
 80081e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e8:	d1ba      	bne.n	8008160 <__swsetup_r+0x30>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	0781      	lsls	r1, r0, #30
 80081ee:	bf58      	it	pl
 80081f0:	6963      	ldrpl	r3, [r4, #20]
 80081f2:	60a3      	str	r3, [r4, #8]
 80081f4:	e7f4      	b.n	80081e0 <__swsetup_r+0xb0>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e7f7      	b.n	80081ea <__swsetup_r+0xba>
 80081fa:	bf00      	nop
 80081fc:	20000018 	.word	0x20000018
 8008200:	0800aba4 	.word	0x0800aba4
 8008204:	0800abc4 	.word	0x0800abc4
 8008208:	0800ab84 	.word	0x0800ab84

0800820c <quorem>:
 800820c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	6903      	ldr	r3, [r0, #16]
 8008212:	690c      	ldr	r4, [r1, #16]
 8008214:	42a3      	cmp	r3, r4
 8008216:	4607      	mov	r7, r0
 8008218:	f2c0 8081 	blt.w	800831e <quorem+0x112>
 800821c:	3c01      	subs	r4, #1
 800821e:	f101 0814 	add.w	r8, r1, #20
 8008222:	f100 0514 	add.w	r5, r0, #20
 8008226:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008234:	3301      	adds	r3, #1
 8008236:	429a      	cmp	r2, r3
 8008238:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800823c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008240:	fbb2 f6f3 	udiv	r6, r2, r3
 8008244:	d331      	bcc.n	80082aa <quorem+0x9e>
 8008246:	f04f 0e00 	mov.w	lr, #0
 800824a:	4640      	mov	r0, r8
 800824c:	46ac      	mov	ip, r5
 800824e:	46f2      	mov	sl, lr
 8008250:	f850 2b04 	ldr.w	r2, [r0], #4
 8008254:	b293      	uxth	r3, r2
 8008256:	fb06 e303 	mla	r3, r6, r3, lr
 800825a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800825e:	b29b      	uxth	r3, r3
 8008260:	ebaa 0303 	sub.w	r3, sl, r3
 8008264:	f8dc a000 	ldr.w	sl, [ip]
 8008268:	0c12      	lsrs	r2, r2, #16
 800826a:	fa13 f38a 	uxtah	r3, r3, sl
 800826e:	fb06 e202 	mla	r2, r6, r2, lr
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	9b00      	ldr	r3, [sp, #0]
 8008276:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800827a:	b292      	uxth	r2, r2
 800827c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008284:	f8bd 3000 	ldrh.w	r3, [sp]
 8008288:	4581      	cmp	r9, r0
 800828a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800828e:	f84c 3b04 	str.w	r3, [ip], #4
 8008292:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008296:	d2db      	bcs.n	8008250 <quorem+0x44>
 8008298:	f855 300b 	ldr.w	r3, [r5, fp]
 800829c:	b92b      	cbnz	r3, 80082aa <quorem+0x9e>
 800829e:	9b01      	ldr	r3, [sp, #4]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	429d      	cmp	r5, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	d32e      	bcc.n	8008306 <quorem+0xfa>
 80082a8:	613c      	str	r4, [r7, #16]
 80082aa:	4638      	mov	r0, r7
 80082ac:	f001 fae6 	bl	800987c <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	db24      	blt.n	80082fe <quorem+0xf2>
 80082b4:	3601      	adds	r6, #1
 80082b6:	4628      	mov	r0, r5
 80082b8:	f04f 0c00 	mov.w	ip, #0
 80082bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80082c0:	f8d0 e000 	ldr.w	lr, [r0]
 80082c4:	b293      	uxth	r3, r2
 80082c6:	ebac 0303 	sub.w	r3, ip, r3
 80082ca:	0c12      	lsrs	r2, r2, #16
 80082cc:	fa13 f38e 	uxtah	r3, r3, lr
 80082d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d8:	b29b      	uxth	r3, r3
 80082da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082de:	45c1      	cmp	r9, r8
 80082e0:	f840 3b04 	str.w	r3, [r0], #4
 80082e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082e8:	d2e8      	bcs.n	80082bc <quorem+0xb0>
 80082ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082f2:	b922      	cbnz	r2, 80082fe <quorem+0xf2>
 80082f4:	3b04      	subs	r3, #4
 80082f6:	429d      	cmp	r5, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	d30a      	bcc.n	8008312 <quorem+0x106>
 80082fc:	613c      	str	r4, [r7, #16]
 80082fe:	4630      	mov	r0, r6
 8008300:	b003      	add	sp, #12
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	3b04      	subs	r3, #4
 800830a:	2a00      	cmp	r2, #0
 800830c:	d1cc      	bne.n	80082a8 <quorem+0x9c>
 800830e:	3c01      	subs	r4, #1
 8008310:	e7c7      	b.n	80082a2 <quorem+0x96>
 8008312:	6812      	ldr	r2, [r2, #0]
 8008314:	3b04      	subs	r3, #4
 8008316:	2a00      	cmp	r2, #0
 8008318:	d1f0      	bne.n	80082fc <quorem+0xf0>
 800831a:	3c01      	subs	r4, #1
 800831c:	e7eb      	b.n	80082f6 <quorem+0xea>
 800831e:	2000      	movs	r0, #0
 8008320:	e7ee      	b.n	8008300 <quorem+0xf4>
 8008322:	0000      	movs	r0, r0
 8008324:	0000      	movs	r0, r0
	...

08008328 <_dtoa_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	ed2d 8b04 	vpush	{d8-d9}
 8008330:	ec57 6b10 	vmov	r6, r7, d0
 8008334:	b093      	sub	sp, #76	; 0x4c
 8008336:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008338:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800833c:	9106      	str	r1, [sp, #24]
 800833e:	ee10 aa10 	vmov	sl, s0
 8008342:	4604      	mov	r4, r0
 8008344:	9209      	str	r2, [sp, #36]	; 0x24
 8008346:	930c      	str	r3, [sp, #48]	; 0x30
 8008348:	46bb      	mov	fp, r7
 800834a:	b975      	cbnz	r5, 800836a <_dtoa_r+0x42>
 800834c:	2010      	movs	r0, #16
 800834e:	f000 fffd 	bl	800934c <malloc>
 8008352:	4602      	mov	r2, r0
 8008354:	6260      	str	r0, [r4, #36]	; 0x24
 8008356:	b920      	cbnz	r0, 8008362 <_dtoa_r+0x3a>
 8008358:	4ba7      	ldr	r3, [pc, #668]	; (80085f8 <_dtoa_r+0x2d0>)
 800835a:	21ea      	movs	r1, #234	; 0xea
 800835c:	48a7      	ldr	r0, [pc, #668]	; (80085fc <_dtoa_r+0x2d4>)
 800835e:	f001 ffe9 	bl	800a334 <__assert_func>
 8008362:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008366:	6005      	str	r5, [r0, #0]
 8008368:	60c5      	str	r5, [r0, #12]
 800836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836c:	6819      	ldr	r1, [r3, #0]
 800836e:	b151      	cbz	r1, 8008386 <_dtoa_r+0x5e>
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	604a      	str	r2, [r1, #4]
 8008374:	2301      	movs	r3, #1
 8008376:	4093      	lsls	r3, r2
 8008378:	608b      	str	r3, [r1, #8]
 800837a:	4620      	mov	r0, r4
 800837c:	f001 f83c 	bl	80093f8 <_Bfree>
 8008380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	1e3b      	subs	r3, r7, #0
 8008388:	bfaa      	itet	ge
 800838a:	2300      	movge	r3, #0
 800838c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008390:	f8c8 3000 	strge.w	r3, [r8]
 8008394:	4b9a      	ldr	r3, [pc, #616]	; (8008600 <_dtoa_r+0x2d8>)
 8008396:	bfbc      	itt	lt
 8008398:	2201      	movlt	r2, #1
 800839a:	f8c8 2000 	strlt.w	r2, [r8]
 800839e:	ea33 030b 	bics.w	r3, r3, fp
 80083a2:	d11b      	bne.n	80083dc <_dtoa_r+0xb4>
 80083a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083b0:	4333      	orrs	r3, r6
 80083b2:	f000 8592 	beq.w	8008eda <_dtoa_r+0xbb2>
 80083b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b8:	b963      	cbnz	r3, 80083d4 <_dtoa_r+0xac>
 80083ba:	4b92      	ldr	r3, [pc, #584]	; (8008604 <_dtoa_r+0x2dc>)
 80083bc:	e022      	b.n	8008404 <_dtoa_r+0xdc>
 80083be:	4b92      	ldr	r3, [pc, #584]	; (8008608 <_dtoa_r+0x2e0>)
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	3308      	adds	r3, #8
 80083c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	9801      	ldr	r0, [sp, #4]
 80083ca:	b013      	add	sp, #76	; 0x4c
 80083cc:	ecbd 8b04 	vpop	{d8-d9}
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	4b8b      	ldr	r3, [pc, #556]	; (8008604 <_dtoa_r+0x2dc>)
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	3303      	adds	r3, #3
 80083da:	e7f3      	b.n	80083c4 <_dtoa_r+0x9c>
 80083dc:	2200      	movs	r2, #0
 80083de:	2300      	movs	r3, #0
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	f7f8 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e8:	ec4b ab19 	vmov	d9, sl, fp
 80083ec:	4680      	mov	r8, r0
 80083ee:	b158      	cbz	r0, 8008408 <_dtoa_r+0xe0>
 80083f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083f2:	2301      	movs	r3, #1
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 856b 	beq.w	8008ed4 <_dtoa_r+0xbac>
 80083fe:	4883      	ldr	r0, [pc, #524]	; (800860c <_dtoa_r+0x2e4>)
 8008400:	6018      	str	r0, [r3, #0]
 8008402:	1e43      	subs	r3, r0, #1
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	e7df      	b.n	80083c8 <_dtoa_r+0xa0>
 8008408:	ec4b ab10 	vmov	d0, sl, fp
 800840c:	aa10      	add	r2, sp, #64	; 0x40
 800840e:	a911      	add	r1, sp, #68	; 0x44
 8008410:	4620      	mov	r0, r4
 8008412:	f001 fad9 	bl	80099c8 <__d2b>
 8008416:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800841a:	ee08 0a10 	vmov	s16, r0
 800841e:	2d00      	cmp	r5, #0
 8008420:	f000 8084 	beq.w	800852c <_dtoa_r+0x204>
 8008424:	ee19 3a90 	vmov	r3, s19
 8008428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800842c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008430:	4656      	mov	r6, sl
 8008432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800843a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800843e:	4b74      	ldr	r3, [pc, #464]	; (8008610 <_dtoa_r+0x2e8>)
 8008440:	2200      	movs	r2, #0
 8008442:	4630      	mov	r0, r6
 8008444:	4639      	mov	r1, r7
 8008446:	f7f7 ff27 	bl	8000298 <__aeabi_dsub>
 800844a:	a365      	add	r3, pc, #404	; (adr r3, 80085e0 <_dtoa_r+0x2b8>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f8 f8da 	bl	8000608 <__aeabi_dmul>
 8008454:	a364      	add	r3, pc, #400	; (adr r3, 80085e8 <_dtoa_r+0x2c0>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f7 ff1f 	bl	800029c <__adddf3>
 800845e:	4606      	mov	r6, r0
 8008460:	4628      	mov	r0, r5
 8008462:	460f      	mov	r7, r1
 8008464:	f7f8 f866 	bl	8000534 <__aeabi_i2d>
 8008468:	a361      	add	r3, pc, #388	; (adr r3, 80085f0 <_dtoa_r+0x2c8>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f7 ff0f 	bl	800029c <__adddf3>
 800847e:	4606      	mov	r6, r0
 8008480:	460f      	mov	r7, r1
 8008482:	f7f8 fb71 	bl	8000b68 <__aeabi_d2iz>
 8008486:	2200      	movs	r2, #0
 8008488:	9000      	str	r0, [sp, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	4630      	mov	r0, r6
 800848e:	4639      	mov	r1, r7
 8008490:	f7f8 fb2c 	bl	8000aec <__aeabi_dcmplt>
 8008494:	b150      	cbz	r0, 80084ac <_dtoa_r+0x184>
 8008496:	9800      	ldr	r0, [sp, #0]
 8008498:	f7f8 f84c 	bl	8000534 <__aeabi_i2d>
 800849c:	4632      	mov	r2, r6
 800849e:	463b      	mov	r3, r7
 80084a0:	f7f8 fb1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80084a4:	b910      	cbnz	r0, 80084ac <_dtoa_r+0x184>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	9b00      	ldr	r3, [sp, #0]
 80084ae:	2b16      	cmp	r3, #22
 80084b0:	d85a      	bhi.n	8008568 <_dtoa_r+0x240>
 80084b2:	9a00      	ldr	r2, [sp, #0]
 80084b4:	4b57      	ldr	r3, [pc, #348]	; (8008614 <_dtoa_r+0x2ec>)
 80084b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	ec51 0b19 	vmov	r0, r1, d9
 80084c2:	f7f8 fb13 	bl	8000aec <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d050      	beq.n	800856c <_dtoa_r+0x244>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084d6:	1b5d      	subs	r5, r3, r5
 80084d8:	1e6b      	subs	r3, r5, #1
 80084da:	9305      	str	r3, [sp, #20]
 80084dc:	bf45      	ittet	mi
 80084de:	f1c5 0301 	rsbmi	r3, r5, #1
 80084e2:	9304      	strmi	r3, [sp, #16]
 80084e4:	2300      	movpl	r3, #0
 80084e6:	2300      	movmi	r3, #0
 80084e8:	bf4c      	ite	mi
 80084ea:	9305      	strmi	r3, [sp, #20]
 80084ec:	9304      	strpl	r3, [sp, #16]
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	db3d      	blt.n	8008570 <_dtoa_r+0x248>
 80084f4:	9b05      	ldr	r3, [sp, #20]
 80084f6:	9a00      	ldr	r2, [sp, #0]
 80084f8:	920a      	str	r2, [sp, #40]	; 0x28
 80084fa:	4413      	add	r3, r2
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	2300      	movs	r3, #0
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	9b06      	ldr	r3, [sp, #24]
 8008504:	2b09      	cmp	r3, #9
 8008506:	f200 8089 	bhi.w	800861c <_dtoa_r+0x2f4>
 800850a:	2b05      	cmp	r3, #5
 800850c:	bfc4      	itt	gt
 800850e:	3b04      	subgt	r3, #4
 8008510:	9306      	strgt	r3, [sp, #24]
 8008512:	9b06      	ldr	r3, [sp, #24]
 8008514:	f1a3 0302 	sub.w	r3, r3, #2
 8008518:	bfcc      	ite	gt
 800851a:	2500      	movgt	r5, #0
 800851c:	2501      	movle	r5, #1
 800851e:	2b03      	cmp	r3, #3
 8008520:	f200 8087 	bhi.w	8008632 <_dtoa_r+0x30a>
 8008524:	e8df f003 	tbb	[pc, r3]
 8008528:	59383a2d 	.word	0x59383a2d
 800852c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008530:	441d      	add	r5, r3
 8008532:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008536:	2b20      	cmp	r3, #32
 8008538:	bfc1      	itttt	gt
 800853a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800853e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008542:	fa0b f303 	lslgt.w	r3, fp, r3
 8008546:	fa26 f000 	lsrgt.w	r0, r6, r0
 800854a:	bfda      	itte	le
 800854c:	f1c3 0320 	rsble	r3, r3, #32
 8008550:	fa06 f003 	lslle.w	r0, r6, r3
 8008554:	4318      	orrgt	r0, r3
 8008556:	f7f7 ffdd 	bl	8000514 <__aeabi_ui2d>
 800855a:	2301      	movs	r3, #1
 800855c:	4606      	mov	r6, r0
 800855e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008562:	3d01      	subs	r5, #1
 8008564:	930e      	str	r3, [sp, #56]	; 0x38
 8008566:	e76a      	b.n	800843e <_dtoa_r+0x116>
 8008568:	2301      	movs	r3, #1
 800856a:	e7b2      	b.n	80084d2 <_dtoa_r+0x1aa>
 800856c:	900b      	str	r0, [sp, #44]	; 0x2c
 800856e:	e7b1      	b.n	80084d4 <_dtoa_r+0x1ac>
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	9a00      	ldr	r2, [sp, #0]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	9304      	str	r3, [sp, #16]
 8008578:	4253      	negs	r3, r2
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	2300      	movs	r3, #0
 800857e:	930a      	str	r3, [sp, #40]	; 0x28
 8008580:	e7bf      	b.n	8008502 <_dtoa_r+0x1da>
 8008582:	2300      	movs	r3, #0
 8008584:	9308      	str	r3, [sp, #32]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	dc55      	bgt.n	8008638 <_dtoa_r+0x310>
 800858c:	2301      	movs	r3, #1
 800858e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008592:	461a      	mov	r2, r3
 8008594:	9209      	str	r2, [sp, #36]	; 0x24
 8008596:	e00c      	b.n	80085b2 <_dtoa_r+0x28a>
 8008598:	2301      	movs	r3, #1
 800859a:	e7f3      	b.n	8008584 <_dtoa_r+0x25c>
 800859c:	2300      	movs	r3, #0
 800859e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085a0:	9308      	str	r3, [sp, #32]
 80085a2:	9b00      	ldr	r3, [sp, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	3301      	adds	r3, #1
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	bfb8      	it	lt
 80085b0:	2301      	movlt	r3, #1
 80085b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085b4:	2200      	movs	r2, #0
 80085b6:	6042      	str	r2, [r0, #4]
 80085b8:	2204      	movs	r2, #4
 80085ba:	f102 0614 	add.w	r6, r2, #20
 80085be:	429e      	cmp	r6, r3
 80085c0:	6841      	ldr	r1, [r0, #4]
 80085c2:	d93d      	bls.n	8008640 <_dtoa_r+0x318>
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fed7 	bl	8009378 <_Balloc>
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d13b      	bne.n	8008648 <_dtoa_r+0x320>
 80085d0:	4b11      	ldr	r3, [pc, #68]	; (8008618 <_dtoa_r+0x2f0>)
 80085d2:	4602      	mov	r2, r0
 80085d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085d8:	e6c0      	b.n	800835c <_dtoa_r+0x34>
 80085da:	2301      	movs	r3, #1
 80085dc:	e7df      	b.n	800859e <_dtoa_r+0x276>
 80085de:	bf00      	nop
 80085e0:	636f4361 	.word	0x636f4361
 80085e4:	3fd287a7 	.word	0x3fd287a7
 80085e8:	8b60c8b3 	.word	0x8b60c8b3
 80085ec:	3fc68a28 	.word	0x3fc68a28
 80085f0:	509f79fb 	.word	0x509f79fb
 80085f4:	3fd34413 	.word	0x3fd34413
 80085f8:	0800ab01 	.word	0x0800ab01
 80085fc:	0800ab18 	.word	0x0800ab18
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	0800aafd 	.word	0x0800aafd
 8008608:	0800aaf4 	.word	0x0800aaf4
 800860c:	0800aad1 	.word	0x0800aad1
 8008610:	3ff80000 	.word	0x3ff80000
 8008614:	0800ac68 	.word	0x0800ac68
 8008618:	0800ab73 	.word	0x0800ab73
 800861c:	2501      	movs	r5, #1
 800861e:	2300      	movs	r3, #0
 8008620:	9306      	str	r3, [sp, #24]
 8008622:	9508      	str	r5, [sp, #32]
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
 8008628:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	2312      	movs	r3, #18
 8008630:	e7b0      	b.n	8008594 <_dtoa_r+0x26c>
 8008632:	2301      	movs	r3, #1
 8008634:	9308      	str	r3, [sp, #32]
 8008636:	e7f5      	b.n	8008624 <_dtoa_r+0x2fc>
 8008638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800863e:	e7b8      	b.n	80085b2 <_dtoa_r+0x28a>
 8008640:	3101      	adds	r1, #1
 8008642:	6041      	str	r1, [r0, #4]
 8008644:	0052      	lsls	r2, r2, #1
 8008646:	e7b8      	b.n	80085ba <_dtoa_r+0x292>
 8008648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800864a:	9a01      	ldr	r2, [sp, #4]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	2b0e      	cmp	r3, #14
 8008652:	f200 809d 	bhi.w	8008790 <_dtoa_r+0x468>
 8008656:	2d00      	cmp	r5, #0
 8008658:	f000 809a 	beq.w	8008790 <_dtoa_r+0x468>
 800865c:	9b00      	ldr	r3, [sp, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	dd32      	ble.n	80086c8 <_dtoa_r+0x3a0>
 8008662:	4ab7      	ldr	r2, [pc, #732]	; (8008940 <_dtoa_r+0x618>)
 8008664:	f003 030f 	and.w	r3, r3, #15
 8008668:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800866c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	05d8      	lsls	r0, r3, #23
 8008674:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008678:	d516      	bpl.n	80086a8 <_dtoa_r+0x380>
 800867a:	4bb2      	ldr	r3, [pc, #712]	; (8008944 <_dtoa_r+0x61c>)
 800867c:	ec51 0b19 	vmov	r0, r1, d9
 8008680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008684:	f7f8 f8ea 	bl	800085c <__aeabi_ddiv>
 8008688:	f007 070f 	and.w	r7, r7, #15
 800868c:	4682      	mov	sl, r0
 800868e:	468b      	mov	fp, r1
 8008690:	2503      	movs	r5, #3
 8008692:	4eac      	ldr	r6, [pc, #688]	; (8008944 <_dtoa_r+0x61c>)
 8008694:	b957      	cbnz	r7, 80086ac <_dtoa_r+0x384>
 8008696:	4642      	mov	r2, r8
 8008698:	464b      	mov	r3, r9
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	f7f8 f8dd 	bl	800085c <__aeabi_ddiv>
 80086a2:	4682      	mov	sl, r0
 80086a4:	468b      	mov	fp, r1
 80086a6:	e028      	b.n	80086fa <_dtoa_r+0x3d2>
 80086a8:	2502      	movs	r5, #2
 80086aa:	e7f2      	b.n	8008692 <_dtoa_r+0x36a>
 80086ac:	07f9      	lsls	r1, r7, #31
 80086ae:	d508      	bpl.n	80086c2 <_dtoa_r+0x39a>
 80086b0:	4640      	mov	r0, r8
 80086b2:	4649      	mov	r1, r9
 80086b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	3501      	adds	r5, #1
 80086be:	4680      	mov	r8, r0
 80086c0:	4689      	mov	r9, r1
 80086c2:	107f      	asrs	r7, r7, #1
 80086c4:	3608      	adds	r6, #8
 80086c6:	e7e5      	b.n	8008694 <_dtoa_r+0x36c>
 80086c8:	f000 809b 	beq.w	8008802 <_dtoa_r+0x4da>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	4f9d      	ldr	r7, [pc, #628]	; (8008944 <_dtoa_r+0x61c>)
 80086d0:	425e      	negs	r6, r3
 80086d2:	4b9b      	ldr	r3, [pc, #620]	; (8008940 <_dtoa_r+0x618>)
 80086d4:	f006 020f 	and.w	r2, r6, #15
 80086d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	ec51 0b19 	vmov	r0, r1, d9
 80086e4:	f7f7 ff90 	bl	8000608 <__aeabi_dmul>
 80086e8:	1136      	asrs	r6, r6, #4
 80086ea:	4682      	mov	sl, r0
 80086ec:	468b      	mov	fp, r1
 80086ee:	2300      	movs	r3, #0
 80086f0:	2502      	movs	r5, #2
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	d17a      	bne.n	80087ec <_dtoa_r+0x4c4>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1d3      	bne.n	80086a2 <_dtoa_r+0x37a>
 80086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8082 	beq.w	8008806 <_dtoa_r+0x4de>
 8008702:	4b91      	ldr	r3, [pc, #580]	; (8008948 <_dtoa_r+0x620>)
 8008704:	2200      	movs	r2, #0
 8008706:	4650      	mov	r0, sl
 8008708:	4659      	mov	r1, fp
 800870a:	f7f8 f9ef 	bl	8000aec <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d079      	beq.n	8008806 <_dtoa_r+0x4de>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d076      	beq.n	8008806 <_dtoa_r+0x4de>
 8008718:	9b02      	ldr	r3, [sp, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dd36      	ble.n	800878c <_dtoa_r+0x464>
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	4650      	mov	r0, sl
 8008722:	4659      	mov	r1, fp
 8008724:	1e5f      	subs	r7, r3, #1
 8008726:	2200      	movs	r2, #0
 8008728:	4b88      	ldr	r3, [pc, #544]	; (800894c <_dtoa_r+0x624>)
 800872a:	f7f7 ff6d 	bl	8000608 <__aeabi_dmul>
 800872e:	9e02      	ldr	r6, [sp, #8]
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	3501      	adds	r5, #1
 8008736:	4628      	mov	r0, r5
 8008738:	f7f7 fefc 	bl	8000534 <__aeabi_i2d>
 800873c:	4652      	mov	r2, sl
 800873e:	465b      	mov	r3, fp
 8008740:	f7f7 ff62 	bl	8000608 <__aeabi_dmul>
 8008744:	4b82      	ldr	r3, [pc, #520]	; (8008950 <_dtoa_r+0x628>)
 8008746:	2200      	movs	r2, #0
 8008748:	f7f7 fda8 	bl	800029c <__adddf3>
 800874c:	46d0      	mov	r8, sl
 800874e:	46d9      	mov	r9, fp
 8008750:	4682      	mov	sl, r0
 8008752:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008756:	2e00      	cmp	r6, #0
 8008758:	d158      	bne.n	800880c <_dtoa_r+0x4e4>
 800875a:	4b7e      	ldr	r3, [pc, #504]	; (8008954 <_dtoa_r+0x62c>)
 800875c:	2200      	movs	r2, #0
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f7 fd99 	bl	8000298 <__aeabi_dsub>
 8008766:	4652      	mov	r2, sl
 8008768:	465b      	mov	r3, fp
 800876a:	4680      	mov	r8, r0
 800876c:	4689      	mov	r9, r1
 800876e:	f7f8 f9db 	bl	8000b28 <__aeabi_dcmpgt>
 8008772:	2800      	cmp	r0, #0
 8008774:	f040 8295 	bne.w	8008ca2 <_dtoa_r+0x97a>
 8008778:	4652      	mov	r2, sl
 800877a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f9b3 	bl	8000aec <__aeabi_dcmplt>
 8008786:	2800      	cmp	r0, #0
 8008788:	f040 8289 	bne.w	8008c9e <_dtoa_r+0x976>
 800878c:	ec5b ab19 	vmov	sl, fp, d9
 8008790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008792:	2b00      	cmp	r3, #0
 8008794:	f2c0 8148 	blt.w	8008a28 <_dtoa_r+0x700>
 8008798:	9a00      	ldr	r2, [sp, #0]
 800879a:	2a0e      	cmp	r2, #14
 800879c:	f300 8144 	bgt.w	8008a28 <_dtoa_r+0x700>
 80087a0:	4b67      	ldr	r3, [pc, #412]	; (8008940 <_dtoa_r+0x618>)
 80087a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f280 80d5 	bge.w	800895c <_dtoa_r+0x634>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f300 80d1 	bgt.w	800895c <_dtoa_r+0x634>
 80087ba:	f040 826f 	bne.w	8008c9c <_dtoa_r+0x974>
 80087be:	4b65      	ldr	r3, [pc, #404]	; (8008954 <_dtoa_r+0x62c>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	f7f7 ff1f 	bl	8000608 <__aeabi_dmul>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f8 f9a1 	bl	8000b14 <__aeabi_dcmpge>
 80087d2:	9e03      	ldr	r6, [sp, #12]
 80087d4:	4637      	mov	r7, r6
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f040 8245 	bne.w	8008c66 <_dtoa_r+0x93e>
 80087dc:	9d01      	ldr	r5, [sp, #4]
 80087de:	2331      	movs	r3, #49	; 0x31
 80087e0:	f805 3b01 	strb.w	r3, [r5], #1
 80087e4:	9b00      	ldr	r3, [sp, #0]
 80087e6:	3301      	adds	r3, #1
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	e240      	b.n	8008c6e <_dtoa_r+0x946>
 80087ec:	07f2      	lsls	r2, r6, #31
 80087ee:	d505      	bpl.n	80087fc <_dtoa_r+0x4d4>
 80087f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087f4:	f7f7 ff08 	bl	8000608 <__aeabi_dmul>
 80087f8:	3501      	adds	r5, #1
 80087fa:	2301      	movs	r3, #1
 80087fc:	1076      	asrs	r6, r6, #1
 80087fe:	3708      	adds	r7, #8
 8008800:	e777      	b.n	80086f2 <_dtoa_r+0x3ca>
 8008802:	2502      	movs	r5, #2
 8008804:	e779      	b.n	80086fa <_dtoa_r+0x3d2>
 8008806:	9f00      	ldr	r7, [sp, #0]
 8008808:	9e03      	ldr	r6, [sp, #12]
 800880a:	e794      	b.n	8008736 <_dtoa_r+0x40e>
 800880c:	9901      	ldr	r1, [sp, #4]
 800880e:	4b4c      	ldr	r3, [pc, #304]	; (8008940 <_dtoa_r+0x618>)
 8008810:	4431      	add	r1, r6
 8008812:	910d      	str	r1, [sp, #52]	; 0x34
 8008814:	9908      	ldr	r1, [sp, #32]
 8008816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800881a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800881e:	2900      	cmp	r1, #0
 8008820:	d043      	beq.n	80088aa <_dtoa_r+0x582>
 8008822:	494d      	ldr	r1, [pc, #308]	; (8008958 <_dtoa_r+0x630>)
 8008824:	2000      	movs	r0, #0
 8008826:	f7f8 f819 	bl	800085c <__aeabi_ddiv>
 800882a:	4652      	mov	r2, sl
 800882c:	465b      	mov	r3, fp
 800882e:	f7f7 fd33 	bl	8000298 <__aeabi_dsub>
 8008832:	9d01      	ldr	r5, [sp, #4]
 8008834:	4682      	mov	sl, r0
 8008836:	468b      	mov	fp, r1
 8008838:	4649      	mov	r1, r9
 800883a:	4640      	mov	r0, r8
 800883c:	f7f8 f994 	bl	8000b68 <__aeabi_d2iz>
 8008840:	4606      	mov	r6, r0
 8008842:	f7f7 fe77 	bl	8000534 <__aeabi_i2d>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fd23 	bl	8000298 <__aeabi_dsub>
 8008852:	3630      	adds	r6, #48	; 0x30
 8008854:	f805 6b01 	strb.w	r6, [r5], #1
 8008858:	4652      	mov	r2, sl
 800885a:	465b      	mov	r3, fp
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	f7f8 f944 	bl	8000aec <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	d163      	bne.n	8008930 <_dtoa_r+0x608>
 8008868:	4642      	mov	r2, r8
 800886a:	464b      	mov	r3, r9
 800886c:	4936      	ldr	r1, [pc, #216]	; (8008948 <_dtoa_r+0x620>)
 800886e:	2000      	movs	r0, #0
 8008870:	f7f7 fd12 	bl	8000298 <__aeabi_dsub>
 8008874:	4652      	mov	r2, sl
 8008876:	465b      	mov	r3, fp
 8008878:	f7f8 f938 	bl	8000aec <__aeabi_dcmplt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 80b5 	bne.w	80089ec <_dtoa_r+0x6c4>
 8008882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008884:	429d      	cmp	r5, r3
 8008886:	d081      	beq.n	800878c <_dtoa_r+0x464>
 8008888:	4b30      	ldr	r3, [pc, #192]	; (800894c <_dtoa_r+0x624>)
 800888a:	2200      	movs	r2, #0
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	f7f7 feba 	bl	8000608 <__aeabi_dmul>
 8008894:	4b2d      	ldr	r3, [pc, #180]	; (800894c <_dtoa_r+0x624>)
 8008896:	4682      	mov	sl, r0
 8008898:	468b      	mov	fp, r1
 800889a:	4640      	mov	r0, r8
 800889c:	4649      	mov	r1, r9
 800889e:	2200      	movs	r2, #0
 80088a0:	f7f7 feb2 	bl	8000608 <__aeabi_dmul>
 80088a4:	4680      	mov	r8, r0
 80088a6:	4689      	mov	r9, r1
 80088a8:	e7c6      	b.n	8008838 <_dtoa_r+0x510>
 80088aa:	4650      	mov	r0, sl
 80088ac:	4659      	mov	r1, fp
 80088ae:	f7f7 feab 	bl	8000608 <__aeabi_dmul>
 80088b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b4:	9d01      	ldr	r5, [sp, #4]
 80088b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088b8:	4682      	mov	sl, r0
 80088ba:	468b      	mov	fp, r1
 80088bc:	4649      	mov	r1, r9
 80088be:	4640      	mov	r0, r8
 80088c0:	f7f8 f952 	bl	8000b68 <__aeabi_d2iz>
 80088c4:	4606      	mov	r6, r0
 80088c6:	f7f7 fe35 	bl	8000534 <__aeabi_i2d>
 80088ca:	3630      	adds	r6, #48	; 0x30
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f7 fce0 	bl	8000298 <__aeabi_dsub>
 80088d8:	f805 6b01 	strb.w	r6, [r5], #1
 80088dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088de:	429d      	cmp	r5, r3
 80088e0:	4680      	mov	r8, r0
 80088e2:	4689      	mov	r9, r1
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	d124      	bne.n	8008934 <_dtoa_r+0x60c>
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <_dtoa_r+0x630>)
 80088ec:	4650      	mov	r0, sl
 80088ee:	4659      	mov	r1, fp
 80088f0:	f7f7 fcd4 	bl	800029c <__adddf3>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	4640      	mov	r0, r8
 80088fa:	4649      	mov	r1, r9
 80088fc:	f7f8 f914 	bl	8000b28 <__aeabi_dcmpgt>
 8008900:	2800      	cmp	r0, #0
 8008902:	d173      	bne.n	80089ec <_dtoa_r+0x6c4>
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	4913      	ldr	r1, [pc, #76]	; (8008958 <_dtoa_r+0x630>)
 800890a:	2000      	movs	r0, #0
 800890c:	f7f7 fcc4 	bl	8000298 <__aeabi_dsub>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f8e8 	bl	8000aec <__aeabi_dcmplt>
 800891c:	2800      	cmp	r0, #0
 800891e:	f43f af35 	beq.w	800878c <_dtoa_r+0x464>
 8008922:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008924:	1e6b      	subs	r3, r5, #1
 8008926:	930f      	str	r3, [sp, #60]	; 0x3c
 8008928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d0f8      	beq.n	8008922 <_dtoa_r+0x5fa>
 8008930:	9700      	str	r7, [sp, #0]
 8008932:	e049      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <_dtoa_r+0x624>)
 8008936:	f7f7 fe67 	bl	8000608 <__aeabi_dmul>
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	e7bd      	b.n	80088bc <_dtoa_r+0x594>
 8008940:	0800ac68 	.word	0x0800ac68
 8008944:	0800ac40 	.word	0x0800ac40
 8008948:	3ff00000 	.word	0x3ff00000
 800894c:	40240000 	.word	0x40240000
 8008950:	401c0000 	.word	0x401c0000
 8008954:	40140000 	.word	0x40140000
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	9d01      	ldr	r5, [sp, #4]
 800895e:	4656      	mov	r6, sl
 8008960:	465f      	mov	r7, fp
 8008962:	4642      	mov	r2, r8
 8008964:	464b      	mov	r3, r9
 8008966:	4630      	mov	r0, r6
 8008968:	4639      	mov	r1, r7
 800896a:	f7f7 ff77 	bl	800085c <__aeabi_ddiv>
 800896e:	f7f8 f8fb 	bl	8000b68 <__aeabi_d2iz>
 8008972:	4682      	mov	sl, r0
 8008974:	f7f7 fdde 	bl	8000534 <__aeabi_i2d>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	f7f7 fe44 	bl	8000608 <__aeabi_dmul>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4630      	mov	r0, r6
 8008986:	4639      	mov	r1, r7
 8008988:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800898c:	f7f7 fc84 	bl	8000298 <__aeabi_dsub>
 8008990:	f805 6b01 	strb.w	r6, [r5], #1
 8008994:	9e01      	ldr	r6, [sp, #4]
 8008996:	9f03      	ldr	r7, [sp, #12]
 8008998:	1bae      	subs	r6, r5, r6
 800899a:	42b7      	cmp	r7, r6
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	d135      	bne.n	8008a0e <_dtoa_r+0x6e6>
 80089a2:	f7f7 fc7b 	bl	800029c <__adddf3>
 80089a6:	4642      	mov	r2, r8
 80089a8:	464b      	mov	r3, r9
 80089aa:	4606      	mov	r6, r0
 80089ac:	460f      	mov	r7, r1
 80089ae:	f7f8 f8bb 	bl	8000b28 <__aeabi_dcmpgt>
 80089b2:	b9d0      	cbnz	r0, 80089ea <_dtoa_r+0x6c2>
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	4630      	mov	r0, r6
 80089ba:	4639      	mov	r1, r7
 80089bc:	f7f8 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80089c0:	b110      	cbz	r0, 80089c8 <_dtoa_r+0x6a0>
 80089c2:	f01a 0f01 	tst.w	sl, #1
 80089c6:	d110      	bne.n	80089ea <_dtoa_r+0x6c2>
 80089c8:	4620      	mov	r0, r4
 80089ca:	ee18 1a10 	vmov	r1, s16
 80089ce:	f000 fd13 	bl	80093f8 <_Bfree>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9800      	ldr	r0, [sp, #0]
 80089d6:	702b      	strb	r3, [r5, #0]
 80089d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089da:	3001      	adds	r0, #1
 80089dc:	6018      	str	r0, [r3, #0]
 80089de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f43f acf1 	beq.w	80083c8 <_dtoa_r+0xa0>
 80089e6:	601d      	str	r5, [r3, #0]
 80089e8:	e4ee      	b.n	80083c8 <_dtoa_r+0xa0>
 80089ea:	9f00      	ldr	r7, [sp, #0]
 80089ec:	462b      	mov	r3, r5
 80089ee:	461d      	mov	r5, r3
 80089f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089f4:	2a39      	cmp	r2, #57	; 0x39
 80089f6:	d106      	bne.n	8008a06 <_dtoa_r+0x6de>
 80089f8:	9a01      	ldr	r2, [sp, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d1f7      	bne.n	80089ee <_dtoa_r+0x6c6>
 80089fe:	9901      	ldr	r1, [sp, #4]
 8008a00:	2230      	movs	r2, #48	; 0x30
 8008a02:	3701      	adds	r7, #1
 8008a04:	700a      	strb	r2, [r1, #0]
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	e790      	b.n	8008930 <_dtoa_r+0x608>
 8008a0e:	4ba6      	ldr	r3, [pc, #664]	; (8008ca8 <_dtoa_r+0x980>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	f7f7 fdf9 	bl	8000608 <__aeabi_dmul>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f8 f85b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d09d      	beq.n	8008962 <_dtoa_r+0x63a>
 8008a26:	e7cf      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008a28:	9a08      	ldr	r2, [sp, #32]
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 80d7 	beq.w	8008bde <_dtoa_r+0x8b6>
 8008a30:	9a06      	ldr	r2, [sp, #24]
 8008a32:	2a01      	cmp	r2, #1
 8008a34:	f300 80ba 	bgt.w	8008bac <_dtoa_r+0x884>
 8008a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	f000 80b2 	beq.w	8008ba4 <_dtoa_r+0x87c>
 8008a40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a44:	9e07      	ldr	r6, [sp, #28]
 8008a46:	9d04      	ldr	r5, [sp, #16]
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	441a      	add	r2, r3
 8008a4c:	9204      	str	r2, [sp, #16]
 8008a4e:	9a05      	ldr	r2, [sp, #20]
 8008a50:	2101      	movs	r1, #1
 8008a52:	441a      	add	r2, r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	9205      	str	r2, [sp, #20]
 8008a58:	f000 fd86 	bl	8009568 <__i2b>
 8008a5c:	4607      	mov	r7, r0
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	dd0c      	ble.n	8008a7c <_dtoa_r+0x754>
 8008a62:	9b05      	ldr	r3, [sp, #20]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	dd09      	ble.n	8008a7c <_dtoa_r+0x754>
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	9a04      	ldr	r2, [sp, #16]
 8008a6c:	bfa8      	it	ge
 8008a6e:	462b      	movge	r3, r5
 8008a70:	1ad2      	subs	r2, r2, r3
 8008a72:	9204      	str	r2, [sp, #16]
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	1aed      	subs	r5, r5, r3
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	9b07      	ldr	r3, [sp, #28]
 8008a7e:	b31b      	cbz	r3, 8008ac8 <_dtoa_r+0x7a0>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80af 	beq.w	8008be6 <_dtoa_r+0x8be>
 8008a88:	2e00      	cmp	r6, #0
 8008a8a:	dd13      	ble.n	8008ab4 <_dtoa_r+0x78c>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4632      	mov	r2, r6
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fe29 	bl	80096e8 <__pow5mult>
 8008a96:	ee18 2a10 	vmov	r2, s16
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fd78 	bl	8009594 <__multiply>
 8008aa4:	ee18 1a10 	vmov	r1, s16
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fca4 	bl	80093f8 <_Bfree>
 8008ab0:	ee08 8a10 	vmov	s16, r8
 8008ab4:	9b07      	ldr	r3, [sp, #28]
 8008ab6:	1b9a      	subs	r2, r3, r6
 8008ab8:	d006      	beq.n	8008ac8 <_dtoa_r+0x7a0>
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fe12 	bl	80096e8 <__pow5mult>
 8008ac4:	ee08 0a10 	vmov	s16, r0
 8008ac8:	2101      	movs	r1, #1
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fd4c 	bl	8009568 <__i2b>
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	f340 8088 	ble.w	8008bea <_dtoa_r+0x8c2>
 8008ada:	461a      	mov	r2, r3
 8008adc:	4601      	mov	r1, r0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fe02 	bl	80096e8 <__pow5mult>
 8008ae4:	9b06      	ldr	r3, [sp, #24]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	4606      	mov	r6, r0
 8008aea:	f340 8081 	ble.w	8008bf0 <_dtoa_r+0x8c8>
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	6933      	ldr	r3, [r6, #16]
 8008af4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008af8:	6918      	ldr	r0, [r3, #16]
 8008afa:	f000 fce5 	bl	80094c8 <__hi0bits>
 8008afe:	f1c0 0020 	rsb	r0, r0, #32
 8008b02:	9b05      	ldr	r3, [sp, #20]
 8008b04:	4418      	add	r0, r3
 8008b06:	f010 001f 	ands.w	r0, r0, #31
 8008b0a:	f000 8092 	beq.w	8008c32 <_dtoa_r+0x90a>
 8008b0e:	f1c0 0320 	rsb	r3, r0, #32
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	f340 808a 	ble.w	8008c2c <_dtoa_r+0x904>
 8008b18:	f1c0 001c 	rsb	r0, r0, #28
 8008b1c:	9b04      	ldr	r3, [sp, #16]
 8008b1e:	4403      	add	r3, r0
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	4403      	add	r3, r0
 8008b26:	4405      	add	r5, r0
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	9b04      	ldr	r3, [sp, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	dd07      	ble.n	8008b40 <_dtoa_r+0x818>
 8008b30:	ee18 1a10 	vmov	r1, s16
 8008b34:	461a      	mov	r2, r3
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fe30 	bl	800979c <__lshift>
 8008b3c:	ee08 0a10 	vmov	s16, r0
 8008b40:	9b05      	ldr	r3, [sp, #20]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	dd05      	ble.n	8008b52 <_dtoa_r+0x82a>
 8008b46:	4631      	mov	r1, r6
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	f000 fe26 	bl	800979c <__lshift>
 8008b50:	4606      	mov	r6, r0
 8008b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d06e      	beq.n	8008c36 <_dtoa_r+0x90e>
 8008b58:	ee18 0a10 	vmov	r0, s16
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	f000 fe8d 	bl	800987c <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	da67      	bge.n	8008c36 <_dtoa_r+0x90e>
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	ee18 1a10 	vmov	r1, s16
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	220a      	movs	r2, #10
 8008b72:	2300      	movs	r3, #0
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 fc61 	bl	800943c <__multadd>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	ee08 0a10 	vmov	s16, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 81b1 	beq.w	8008ee8 <_dtoa_r+0xbc0>
 8008b86:	2300      	movs	r3, #0
 8008b88:	4639      	mov	r1, r7
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fc55 	bl	800943c <__multadd>
 8008b92:	9b02      	ldr	r3, [sp, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	4607      	mov	r7, r0
 8008b98:	f300 808e 	bgt.w	8008cb8 <_dtoa_r+0x990>
 8008b9c:	9b06      	ldr	r3, [sp, #24]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	dc51      	bgt.n	8008c46 <_dtoa_r+0x91e>
 8008ba2:	e089      	b.n	8008cb8 <_dtoa_r+0x990>
 8008ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008baa:	e74b      	b.n	8008a44 <_dtoa_r+0x71c>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	1e5e      	subs	r6, r3, #1
 8008bb0:	9b07      	ldr	r3, [sp, #28]
 8008bb2:	42b3      	cmp	r3, r6
 8008bb4:	bfbf      	itttt	lt
 8008bb6:	9b07      	ldrlt	r3, [sp, #28]
 8008bb8:	9607      	strlt	r6, [sp, #28]
 8008bba:	1af2      	sublt	r2, r6, r3
 8008bbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bbe:	bfb6      	itet	lt
 8008bc0:	189b      	addlt	r3, r3, r2
 8008bc2:	1b9e      	subge	r6, r3, r6
 8008bc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	bfb8      	it	lt
 8008bca:	2600      	movlt	r6, #0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	bfb7      	itett	lt
 8008bd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bd8:	1a9d      	sublt	r5, r3, r2
 8008bda:	2300      	movlt	r3, #0
 8008bdc:	e734      	b.n	8008a48 <_dtoa_r+0x720>
 8008bde:	9e07      	ldr	r6, [sp, #28]
 8008be0:	9d04      	ldr	r5, [sp, #16]
 8008be2:	9f08      	ldr	r7, [sp, #32]
 8008be4:	e73b      	b.n	8008a5e <_dtoa_r+0x736>
 8008be6:	9a07      	ldr	r2, [sp, #28]
 8008be8:	e767      	b.n	8008aba <_dtoa_r+0x792>
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	dc18      	bgt.n	8008c22 <_dtoa_r+0x8fa>
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	d115      	bne.n	8008c22 <_dtoa_r+0x8fa>
 8008bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bfa:	b993      	cbnz	r3, 8008c22 <_dtoa_r+0x8fa>
 8008bfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c00:	0d1b      	lsrs	r3, r3, #20
 8008c02:	051b      	lsls	r3, r3, #20
 8008c04:	b183      	cbz	r3, 8008c28 <_dtoa_r+0x900>
 8008c06:	9b04      	ldr	r3, [sp, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	9b05      	ldr	r3, [sp, #20]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9305      	str	r3, [sp, #20]
 8008c12:	f04f 0801 	mov.w	r8, #1
 8008c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f47f af6a 	bne.w	8008af2 <_dtoa_r+0x7ca>
 8008c1e:	2001      	movs	r0, #1
 8008c20:	e76f      	b.n	8008b02 <_dtoa_r+0x7da>
 8008c22:	f04f 0800 	mov.w	r8, #0
 8008c26:	e7f6      	b.n	8008c16 <_dtoa_r+0x8ee>
 8008c28:	4698      	mov	r8, r3
 8008c2a:	e7f4      	b.n	8008c16 <_dtoa_r+0x8ee>
 8008c2c:	f43f af7d 	beq.w	8008b2a <_dtoa_r+0x802>
 8008c30:	4618      	mov	r0, r3
 8008c32:	301c      	adds	r0, #28
 8008c34:	e772      	b.n	8008b1c <_dtoa_r+0x7f4>
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc37      	bgt.n	8008cac <_dtoa_r+0x984>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	dd34      	ble.n	8008cac <_dtoa_r+0x984>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	9b02      	ldr	r3, [sp, #8]
 8008c48:	b96b      	cbnz	r3, 8008c66 <_dtoa_r+0x93e>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	2205      	movs	r2, #5
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fbf4 	bl	800943c <__multadd>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4606      	mov	r6, r0
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	f000 fe0e 	bl	800987c <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f73f adbb 	bgt.w	80087dc <_dtoa_r+0x4b4>
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	9d01      	ldr	r5, [sp, #4]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	4631      	mov	r1, r6
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fbbf 	bl	80093f8 <_Bfree>
 8008c7a:	2f00      	cmp	r7, #0
 8008c7c:	f43f aea4 	beq.w	80089c8 <_dtoa_r+0x6a0>
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d005      	beq.n	8008c92 <_dtoa_r+0x96a>
 8008c86:	45b8      	cmp	r8, r7
 8008c88:	d003      	beq.n	8008c92 <_dtoa_r+0x96a>
 8008c8a:	4641      	mov	r1, r8
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fbb3 	bl	80093f8 <_Bfree>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fbaf 	bl	80093f8 <_Bfree>
 8008c9a:	e695      	b.n	80089c8 <_dtoa_r+0x6a0>
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	4637      	mov	r7, r6
 8008ca0:	e7e1      	b.n	8008c66 <_dtoa_r+0x93e>
 8008ca2:	9700      	str	r7, [sp, #0]
 8008ca4:	4637      	mov	r7, r6
 8008ca6:	e599      	b.n	80087dc <_dtoa_r+0x4b4>
 8008ca8:	40240000 	.word	0x40240000
 8008cac:	9b08      	ldr	r3, [sp, #32]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80ca 	beq.w	8008e48 <_dtoa_r+0xb20>
 8008cb4:	9b03      	ldr	r3, [sp, #12]
 8008cb6:	9302      	str	r3, [sp, #8]
 8008cb8:	2d00      	cmp	r5, #0
 8008cba:	dd05      	ble.n	8008cc8 <_dtoa_r+0x9a0>
 8008cbc:	4639      	mov	r1, r7
 8008cbe:	462a      	mov	r2, r5
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fd6b 	bl	800979c <__lshift>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	f1b8 0f00 	cmp.w	r8, #0
 8008ccc:	d05b      	beq.n	8008d86 <_dtoa_r+0xa5e>
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fb51 	bl	8009378 <_Balloc>
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b928      	cbnz	r0, 8008ce6 <_dtoa_r+0x9be>
 8008cda:	4b87      	ldr	r3, [pc, #540]	; (8008ef8 <_dtoa_r+0xbd0>)
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ce2:	f7ff bb3b 	b.w	800835c <_dtoa_r+0x34>
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	3202      	adds	r2, #2
 8008cea:	0092      	lsls	r2, r2, #2
 8008cec:	f107 010c 	add.w	r1, r7, #12
 8008cf0:	300c      	adds	r0, #12
 8008cf2:	f000 fb33 	bl	800935c <memcpy>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fd4e 	bl	800979c <__lshift>
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	f103 0901 	add.w	r9, r3, #1
 8008d06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f00a 0301 	and.w	r3, sl, #1
 8008d12:	46b8      	mov	r8, r7
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	4607      	mov	r7, r0
 8008d18:	4631      	mov	r1, r6
 8008d1a:	ee18 0a10 	vmov	r0, s16
 8008d1e:	f7ff fa75 	bl	800820c <quorem>
 8008d22:	4641      	mov	r1, r8
 8008d24:	9002      	str	r0, [sp, #8]
 8008d26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d2a:	ee18 0a10 	vmov	r0, s16
 8008d2e:	f000 fda5 	bl	800987c <__mcmp>
 8008d32:	463a      	mov	r2, r7
 8008d34:	9003      	str	r0, [sp, #12]
 8008d36:	4631      	mov	r1, r6
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fdbb 	bl	80098b4 <__mdiff>
 8008d3e:	68c2      	ldr	r2, [r0, #12]
 8008d40:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d44:	4605      	mov	r5, r0
 8008d46:	bb02      	cbnz	r2, 8008d8a <_dtoa_r+0xa62>
 8008d48:	4601      	mov	r1, r0
 8008d4a:	ee18 0a10 	vmov	r0, s16
 8008d4e:	f000 fd95 	bl	800987c <__mcmp>
 8008d52:	4602      	mov	r2, r0
 8008d54:	4629      	mov	r1, r5
 8008d56:	4620      	mov	r0, r4
 8008d58:	9207      	str	r2, [sp, #28]
 8008d5a:	f000 fb4d 	bl	80093f8 <_Bfree>
 8008d5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d62:	ea43 0102 	orr.w	r1, r3, r2
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	464d      	mov	r5, r9
 8008d6c:	d10f      	bne.n	8008d8e <_dtoa_r+0xa66>
 8008d6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d72:	d02a      	beq.n	8008dca <_dtoa_r+0xaa2>
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd02      	ble.n	8008d80 <_dtoa_r+0xa58>
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d80:	f88b a000 	strb.w	sl, [fp]
 8008d84:	e775      	b.n	8008c72 <_dtoa_r+0x94a>
 8008d86:	4638      	mov	r0, r7
 8008d88:	e7ba      	b.n	8008d00 <_dtoa_r+0x9d8>
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	e7e2      	b.n	8008d54 <_dtoa_r+0xa2c>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db04      	blt.n	8008d9e <_dtoa_r+0xa76>
 8008d94:	9906      	ldr	r1, [sp, #24]
 8008d96:	430b      	orrs	r3, r1
 8008d98:	9904      	ldr	r1, [sp, #16]
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	d122      	bne.n	8008de4 <_dtoa_r+0xabc>
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	ddee      	ble.n	8008d80 <_dtoa_r+0xa58>
 8008da2:	ee18 1a10 	vmov	r1, s16
 8008da6:	2201      	movs	r2, #1
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fcf7 	bl	800979c <__lshift>
 8008dae:	4631      	mov	r1, r6
 8008db0:	ee08 0a10 	vmov	s16, r0
 8008db4:	f000 fd62 	bl	800987c <__mcmp>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	dc03      	bgt.n	8008dc4 <_dtoa_r+0xa9c>
 8008dbc:	d1e0      	bne.n	8008d80 <_dtoa_r+0xa58>
 8008dbe:	f01a 0f01 	tst.w	sl, #1
 8008dc2:	d0dd      	beq.n	8008d80 <_dtoa_r+0xa58>
 8008dc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dc8:	d1d7      	bne.n	8008d7a <_dtoa_r+0xa52>
 8008dca:	2339      	movs	r3, #57	; 0x39
 8008dcc:	f88b 3000 	strb.w	r3, [fp]
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	461d      	mov	r5, r3
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dda:	2a39      	cmp	r2, #57	; 0x39
 8008ddc:	d071      	beq.n	8008ec2 <_dtoa_r+0xb9a>
 8008dde:	3201      	adds	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e746      	b.n	8008c72 <_dtoa_r+0x94a>
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	dd07      	ble.n	8008df8 <_dtoa_r+0xad0>
 8008de8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008dec:	d0ed      	beq.n	8008dca <_dtoa_r+0xaa2>
 8008dee:	f10a 0301 	add.w	r3, sl, #1
 8008df2:	f88b 3000 	strb.w	r3, [fp]
 8008df6:	e73c      	b.n	8008c72 <_dtoa_r+0x94a>
 8008df8:	9b05      	ldr	r3, [sp, #20]
 8008dfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dfe:	4599      	cmp	r9, r3
 8008e00:	d047      	beq.n	8008e92 <_dtoa_r+0xb6a>
 8008e02:	ee18 1a10 	vmov	r1, s16
 8008e06:	2300      	movs	r3, #0
 8008e08:	220a      	movs	r2, #10
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 fb16 	bl	800943c <__multadd>
 8008e10:	45b8      	cmp	r8, r7
 8008e12:	ee08 0a10 	vmov	s16, r0
 8008e16:	f04f 0300 	mov.w	r3, #0
 8008e1a:	f04f 020a 	mov.w	r2, #10
 8008e1e:	4641      	mov	r1, r8
 8008e20:	4620      	mov	r0, r4
 8008e22:	d106      	bne.n	8008e32 <_dtoa_r+0xb0a>
 8008e24:	f000 fb0a 	bl	800943c <__multadd>
 8008e28:	4680      	mov	r8, r0
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	f109 0901 	add.w	r9, r9, #1
 8008e30:	e772      	b.n	8008d18 <_dtoa_r+0x9f0>
 8008e32:	f000 fb03 	bl	800943c <__multadd>
 8008e36:	4639      	mov	r1, r7
 8008e38:	4680      	mov	r8, r0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fafc 	bl	800943c <__multadd>
 8008e44:	4607      	mov	r7, r0
 8008e46:	e7f1      	b.n	8008e2c <_dtoa_r+0xb04>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	9d01      	ldr	r5, [sp, #4]
 8008e4e:	ee18 0a10 	vmov	r0, s16
 8008e52:	4631      	mov	r1, r6
 8008e54:	f7ff f9da 	bl	800820c <quorem>
 8008e58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e5c:	9b01      	ldr	r3, [sp, #4]
 8008e5e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e62:	1aea      	subs	r2, r5, r3
 8008e64:	9b02      	ldr	r3, [sp, #8]
 8008e66:	4293      	cmp	r3, r2
 8008e68:	dd09      	ble.n	8008e7e <_dtoa_r+0xb56>
 8008e6a:	ee18 1a10 	vmov	r1, s16
 8008e6e:	2300      	movs	r3, #0
 8008e70:	220a      	movs	r2, #10
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fae2 	bl	800943c <__multadd>
 8008e78:	ee08 0a10 	vmov	s16, r0
 8008e7c:	e7e7      	b.n	8008e4e <_dtoa_r+0xb26>
 8008e7e:	9b02      	ldr	r3, [sp, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	bfc8      	it	gt
 8008e84:	461d      	movgt	r5, r3
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	bfd8      	it	le
 8008e8a:	2501      	movle	r5, #1
 8008e8c:	441d      	add	r5, r3
 8008e8e:	f04f 0800 	mov.w	r8, #0
 8008e92:	ee18 1a10 	vmov	r1, s16
 8008e96:	2201      	movs	r2, #1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 fc7f 	bl	800979c <__lshift>
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	ee08 0a10 	vmov	s16, r0
 8008ea4:	f000 fcea 	bl	800987c <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	dc91      	bgt.n	8008dd0 <_dtoa_r+0xaa8>
 8008eac:	d102      	bne.n	8008eb4 <_dtoa_r+0xb8c>
 8008eae:	f01a 0f01 	tst.w	sl, #1
 8008eb2:	d18d      	bne.n	8008dd0 <_dtoa_r+0xaa8>
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ebc:	2a30      	cmp	r2, #48	; 0x30
 8008ebe:	d0fa      	beq.n	8008eb6 <_dtoa_r+0xb8e>
 8008ec0:	e6d7      	b.n	8008c72 <_dtoa_r+0x94a>
 8008ec2:	9a01      	ldr	r2, [sp, #4]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d184      	bne.n	8008dd2 <_dtoa_r+0xaaa>
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	2331      	movs	r3, #49	; 0x31
 8008ed0:	7013      	strb	r3, [r2, #0]
 8008ed2:	e6ce      	b.n	8008c72 <_dtoa_r+0x94a>
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <_dtoa_r+0xbd4>)
 8008ed6:	f7ff ba95 	b.w	8008404 <_dtoa_r+0xdc>
 8008eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f47f aa6e 	bne.w	80083be <_dtoa_r+0x96>
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <_dtoa_r+0xbd8>)
 8008ee4:	f7ff ba8e 	b.w	8008404 <_dtoa_r+0xdc>
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dcae      	bgt.n	8008e4c <_dtoa_r+0xb24>
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	f73f aea8 	bgt.w	8008c46 <_dtoa_r+0x91e>
 8008ef6:	e7a9      	b.n	8008e4c <_dtoa_r+0xb24>
 8008ef8:	0800ab73 	.word	0x0800ab73
 8008efc:	0800aad0 	.word	0x0800aad0
 8008f00:	0800aaf4 	.word	0x0800aaf4

08008f04 <__sflush_r>:
 8008f04:	898a      	ldrh	r2, [r1, #12]
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	0710      	lsls	r0, r2, #28
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d458      	bmi.n	8008fc4 <__sflush_r+0xc0>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc05      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc02      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0f9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	d032      	beq.n	8008f9c <__sflush_r+0x98>
 8008f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	075a      	lsls	r2, r3, #29
 8008f3c:	d505      	bpl.n	8008f4a <__sflush_r+0x46>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f44:	b10b      	cbz	r3, 8008f4a <__sflush_r+0x46>
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	d106      	bne.n	8008f6a <__sflush_r+0x66>
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	291d      	cmp	r1, #29
 8008f60:	d82c      	bhi.n	8008fbc <__sflush_r+0xb8>
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <__sflush_r+0x108>)
 8008f64:	40ca      	lsrs	r2, r1
 8008f66:	07d6      	lsls	r6, r2, #31
 8008f68:	d528      	bpl.n	8008fbc <__sflush_r+0xb8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	04d9      	lsls	r1, r3, #19
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	d504      	bpl.n	8008f80 <__sflush_r+0x7c>
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0x7a>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b903      	cbnz	r3, 8008f80 <__sflush_r+0x7c>
 8008f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	602f      	str	r7, [r5, #0]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d0ca      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__sflush_r+0x92>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 fd8b 	bl	8009aac <_free_r>
 8008f96:	2000      	movs	r0, #0
 8008f98:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9a:	e7c1      	b.n	8008f20 <__sflush_r+0x1c>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c7      	bne.n	8008f38 <__sflush_r+0x34>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c4      	beq.n	8008f38 <__sflush_r+0x34>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xb2>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb6>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b1      	b.n	8008f1e <__sflush_r+0x1a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ad      	b.n	8008f20 <__sflush_r+0x1c>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0a9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	eba6 0807 	sub.w	r8, r6, r7
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	dd9c      	ble.n	8008f1e <__sflush_r+0x1a>
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe8:	4643      	mov	r3, r8
 8008fea:	463a      	mov	r2, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dc06      	bgt.n	8009002 <__sflush_r+0xfe>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e78e      	b.n	8008f20 <__sflush_r+0x1c>
 8009002:	4407      	add	r7, r0
 8009004:	eba8 0800 	sub.w	r8, r8, r0
 8009008:	e7e9      	b.n	8008fde <__sflush_r+0xda>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f91a 	bl	800927e <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff59 	bl	8008f04 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f90d 	bl	8009280 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	0800aba4 	.word	0x0800aba4
 8009080:	0800abc4 	.word	0x0800abc4
 8009084:	0800ab84 	.word	0x0800ab84

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f7fe fabb 	bl	8007620 <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6263      	str	r3, [r4, #36]	; 0x24
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x3c>)
 80090b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x40>)
 80090b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x44>)
 80090b8:	6224      	str	r4, [r4, #32]
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	0800a289 	.word	0x0800a289
 80090c4:	0800a2ab 	.word	0x0800a2ab
 80090c8:	0800a2e3 	.word	0x0800a2e3
 80090cc:	0800a307 	.word	0x0800a307

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2268      	movs	r2, #104	; 0x68
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f000 fd4b 	bl	8009b84 <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f7fe fa8e 	bl	8007620 <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8b8 	b.w	800927e <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	20000405 	.word	0x20000405

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8b3 	b.w	8009280 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	20000405 	.word	0x20000405

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8ac 	b.w	800927e <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	20000406 	.word	0x20000406

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8a7 	b.w	8009280 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	20000406 	.word	0x20000406

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f820 	bl	80091a8 <__sfp>
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f81c 	bl	80091a8 <__sfp>
 8009170:	60a0      	str	r0, [r4, #8]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f818 	bl	80091a8 <__sfp>
 8009178:	2200      	movs	r2, #0
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	2104      	movs	r1, #4
 800917e:	6860      	ldr	r0, [r4, #4]
 8009180:	f7ff ff82 	bl	8009088 <std>
 8009184:	68a0      	ldr	r0, [r4, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	f7ff ff7d 	bl	8009088 <std>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff ff78 	bl	8009088 <std>
 8009198:	2301      	movs	r3, #1
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	e7d2      	b.n	8009144 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	0800aabc 	.word	0x0800aabc
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f84c 	bl	800927c <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4629      	mov	r1, r5
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f7fe fa10 	bl	8007620 <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	0800aabc 	.word	0x0800aabc
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009240:	2700      	movs	r7, #0
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>
	...

08009274 <_localeconv_r>:
 8009274:	4800      	ldr	r0, [pc, #0]	; (8009278 <_localeconv_r+0x4>)
 8009276:	4770      	bx	lr
 8009278:	2000016c 	.word	0x2000016c

0800927c <__retarget_lock_init_recursive>:
 800927c:	4770      	bx	lr

0800927e <__retarget_lock_acquire_recursive>:
 800927e:	4770      	bx	lr

08009280 <__retarget_lock_release_recursive>:
 8009280:	4770      	bx	lr

08009282 <__swhatbuf_r>:
 8009282:	b570      	push	{r4, r5, r6, lr}
 8009284:	460e      	mov	r6, r1
 8009286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928a:	2900      	cmp	r1, #0
 800928c:	b096      	sub	sp, #88	; 0x58
 800928e:	4614      	mov	r4, r2
 8009290:	461d      	mov	r5, r3
 8009292:	da08      	bge.n	80092a6 <__swhatbuf_r+0x24>
 8009294:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	602a      	str	r2, [r5, #0]
 800929c:	061a      	lsls	r2, r3, #24
 800929e:	d410      	bmi.n	80092c2 <__swhatbuf_r+0x40>
 80092a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a4:	e00e      	b.n	80092c4 <__swhatbuf_r+0x42>
 80092a6:	466a      	mov	r2, sp
 80092a8:	f001 f884 	bl	800a3b4 <_fstat_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	dbf1      	blt.n	8009294 <__swhatbuf_r+0x12>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092ba:	425a      	negs	r2, r3
 80092bc:	415a      	adcs	r2, r3
 80092be:	602a      	str	r2, [r5, #0]
 80092c0:	e7ee      	b.n	80092a0 <__swhatbuf_r+0x1e>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	2000      	movs	r0, #0
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	b016      	add	sp, #88	; 0x58
 80092ca:	bd70      	pop	{r4, r5, r6, pc}

080092cc <__smakebuf_r>:
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d0:	079d      	lsls	r5, r3, #30
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d507      	bpl.n	80092e8 <__smakebuf_r+0x1c>
 80092d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	b002      	add	sp, #8
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	ab01      	add	r3, sp, #4
 80092ea:	466a      	mov	r2, sp
 80092ec:	f7ff ffc9 	bl	8009282 <__swhatbuf_r>
 80092f0:	9900      	ldr	r1, [sp, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	4630      	mov	r0, r6
 80092f6:	f000 fc45 	bl	8009b84 <_malloc_r>
 80092fa:	b948      	cbnz	r0, 8009310 <__smakebuf_r+0x44>
 80092fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009300:	059a      	lsls	r2, r3, #22
 8009302:	d4ef      	bmi.n	80092e4 <__smakebuf_r+0x18>
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7e3      	b.n	80092d8 <__smakebuf_r+0xc>
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <__smakebuf_r+0x7c>)
 8009312:	62b3      	str	r3, [r6, #40]	; 0x28
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	6020      	str	r0, [r4, #0]
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	9b00      	ldr	r3, [sp, #0]
 8009320:	6163      	str	r3, [r4, #20]
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	6120      	str	r0, [r4, #16]
 8009326:	b15b      	cbz	r3, 8009340 <__smakebuf_r+0x74>
 8009328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800932c:	4630      	mov	r0, r6
 800932e:	f001 f853 	bl	800a3d8 <_isatty_r>
 8009332:	b128      	cbz	r0, 8009340 <__smakebuf_r+0x74>
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	81a3      	strh	r3, [r4, #12]
 8009340:	89a0      	ldrh	r0, [r4, #12]
 8009342:	4305      	orrs	r5, r0
 8009344:	81a5      	strh	r5, [r4, #12]
 8009346:	e7cd      	b.n	80092e4 <__smakebuf_r+0x18>
 8009348:	080090d1 	.word	0x080090d1

0800934c <malloc>:
 800934c:	4b02      	ldr	r3, [pc, #8]	; (8009358 <malloc+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f000 bc17 	b.w	8009b84 <_malloc_r>
 8009356:	bf00      	nop
 8009358:	20000018 	.word	0x20000018

0800935c <memcpy>:
 800935c:	440a      	add	r2, r1
 800935e:	4291      	cmp	r1, r2
 8009360:	f100 33ff 	add.w	r3, r0, #4294967295
 8009364:	d100      	bne.n	8009368 <memcpy+0xc>
 8009366:	4770      	bx	lr
 8009368:	b510      	push	{r4, lr}
 800936a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009372:	4291      	cmp	r1, r2
 8009374:	d1f9      	bne.n	800936a <memcpy+0xe>
 8009376:	bd10      	pop	{r4, pc}

08009378 <_Balloc>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	b976      	cbnz	r6, 80093a0 <_Balloc+0x28>
 8009382:	2010      	movs	r0, #16
 8009384:	f7ff ffe2 	bl	800934c <malloc>
 8009388:	4602      	mov	r2, r0
 800938a:	6260      	str	r0, [r4, #36]	; 0x24
 800938c:	b920      	cbnz	r0, 8009398 <_Balloc+0x20>
 800938e:	4b18      	ldr	r3, [pc, #96]	; (80093f0 <_Balloc+0x78>)
 8009390:	4818      	ldr	r0, [pc, #96]	; (80093f4 <_Balloc+0x7c>)
 8009392:	2166      	movs	r1, #102	; 0x66
 8009394:	f000 ffce 	bl	800a334 <__assert_func>
 8009398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800939c:	6006      	str	r6, [r0, #0]
 800939e:	60c6      	str	r6, [r0, #12]
 80093a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093a2:	68f3      	ldr	r3, [r6, #12]
 80093a4:	b183      	cbz	r3, 80093c8 <_Balloc+0x50>
 80093a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ae:	b9b8      	cbnz	r0, 80093e0 <_Balloc+0x68>
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f605 	lsl.w	r6, r1, r5
 80093b6:	1d72      	adds	r2, r6, #5
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fb60 	bl	8009a80 <_calloc_r>
 80093c0:	b160      	cbz	r0, 80093dc <_Balloc+0x64>
 80093c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c6:	e00e      	b.n	80093e6 <_Balloc+0x6e>
 80093c8:	2221      	movs	r2, #33	; 0x21
 80093ca:	2104      	movs	r1, #4
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fb57 	bl	8009a80 <_calloc_r>
 80093d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d4:	60f0      	str	r0, [r6, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e4      	bne.n	80093a6 <_Balloc+0x2e>
 80093dc:	2000      	movs	r0, #0
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e6:	2300      	movs	r3, #0
 80093e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093ec:	e7f7      	b.n	80093de <_Balloc+0x66>
 80093ee:	bf00      	nop
 80093f0:	0800ab01 	.word	0x0800ab01
 80093f4:	0800abe4 	.word	0x0800abe4

080093f8 <_Bfree>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b976      	cbnz	r6, 8009420 <_Bfree+0x28>
 8009402:	2010      	movs	r0, #16
 8009404:	f7ff ffa2 	bl	800934c <malloc>
 8009408:	4602      	mov	r2, r0
 800940a:	6268      	str	r0, [r5, #36]	; 0x24
 800940c:	b920      	cbnz	r0, 8009418 <_Bfree+0x20>
 800940e:	4b09      	ldr	r3, [pc, #36]	; (8009434 <_Bfree+0x3c>)
 8009410:	4809      	ldr	r0, [pc, #36]	; (8009438 <_Bfree+0x40>)
 8009412:	218a      	movs	r1, #138	; 0x8a
 8009414:	f000 ff8e 	bl	800a334 <__assert_func>
 8009418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800941c:	6006      	str	r6, [r0, #0]
 800941e:	60c6      	str	r6, [r0, #12]
 8009420:	b13c      	cbz	r4, 8009432 <_Bfree+0x3a>
 8009422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009424:	6862      	ldr	r2, [r4, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800942c:	6021      	str	r1, [r4, #0]
 800942e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	0800ab01 	.word	0x0800ab01
 8009438:	0800abe4 	.word	0x0800abe4

0800943c <__multadd>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	690d      	ldr	r5, [r1, #16]
 8009442:	4607      	mov	r7, r0
 8009444:	460c      	mov	r4, r1
 8009446:	461e      	mov	r6, r3
 8009448:	f101 0c14 	add.w	ip, r1, #20
 800944c:	2000      	movs	r0, #0
 800944e:	f8dc 3000 	ldr.w	r3, [ip]
 8009452:	b299      	uxth	r1, r3
 8009454:	fb02 6101 	mla	r1, r2, r1, r6
 8009458:	0c1e      	lsrs	r6, r3, #16
 800945a:	0c0b      	lsrs	r3, r1, #16
 800945c:	fb02 3306 	mla	r3, r2, r6, r3
 8009460:	b289      	uxth	r1, r1
 8009462:	3001      	adds	r0, #1
 8009464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009468:	4285      	cmp	r5, r0
 800946a:	f84c 1b04 	str.w	r1, [ip], #4
 800946e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009472:	dcec      	bgt.n	800944e <__multadd+0x12>
 8009474:	b30e      	cbz	r6, 80094ba <__multadd+0x7e>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc19      	bgt.n	80094b0 <__multadd+0x74>
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4638      	mov	r0, r7
 8009480:	3101      	adds	r1, #1
 8009482:	f7ff ff79 	bl	8009378 <_Balloc>
 8009486:	4680      	mov	r8, r0
 8009488:	b928      	cbnz	r0, 8009496 <__multadd+0x5a>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <__multadd+0x84>)
 800948e:	480d      	ldr	r0, [pc, #52]	; (80094c4 <__multadd+0x88>)
 8009490:	21b5      	movs	r1, #181	; 0xb5
 8009492:	f000 ff4f 	bl	800a334 <__assert_func>
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	f104 010c 	add.w	r1, r4, #12
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7ff ff5b 	bl	800935c <memcpy>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa5 	bl	80093f8 <_Bfree>
 80094ae:	4644      	mov	r4, r8
 80094b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b4:	3501      	adds	r5, #1
 80094b6:	615e      	str	r6, [r3, #20]
 80094b8:	6125      	str	r5, [r4, #16]
 80094ba:	4620      	mov	r0, r4
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	0800ab73 	.word	0x0800ab73
 80094c4:	0800abe4 	.word	0x0800abe4

080094c8 <__hi0bits>:
 80094c8:	0c03      	lsrs	r3, r0, #16
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	b9d3      	cbnz	r3, 8009504 <__hi0bits+0x3c>
 80094ce:	0400      	lsls	r0, r0, #16
 80094d0:	2310      	movs	r3, #16
 80094d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094d6:	bf04      	itt	eq
 80094d8:	0200      	lsleq	r0, r0, #8
 80094da:	3308      	addeq	r3, #8
 80094dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094e0:	bf04      	itt	eq
 80094e2:	0100      	lsleq	r0, r0, #4
 80094e4:	3304      	addeq	r3, #4
 80094e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ea:	bf04      	itt	eq
 80094ec:	0080      	lsleq	r0, r0, #2
 80094ee:	3302      	addeq	r3, #2
 80094f0:	2800      	cmp	r0, #0
 80094f2:	db05      	blt.n	8009500 <__hi0bits+0x38>
 80094f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094f8:	f103 0301 	add.w	r3, r3, #1
 80094fc:	bf08      	it	eq
 80094fe:	2320      	moveq	r3, #32
 8009500:	4618      	mov	r0, r3
 8009502:	4770      	bx	lr
 8009504:	2300      	movs	r3, #0
 8009506:	e7e4      	b.n	80094d2 <__hi0bits+0xa>

08009508 <__lo0bits>:
 8009508:	6803      	ldr	r3, [r0, #0]
 800950a:	f013 0207 	ands.w	r2, r3, #7
 800950e:	4601      	mov	r1, r0
 8009510:	d00b      	beq.n	800952a <__lo0bits+0x22>
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d423      	bmi.n	800955e <__lo0bits+0x56>
 8009516:	0798      	lsls	r0, r3, #30
 8009518:	bf49      	itett	mi
 800951a:	085b      	lsrmi	r3, r3, #1
 800951c:	089b      	lsrpl	r3, r3, #2
 800951e:	2001      	movmi	r0, #1
 8009520:	600b      	strmi	r3, [r1, #0]
 8009522:	bf5c      	itt	pl
 8009524:	600b      	strpl	r3, [r1, #0]
 8009526:	2002      	movpl	r0, #2
 8009528:	4770      	bx	lr
 800952a:	b298      	uxth	r0, r3
 800952c:	b9a8      	cbnz	r0, 800955a <__lo0bits+0x52>
 800952e:	0c1b      	lsrs	r3, r3, #16
 8009530:	2010      	movs	r0, #16
 8009532:	b2da      	uxtb	r2, r3
 8009534:	b90a      	cbnz	r2, 800953a <__lo0bits+0x32>
 8009536:	3008      	adds	r0, #8
 8009538:	0a1b      	lsrs	r3, r3, #8
 800953a:	071a      	lsls	r2, r3, #28
 800953c:	bf04      	itt	eq
 800953e:	091b      	lsreq	r3, r3, #4
 8009540:	3004      	addeq	r0, #4
 8009542:	079a      	lsls	r2, r3, #30
 8009544:	bf04      	itt	eq
 8009546:	089b      	lsreq	r3, r3, #2
 8009548:	3002      	addeq	r0, #2
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d403      	bmi.n	8009556 <__lo0bits+0x4e>
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	f100 0001 	add.w	r0, r0, #1
 8009554:	d005      	beq.n	8009562 <__lo0bits+0x5a>
 8009556:	600b      	str	r3, [r1, #0]
 8009558:	4770      	bx	lr
 800955a:	4610      	mov	r0, r2
 800955c:	e7e9      	b.n	8009532 <__lo0bits+0x2a>
 800955e:	2000      	movs	r0, #0
 8009560:	4770      	bx	lr
 8009562:	2020      	movs	r0, #32
 8009564:	4770      	bx	lr
	...

08009568 <__i2b>:
 8009568:	b510      	push	{r4, lr}
 800956a:	460c      	mov	r4, r1
 800956c:	2101      	movs	r1, #1
 800956e:	f7ff ff03 	bl	8009378 <_Balloc>
 8009572:	4602      	mov	r2, r0
 8009574:	b928      	cbnz	r0, 8009582 <__i2b+0x1a>
 8009576:	4b05      	ldr	r3, [pc, #20]	; (800958c <__i2b+0x24>)
 8009578:	4805      	ldr	r0, [pc, #20]	; (8009590 <__i2b+0x28>)
 800957a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800957e:	f000 fed9 	bl	800a334 <__assert_func>
 8009582:	2301      	movs	r3, #1
 8009584:	6144      	str	r4, [r0, #20]
 8009586:	6103      	str	r3, [r0, #16]
 8009588:	bd10      	pop	{r4, pc}
 800958a:	bf00      	nop
 800958c:	0800ab73 	.word	0x0800ab73
 8009590:	0800abe4 	.word	0x0800abe4

08009594 <__multiply>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	4691      	mov	r9, r2
 800959a:	690a      	ldr	r2, [r1, #16]
 800959c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	bfb8      	it	lt
 80095a4:	460b      	movlt	r3, r1
 80095a6:	460c      	mov	r4, r1
 80095a8:	bfbc      	itt	lt
 80095aa:	464c      	movlt	r4, r9
 80095ac:	4699      	movlt	r9, r3
 80095ae:	6927      	ldr	r7, [r4, #16]
 80095b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	6861      	ldr	r1, [r4, #4]
 80095b8:	eb07 060a 	add.w	r6, r7, sl
 80095bc:	42b3      	cmp	r3, r6
 80095be:	b085      	sub	sp, #20
 80095c0:	bfb8      	it	lt
 80095c2:	3101      	addlt	r1, #1
 80095c4:	f7ff fed8 	bl	8009378 <_Balloc>
 80095c8:	b930      	cbnz	r0, 80095d8 <__multiply+0x44>
 80095ca:	4602      	mov	r2, r0
 80095cc:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <__multiply+0x14c>)
 80095ce:	4845      	ldr	r0, [pc, #276]	; (80096e4 <__multiply+0x150>)
 80095d0:	f240 115d 	movw	r1, #349	; 0x15d
 80095d4:	f000 feae 	bl	800a334 <__assert_func>
 80095d8:	f100 0514 	add.w	r5, r0, #20
 80095dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095e0:	462b      	mov	r3, r5
 80095e2:	2200      	movs	r2, #0
 80095e4:	4543      	cmp	r3, r8
 80095e6:	d321      	bcc.n	800962c <__multiply+0x98>
 80095e8:	f104 0314 	add.w	r3, r4, #20
 80095ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095f0:	f109 0314 	add.w	r3, r9, #20
 80095f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	1b3a      	subs	r2, r7, r4
 80095fc:	3a15      	subs	r2, #21
 80095fe:	f022 0203 	bic.w	r2, r2, #3
 8009602:	3204      	adds	r2, #4
 8009604:	f104 0115 	add.w	r1, r4, #21
 8009608:	428f      	cmp	r7, r1
 800960a:	bf38      	it	cc
 800960c:	2204      	movcc	r2, #4
 800960e:	9201      	str	r2, [sp, #4]
 8009610:	9a02      	ldr	r2, [sp, #8]
 8009612:	9303      	str	r3, [sp, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d80c      	bhi.n	8009632 <__multiply+0x9e>
 8009618:	2e00      	cmp	r6, #0
 800961a:	dd03      	ble.n	8009624 <__multiply+0x90>
 800961c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009620:	2b00      	cmp	r3, #0
 8009622:	d05a      	beq.n	80096da <__multiply+0x146>
 8009624:	6106      	str	r6, [r0, #16]
 8009626:	b005      	add	sp, #20
 8009628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800962c:	f843 2b04 	str.w	r2, [r3], #4
 8009630:	e7d8      	b.n	80095e4 <__multiply+0x50>
 8009632:	f8b3 a000 	ldrh.w	sl, [r3]
 8009636:	f1ba 0f00 	cmp.w	sl, #0
 800963a:	d024      	beq.n	8009686 <__multiply+0xf2>
 800963c:	f104 0e14 	add.w	lr, r4, #20
 8009640:	46a9      	mov	r9, r5
 8009642:	f04f 0c00 	mov.w	ip, #0
 8009646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800964a:	f8d9 1000 	ldr.w	r1, [r9]
 800964e:	fa1f fb82 	uxth.w	fp, r2
 8009652:	b289      	uxth	r1, r1
 8009654:	fb0a 110b 	mla	r1, sl, fp, r1
 8009658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800965c:	f8d9 2000 	ldr.w	r2, [r9]
 8009660:	4461      	add	r1, ip
 8009662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009666:	fb0a c20b 	mla	r2, sl, fp, ip
 800966a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800966e:	b289      	uxth	r1, r1
 8009670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009674:	4577      	cmp	r7, lr
 8009676:	f849 1b04 	str.w	r1, [r9], #4
 800967a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800967e:	d8e2      	bhi.n	8009646 <__multiply+0xb2>
 8009680:	9a01      	ldr	r2, [sp, #4]
 8009682:	f845 c002 	str.w	ip, [r5, r2]
 8009686:	9a03      	ldr	r2, [sp, #12]
 8009688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800968c:	3304      	adds	r3, #4
 800968e:	f1b9 0f00 	cmp.w	r9, #0
 8009692:	d020      	beq.n	80096d6 <__multiply+0x142>
 8009694:	6829      	ldr	r1, [r5, #0]
 8009696:	f104 0c14 	add.w	ip, r4, #20
 800969a:	46ae      	mov	lr, r5
 800969c:	f04f 0a00 	mov.w	sl, #0
 80096a0:	f8bc b000 	ldrh.w	fp, [ip]
 80096a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096a8:	fb09 220b 	mla	r2, r9, fp, r2
 80096ac:	4492      	add	sl, r2
 80096ae:	b289      	uxth	r1, r1
 80096b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096b4:	f84e 1b04 	str.w	r1, [lr], #4
 80096b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096bc:	f8be 1000 	ldrh.w	r1, [lr]
 80096c0:	0c12      	lsrs	r2, r2, #16
 80096c2:	fb09 1102 	mla	r1, r9, r2, r1
 80096c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ca:	4567      	cmp	r7, ip
 80096cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096d0:	d8e6      	bhi.n	80096a0 <__multiply+0x10c>
 80096d2:	9a01      	ldr	r2, [sp, #4]
 80096d4:	50a9      	str	r1, [r5, r2]
 80096d6:	3504      	adds	r5, #4
 80096d8:	e79a      	b.n	8009610 <__multiply+0x7c>
 80096da:	3e01      	subs	r6, #1
 80096dc:	e79c      	b.n	8009618 <__multiply+0x84>
 80096de:	bf00      	nop
 80096e0:	0800ab73 	.word	0x0800ab73
 80096e4:	0800abe4 	.word	0x0800abe4

080096e8 <__pow5mult>:
 80096e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ec:	4615      	mov	r5, r2
 80096ee:	f012 0203 	ands.w	r2, r2, #3
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	d007      	beq.n	8009708 <__pow5mult+0x20>
 80096f8:	4c25      	ldr	r4, [pc, #148]	; (8009790 <__pow5mult+0xa8>)
 80096fa:	3a01      	subs	r2, #1
 80096fc:	2300      	movs	r3, #0
 80096fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009702:	f7ff fe9b 	bl	800943c <__multadd>
 8009706:	4607      	mov	r7, r0
 8009708:	10ad      	asrs	r5, r5, #2
 800970a:	d03d      	beq.n	8009788 <__pow5mult+0xa0>
 800970c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800970e:	b97c      	cbnz	r4, 8009730 <__pow5mult+0x48>
 8009710:	2010      	movs	r0, #16
 8009712:	f7ff fe1b 	bl	800934c <malloc>
 8009716:	4602      	mov	r2, r0
 8009718:	6270      	str	r0, [r6, #36]	; 0x24
 800971a:	b928      	cbnz	r0, 8009728 <__pow5mult+0x40>
 800971c:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <__pow5mult+0xac>)
 800971e:	481e      	ldr	r0, [pc, #120]	; (8009798 <__pow5mult+0xb0>)
 8009720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009724:	f000 fe06 	bl	800a334 <__assert_func>
 8009728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800972c:	6004      	str	r4, [r0, #0]
 800972e:	60c4      	str	r4, [r0, #12]
 8009730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009738:	b94c      	cbnz	r4, 800974e <__pow5mult+0x66>
 800973a:	f240 2171 	movw	r1, #625	; 0x271
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff12 	bl	8009568 <__i2b>
 8009744:	2300      	movs	r3, #0
 8009746:	f8c8 0008 	str.w	r0, [r8, #8]
 800974a:	4604      	mov	r4, r0
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	f04f 0900 	mov.w	r9, #0
 8009752:	07eb      	lsls	r3, r5, #31
 8009754:	d50a      	bpl.n	800976c <__pow5mult+0x84>
 8009756:	4639      	mov	r1, r7
 8009758:	4622      	mov	r2, r4
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff1a 	bl	8009594 <__multiply>
 8009760:	4639      	mov	r1, r7
 8009762:	4680      	mov	r8, r0
 8009764:	4630      	mov	r0, r6
 8009766:	f7ff fe47 	bl	80093f8 <_Bfree>
 800976a:	4647      	mov	r7, r8
 800976c:	106d      	asrs	r5, r5, #1
 800976e:	d00b      	beq.n	8009788 <__pow5mult+0xa0>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	b938      	cbnz	r0, 8009784 <__pow5mult+0x9c>
 8009774:	4622      	mov	r2, r4
 8009776:	4621      	mov	r1, r4
 8009778:	4630      	mov	r0, r6
 800977a:	f7ff ff0b 	bl	8009594 <__multiply>
 800977e:	6020      	str	r0, [r4, #0]
 8009780:	f8c0 9000 	str.w	r9, [r0]
 8009784:	4604      	mov	r4, r0
 8009786:	e7e4      	b.n	8009752 <__pow5mult+0x6a>
 8009788:	4638      	mov	r0, r7
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	bf00      	nop
 8009790:	0800ad30 	.word	0x0800ad30
 8009794:	0800ab01 	.word	0x0800ab01
 8009798:	0800abe4 	.word	0x0800abe4

0800979c <__lshift>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	460c      	mov	r4, r1
 80097a2:	6849      	ldr	r1, [r1, #4]
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	4607      	mov	r7, r0
 80097ae:	4691      	mov	r9, r2
 80097b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097b4:	f108 0601 	add.w	r6, r8, #1
 80097b8:	42b3      	cmp	r3, r6
 80097ba:	db0b      	blt.n	80097d4 <__lshift+0x38>
 80097bc:	4638      	mov	r0, r7
 80097be:	f7ff fddb 	bl	8009378 <_Balloc>
 80097c2:	4605      	mov	r5, r0
 80097c4:	b948      	cbnz	r0, 80097da <__lshift+0x3e>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <__lshift+0xd8>)
 80097ca:	482b      	ldr	r0, [pc, #172]	; (8009878 <__lshift+0xdc>)
 80097cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097d0:	f000 fdb0 	bl	800a334 <__assert_func>
 80097d4:	3101      	adds	r1, #1
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	e7ee      	b.n	80097b8 <__lshift+0x1c>
 80097da:	2300      	movs	r3, #0
 80097dc:	f100 0114 	add.w	r1, r0, #20
 80097e0:	f100 0210 	add.w	r2, r0, #16
 80097e4:	4618      	mov	r0, r3
 80097e6:	4553      	cmp	r3, sl
 80097e8:	db37      	blt.n	800985a <__lshift+0xbe>
 80097ea:	6920      	ldr	r0, [r4, #16]
 80097ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f0:	f104 0314 	add.w	r3, r4, #20
 80097f4:	f019 091f 	ands.w	r9, r9, #31
 80097f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009800:	d02f      	beq.n	8009862 <__lshift+0xc6>
 8009802:	f1c9 0e20 	rsb	lr, r9, #32
 8009806:	468a      	mov	sl, r1
 8009808:	f04f 0c00 	mov.w	ip, #0
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	fa02 f209 	lsl.w	r2, r2, r9
 8009812:	ea42 020c 	orr.w	r2, r2, ip
 8009816:	f84a 2b04 	str.w	r2, [sl], #4
 800981a:	f853 2b04 	ldr.w	r2, [r3], #4
 800981e:	4298      	cmp	r0, r3
 8009820:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009824:	d8f2      	bhi.n	800980c <__lshift+0x70>
 8009826:	1b03      	subs	r3, r0, r4
 8009828:	3b15      	subs	r3, #21
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	3304      	adds	r3, #4
 8009830:	f104 0215 	add.w	r2, r4, #21
 8009834:	4290      	cmp	r0, r2
 8009836:	bf38      	it	cc
 8009838:	2304      	movcc	r3, #4
 800983a:	f841 c003 	str.w	ip, [r1, r3]
 800983e:	f1bc 0f00 	cmp.w	ip, #0
 8009842:	d001      	beq.n	8009848 <__lshift+0xac>
 8009844:	f108 0602 	add.w	r6, r8, #2
 8009848:	3e01      	subs	r6, #1
 800984a:	4638      	mov	r0, r7
 800984c:	612e      	str	r6, [r5, #16]
 800984e:	4621      	mov	r1, r4
 8009850:	f7ff fdd2 	bl	80093f8 <_Bfree>
 8009854:	4628      	mov	r0, r5
 8009856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985a:	f842 0f04 	str.w	r0, [r2, #4]!
 800985e:	3301      	adds	r3, #1
 8009860:	e7c1      	b.n	80097e6 <__lshift+0x4a>
 8009862:	3904      	subs	r1, #4
 8009864:	f853 2b04 	ldr.w	r2, [r3], #4
 8009868:	f841 2f04 	str.w	r2, [r1, #4]!
 800986c:	4298      	cmp	r0, r3
 800986e:	d8f9      	bhi.n	8009864 <__lshift+0xc8>
 8009870:	e7ea      	b.n	8009848 <__lshift+0xac>
 8009872:	bf00      	nop
 8009874:	0800ab73 	.word	0x0800ab73
 8009878:	0800abe4 	.word	0x0800abe4

0800987c <__mcmp>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	6902      	ldr	r2, [r0, #16]
 8009880:	690c      	ldr	r4, [r1, #16]
 8009882:	1b12      	subs	r2, r2, r4
 8009884:	d10e      	bne.n	80098a4 <__mcmp+0x28>
 8009886:	f100 0314 	add.w	r3, r0, #20
 800988a:	3114      	adds	r1, #20
 800988c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800989c:	42a5      	cmp	r5, r4
 800989e:	d003      	beq.n	80098a8 <__mcmp+0x2c>
 80098a0:	d305      	bcc.n	80098ae <__mcmp+0x32>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4610      	mov	r0, r2
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	4283      	cmp	r3, r0
 80098aa:	d3f3      	bcc.n	8009894 <__mcmp+0x18>
 80098ac:	e7fa      	b.n	80098a4 <__mcmp+0x28>
 80098ae:	f04f 32ff 	mov.w	r2, #4294967295
 80098b2:	e7f7      	b.n	80098a4 <__mcmp+0x28>

080098b4 <__mdiff>:
 80098b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b8:	460c      	mov	r4, r1
 80098ba:	4606      	mov	r6, r0
 80098bc:	4611      	mov	r1, r2
 80098be:	4620      	mov	r0, r4
 80098c0:	4690      	mov	r8, r2
 80098c2:	f7ff ffdb 	bl	800987c <__mcmp>
 80098c6:	1e05      	subs	r5, r0, #0
 80098c8:	d110      	bne.n	80098ec <__mdiff+0x38>
 80098ca:	4629      	mov	r1, r5
 80098cc:	4630      	mov	r0, r6
 80098ce:	f7ff fd53 	bl	8009378 <_Balloc>
 80098d2:	b930      	cbnz	r0, 80098e2 <__mdiff+0x2e>
 80098d4:	4b3a      	ldr	r3, [pc, #232]	; (80099c0 <__mdiff+0x10c>)
 80098d6:	4602      	mov	r2, r0
 80098d8:	f240 2132 	movw	r1, #562	; 0x232
 80098dc:	4839      	ldr	r0, [pc, #228]	; (80099c4 <__mdiff+0x110>)
 80098de:	f000 fd29 	bl	800a334 <__assert_func>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	bfa4      	itt	ge
 80098ee:	4643      	movge	r3, r8
 80098f0:	46a0      	movge	r8, r4
 80098f2:	4630      	mov	r0, r6
 80098f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098f8:	bfa6      	itte	ge
 80098fa:	461c      	movge	r4, r3
 80098fc:	2500      	movge	r5, #0
 80098fe:	2501      	movlt	r5, #1
 8009900:	f7ff fd3a 	bl	8009378 <_Balloc>
 8009904:	b920      	cbnz	r0, 8009910 <__mdiff+0x5c>
 8009906:	4b2e      	ldr	r3, [pc, #184]	; (80099c0 <__mdiff+0x10c>)
 8009908:	4602      	mov	r2, r0
 800990a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800990e:	e7e5      	b.n	80098dc <__mdiff+0x28>
 8009910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009914:	6926      	ldr	r6, [r4, #16]
 8009916:	60c5      	str	r5, [r0, #12]
 8009918:	f104 0914 	add.w	r9, r4, #20
 800991c:	f108 0514 	add.w	r5, r8, #20
 8009920:	f100 0e14 	add.w	lr, r0, #20
 8009924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800992c:	f108 0210 	add.w	r2, r8, #16
 8009930:	46f2      	mov	sl, lr
 8009932:	2100      	movs	r1, #0
 8009934:	f859 3b04 	ldr.w	r3, [r9], #4
 8009938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800993c:	fa1f f883 	uxth.w	r8, r3
 8009940:	fa11 f18b 	uxtah	r1, r1, fp
 8009944:	0c1b      	lsrs	r3, r3, #16
 8009946:	eba1 0808 	sub.w	r8, r1, r8
 800994a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800994e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009952:	fa1f f888 	uxth.w	r8, r8
 8009956:	1419      	asrs	r1, r3, #16
 8009958:	454e      	cmp	r6, r9
 800995a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800995e:	f84a 3b04 	str.w	r3, [sl], #4
 8009962:	d8e7      	bhi.n	8009934 <__mdiff+0x80>
 8009964:	1b33      	subs	r3, r6, r4
 8009966:	3b15      	subs	r3, #21
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	3304      	adds	r3, #4
 800996e:	3415      	adds	r4, #21
 8009970:	42a6      	cmp	r6, r4
 8009972:	bf38      	it	cc
 8009974:	2304      	movcc	r3, #4
 8009976:	441d      	add	r5, r3
 8009978:	4473      	add	r3, lr
 800997a:	469e      	mov	lr, r3
 800997c:	462e      	mov	r6, r5
 800997e:	4566      	cmp	r6, ip
 8009980:	d30e      	bcc.n	80099a0 <__mdiff+0xec>
 8009982:	f10c 0203 	add.w	r2, ip, #3
 8009986:	1b52      	subs	r2, r2, r5
 8009988:	f022 0203 	bic.w	r2, r2, #3
 800998c:	3d03      	subs	r5, #3
 800998e:	45ac      	cmp	ip, r5
 8009990:	bf38      	it	cc
 8009992:	2200      	movcc	r2, #0
 8009994:	441a      	add	r2, r3
 8009996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800999a:	b17b      	cbz	r3, 80099bc <__mdiff+0x108>
 800999c:	6107      	str	r7, [r0, #16]
 800999e:	e7a3      	b.n	80098e8 <__mdiff+0x34>
 80099a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80099a4:	fa11 f288 	uxtah	r2, r1, r8
 80099a8:	1414      	asrs	r4, r2, #16
 80099aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099ae:	b292      	uxth	r2, r2
 80099b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80099b4:	f84e 2b04 	str.w	r2, [lr], #4
 80099b8:	1421      	asrs	r1, r4, #16
 80099ba:	e7e0      	b.n	800997e <__mdiff+0xca>
 80099bc:	3f01      	subs	r7, #1
 80099be:	e7ea      	b.n	8009996 <__mdiff+0xe2>
 80099c0:	0800ab73 	.word	0x0800ab73
 80099c4:	0800abe4 	.word	0x0800abe4

080099c8 <__d2b>:
 80099c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4689      	mov	r9, r1
 80099ce:	2101      	movs	r1, #1
 80099d0:	ec57 6b10 	vmov	r6, r7, d0
 80099d4:	4690      	mov	r8, r2
 80099d6:	f7ff fccf 	bl	8009378 <_Balloc>
 80099da:	4604      	mov	r4, r0
 80099dc:	b930      	cbnz	r0, 80099ec <__d2b+0x24>
 80099de:	4602      	mov	r2, r0
 80099e0:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <__d2b+0xb0>)
 80099e2:	4826      	ldr	r0, [pc, #152]	; (8009a7c <__d2b+0xb4>)
 80099e4:	f240 310a 	movw	r1, #778	; 0x30a
 80099e8:	f000 fca4 	bl	800a334 <__assert_func>
 80099ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099f4:	bb35      	cbnz	r5, 8009a44 <__d2b+0x7c>
 80099f6:	2e00      	cmp	r6, #0
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	d028      	beq.n	8009a4e <__d2b+0x86>
 80099fc:	4668      	mov	r0, sp
 80099fe:	9600      	str	r6, [sp, #0]
 8009a00:	f7ff fd82 	bl	8009508 <__lo0bits>
 8009a04:	9900      	ldr	r1, [sp, #0]
 8009a06:	b300      	cbz	r0, 8009a4a <__d2b+0x82>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	f1c0 0320 	rsb	r3, r0, #32
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	430b      	orrs	r3, r1
 8009a14:	40c2      	lsrs	r2, r0
 8009a16:	6163      	str	r3, [r4, #20]
 8009a18:	9201      	str	r2, [sp, #4]
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	61a3      	str	r3, [r4, #24]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf14      	ite	ne
 8009a22:	2202      	movne	r2, #2
 8009a24:	2201      	moveq	r2, #1
 8009a26:	6122      	str	r2, [r4, #16]
 8009a28:	b1d5      	cbz	r5, 8009a60 <__d2b+0x98>
 8009a2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a2e:	4405      	add	r5, r0
 8009a30:	f8c9 5000 	str.w	r5, [r9]
 8009a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a38:	f8c8 0000 	str.w	r0, [r8]
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	b003      	add	sp, #12
 8009a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a48:	e7d5      	b.n	80099f6 <__d2b+0x2e>
 8009a4a:	6161      	str	r1, [r4, #20]
 8009a4c:	e7e5      	b.n	8009a1a <__d2b+0x52>
 8009a4e:	a801      	add	r0, sp, #4
 8009a50:	f7ff fd5a 	bl	8009508 <__lo0bits>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	6122      	str	r2, [r4, #16]
 8009a5c:	3020      	adds	r0, #32
 8009a5e:	e7e3      	b.n	8009a28 <__d2b+0x60>
 8009a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a68:	f8c9 0000 	str.w	r0, [r9]
 8009a6c:	6918      	ldr	r0, [r3, #16]
 8009a6e:	f7ff fd2b 	bl	80094c8 <__hi0bits>
 8009a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a76:	e7df      	b.n	8009a38 <__d2b+0x70>
 8009a78:	0800ab73 	.word	0x0800ab73
 8009a7c:	0800abe4 	.word	0x0800abe4

08009a80 <_calloc_r>:
 8009a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a82:	fba1 2402 	umull	r2, r4, r1, r2
 8009a86:	b94c      	cbnz	r4, 8009a9c <_calloc_r+0x1c>
 8009a88:	4611      	mov	r1, r2
 8009a8a:	9201      	str	r2, [sp, #4]
 8009a8c:	f000 f87a 	bl	8009b84 <_malloc_r>
 8009a90:	9a01      	ldr	r2, [sp, #4]
 8009a92:	4605      	mov	r5, r0
 8009a94:	b930      	cbnz	r0, 8009aa4 <_calloc_r+0x24>
 8009a96:	4628      	mov	r0, r5
 8009a98:	b003      	add	sp, #12
 8009a9a:	bd30      	pop	{r4, r5, pc}
 8009a9c:	220c      	movs	r2, #12
 8009a9e:	6002      	str	r2, [r0, #0]
 8009aa0:	2500      	movs	r5, #0
 8009aa2:	e7f8      	b.n	8009a96 <_calloc_r+0x16>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7fd fdbb 	bl	8007620 <memset>
 8009aaa:	e7f4      	b.n	8009a96 <_calloc_r+0x16>

08009aac <_free_r>:
 8009aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d044      	beq.n	8009b3c <_free_r+0x90>
 8009ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ab6:	9001      	str	r0, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f1a1 0404 	sub.w	r4, r1, #4
 8009abe:	bfb8      	it	lt
 8009ac0:	18e4      	addlt	r4, r4, r3
 8009ac2:	f000 fcd7 	bl	800a474 <__malloc_lock>
 8009ac6:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <_free_r+0x94>)
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x30>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	b003      	add	sp, #12
 8009ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ad8:	f000 bcd2 	b.w	800a480 <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x46>
 8009ae0:	6825      	ldr	r5, [r4, #0]
 8009ae2:	1961      	adds	r1, r4, r5
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x22>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x50>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x46>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1855      	adds	r5, r2, r1
 8009b00:	42a5      	cmp	r5, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x70>
 8009b04:	6824      	ldr	r4, [r4, #0]
 8009b06:	4421      	add	r1, r4
 8009b08:	1854      	adds	r4, r2, r1
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x26>
 8009b10:	681c      	ldr	r4, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6053      	str	r3, [r2, #4]
 8009b16:	4421      	add	r1, r4
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x26>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x78>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x26>
 8009b24:	6825      	ldr	r5, [r4, #0]
 8009b26:	1961      	adds	r1, r4, r5
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf04      	itt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	6063      	str	r3, [r4, #4]
 8009b32:	bf04      	itt	eq
 8009b34:	1949      	addeq	r1, r1, r5
 8009b36:	6021      	streq	r1, [r4, #0]
 8009b38:	6054      	str	r4, [r2, #4]
 8009b3a:	e7ca      	b.n	8009ad2 <_free_r+0x26>
 8009b3c:	b003      	add	sp, #12
 8009b3e:	bd30      	pop	{r4, r5, pc}
 8009b40:	20000408 	.word	0x20000408

08009b44 <sbrk_aligned>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	4e0e      	ldr	r6, [pc, #56]	; (8009b80 <sbrk_aligned+0x3c>)
 8009b48:	460c      	mov	r4, r1
 8009b4a:	6831      	ldr	r1, [r6, #0]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	b911      	cbnz	r1, 8009b56 <sbrk_aligned+0x12>
 8009b50:	f000 fb8a 	bl	800a268 <_sbrk_r>
 8009b54:	6030      	str	r0, [r6, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 fb85 	bl	800a268 <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d00a      	beq.n	8009b78 <sbrk_aligned+0x34>
 8009b62:	1cc4      	adds	r4, r0, #3
 8009b64:	f024 0403 	bic.w	r4, r4, #3
 8009b68:	42a0      	cmp	r0, r4
 8009b6a:	d007      	beq.n	8009b7c <sbrk_aligned+0x38>
 8009b6c:	1a21      	subs	r1, r4, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fb7a 	bl	800a268 <_sbrk_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d101      	bne.n	8009b7c <sbrk_aligned+0x38>
 8009b78:	f04f 34ff 	mov.w	r4, #4294967295
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	2000040c 	.word	0x2000040c

08009b84 <_malloc_r>:
 8009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b88:	1ccd      	adds	r5, r1, #3
 8009b8a:	f025 0503 	bic.w	r5, r5, #3
 8009b8e:	3508      	adds	r5, #8
 8009b90:	2d0c      	cmp	r5, #12
 8009b92:	bf38      	it	cc
 8009b94:	250c      	movcc	r5, #12
 8009b96:	2d00      	cmp	r5, #0
 8009b98:	4607      	mov	r7, r0
 8009b9a:	db01      	blt.n	8009ba0 <_malloc_r+0x1c>
 8009b9c:	42a9      	cmp	r1, r5
 8009b9e:	d905      	bls.n	8009bac <_malloc_r+0x28>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	2600      	movs	r6, #0
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bac:	4e2e      	ldr	r6, [pc, #184]	; (8009c68 <_malloc_r+0xe4>)
 8009bae:	f000 fc61 	bl	800a474 <__malloc_lock>
 8009bb2:	6833      	ldr	r3, [r6, #0]
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	bb34      	cbnz	r4, 8009c06 <_malloc_r+0x82>
 8009bb8:	4629      	mov	r1, r5
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f7ff ffc2 	bl	8009b44 <sbrk_aligned>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	d14d      	bne.n	8009c62 <_malloc_r+0xde>
 8009bc6:	6834      	ldr	r4, [r6, #0]
 8009bc8:	4626      	mov	r6, r4
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	d140      	bne.n	8009c50 <_malloc_r+0xcc>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	eb04 0803 	add.w	r8, r4, r3
 8009bd8:	f000 fb46 	bl	800a268 <_sbrk_r>
 8009bdc:	4580      	cmp	r8, r0
 8009bde:	d13a      	bne.n	8009c56 <_malloc_r+0xd2>
 8009be0:	6821      	ldr	r1, [r4, #0]
 8009be2:	3503      	adds	r5, #3
 8009be4:	1a6d      	subs	r5, r5, r1
 8009be6:	f025 0503 	bic.w	r5, r5, #3
 8009bea:	3508      	adds	r5, #8
 8009bec:	2d0c      	cmp	r5, #12
 8009bee:	bf38      	it	cc
 8009bf0:	250c      	movcc	r5, #12
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff ffa5 	bl	8009b44 <sbrk_aligned>
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	d02b      	beq.n	8009c56 <_malloc_r+0xd2>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	442b      	add	r3, r5
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	e00e      	b.n	8009c24 <_malloc_r+0xa0>
 8009c06:	6822      	ldr	r2, [r4, #0]
 8009c08:	1b52      	subs	r2, r2, r5
 8009c0a:	d41e      	bmi.n	8009c4a <_malloc_r+0xc6>
 8009c0c:	2a0b      	cmp	r2, #11
 8009c0e:	d916      	bls.n	8009c3e <_malloc_r+0xba>
 8009c10:	1961      	adds	r1, r4, r5
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	6025      	str	r5, [r4, #0]
 8009c16:	bf18      	it	ne
 8009c18:	6059      	strne	r1, [r3, #4]
 8009c1a:	6863      	ldr	r3, [r4, #4]
 8009c1c:	bf08      	it	eq
 8009c1e:	6031      	streq	r1, [r6, #0]
 8009c20:	5162      	str	r2, [r4, r5]
 8009c22:	604b      	str	r3, [r1, #4]
 8009c24:	4638      	mov	r0, r7
 8009c26:	f104 060b 	add.w	r6, r4, #11
 8009c2a:	f000 fc29 	bl	800a480 <__malloc_unlock>
 8009c2e:	f026 0607 	bic.w	r6, r6, #7
 8009c32:	1d23      	adds	r3, r4, #4
 8009c34:	1af2      	subs	r2, r6, r3
 8009c36:	d0b6      	beq.n	8009ba6 <_malloc_r+0x22>
 8009c38:	1b9b      	subs	r3, r3, r6
 8009c3a:	50a3      	str	r3, [r4, r2]
 8009c3c:	e7b3      	b.n	8009ba6 <_malloc_r+0x22>
 8009c3e:	6862      	ldr	r2, [r4, #4]
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	bf0c      	ite	eq
 8009c44:	6032      	streq	r2, [r6, #0]
 8009c46:	605a      	strne	r2, [r3, #4]
 8009c48:	e7ec      	b.n	8009c24 <_malloc_r+0xa0>
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	6864      	ldr	r4, [r4, #4]
 8009c4e:	e7b2      	b.n	8009bb6 <_malloc_r+0x32>
 8009c50:	4634      	mov	r4, r6
 8009c52:	6876      	ldr	r6, [r6, #4]
 8009c54:	e7b9      	b.n	8009bca <_malloc_r+0x46>
 8009c56:	230c      	movs	r3, #12
 8009c58:	603b      	str	r3, [r7, #0]
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	f000 fc10 	bl	800a480 <__malloc_unlock>
 8009c60:	e7a1      	b.n	8009ba6 <_malloc_r+0x22>
 8009c62:	6025      	str	r5, [r4, #0]
 8009c64:	e7de      	b.n	8009c24 <_malloc_r+0xa0>
 8009c66:	bf00      	nop
 8009c68:	20000408 	.word	0x20000408

08009c6c <__ssputs_r>:
 8009c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c70:	688e      	ldr	r6, [r1, #8]
 8009c72:	429e      	cmp	r6, r3
 8009c74:	4682      	mov	sl, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	4690      	mov	r8, r2
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	d838      	bhi.n	8009cf0 <__ssputs_r+0x84>
 8009c7e:	898a      	ldrh	r2, [r1, #12]
 8009c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c84:	d032      	beq.n	8009cec <__ssputs_r+0x80>
 8009c86:	6825      	ldr	r5, [r4, #0]
 8009c88:	6909      	ldr	r1, [r1, #16]
 8009c8a:	eba5 0901 	sub.w	r9, r5, r1
 8009c8e:	6965      	ldr	r5, [r4, #20]
 8009c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c98:	3301      	adds	r3, #1
 8009c9a:	444b      	add	r3, r9
 8009c9c:	106d      	asrs	r5, r5, #1
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	bf38      	it	cc
 8009ca2:	461d      	movcc	r5, r3
 8009ca4:	0553      	lsls	r3, r2, #21
 8009ca6:	d531      	bpl.n	8009d0c <__ssputs_r+0xa0>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7ff ff6b 	bl	8009b84 <_malloc_r>
 8009cae:	4606      	mov	r6, r0
 8009cb0:	b950      	cbnz	r0, 8009cc8 <__ssputs_r+0x5c>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	f8ca 3000 	str.w	r3, [sl]
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	6921      	ldr	r1, [r4, #16]
 8009cca:	464a      	mov	r2, r9
 8009ccc:	f7ff fb46 	bl	800935c <memcpy>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	6126      	str	r6, [r4, #16]
 8009cde:	6165      	str	r5, [r4, #20]
 8009ce0:	444e      	add	r6, r9
 8009ce2:	eba5 0509 	sub.w	r5, r5, r9
 8009ce6:	6026      	str	r6, [r4, #0]
 8009ce8:	60a5      	str	r5, [r4, #8]
 8009cea:	463e      	mov	r6, r7
 8009cec:	42be      	cmp	r6, r7
 8009cee:	d900      	bls.n	8009cf2 <__ssputs_r+0x86>
 8009cf0:	463e      	mov	r6, r7
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	4632      	mov	r2, r6
 8009cf6:	4641      	mov	r1, r8
 8009cf8:	f000 fba2 	bl	800a440 <memmove>
 8009cfc:	68a3      	ldr	r3, [r4, #8]
 8009cfe:	1b9b      	subs	r3, r3, r6
 8009d00:	60a3      	str	r3, [r4, #8]
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	4433      	add	r3, r6
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	2000      	movs	r0, #0
 8009d0a:	e7db      	b.n	8009cc4 <__ssputs_r+0x58>
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	f000 fbbd 	bl	800a48c <_realloc_r>
 8009d12:	4606      	mov	r6, r0
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1e1      	bne.n	8009cdc <__ssputs_r+0x70>
 8009d18:	6921      	ldr	r1, [r4, #16]
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	f7ff fec6 	bl	8009aac <_free_r>
 8009d20:	e7c7      	b.n	8009cb2 <__ssputs_r+0x46>
	...

08009d24 <_svfiprintf_r>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	4698      	mov	r8, r3
 8009d2a:	898b      	ldrh	r3, [r1, #12]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	b09d      	sub	sp, #116	; 0x74
 8009d30:	4607      	mov	r7, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	d50e      	bpl.n	8009d56 <_svfiprintf_r+0x32>
 8009d38:	690b      	ldr	r3, [r1, #16]
 8009d3a:	b963      	cbnz	r3, 8009d56 <_svfiprintf_r+0x32>
 8009d3c:	2140      	movs	r1, #64	; 0x40
 8009d3e:	f7ff ff21 	bl	8009b84 <_malloc_r>
 8009d42:	6028      	str	r0, [r5, #0]
 8009d44:	6128      	str	r0, [r5, #16]
 8009d46:	b920      	cbnz	r0, 8009d52 <_svfiprintf_r+0x2e>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e0d1      	b.n	8009ef6 <_svfiprintf_r+0x1d2>
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	616b      	str	r3, [r5, #20]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d64:	2330      	movs	r3, #48	; 0x30
 8009d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009f10 <_svfiprintf_r+0x1ec>
 8009d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d6e:	f04f 0901 	mov.w	r9, #1
 8009d72:	4623      	mov	r3, r4
 8009d74:	469a      	mov	sl, r3
 8009d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7a:	b10a      	cbz	r2, 8009d80 <_svfiprintf_r+0x5c>
 8009d7c:	2a25      	cmp	r2, #37	; 0x25
 8009d7e:	d1f9      	bne.n	8009d74 <_svfiprintf_r+0x50>
 8009d80:	ebba 0b04 	subs.w	fp, sl, r4
 8009d84:	d00b      	beq.n	8009d9e <_svfiprintf_r+0x7a>
 8009d86:	465b      	mov	r3, fp
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff ff6d 	bl	8009c6c <__ssputs_r>
 8009d92:	3001      	adds	r0, #1
 8009d94:	f000 80aa 	beq.w	8009eec <_svfiprintf_r+0x1c8>
 8009d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9a:	445a      	add	r2, fp
 8009d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80a2 	beq.w	8009eec <_svfiprintf_r+0x1c8>
 8009da8:	2300      	movs	r3, #0
 8009daa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db2:	f10a 0a01 	add.w	sl, sl, #1
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc0:	4654      	mov	r4, sl
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	4851      	ldr	r0, [pc, #324]	; (8009f10 <_svfiprintf_r+0x1ec>)
 8009dca:	f7f6 fa11 	bl	80001f0 <memchr>
 8009dce:	9a04      	ldr	r2, [sp, #16]
 8009dd0:	b9d8      	cbnz	r0, 8009e0a <_svfiprintf_r+0xe6>
 8009dd2:	06d0      	lsls	r0, r2, #27
 8009dd4:	bf44      	itt	mi
 8009dd6:	2320      	movmi	r3, #32
 8009dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ddc:	0711      	lsls	r1, r2, #28
 8009dde:	bf44      	itt	mi
 8009de0:	232b      	movmi	r3, #43	; 0x2b
 8009de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dea:	2b2a      	cmp	r3, #42	; 0x2a
 8009dec:	d015      	beq.n	8009e1a <_svfiprintf_r+0xf6>
 8009dee:	9a07      	ldr	r2, [sp, #28]
 8009df0:	4654      	mov	r4, sl
 8009df2:	2000      	movs	r0, #0
 8009df4:	f04f 0c0a 	mov.w	ip, #10
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfe:	3b30      	subs	r3, #48	; 0x30
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d94e      	bls.n	8009ea2 <_svfiprintf_r+0x17e>
 8009e04:	b1b0      	cbz	r0, 8009e34 <_svfiprintf_r+0x110>
 8009e06:	9207      	str	r2, [sp, #28]
 8009e08:	e014      	b.n	8009e34 <_svfiprintf_r+0x110>
 8009e0a:	eba0 0308 	sub.w	r3, r0, r8
 8009e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e12:	4313      	orrs	r3, r2
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	46a2      	mov	sl, r4
 8009e18:	e7d2      	b.n	8009dc0 <_svfiprintf_r+0x9c>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	1d19      	adds	r1, r3, #4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	9103      	str	r1, [sp, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfbb      	ittet	lt
 8009e26:	425b      	neglt	r3, r3
 8009e28:	f042 0202 	orrlt.w	r2, r2, #2
 8009e2c:	9307      	strge	r3, [sp, #28]
 8009e2e:	9307      	strlt	r3, [sp, #28]
 8009e30:	bfb8      	it	lt
 8009e32:	9204      	strlt	r2, [sp, #16]
 8009e34:	7823      	ldrb	r3, [r4, #0]
 8009e36:	2b2e      	cmp	r3, #46	; 0x2e
 8009e38:	d10c      	bne.n	8009e54 <_svfiprintf_r+0x130>
 8009e3a:	7863      	ldrb	r3, [r4, #1]
 8009e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3e:	d135      	bne.n	8009eac <_svfiprintf_r+0x188>
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	1d1a      	adds	r2, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	9203      	str	r2, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfb8      	it	lt
 8009e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e50:	3402      	adds	r4, #2
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f20 <_svfiprintf_r+0x1fc>
 8009e58:	7821      	ldrb	r1, [r4, #0]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	4650      	mov	r0, sl
 8009e5e:	f7f6 f9c7 	bl	80001f0 <memchr>
 8009e62:	b140      	cbz	r0, 8009e76 <_svfiprintf_r+0x152>
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	eba0 000a 	sub.w	r0, r0, sl
 8009e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	4303      	orrs	r3, r0
 8009e72:	3401      	adds	r4, #1
 8009e74:	9304      	str	r3, [sp, #16]
 8009e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7a:	4826      	ldr	r0, [pc, #152]	; (8009f14 <_svfiprintf_r+0x1f0>)
 8009e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e80:	2206      	movs	r2, #6
 8009e82:	f7f6 f9b5 	bl	80001f0 <memchr>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d038      	beq.n	8009efc <_svfiprintf_r+0x1d8>
 8009e8a:	4b23      	ldr	r3, [pc, #140]	; (8009f18 <_svfiprintf_r+0x1f4>)
 8009e8c:	bb1b      	cbnz	r3, 8009ed6 <_svfiprintf_r+0x1b2>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	3307      	adds	r3, #7
 8009e92:	f023 0307 	bic.w	r3, r3, #7
 8009e96:	3308      	adds	r3, #8
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	4433      	add	r3, r6
 8009e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea0:	e767      	b.n	8009d72 <_svfiprintf_r+0x4e>
 8009ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	2001      	movs	r0, #1
 8009eaa:	e7a5      	b.n	8009df8 <_svfiprintf_r+0xd4>
 8009eac:	2300      	movs	r3, #0
 8009eae:	3401      	adds	r4, #1
 8009eb0:	9305      	str	r3, [sp, #20]
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	f04f 0c0a 	mov.w	ip, #10
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ebe:	3a30      	subs	r2, #48	; 0x30
 8009ec0:	2a09      	cmp	r2, #9
 8009ec2:	d903      	bls.n	8009ecc <_svfiprintf_r+0x1a8>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0c5      	beq.n	8009e54 <_svfiprintf_r+0x130>
 8009ec8:	9105      	str	r1, [sp, #20]
 8009eca:	e7c3      	b.n	8009e54 <_svfiprintf_r+0x130>
 8009ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7f0      	b.n	8009eb8 <_svfiprintf_r+0x194>
 8009ed6:	ab03      	add	r3, sp, #12
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	462a      	mov	r2, r5
 8009edc:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <_svfiprintf_r+0x1f8>)
 8009ede:	a904      	add	r1, sp, #16
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7fd fc45 	bl	8007770 <_printf_float>
 8009ee6:	1c42      	adds	r2, r0, #1
 8009ee8:	4606      	mov	r6, r0
 8009eea:	d1d6      	bne.n	8009e9a <_svfiprintf_r+0x176>
 8009eec:	89ab      	ldrh	r3, [r5, #12]
 8009eee:	065b      	lsls	r3, r3, #25
 8009ef0:	f53f af2c 	bmi.w	8009d4c <_svfiprintf_r+0x28>
 8009ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef6:	b01d      	add	sp, #116	; 0x74
 8009ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efc:	ab03      	add	r3, sp, #12
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	462a      	mov	r2, r5
 8009f02:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <_svfiprintf_r+0x1f8>)
 8009f04:	a904      	add	r1, sp, #16
 8009f06:	4638      	mov	r0, r7
 8009f08:	f7fd fed6 	bl	8007cb8 <_printf_i>
 8009f0c:	e7eb      	b.n	8009ee6 <_svfiprintf_r+0x1c2>
 8009f0e:	bf00      	nop
 8009f10:	0800ad3c 	.word	0x0800ad3c
 8009f14:	0800ad46 	.word	0x0800ad46
 8009f18:	08007771 	.word	0x08007771
 8009f1c:	08009c6d 	.word	0x08009c6d
 8009f20:	0800ad42 	.word	0x0800ad42

08009f24 <__sfputc_r>:
 8009f24:	6893      	ldr	r3, [r2, #8]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	b410      	push	{r4}
 8009f2c:	6093      	str	r3, [r2, #8]
 8009f2e:	da08      	bge.n	8009f42 <__sfputc_r+0x1e>
 8009f30:	6994      	ldr	r4, [r2, #24]
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	db01      	blt.n	8009f3a <__sfputc_r+0x16>
 8009f36:	290a      	cmp	r1, #10
 8009f38:	d103      	bne.n	8009f42 <__sfputc_r+0x1e>
 8009f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f3e:	f7fe b8a5 	b.w	800808c <__swbuf_r>
 8009f42:	6813      	ldr	r3, [r2, #0]
 8009f44:	1c58      	adds	r0, r3, #1
 8009f46:	6010      	str	r0, [r2, #0]
 8009f48:	7019      	strb	r1, [r3, #0]
 8009f4a:	4608      	mov	r0, r1
 8009f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <__sfputs_r>:
 8009f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f54:	4606      	mov	r6, r0
 8009f56:	460f      	mov	r7, r1
 8009f58:	4614      	mov	r4, r2
 8009f5a:	18d5      	adds	r5, r2, r3
 8009f5c:	42ac      	cmp	r4, r5
 8009f5e:	d101      	bne.n	8009f64 <__sfputs_r+0x12>
 8009f60:	2000      	movs	r0, #0
 8009f62:	e007      	b.n	8009f74 <__sfputs_r+0x22>
 8009f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f68:	463a      	mov	r2, r7
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f7ff ffda 	bl	8009f24 <__sfputc_r>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d1f3      	bne.n	8009f5c <__sfputs_r+0xa>
 8009f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f78 <_vfiprintf_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	460d      	mov	r5, r1
 8009f7e:	b09d      	sub	sp, #116	; 0x74
 8009f80:	4614      	mov	r4, r2
 8009f82:	4698      	mov	r8, r3
 8009f84:	4606      	mov	r6, r0
 8009f86:	b118      	cbz	r0, 8009f90 <_vfiprintf_r+0x18>
 8009f88:	6983      	ldr	r3, [r0, #24]
 8009f8a:	b90b      	cbnz	r3, 8009f90 <_vfiprintf_r+0x18>
 8009f8c:	f7ff f8d4 	bl	8009138 <__sinit>
 8009f90:	4b89      	ldr	r3, [pc, #548]	; (800a1b8 <_vfiprintf_r+0x240>)
 8009f92:	429d      	cmp	r5, r3
 8009f94:	d11b      	bne.n	8009fce <_vfiprintf_r+0x56>
 8009f96:	6875      	ldr	r5, [r6, #4]
 8009f98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f9a:	07d9      	lsls	r1, r3, #31
 8009f9c:	d405      	bmi.n	8009faa <_vfiprintf_r+0x32>
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	059a      	lsls	r2, r3, #22
 8009fa2:	d402      	bmi.n	8009faa <_vfiprintf_r+0x32>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa6:	f7ff f96a 	bl	800927e <__retarget_lock_acquire_recursive>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	071b      	lsls	r3, r3, #28
 8009fae:	d501      	bpl.n	8009fb4 <_vfiprintf_r+0x3c>
 8009fb0:	692b      	ldr	r3, [r5, #16]
 8009fb2:	b9eb      	cbnz	r3, 8009ff0 <_vfiprintf_r+0x78>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f7fe f8ba 	bl	8008130 <__swsetup_r>
 8009fbc:	b1c0      	cbz	r0, 8009ff0 <_vfiprintf_r+0x78>
 8009fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc0:	07dc      	lsls	r4, r3, #31
 8009fc2:	d50e      	bpl.n	8009fe2 <_vfiprintf_r+0x6a>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	b01d      	add	sp, #116	; 0x74
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	4b7b      	ldr	r3, [pc, #492]	; (800a1bc <_vfiprintf_r+0x244>)
 8009fd0:	429d      	cmp	r5, r3
 8009fd2:	d101      	bne.n	8009fd8 <_vfiprintf_r+0x60>
 8009fd4:	68b5      	ldr	r5, [r6, #8]
 8009fd6:	e7df      	b.n	8009f98 <_vfiprintf_r+0x20>
 8009fd8:	4b79      	ldr	r3, [pc, #484]	; (800a1c0 <_vfiprintf_r+0x248>)
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	bf08      	it	eq
 8009fde:	68f5      	ldreq	r5, [r6, #12]
 8009fe0:	e7da      	b.n	8009f98 <_vfiprintf_r+0x20>
 8009fe2:	89ab      	ldrh	r3, [r5, #12]
 8009fe4:	0598      	lsls	r0, r3, #22
 8009fe6:	d4ed      	bmi.n	8009fc4 <_vfiprintf_r+0x4c>
 8009fe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fea:	f7ff f949 	bl	8009280 <__retarget_lock_release_recursive>
 8009fee:	e7e9      	b.n	8009fc4 <_vfiprintf_r+0x4c>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff4:	2320      	movs	r3, #32
 8009ff6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffe:	2330      	movs	r3, #48	; 0x30
 800a000:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1c4 <_vfiprintf_r+0x24c>
 800a004:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a008:	f04f 0901 	mov.w	r9, #1
 800a00c:	4623      	mov	r3, r4
 800a00e:	469a      	mov	sl, r3
 800a010:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a014:	b10a      	cbz	r2, 800a01a <_vfiprintf_r+0xa2>
 800a016:	2a25      	cmp	r2, #37	; 0x25
 800a018:	d1f9      	bne.n	800a00e <_vfiprintf_r+0x96>
 800a01a:	ebba 0b04 	subs.w	fp, sl, r4
 800a01e:	d00b      	beq.n	800a038 <_vfiprintf_r+0xc0>
 800a020:	465b      	mov	r3, fp
 800a022:	4622      	mov	r2, r4
 800a024:	4629      	mov	r1, r5
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ff93 	bl	8009f52 <__sfputs_r>
 800a02c:	3001      	adds	r0, #1
 800a02e:	f000 80aa 	beq.w	800a186 <_vfiprintf_r+0x20e>
 800a032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a034:	445a      	add	r2, fp
 800a036:	9209      	str	r2, [sp, #36]	; 0x24
 800a038:	f89a 3000 	ldrb.w	r3, [sl]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f000 80a2 	beq.w	800a186 <_vfiprintf_r+0x20e>
 800a042:	2300      	movs	r3, #0
 800a044:	f04f 32ff 	mov.w	r2, #4294967295
 800a048:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a04c:	f10a 0a01 	add.w	sl, sl, #1
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	9307      	str	r3, [sp, #28]
 800a054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a058:	931a      	str	r3, [sp, #104]	; 0x68
 800a05a:	4654      	mov	r4, sl
 800a05c:	2205      	movs	r2, #5
 800a05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a062:	4858      	ldr	r0, [pc, #352]	; (800a1c4 <_vfiprintf_r+0x24c>)
 800a064:	f7f6 f8c4 	bl	80001f0 <memchr>
 800a068:	9a04      	ldr	r2, [sp, #16]
 800a06a:	b9d8      	cbnz	r0, 800a0a4 <_vfiprintf_r+0x12c>
 800a06c:	06d1      	lsls	r1, r2, #27
 800a06e:	bf44      	itt	mi
 800a070:	2320      	movmi	r3, #32
 800a072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a076:	0713      	lsls	r3, r2, #28
 800a078:	bf44      	itt	mi
 800a07a:	232b      	movmi	r3, #43	; 0x2b
 800a07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a080:	f89a 3000 	ldrb.w	r3, [sl]
 800a084:	2b2a      	cmp	r3, #42	; 0x2a
 800a086:	d015      	beq.n	800a0b4 <_vfiprintf_r+0x13c>
 800a088:	9a07      	ldr	r2, [sp, #28]
 800a08a:	4654      	mov	r4, sl
 800a08c:	2000      	movs	r0, #0
 800a08e:	f04f 0c0a 	mov.w	ip, #10
 800a092:	4621      	mov	r1, r4
 800a094:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a098:	3b30      	subs	r3, #48	; 0x30
 800a09a:	2b09      	cmp	r3, #9
 800a09c:	d94e      	bls.n	800a13c <_vfiprintf_r+0x1c4>
 800a09e:	b1b0      	cbz	r0, 800a0ce <_vfiprintf_r+0x156>
 800a0a0:	9207      	str	r2, [sp, #28]
 800a0a2:	e014      	b.n	800a0ce <_vfiprintf_r+0x156>
 800a0a4:	eba0 0308 	sub.w	r3, r0, r8
 800a0a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	9304      	str	r3, [sp, #16]
 800a0b0:	46a2      	mov	sl, r4
 800a0b2:	e7d2      	b.n	800a05a <_vfiprintf_r+0xe2>
 800a0b4:	9b03      	ldr	r3, [sp, #12]
 800a0b6:	1d19      	adds	r1, r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	9103      	str	r1, [sp, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfbb      	ittet	lt
 800a0c0:	425b      	neglt	r3, r3
 800a0c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a0c6:	9307      	strge	r3, [sp, #28]
 800a0c8:	9307      	strlt	r3, [sp, #28]
 800a0ca:	bfb8      	it	lt
 800a0cc:	9204      	strlt	r2, [sp, #16]
 800a0ce:	7823      	ldrb	r3, [r4, #0]
 800a0d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d2:	d10c      	bne.n	800a0ee <_vfiprintf_r+0x176>
 800a0d4:	7863      	ldrb	r3, [r4, #1]
 800a0d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d8:	d135      	bne.n	800a146 <_vfiprintf_r+0x1ce>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	1d1a      	adds	r2, r3, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	9203      	str	r2, [sp, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfb8      	it	lt
 800a0e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0ea:	3402      	adds	r4, #2
 800a0ec:	9305      	str	r3, [sp, #20]
 800a0ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1d4 <_vfiprintf_r+0x25c>
 800a0f2:	7821      	ldrb	r1, [r4, #0]
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	4650      	mov	r0, sl
 800a0f8:	f7f6 f87a 	bl	80001f0 <memchr>
 800a0fc:	b140      	cbz	r0, 800a110 <_vfiprintf_r+0x198>
 800a0fe:	2340      	movs	r3, #64	; 0x40
 800a100:	eba0 000a 	sub.w	r0, r0, sl
 800a104:	fa03 f000 	lsl.w	r0, r3, r0
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	4303      	orrs	r3, r0
 800a10c:	3401      	adds	r4, #1
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a114:	482c      	ldr	r0, [pc, #176]	; (800a1c8 <_vfiprintf_r+0x250>)
 800a116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a11a:	2206      	movs	r2, #6
 800a11c:	f7f6 f868 	bl	80001f0 <memchr>
 800a120:	2800      	cmp	r0, #0
 800a122:	d03f      	beq.n	800a1a4 <_vfiprintf_r+0x22c>
 800a124:	4b29      	ldr	r3, [pc, #164]	; (800a1cc <_vfiprintf_r+0x254>)
 800a126:	bb1b      	cbnz	r3, 800a170 <_vfiprintf_r+0x1f8>
 800a128:	9b03      	ldr	r3, [sp, #12]
 800a12a:	3307      	adds	r3, #7
 800a12c:	f023 0307 	bic.w	r3, r3, #7
 800a130:	3308      	adds	r3, #8
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a136:	443b      	add	r3, r7
 800a138:	9309      	str	r3, [sp, #36]	; 0x24
 800a13a:	e767      	b.n	800a00c <_vfiprintf_r+0x94>
 800a13c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a140:	460c      	mov	r4, r1
 800a142:	2001      	movs	r0, #1
 800a144:	e7a5      	b.n	800a092 <_vfiprintf_r+0x11a>
 800a146:	2300      	movs	r3, #0
 800a148:	3401      	adds	r4, #1
 800a14a:	9305      	str	r3, [sp, #20]
 800a14c:	4619      	mov	r1, r3
 800a14e:	f04f 0c0a 	mov.w	ip, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a158:	3a30      	subs	r2, #48	; 0x30
 800a15a:	2a09      	cmp	r2, #9
 800a15c:	d903      	bls.n	800a166 <_vfiprintf_r+0x1ee>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0c5      	beq.n	800a0ee <_vfiprintf_r+0x176>
 800a162:	9105      	str	r1, [sp, #20]
 800a164:	e7c3      	b.n	800a0ee <_vfiprintf_r+0x176>
 800a166:	fb0c 2101 	mla	r1, ip, r1, r2
 800a16a:	4604      	mov	r4, r0
 800a16c:	2301      	movs	r3, #1
 800a16e:	e7f0      	b.n	800a152 <_vfiprintf_r+0x1da>
 800a170:	ab03      	add	r3, sp, #12
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	462a      	mov	r2, r5
 800a176:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <_vfiprintf_r+0x258>)
 800a178:	a904      	add	r1, sp, #16
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7fd faf8 	bl	8007770 <_printf_float>
 800a180:	4607      	mov	r7, r0
 800a182:	1c78      	adds	r0, r7, #1
 800a184:	d1d6      	bne.n	800a134 <_vfiprintf_r+0x1bc>
 800a186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a188:	07d9      	lsls	r1, r3, #31
 800a18a:	d405      	bmi.n	800a198 <_vfiprintf_r+0x220>
 800a18c:	89ab      	ldrh	r3, [r5, #12]
 800a18e:	059a      	lsls	r2, r3, #22
 800a190:	d402      	bmi.n	800a198 <_vfiprintf_r+0x220>
 800a192:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a194:	f7ff f874 	bl	8009280 <__retarget_lock_release_recursive>
 800a198:	89ab      	ldrh	r3, [r5, #12]
 800a19a:	065b      	lsls	r3, r3, #25
 800a19c:	f53f af12 	bmi.w	8009fc4 <_vfiprintf_r+0x4c>
 800a1a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1a2:	e711      	b.n	8009fc8 <_vfiprintf_r+0x50>
 800a1a4:	ab03      	add	r3, sp, #12
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <_vfiprintf_r+0x258>)
 800a1ac:	a904      	add	r1, sp, #16
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7fd fd82 	bl	8007cb8 <_printf_i>
 800a1b4:	e7e4      	b.n	800a180 <_vfiprintf_r+0x208>
 800a1b6:	bf00      	nop
 800a1b8:	0800aba4 	.word	0x0800aba4
 800a1bc:	0800abc4 	.word	0x0800abc4
 800a1c0:	0800ab84 	.word	0x0800ab84
 800a1c4:	0800ad3c 	.word	0x0800ad3c
 800a1c8:	0800ad46 	.word	0x0800ad46
 800a1cc:	08007771 	.word	0x08007771
 800a1d0:	08009f53 	.word	0x08009f53
 800a1d4:	0800ad42 	.word	0x0800ad42

0800a1d8 <_putc_r>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460d      	mov	r5, r1
 800a1dc:	4614      	mov	r4, r2
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b118      	cbz	r0, 800a1ea <_putc_r+0x12>
 800a1e2:	6983      	ldr	r3, [r0, #24]
 800a1e4:	b90b      	cbnz	r3, 800a1ea <_putc_r+0x12>
 800a1e6:	f7fe ffa7 	bl	8009138 <__sinit>
 800a1ea:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <_putc_r+0x84>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d124      	bne.n	800a23a <_putc_r+0x62>
 800a1f0:	6874      	ldr	r4, [r6, #4]
 800a1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f4:	07d8      	lsls	r0, r3, #31
 800a1f6:	d405      	bmi.n	800a204 <_putc_r+0x2c>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	0599      	lsls	r1, r3, #22
 800a1fc:	d402      	bmi.n	800a204 <_putc_r+0x2c>
 800a1fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a200:	f7ff f83d 	bl	800927e <__retarget_lock_acquire_recursive>
 800a204:	68a3      	ldr	r3, [r4, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	60a3      	str	r3, [r4, #8]
 800a20c:	da05      	bge.n	800a21a <_putc_r+0x42>
 800a20e:	69a2      	ldr	r2, [r4, #24]
 800a210:	4293      	cmp	r3, r2
 800a212:	db1c      	blt.n	800a24e <_putc_r+0x76>
 800a214:	b2eb      	uxtb	r3, r5
 800a216:	2b0a      	cmp	r3, #10
 800a218:	d019      	beq.n	800a24e <_putc_r+0x76>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	6022      	str	r2, [r4, #0]
 800a220:	701d      	strb	r5, [r3, #0]
 800a222:	b2ed      	uxtb	r5, r5
 800a224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a226:	07da      	lsls	r2, r3, #31
 800a228:	d405      	bmi.n	800a236 <_putc_r+0x5e>
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	059b      	lsls	r3, r3, #22
 800a22e:	d402      	bmi.n	800a236 <_putc_r+0x5e>
 800a230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a232:	f7ff f825 	bl	8009280 <__retarget_lock_release_recursive>
 800a236:	4628      	mov	r0, r5
 800a238:	bd70      	pop	{r4, r5, r6, pc}
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <_putc_r+0x88>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	d101      	bne.n	800a244 <_putc_r+0x6c>
 800a240:	68b4      	ldr	r4, [r6, #8]
 800a242:	e7d6      	b.n	800a1f2 <_putc_r+0x1a>
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <_putc_r+0x8c>)
 800a246:	429c      	cmp	r4, r3
 800a248:	bf08      	it	eq
 800a24a:	68f4      	ldreq	r4, [r6, #12]
 800a24c:	e7d1      	b.n	800a1f2 <_putc_r+0x1a>
 800a24e:	4629      	mov	r1, r5
 800a250:	4622      	mov	r2, r4
 800a252:	4630      	mov	r0, r6
 800a254:	f7fd ff1a 	bl	800808c <__swbuf_r>
 800a258:	4605      	mov	r5, r0
 800a25a:	e7e3      	b.n	800a224 <_putc_r+0x4c>
 800a25c:	0800aba4 	.word	0x0800aba4
 800a260:	0800abc4 	.word	0x0800abc4
 800a264:	0800ab84 	.word	0x0800ab84

0800a268 <_sbrk_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d06      	ldr	r5, [pc, #24]	; (800a284 <_sbrk_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	f7f9 fdd2 	bl	8003e1c <_sbrk>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_sbrk_r+0x1a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_sbrk_r+0x1a>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	20000410 	.word	0x20000410

0800a288 <__sread>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	460c      	mov	r4, r1
 800a28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a290:	f000 f92c 	bl	800a4ec <_read_r>
 800a294:	2800      	cmp	r0, #0
 800a296:	bfab      	itete	ge
 800a298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a29a:	89a3      	ldrhlt	r3, [r4, #12]
 800a29c:	181b      	addge	r3, r3, r0
 800a29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2a2:	bfac      	ite	ge
 800a2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2a6:	81a3      	strhlt	r3, [r4, #12]
 800a2a8:	bd10      	pop	{r4, pc}

0800a2aa <__swrite>:
 800a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	898b      	ldrh	r3, [r1, #12]
 800a2b2:	05db      	lsls	r3, r3, #23
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	d505      	bpl.n	800a2c8 <__swrite+0x1e>
 800a2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f000 f898 	bl	800a3f8 <_lseek_r>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	4628      	mov	r0, r5
 800a2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2de:	f000 b817 	b.w	800a310 <_write_r>

0800a2e2 <__sseek>:
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ea:	f000 f885 	bl	800a3f8 <_lseek_r>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	bf15      	itete	ne
 800a2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2fe:	81a3      	strheq	r3, [r4, #12]
 800a300:	bf18      	it	ne
 800a302:	81a3      	strhne	r3, [r4, #12]
 800a304:	bd10      	pop	{r4, pc}

0800a306 <__sclose>:
 800a306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30a:	f000 b831 	b.w	800a370 <_close_r>
	...

0800a310 <_write_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_write_r+0x20>)
 800a314:	4604      	mov	r4, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f9 fd2b 	bl	8003d7a <_write>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_write_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_write_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000410 	.word	0x20000410

0800a334 <__assert_func>:
 800a334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a336:	4614      	mov	r4, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4b09      	ldr	r3, [pc, #36]	; (800a360 <__assert_func+0x2c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4605      	mov	r5, r0
 800a340:	68d8      	ldr	r0, [r3, #12]
 800a342:	b14c      	cbz	r4, 800a358 <__assert_func+0x24>
 800a344:	4b07      	ldr	r3, [pc, #28]	; (800a364 <__assert_func+0x30>)
 800a346:	9100      	str	r1, [sp, #0]
 800a348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a34c:	4906      	ldr	r1, [pc, #24]	; (800a368 <__assert_func+0x34>)
 800a34e:	462b      	mov	r3, r5
 800a350:	f000 f81e 	bl	800a390 <fiprintf>
 800a354:	f000 f8e9 	bl	800a52a <abort>
 800a358:	4b04      	ldr	r3, [pc, #16]	; (800a36c <__assert_func+0x38>)
 800a35a:	461c      	mov	r4, r3
 800a35c:	e7f3      	b.n	800a346 <__assert_func+0x12>
 800a35e:	bf00      	nop
 800a360:	20000018 	.word	0x20000018
 800a364:	0800ad4d 	.word	0x0800ad4d
 800a368:	0800ad5a 	.word	0x0800ad5a
 800a36c:	0800ad88 	.word	0x0800ad88

0800a370 <_close_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_close_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f9 fd19 	bl	8003db2 <_close>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_close_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_close_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000410 	.word	0x20000410

0800a390 <fiprintf>:
 800a390:	b40e      	push	{r1, r2, r3}
 800a392:	b503      	push	{r0, r1, lr}
 800a394:	4601      	mov	r1, r0
 800a396:	ab03      	add	r3, sp, #12
 800a398:	4805      	ldr	r0, [pc, #20]	; (800a3b0 <fiprintf+0x20>)
 800a39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39e:	6800      	ldr	r0, [r0, #0]
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	f7ff fde9 	bl	8009f78 <_vfiprintf_r>
 800a3a6:	b002      	add	sp, #8
 800a3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ac:	b003      	add	sp, #12
 800a3ae:	4770      	bx	lr
 800a3b0:	20000018 	.word	0x20000018

0800a3b4 <_fstat_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_fstat_r+0x20>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	f7f9 fd02 	bl	8003dca <_fstat>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d102      	bne.n	800a3d0 <_fstat_r+0x1c>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b103      	cbz	r3, 800a3d0 <_fstat_r+0x1c>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000410 	.word	0x20000410

0800a3d8 <_isatty_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d06      	ldr	r5, [pc, #24]	; (800a3f4 <_isatty_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	602b      	str	r3, [r5, #0]
 800a3e4:	f7f9 fd01 	bl	8003dea <_isatty>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_isatty_r+0x1a>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_isatty_r+0x1a>
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20000410 	.word	0x20000410

0800a3f8 <_lseek_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	; (800a418 <_lseek_r+0x20>)
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	2200      	movs	r2, #0
 800a404:	602a      	str	r2, [r5, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	f7f9 fcfa 	bl	8003e00 <_lseek>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_lseek_r+0x1e>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_lseek_r+0x1e>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	20000410 	.word	0x20000410

0800a41c <__ascii_mbtowc>:
 800a41c:	b082      	sub	sp, #8
 800a41e:	b901      	cbnz	r1, 800a422 <__ascii_mbtowc+0x6>
 800a420:	a901      	add	r1, sp, #4
 800a422:	b142      	cbz	r2, 800a436 <__ascii_mbtowc+0x1a>
 800a424:	b14b      	cbz	r3, 800a43a <__ascii_mbtowc+0x1e>
 800a426:	7813      	ldrb	r3, [r2, #0]
 800a428:	600b      	str	r3, [r1, #0]
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	1e10      	subs	r0, r2, #0
 800a42e:	bf18      	it	ne
 800a430:	2001      	movne	r0, #1
 800a432:	b002      	add	sp, #8
 800a434:	4770      	bx	lr
 800a436:	4610      	mov	r0, r2
 800a438:	e7fb      	b.n	800a432 <__ascii_mbtowc+0x16>
 800a43a:	f06f 0001 	mvn.w	r0, #1
 800a43e:	e7f8      	b.n	800a432 <__ascii_mbtowc+0x16>

0800a440 <memmove>:
 800a440:	4288      	cmp	r0, r1
 800a442:	b510      	push	{r4, lr}
 800a444:	eb01 0402 	add.w	r4, r1, r2
 800a448:	d902      	bls.n	800a450 <memmove+0x10>
 800a44a:	4284      	cmp	r4, r0
 800a44c:	4623      	mov	r3, r4
 800a44e:	d807      	bhi.n	800a460 <memmove+0x20>
 800a450:	1e43      	subs	r3, r0, #1
 800a452:	42a1      	cmp	r1, r4
 800a454:	d008      	beq.n	800a468 <memmove+0x28>
 800a456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a45a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a45e:	e7f8      	b.n	800a452 <memmove+0x12>
 800a460:	4402      	add	r2, r0
 800a462:	4601      	mov	r1, r0
 800a464:	428a      	cmp	r2, r1
 800a466:	d100      	bne.n	800a46a <memmove+0x2a>
 800a468:	bd10      	pop	{r4, pc}
 800a46a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a46e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a472:	e7f7      	b.n	800a464 <memmove+0x24>

0800a474 <__malloc_lock>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__malloc_lock+0x8>)
 800a476:	f7fe bf02 	b.w	800927e <__retarget_lock_acquire_recursive>
 800a47a:	bf00      	nop
 800a47c:	20000404 	.word	0x20000404

0800a480 <__malloc_unlock>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__malloc_unlock+0x8>)
 800a482:	f7fe befd 	b.w	8009280 <__retarget_lock_release_recursive>
 800a486:	bf00      	nop
 800a488:	20000404 	.word	0x20000404

0800a48c <_realloc_r>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	4680      	mov	r8, r0
 800a492:	4614      	mov	r4, r2
 800a494:	460e      	mov	r6, r1
 800a496:	b921      	cbnz	r1, 800a4a2 <_realloc_r+0x16>
 800a498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49c:	4611      	mov	r1, r2
 800a49e:	f7ff bb71 	b.w	8009b84 <_malloc_r>
 800a4a2:	b92a      	cbnz	r2, 800a4b0 <_realloc_r+0x24>
 800a4a4:	f7ff fb02 	bl	8009aac <_free_r>
 800a4a8:	4625      	mov	r5, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	f000 f842 	bl	800a538 <_malloc_usable_size_r>
 800a4b4:	4284      	cmp	r4, r0
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	d802      	bhi.n	800a4c0 <_realloc_r+0x34>
 800a4ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4be:	d812      	bhi.n	800a4e6 <_realloc_r+0x5a>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	f7ff fb5e 	bl	8009b84 <_malloc_r>
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d0ed      	beq.n	800a4aa <_realloc_r+0x1e>
 800a4ce:	42bc      	cmp	r4, r7
 800a4d0:	4622      	mov	r2, r4
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	bf28      	it	cs
 800a4d6:	463a      	movcs	r2, r7
 800a4d8:	f7fe ff40 	bl	800935c <memcpy>
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4640      	mov	r0, r8
 800a4e0:	f7ff fae4 	bl	8009aac <_free_r>
 800a4e4:	e7e1      	b.n	800a4aa <_realloc_r+0x1e>
 800a4e6:	4635      	mov	r5, r6
 800a4e8:	e7df      	b.n	800a4aa <_realloc_r+0x1e>
	...

0800a4ec <_read_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d07      	ldr	r5, [pc, #28]	; (800a50c <_read_r+0x20>)
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	4608      	mov	r0, r1
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	602a      	str	r2, [r5, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	f7f9 fc20 	bl	8003d40 <_read>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_read_r+0x1e>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_read_r+0x1e>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20000410 	.word	0x20000410

0800a510 <__ascii_wctomb>:
 800a510:	b149      	cbz	r1, 800a526 <__ascii_wctomb+0x16>
 800a512:	2aff      	cmp	r2, #255	; 0xff
 800a514:	bf85      	ittet	hi
 800a516:	238a      	movhi	r3, #138	; 0x8a
 800a518:	6003      	strhi	r3, [r0, #0]
 800a51a:	700a      	strbls	r2, [r1, #0]
 800a51c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a520:	bf98      	it	ls
 800a522:	2001      	movls	r0, #1
 800a524:	4770      	bx	lr
 800a526:	4608      	mov	r0, r1
 800a528:	4770      	bx	lr

0800a52a <abort>:
 800a52a:	b508      	push	{r3, lr}
 800a52c:	2006      	movs	r0, #6
 800a52e:	f000 f833 	bl	800a598 <raise>
 800a532:	2001      	movs	r0, #1
 800a534:	f7f9 fbfa 	bl	8003d2c <_exit>

0800a538 <_malloc_usable_size_r>:
 800a538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53c:	1f18      	subs	r0, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfbc      	itt	lt
 800a542:	580b      	ldrlt	r3, [r1, r0]
 800a544:	18c0      	addlt	r0, r0, r3
 800a546:	4770      	bx	lr

0800a548 <_raise_r>:
 800a548:	291f      	cmp	r1, #31
 800a54a:	b538      	push	{r3, r4, r5, lr}
 800a54c:	4604      	mov	r4, r0
 800a54e:	460d      	mov	r5, r1
 800a550:	d904      	bls.n	800a55c <_raise_r+0x14>
 800a552:	2316      	movs	r3, #22
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	bd38      	pop	{r3, r4, r5, pc}
 800a55c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a55e:	b112      	cbz	r2, 800a566 <_raise_r+0x1e>
 800a560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a564:	b94b      	cbnz	r3, 800a57a <_raise_r+0x32>
 800a566:	4620      	mov	r0, r4
 800a568:	f000 f830 	bl	800a5cc <_getpid_r>
 800a56c:	462a      	mov	r2, r5
 800a56e:	4601      	mov	r1, r0
 800a570:	4620      	mov	r0, r4
 800a572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a576:	f000 b817 	b.w	800a5a8 <_kill_r>
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d00a      	beq.n	800a594 <_raise_r+0x4c>
 800a57e:	1c59      	adds	r1, r3, #1
 800a580:	d103      	bne.n	800a58a <_raise_r+0x42>
 800a582:	2316      	movs	r3, #22
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	2001      	movs	r0, #1
 800a588:	e7e7      	b.n	800a55a <_raise_r+0x12>
 800a58a:	2400      	movs	r4, #0
 800a58c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a590:	4628      	mov	r0, r5
 800a592:	4798      	blx	r3
 800a594:	2000      	movs	r0, #0
 800a596:	e7e0      	b.n	800a55a <_raise_r+0x12>

0800a598 <raise>:
 800a598:	4b02      	ldr	r3, [pc, #8]	; (800a5a4 <raise+0xc>)
 800a59a:	4601      	mov	r1, r0
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	f7ff bfd3 	b.w	800a548 <_raise_r>
 800a5a2:	bf00      	nop
 800a5a4:	20000018 	.word	0x20000018

0800a5a8 <_kill_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	; (800a5c8 <_kill_r+0x20>)
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	602b      	str	r3, [r5, #0]
 800a5b6:	f7f9 fba9 	bl	8003d0c <_kill>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	d102      	bne.n	800a5c4 <_kill_r+0x1c>
 800a5be:	682b      	ldr	r3, [r5, #0]
 800a5c0:	b103      	cbz	r3, 800a5c4 <_kill_r+0x1c>
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	bf00      	nop
 800a5c8:	20000410 	.word	0x20000410

0800a5cc <_getpid_r>:
 800a5cc:	f7f9 bb96 	b.w	8003cfc <_getpid>

0800a5d0 <_init>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr

0800a5dc <_fini>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr
