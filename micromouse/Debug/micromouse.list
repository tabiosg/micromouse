
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800a590  0800a590  0001a590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae44  0800ae44  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae44  0800ae44  0001ae44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae4c  0800ae4c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae4c  0800ae4c  0001ae4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ae54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001f0  0800b044  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800b044  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011690  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e34  00000000  00000000  000318b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00035698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a18  00000000  00000000  00036538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a01  00000000  00000000  0004ff50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901c8  00000000  00000000  00065951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005170  00000000  00000000  000f5b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a578 	.word	0x0800a578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800a578 	.word	0x0800a578

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e009      	b.n	8000f88 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f80c 	bl	8000f9a <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	ddf1      	ble.n	8000f74 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turn_LED+0x1c>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <turn_LED+0x26>
 8000fb4:	e008      	b.n	8000fc8 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f809 	bl	8000fd0 <turn_off_LED_color>
		return;
 8000fbe:	e003      	b.n	8000fc8 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f824 	bl	8001010 <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d811      	bhi.n	8001004 <turn_off_LED_color+0x34>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <turn_off_LED_color+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08000ff9 	.word	0x08000ff9
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <turn_off_LED_color+0x3c>)
 8000ffe:	f003 fc49 	bl	8004894 <HAL_GPIO_WritePin>
		return;
 8001002:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d811      	bhi.n	8001044 <turn_on_LED_color+0x34>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <turn_on_LED_color+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001045 	.word	0x08001045
 800102c:	08001045 	.word	0x08001045
 8001030:	08001045 	.word	0x08001045
 8001034:	08001039 	.word	0x08001039
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <turn_on_LED_color+0x3c>)
 800103e:	f003 fc29 	bl	8004894 <HAL_GPIO_WritePin>
		return;
 8001042:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8001056:	f002 fe1d 	bl	8003c94 <is_switch_on>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Flood_Fill_Algo;  // TODO - Flood_Fill_Algo when not testing, Test_Algo when testing
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d00a      	beq.n	800107e <determine_algorithm+0x2e>
 8001068:	2b02      	cmp	r3, #2
 800106a:	dc0a      	bgt.n	8001082 <determine_algorithm+0x32>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <determine_algorithm+0x26>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <determine_algorithm+0x2a>
 8001074:	e005      	b.n	8001082 <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 800107e:	2302      	movs	r3, #2
 8001080:	e000      	b.n	8001084 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8001082:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <do_search_algorithm>:

uint8_t do_search_algorithm(algorithm_type algo)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff60 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7b 	bl	8000f9a <turn_LED>
	turn_LED(Blue, On);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff77 	bl	8000f9a <turn_LED>

	switch(algo)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d00e      	beq.n	80010d0 <do_search_algorithm+0x44>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc10      	bgt.n	80010d8 <do_search_algorithm+0x4c>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <do_search_algorithm+0x34>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d004      	beq.n	80010c8 <do_search_algorithm+0x3c>
 80010be:	e00b      	b.n	80010d8 <do_search_algorithm+0x4c>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 80010c0:	f001 fb4c 	bl	800275c <do_hug_left_algorithm>
		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e007      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Flood_Fill_Algo:
		return do_flood_fill_algorithm();
 80010c8:	f000 f81a 	bl	8001100 <do_flood_fill_algorithm>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e003      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Test_Algo:
		do_test_algorithm();
 80010d0:	f002 fecc 	bl	8003e6c <do_test_algorithm>
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e7ff      	b.n	80010d8 <do_search_algorithm+0x4c>
	}  // switch(algo)
}  // uint8_t do_search_algorithm(algorithm_type algo)
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <complete_search_algorithm>:

void complete_search_algorithm()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff39 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff ff54 	bl	8000f9a <turn_LED>
	turn_LED(Green, On);
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff ff50 	bl	8000f9a <turn_LED>
}  // complete_search_algorithm()
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <do_flood_fill_algorithm>:
#include "flood_fill.h"

uint8_t do_flood_fill_algorithm()
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b0f4      	sub	sp, #464	; 0x1d0
 8001104:	af02      	add	r7, sp, #8
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	*/

	// TEMPORARY - WE'RE USING A 4 BY 4 MAZE FOR THE DEMO
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001106:	2300      	movs	r3, #0
 8001108:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 800110c:	e0e0      	b.n	80012d0 <do_flood_fill_algorithm+0x1d0>
		{
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800110e:	2300      	movs	r3, #0
 8001110:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 8001114:	e0d2      	b.n	80012bc <do_flood_fill_algorithm+0x1bc>
			{
				// Initialize distance grid
				maze.distance_grid[i][j] = 255;
 8001116:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 800111a:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8001124:	443a      	add	r2, r7
 8001126:	4413      	add	r3, r2
 8001128:	3b44      	subs	r3, #68	; 0x44
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	701a      	strb	r2, [r3, #0]

				// Initialize cell grid - assume no walls unless border by default
				maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 800112e:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 8001132:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8001136:	461a      	mov	r2, r3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	441a      	add	r2, r3
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800114a:	443b      	add	r3, r7
 800114c:	3b94      	subs	r3, #148	; 0x94
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 8001152:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 8001156:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800115a:	461a      	mov	r2, r3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	441a      	add	r2, r3
 8001160:	460b      	mov	r3, r1
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800116e:	443b      	add	r3, r7
 8001170:	3b93      	subs	r3, #147	; 0x93
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 8001176:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 800117a:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800117e:	461a      	mov	r2, r3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	441a      	add	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001192:	443b      	add	r3, r7
 8001194:	3b92      	subs	r3, #146	; 0x92
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 800119a:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 800119e:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80011a2:	461a      	mov	r2, r3
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	441a      	add	r2, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80011b6:	443b      	add	r3, r7
 80011b8:	3b91      	subs	r3, #145	; 0x91
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].visited = Is_Not_Visited;
 80011be:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 80011c2:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80011c6:	461a      	mov	r2, r3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	441a      	add	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80011da:	443b      	add	r3, r7
 80011dc:	3b90      	subs	r3, #144	; 0x90
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]

				if(i == 0 || i == 4) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80011e2:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <do_flood_fill_algorithm+0xf2>
 80011ea:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d111      	bne.n	8001216 <do_flood_fill_algorithm+0x116>
 80011f2:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 80011f6:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80011fa:	461a      	mov	r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	441a      	add	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800120e:	443b      	add	r3, r7
 8001210:	3b92      	subs	r3, #146	; 0x92
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
				if(j == 0 || j == 4) maze.cell_grid[i][j].walls[West] = Wall_Here;
 8001216:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <do_flood_fill_algorithm+0x126>
 800121e:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8001222:	2b04      	cmp	r3, #4
 8001224:	d111      	bne.n	800124a <do_flood_fill_algorithm+0x14a>
 8001226:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 800122a:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800122e:	461a      	mov	r2, r3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	441a      	add	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001242:	443b      	add	r3, r7
 8001244:	3b91      	subs	r3, #145	; 0x91
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
				if(i == MAP_SIZE - 1 || i == 3) maze.cell_grid[i][j].walls[North] = Wall_Here;
 800124a:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 800124e:	2b03      	cmp	r3, #3
 8001250:	d003      	beq.n	800125a <do_flood_fill_algorithm+0x15a>
 8001252:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8001256:	2b03      	cmp	r3, #3
 8001258:	d111      	bne.n	800127e <do_flood_fill_algorithm+0x17e>
 800125a:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 800125e:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8001262:	461a      	mov	r2, r3
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	441a      	add	r2, r3
 8001268:	460b      	mov	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001276:	443b      	add	r3, r7
 8001278:	3b94      	subs	r3, #148	; 0x94
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
				if(j == MAP_SIZE - 1 || j == 3) maze.cell_grid[i][j].walls[East] = Wall_Here;
 800127e:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8001282:	2b03      	cmp	r3, #3
 8001284:	d003      	beq.n	800128e <do_flood_fill_algorithm+0x18e>
 8001286:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 800128a:	2b03      	cmp	r3, #3
 800128c:	d111      	bne.n	80012b2 <do_flood_fill_algorithm+0x1b2>
 800128e:	f897 11c7 	ldrb.w	r1, [r7, #455]	; 0x1c7
 8001292:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8001296:	461a      	mov	r2, r3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	441a      	add	r2, r3
 800129c:	460b      	mov	r3, r1
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80012aa:	443b      	add	r3, r7
 80012ac:	3b93      	subs	r3, #147	; 0x93
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80012b2:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80012b6:	3301      	adds	r3, #1
 80012b8:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 80012bc:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	f67f af28 	bls.w	8001116 <do_flood_fill_algorithm+0x16>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80012c6:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80012ca:	3301      	adds	r3, #1
 80012cc:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 80012d0:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	f67f af1a 	bls.w	800110e <do_flood_fill_algorithm+0xe>

			}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	maze.distance_grid[0][0] = 6;
 80012da:	2306      	movs	r3, #6
 80012dc:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	maze.distance_grid[0][1] = 5;
 80012e0:	2305      	movs	r3, #5
 80012e2:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	maze.distance_grid[0][2] = 4;
 80012e6:	2304      	movs	r3, #4
 80012e8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
	maze.distance_grid[0][3] = 3;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	maze.distance_grid[1][0] = 5;
 80012f2:	2305      	movs	r3, #5
 80012f4:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
	maze.distance_grid[1][1] = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
	maze.distance_grid[1][2] = 3;
 80012fe:	2303      	movs	r3, #3
 8001300:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
	maze.distance_grid[1][3] = 2;
 8001304:	2302      	movs	r3, #2
 8001306:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
	maze.distance_grid[2][0] = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
	maze.distance_grid[2][1] = 3;
 8001310:	2303      	movs	r3, #3
 8001312:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
	maze.distance_grid[2][2] = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
	maze.distance_grid[2][3] = 1;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
	maze.distance_grid[3][0] = 3;
 8001322:	2303      	movs	r3, #3
 8001324:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
	maze.distance_grid[3][1] = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
	maze.distance_grid[3][2] = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
	maze.distance_grid[3][3] = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 800133a:	2300      	movs	r3, #0
 800133c:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
	maze_direction direction = desired_direction;  // the direction we're currently facing
 8001340:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8001344:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);  // Always start in South, West corner facing North.
 8001348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f001 f8c3 	bl	80024dc <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we are currently in
 8001356:	f8b7 3130 	ldrh.w	r3, [r7, #304]	; 0x130
 800135a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c

	stack stack;
	stack.index = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128

	// TODO - BASICALLY COPY PASTING CODE

	printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001364:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001368:	4619      	mov	r1, r3
 800136a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800136e:	461a      	mov	r2, r3
 8001370:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001374:	48bf      	ldr	r0, [pc, #764]	; (8001674 <do_flood_fill_algorithm+0x574>)
 8001376:	f006 fd99 	bl	8007eac <iprintf>
	char buf5[20];
	sprintf((char *)buf5, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 800137a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800137e:	461a      	mov	r2, r3
 8001380:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001384:	4619      	mov	r1, r3
 8001386:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 800138a:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	460b      	mov	r3, r1
 8001392:	49b9      	ldr	r1, [pc, #740]	; (8001678 <do_flood_fill_algorithm+0x578>)
 8001394:	f006 fe2e 	bl	8007ff4 <siprintf>
	HAL_UART_Transmit(&huart6, buf5, sizeof(buf5), 1000);
 8001398:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	2214      	movs	r2, #20
 80013a2:	48b6      	ldr	r0, [pc, #728]	; (800167c <do_flood_fill_algorithm+0x57c>)
 80013a4:	f004 ff3d 	bl	8006222 <HAL_UART_Transmit>

	if (requested_manual_command != AUTON_CHAR)
 80013a8:	4bb5      	ldr	r3, [pc, #724]	; (8001680 <do_flood_fill_algorithm+0x580>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b41      	cmp	r3, #65	; 0x41
 80013ae:	d002      	beq.n	80013b6 <do_flood_fill_algorithm+0x2b6>
	{
		return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f000 beac 	b.w	800210e <do_flood_fill_algorithm+0x100e>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Front))
 80013b6:	2001      	movs	r0, #1
 80013b8:	f002 fd80 	bl	8003ebc <is_there_wall_on_direction>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d02c      	beq.n	800141c <do_flood_fill_algorithm+0x31c>
	{
		maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 80013c2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80013c6:	4618      	mov	r0, r3
 80013c8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80013cc:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 80013d0:	461a      	mov	r2, r3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	441a      	add	r2, r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4403      	add	r3, r0
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80013e4:	443b      	add	r3, r7
 80013e6:	440b      	add	r3, r1
 80013e8:	3b94      	subs	r3, #148	; 0x94
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
		if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 80013ee:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d812      	bhi.n	800141c <do_flood_fill_algorithm+0x31c>
 80013f6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80013fa:	1c59      	adds	r1, r3, #1
 80013fc:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001400:	461a      	mov	r2, r3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	441a      	add	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001414:	443b      	add	r3, r7
 8001416:	3b92      	subs	r3, #146	; 0x92
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Front))

	if (requested_manual_command != AUTON_CHAR)
 800141c:	4b98      	ldr	r3, [pc, #608]	; (8001680 <do_flood_fill_algorithm+0x580>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b41      	cmp	r3, #65	; 0x41
 8001422:	d002      	beq.n	800142a <do_flood_fill_algorithm+0x32a>
	{
		return 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f000 be72 	b.w	800210e <do_flood_fill_algorithm+0x100e>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Right))
 800142a:	2002      	movs	r0, #2
 800142c:	f002 fd46 	bl	8003ebc <is_there_wall_on_direction>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <do_flood_fill_algorithm+0x3a4>
	{
		maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001436:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800143a:	4618      	mov	r0, r3
 800143c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001440:	461c      	mov	r4, r3
 8001442:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001446:	3301      	adds	r3, #1
 8001448:	425a      	negs	r2, r3
 800144a:	f003 0103 	and.w	r1, r3, #3
 800144e:	f002 0303 	and.w	r3, r2, #3
 8001452:	bf58      	it	pl
 8001454:	4259      	negpl	r1, r3
 8001456:	4622      	mov	r2, r4
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4422      	add	r2, r4
 800145c:	4603      	mov	r3, r0
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4403      	add	r3, r0
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800146a:	443b      	add	r3, r7
 800146c:	440b      	add	r3, r1
 800146e:	3b94      	subs	r3, #148	; 0x94
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
		if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001474:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <do_flood_fill_algorithm+0x3a4>
 800147c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001480:	4619      	mov	r1, r3
 8001482:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001486:	3b01      	subs	r3, #1
 8001488:	461a      	mov	r2, r3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	441a      	add	r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800149c:	443b      	add	r3, r7
 800149e:	3b93      	subs	r3, #147	; 0x93
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Right))

	if (requested_manual_command != AUTON_CHAR)
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <do_flood_fill_algorithm+0x580>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b41      	cmp	r3, #65	; 0x41
 80014aa:	d002      	beq.n	80014b2 <do_flood_fill_algorithm+0x3b2>
	{
		return 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f000 be2e 	b.w	800210e <do_flood_fill_algorithm+0x100e>
	}  // if (requested_manual_command != AUTON_CHAR)

	maze.cell_grid[c.y][c.x].visited = 1;
 80014b2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80014b6:	4619      	mov	r1, r3
 80014b8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80014bc:	461a      	mov	r2, r3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	441a      	add	r2, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80014d0:	443b      	add	r3, r7
 80014d2:	3b90      	subs	r3, #144	; 0x90
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]


	// need to figure next direction to go to and also update rest of distance grid.
	desired_direction = minus_one_neighbor(&maze, c, &stack);
 80014d8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80014dc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80014e0:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe91 	bl	800220c <minus_one_neighbor>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5

	if(desired_direction == Unknown)
 80014f0:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d141      	bne.n	800157c <do_flood_fill_algorithm+0x47c>
	{
		while(!stack_is_empty(&stack))
 80014f8:	e02c      	b.n	8001554 <do_flood_fill_algorithm+0x454>
		{
			if (requested_manual_command != AUTON_CHAR)
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <do_flood_fill_algorithm+0x580>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b41      	cmp	r3, #65	; 0x41
 8001500:	d002      	beq.n	8001508 <do_flood_fill_algorithm+0x408>
			{
				return 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f000 be03 	b.w	800210e <do_flood_fill_algorithm+0x100e>
			}  // if (requested_manual_command != AUTON_CHAR)
			if (stack.index >= 60)
 8001508:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 800150c:	2b3b      	cmp	r3, #59	; 0x3b
 800150e:	d910      	bls.n	8001532 <do_flood_fill_algorithm+0x432>
			{
				char buf3[20];
				sprintf((char *)buf3, "&FAILED,,,,,,,,,,,,");
 8001510:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001514:	495b      	ldr	r1, [pc, #364]	; (8001684 <do_flood_fill_algorithm+0x584>)
 8001516:	4618      	mov	r0, r3
 8001518:	f006 fd6c 	bl	8007ff4 <siprintf>
				HAL_UART_Transmit(&huart6, buf3, sizeof(buf3), 1000);
 800151c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	2214      	movs	r2, #20
 8001526:	4855      	ldr	r0, [pc, #340]	; (800167c <do_flood_fill_algorithm+0x57c>)
 8001528:	f004 fe7b 	bl	8006222 <HAL_UART_Transmit>
				return 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f000 bdee 	b.w	800210e <do_flood_fill_algorithm+0x100e>
			}  // if (stack.index >= 100)
			// get the cell to test from the stack
			next_coordinate = pop_stack(&stack);
 8001532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fe0e 	bl	8002158 <pop_stack>
 800153c:	4603      	mov	r3, r0
 800153e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
			// find a neighbor cell with distance one less than current
			minus_one_neighbor(&maze, next_coordinate, &stack);
 8001542:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001546:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800154a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fe5c 	bl	800220c <minus_one_neighbor>
		while(!stack_is_empty(&stack))
 8001554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001558:	4618      	mov	r0, r3
 800155a:	f000 fdeb 	bl	8002134 <stack_is_empty>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ca      	beq.n	80014fa <do_flood_fill_algorithm+0x3fa>
		}  // while(stack.index != 0)
		// next_direction is the direction to go to next
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001564:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001568:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800156c:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fe4b 	bl	800220c <minus_one_neighbor>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
	}  // if(next_direction == Unknown)
	int difference = desired_direction - direction + 4;
 800157c:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 8001580:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	3304      	adds	r3, #4
 8001588:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	char buf2[20];
	sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 800158c:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8001590:	f897 41c5 	ldrb.w	r4, [r7, #453]	; 0x1c5
 8001594:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001598:	425a      	negs	r2, r3
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	bf58      	it	pl
 80015a4:	4253      	negpl	r3, r2
 80015a6:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	460a      	mov	r2, r1
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <do_flood_fill_algorithm+0x588>)
 80015b2:	f006 fd1f 	bl	8007ff4 <siprintf>
	HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80015b6:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	2214      	movs	r2, #20
 80015c0:	482e      	ldr	r0, [pc, #184]	; (800167c <do_flood_fill_algorithm+0x57c>)
 80015c2:	f004 fe2e 	bl	8006222 <HAL_UART_Transmit>
	switch(difference % 4)
 80015c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015ca:	425a      	negs	r2, r3
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	bf58      	it	pl
 80015d6:	4253      	negpl	r3, r2
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d816      	bhi.n	800160a <do_flood_fill_algorithm+0x50a>
 80015dc:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <do_flood_fill_algorithm+0x4e4>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	0800160b 	.word	0x0800160b
 80015e8:	080015f5 	.word	0x080015f5
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	08001603 	.word	0x08001603
	{
	case 0:
		break;
	case 1:
		rotate_direction_90(Right);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f001 fff7 	bl	80035e8 <rotate_direction_90>
		break;
 80015fa:	e006      	b.n	800160a <do_flood_fill_algorithm+0x50a>
	case 2:
		rotate_180_degrees();
 80015fc:	f002 f827 	bl	800364e <rotate_180_degrees>
		break;
 8001600:	e003      	b.n	800160a <do_flood_fill_algorithm+0x50a>
	case 3:
		rotate_direction_90(Left);
 8001602:	2000      	movs	r0, #0
 8001604:	f001 fff0 	bl	80035e8 <rotate_direction_90>
		break;
 8001608:	bf00      	nop
	}

	direction = desired_direction;
 800160a:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 800160e:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4

	set_servo_angle(Front);
 8001612:	2001      	movs	r0, #1
 8001614:	f002 f83d 	bl	8003692 <set_servo_angle>
	while(1)
	{
		if (requested_manual_command != AUTON_CHAR)
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <do_flood_fill_algorithm+0x580>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b41      	cmp	r3, #65	; 0x41
 800161e:	d002      	beq.n	8001626 <do_flood_fill_algorithm+0x526>
		{
			return 0;
 8001620:	2300      	movs	r3, #0
 8001622:	f000 bd74 	b.w	800210e <do_flood_fill_algorithm+0x100e>
		}  // if (requested_manual_command != AUTON_CHAR)

		switch(direction)
 8001626:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 800162a:	2b04      	cmp	r3, #4
 800162c:	d835      	bhi.n	800169a <do_flood_fill_algorithm+0x59a>
 800162e:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <do_flood_fill_algorithm+0x534>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001649 	.word	0x08001649
 8001638:	08001657 	.word	0x08001657
 800163c:	08001665 	.word	0x08001665
 8001640:	0800168d 	.word	0x0800168d
 8001644:	0800169b 	.word	0x0800169b
		{
		case North:
			c.y += 1;
 8001648:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800164c:	3301      	adds	r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
			break;
 8001654:	e021      	b.n	800169a <do_flood_fill_algorithm+0x59a>
		case East:
			c.x += 1;
 8001656:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800165a:	3301      	adds	r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
			break;
 8001662:	e01a      	b.n	800169a <do_flood_fill_algorithm+0x59a>
		case South:
			c.y -= 1;
 8001664:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001668:	3b01      	subs	r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
			break;
 8001670:	e013      	b.n	800169a <do_flood_fill_algorithm+0x59a>
 8001672:	bf00      	nop
 8001674:	0800a590 	.word	0x0800a590
 8001678:	0800a5c0 	.word	0x0800a5c0
 800167c:	200003b8 	.word	0x200003b8
 8001680:	20000001 	.word	0x20000001
 8001684:	0800a5d8 	.word	0x0800a5d8
 8001688:	0800a5ec 	.word	0x0800a5ec
		case West:
			c.x -= 1;
 800168c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001690:	3b01      	subs	r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
			break;
 8001698:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)


		if(!maze.cell_grid[c.y][c.x].visited)
 800169a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800169e:	4619      	mov	r1, r3
 80016a0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80016a4:	461a      	mov	r2, r3
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	441a      	add	r2, r3
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80016b8:	443b      	add	r3, r7
 80016ba:	3b90      	subs	r3, #144	; 0x90
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 8429 	bne.w	8001f16 <do_flood_fill_algorithm+0xe16>
		{
			// Move in direction for unvisited cell
			go_forward_one_unit();
 80016c4:	f001 ffd0 	bl	8003668 <go_forward_one_unit>

			if(found_flood_fill_destination(c, &maze))
 80016c8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80016cc:	4619      	mov	r1, r3
 80016ce:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80016d2:	f000 fd81 	bl	80021d8 <found_flood_fill_destination>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03d      	beq.n	8001758 <do_flood_fill_algorithm+0x658>
			{
				set_servo_angle(Front);
 80016dc:	2001      	movs	r0, #1
 80016de:	f001 ffd8 	bl	8003692 <set_servo_angle>

				printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 80016e2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80016e6:	4619      	mov	r1, r3
 80016e8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80016ec:	461a      	mov	r2, r3
 80016ee:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 80016f2:	48bd      	ldr	r0, [pc, #756]	; (80019e8 <do_flood_fill_algorithm+0x8e8>)
 80016f4:	f006 fbda 	bl	8007eac <iprintf>
				char buf5[20];
				sprintf((char *)buf5, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 80016f8:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80016fc:	461a      	mov	r2, r3
 80016fe:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001702:	4619      	mov	r1, r3
 8001704:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001708:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	460b      	mov	r3, r1
 8001710:	49b6      	ldr	r1, [pc, #728]	; (80019ec <do_flood_fill_algorithm+0x8ec>)
 8001712:	f006 fc6f 	bl	8007ff4 <siprintf>
				HAL_UART_Transmit(&huart6, buf5, sizeof(buf5), 1000);
 8001716:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800171a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171e:	2214      	movs	r2, #20
 8001720:	48b3      	ldr	r0, [pc, #716]	; (80019f0 <do_flood_fill_algorithm+0x8f0>)
 8001722:	f004 fd7e 	bl	8006222 <HAL_UART_Transmit>

				printf("Completed maze!\r\n");
 8001726:	48b3      	ldr	r0, [pc, #716]	; (80019f4 <do_flood_fill_algorithm+0x8f4>)
 8001728:	f006 fc5c 	bl	8007fe4 <puts>
				char buf[20];
				memcpy(buf, "&COMPLETED,,,,,,,,,", 20);
 800172c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001730:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001734:	4ab0      	ldr	r2, [pc, #704]	; (80019f8 <do_flood_fill_algorithm+0x8f8>)
 8001736:	461c      	mov	r4, r3
 8001738:	4615      	mov	r5, r2
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	6023      	str	r3, [r4, #0]
				HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001742:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	2214      	movs	r2, #20
 800174c:	48a8      	ldr	r0, [pc, #672]	; (80019f0 <do_flood_fill_algorithm+0x8f0>)
 800174e:	f004 fd68 	bl	8006222 <HAL_UART_Transmit>
				return 1;
 8001752:	2301      	movs	r3, #1
 8001754:	f000 bcdb 	b.w	800210e <do_flood_fill_algorithm+0x100e>
			}  // if(found_flood_fill_destination(&c, &maze))

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001758:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800175c:	4619      	mov	r1, r3
 800175e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001762:	461a      	mov	r2, r3
 8001764:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001768:	489f      	ldr	r0, [pc, #636]	; (80019e8 <do_flood_fill_algorithm+0x8e8>)
 800176a:	f006 fb9f 	bl	8007eac <iprintf>
			char buf[20];
			sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 800176e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001772:	461a      	mov	r2, r3
 8001774:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001778:	4619      	mov	r1, r3
 800177a:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 800177e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	460b      	mov	r3, r1
 8001786:	4999      	ldr	r1, [pc, #612]	; (80019ec <do_flood_fill_algorithm+0x8ec>)
 8001788:	f006 fc34 	bl	8007ff4 <siprintf>
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800178c:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001794:	2214      	movs	r2, #20
 8001796:	4896      	ldr	r0, [pc, #600]	; (80019f0 <do_flood_fill_algorithm+0x8f0>)
 8001798:	f004 fd43 	bl	8006222 <HAL_UART_Transmit>

			set_servo_angle(Front);
 800179c:	2001      	movs	r0, #1
 800179e:	f001 ff78 	bl	8003692 <set_servo_angle>
			HAL_Delay(1000);
 80017a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a6:	f002 fccb 	bl	8004140 <HAL_Delay>

			float front_wall_cm = 20.0f;
 80017aa:	4b94      	ldr	r3, [pc, #592]	; (80019fc <do_flood_fill_algorithm+0x8fc>)
 80017ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			// DONE TO MAKE SURE CORRECT DISTANCE FROM FRONT WALL
			for (int i = 0; i < 3; ++i)
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017b6:	e07b      	b.n	80018b0 <do_flood_fill_algorithm+0x7b0>
			{
				front_wall_cm = distance_of_object_in_cm();
 80017b8:	f002 fb68 	bl	8003e8c <distance_of_object_in_cm>
 80017bc:	ed87 0a70 	vstr	s0, [r7, #448]	; 0x1c0
				float desired_front_distance_cm = 5.5f;
 80017c0:	4b8f      	ldr	r3, [pc, #572]	; (8001a00 <do_flood_fill_algorithm+0x900>)
 80017c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
				float front_wall_remainder_cm = front_wall_cm;
 80017c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017ca:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
				while (front_wall_remainder_cm > 18.0f)
 80017ce:	e007      	b.n	80017e0 <do_flood_fill_algorithm+0x6e0>
				{
					front_wall_remainder_cm -= 18.0f;
 80017d0:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80017d4:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80017d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017dc:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
				while (front_wall_remainder_cm > 18.0f)
 80017e0:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80017e4:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	dcee      	bgt.n	80017d0 <do_flood_fill_algorithm+0x6d0>
				}
				float front_wall_error_cm = front_wall_remainder_cm - desired_front_distance_cm;  // positive number means we're too far away
 80017f2:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 80017f6:	edd7 7a68 	vldr	s15, [r7, #416]	; 0x1a0
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
				float front_wall_error_in = front_wall_error_cm * 0.39;
 8001802:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	a375      	add	r3, pc, #468	; (adr r3, 80019e0 <do_flood_fill_algorithm+0x8e0>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fefa 	bl	8000608 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f9cc 	bl	8000bb8 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
				if (i == 0)
 8001826:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800182a:	2b00      	cmp	r3, #0
 800182c:	d13b      	bne.n	80018a6 <do_flood_fill_algorithm+0x7a6>


				if (front_wall_error_in > 0)
 800182e:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8001832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	dd1a      	ble.n	8001872 <do_flood_fill_algorithm+0x772>
				{
					motors_forward(0.75f);
 800183c:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8001840:	f001 fd22 	bl	8003288 <motors_forward>
					HAL_Delay(front_wall_error_in * 100.0f * 1.33f);
 8001844:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 8001848:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001a04 <do_flood_fill_algorithm+0x904>
 800184c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001850:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001a08 <do_flood_fill_algorithm+0x908>
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800185c:	ee17 0a90 	vmov	r0, s15
 8001860:	f002 fc6e 	bl	8004140 <HAL_Delay>
					stop_all_motors();
 8001864:	f001 fc54 	bl	8003110 <stop_all_motors>
					HAL_Delay(300);
 8001868:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800186c:	f002 fc68 	bl	8004140 <HAL_Delay>
 8001870:	e019      	b.n	80018a6 <do_flood_fill_algorithm+0x7a6>
				}
				else
				{
					motors_backward(0.75f);
 8001872:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8001876:	f001 fd55 	bl	8003324 <motors_backward>
					HAL_Delay(front_wall_error_in * -100.0f * 1.33f);
 800187a:	edd7 7a66 	vldr	s15, [r7, #408]	; 0x198
 800187e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001a0c <do_flood_fill_algorithm+0x90c>
 8001882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001886:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001a08 <do_flood_fill_algorithm+0x908>
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001892:	ee17 0a90 	vmov	r0, s15
 8001896:	f002 fc53 	bl	8004140 <HAL_Delay>
					stop_all_motors();
 800189a:	f001 fc39 	bl	8003110 <stop_all_motors>
					HAL_Delay(300);
 800189e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018a2:	f002 fc4d 	bl	8004140 <HAL_Delay>
			for (int i = 0; i < 3; ++i)
 80018a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018aa:	3301      	adds	r3, #1
 80018ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80018b0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	f77f af7f 	ble.w	80017b8 <do_flood_fill_algorithm+0x6b8>
				}

			}
			char buf_front[20];
			printf(front_wall_cm < 16 ? "There is a wall in front.\r\n" : "There is no wall in front.\r\n");
 80018ba:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 80018be:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d501      	bpl.n	80018d0 <do_flood_fill_algorithm+0x7d0>
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <do_flood_fill_algorithm+0x910>)
 80018ce:	e000      	b.n	80018d2 <do_flood_fill_algorithm+0x7d2>
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <do_flood_fill_algorithm+0x914>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 faea 	bl	8007eac <iprintf>
			memcpy(buf_front, front_wall_cm < 16 ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 80018d8:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 80018dc:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80018e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d501      	bpl.n	80018ee <do_flood_fill_algorithm+0x7ee>
 80018ea:	4a4b      	ldr	r2, [pc, #300]	; (8001a18 <do_flood_fill_algorithm+0x918>)
 80018ec:	e000      	b.n	80018f0 <do_flood_fill_algorithm+0x7f0>
 80018ee:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <do_flood_fill_algorithm+0x91c>)
 80018f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80018f4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018f8:	461c      	mov	r4, r3
 80018fa:	4615      	mov	r5, r2
 80018fc:	6828      	ldr	r0, [r5, #0]
 80018fe:	6869      	ldr	r1, [r5, #4]
 8001900:	68aa      	ldr	r2, [r5, #8]
 8001902:	68eb      	ldr	r3, [r5, #12]
 8001904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001906:	6928      	ldr	r0, [r5, #16]
 8001908:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_front, sizeof(buf_front), 1000);
 800190a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	2214      	movs	r2, #20
 8001914:	4836      	ldr	r0, [pc, #216]	; (80019f0 <do_flood_fill_algorithm+0x8f0>)
 8001916:	f004 fc84 	bl	8006222 <HAL_UART_Transmit>


			set_servo_angle(Left);
 800191a:	2000      	movs	r0, #0
 800191c:	f001 feb9 	bl	8003692 <set_servo_angle>
			HAL_Delay(1000);
 8001920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001924:	f002 fc0c 	bl	8004140 <HAL_Delay>
			float distance_left_cm = distance_of_object_in_cm();
 8001928:	f002 fab0 	bl	8003e8c <distance_of_object_in_cm>
 800192c:	ed87 0a6c 	vstr	s0, [r7, #432]	; 0x1b0
			char buf_left[20];
			printf(distance_left_cm < 16 ? "There is a wall on the left.\r\n" : "There is no wall on the left.\r\n");
 8001930:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8001934:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800193c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001940:	d501      	bpl.n	8001946 <do_flood_fill_algorithm+0x846>
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <do_flood_fill_algorithm+0x920>)
 8001944:	e000      	b.n	8001948 <do_flood_fill_algorithm+0x848>
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <do_flood_fill_algorithm+0x924>)
 8001948:	4618      	mov	r0, r3
 800194a:	f006 faaf 	bl	8007eac <iprintf>
			memcpy(buf_left, distance_left_cm < 16 ? "\%LEFT,1,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 800194e:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8001952:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d501      	bpl.n	8001964 <do_flood_fill_algorithm+0x864>
 8001960:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <do_flood_fill_algorithm+0x928>)
 8001962:	e000      	b.n	8001966 <do_flood_fill_algorithm+0x866>
 8001964:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <do_flood_fill_algorithm+0x92c>)
 8001966:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800196a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800196e:	461c      	mov	r4, r3
 8001970:	4615      	mov	r5, r2
 8001972:	6828      	ldr	r0, [r5, #0]
 8001974:	6869      	ldr	r1, [r5, #4]
 8001976:	68aa      	ldr	r2, [r5, #8]
 8001978:	68eb      	ldr	r3, [r5, #12]
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	6928      	ldr	r0, [r5, #16]
 800197e:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_left, sizeof(buf_left), 1000);
 8001980:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001988:	2214      	movs	r2, #20
 800198a:	4819      	ldr	r0, [pc, #100]	; (80019f0 <do_flood_fill_algorithm+0x8f0>)
 800198c:	f004 fc49 	bl	8006222 <HAL_UART_Transmit>



			set_servo_angle(Right);
 8001990:	2002      	movs	r0, #2
 8001992:	f001 fe7e 	bl	8003692 <set_servo_angle>
			HAL_Delay(1000);
 8001996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199a:	f002 fbd1 	bl	8004140 <HAL_Delay>
			float distance_right_cm = distance_of_object_in_cm();
 800199e:	f002 fa75 	bl	8003e8c <distance_of_object_in_cm>
 80019a2:	ed87 0a6b 	vstr	s0, [r7, #428]	; 0x1ac

			char buf_right[20];
			printf(distance_right_cm < 16 ? "There is a wall on the right.\r\n" : "There is no wall on the right.\r\n");
 80019a6:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 80019aa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80019ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d501      	bpl.n	80019bc <do_flood_fill_algorithm+0x8bc>
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <do_flood_fill_algorithm+0x930>)
 80019ba:	e000      	b.n	80019be <do_flood_fill_algorithm+0x8be>
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <do_flood_fill_algorithm+0x934>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 fa74 	bl	8007eac <iprintf>
			memcpy(buf_right, distance_right_cm < 16 ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 80019c4:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 80019c8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d532      	bpl.n	8001a3c <do_flood_fill_algorithm+0x93c>
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <do_flood_fill_algorithm+0x938>)
 80019d8:	e031      	b.n	8001a3e <do_flood_fill_algorithm+0x93e>
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	8f5c28f6 	.word	0x8f5c28f6
 80019e4:	3fd8f5c2 	.word	0x3fd8f5c2
 80019e8:	0800a590 	.word	0x0800a590
 80019ec:	0800a5c0 	.word	0x0800a5c0
 80019f0:	200003b8 	.word	0x200003b8
 80019f4:	0800a604 	.word	0x0800a604
 80019f8:	0800a618 	.word	0x0800a618
 80019fc:	41a00000 	.word	0x41a00000
 8001a00:	40b00000 	.word	0x40b00000
 8001a04:	42c80000 	.word	0x42c80000
 8001a08:	3faa3d71 	.word	0x3faa3d71
 8001a0c:	c2c80000 	.word	0xc2c80000
 8001a10:	0800a62c 	.word	0x0800a62c
 8001a14:	0800a648 	.word	0x0800a648
 8001a18:	0800a668 	.word	0x0800a668
 8001a1c:	0800a67c 	.word	0x0800a67c
 8001a20:	0800a690 	.word	0x0800a690
 8001a24:	0800a6b0 	.word	0x0800a6b0
 8001a28:	0800a6d0 	.word	0x0800a6d0
 8001a2c:	0800a6e4 	.word	0x0800a6e4
 8001a30:	0800a6f8 	.word	0x0800a6f8
 8001a34:	0800a718 	.word	0x0800a718
 8001a38:	0800a73c 	.word	0x0800a73c
 8001a3c:	4ad3      	ldr	r2, [pc, #844]	; (8001d8c <do_flood_fill_algorithm+0xc8c>)
 8001a3e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001a42:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a46:	461c      	mov	r4, r3
 8001a48:	4615      	mov	r5, r2
 8001a4a:	6828      	ldr	r0, [r5, #0]
 8001a4c:	6869      	ldr	r1, [r5, #4]
 8001a4e:	68aa      	ldr	r2, [r5, #8]
 8001a50:	68eb      	ldr	r3, [r5, #12]
 8001a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a54:	6928      	ldr	r0, [r5, #16]
 8001a56:	6020      	str	r0, [r4, #0]
			HAL_UART_Transmit(&huart6, buf_right, sizeof(buf_right), 1000);
 8001a58:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	2214      	movs	r2, #20
 8001a62:	48cb      	ldr	r0, [pc, #812]	; (8001d90 <do_flood_fill_algorithm+0xc90>)
 8001a64:	f004 fbdd 	bl	8006222 <HAL_UART_Transmit>

			set_servo_angle(Front);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f001 fe12 	bl	8003692 <set_servo_angle>

			if (distance_left_cm < 16 && distance_right_cm < 16) {
 8001a6e:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8001a72:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d53a      	bpl.n	8001af6 <do_flood_fill_algorithm+0x9f6>
 8001a80:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8001a84:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a90:	d531      	bpl.n	8001af6 <do_flood_fill_algorithm+0x9f6>

				float distance_difference_right_left_cm = distance_right_cm - distance_left_cm;
 8001a92:	ed97 7a6b 	vldr	s14, [r7, #428]	; 0x1ac
 8001a96:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9e:	edc7 7a6a 	vstr	s15, [r7, #424]	; 0x1a8
				int proposed_left_motor_mult = LEFT_MOTOR_MULT - distance_difference_right_left_cm * 10;
 8001aa2:	4bbc      	ldr	r3, [pc, #752]	; (8001d94 <do_flood_fill_algorithm+0xc94>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8001ab2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
				// Subtract for the left motor multiplier because the left motor is actually the right one
				LEFT_MOTOR_MULT = proposed_left_motor_mult < LEFT_MOTOR_MULT_DEFAULT - MAX_MULT_CHANGE_RANGE ? LEFT_MOTOR_MULT : proposed_left_motor_mult;
 8001aca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ace:	2b8d      	cmp	r3, #141	; 0x8d
 8001ad0:	dc02      	bgt.n	8001ad8 <do_flood_fill_algorithm+0x9d8>
 8001ad2:	4bb0      	ldr	r3, [pc, #704]	; (8001d94 <do_flood_fill_algorithm+0xc94>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	e001      	b.n	8001adc <do_flood_fill_algorithm+0x9dc>
 8001ad8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001adc:	4aad      	ldr	r2, [pc, #692]	; (8001d94 <do_flood_fill_algorithm+0xc94>)
 8001ade:	6013      	str	r3, [r2, #0]
				LEFT_MOTOR_MULT = proposed_left_motor_mult > LEFT_MOTOR_MULT_DEFAULT + MAX_MULT_CHANGE_RANGE ? LEFT_MOTOR_MULT : proposed_left_motor_mult;
 8001ae0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ae4:	2bca      	cmp	r3, #202	; 0xca
 8001ae6:	dd02      	ble.n	8001aee <do_flood_fill_algorithm+0x9ee>
 8001ae8:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <do_flood_fill_algorithm+0xc94>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	e001      	b.n	8001af2 <do_flood_fill_algorithm+0x9f2>
 8001aee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001af2:	4aa8      	ldr	r2, [pc, #672]	; (8001d94 <do_flood_fill_algorithm+0xc94>)
 8001af4:	6013      	str	r3, [r2, #0]
			}
			if(distance_left_cm < 16)
 8001af6:	edd7 7a6c 	vldr	s15, [r7, #432]	; 0x1b0
 8001afa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	f140 809a 	bpl.w	8001c3e <do_flood_fill_algorithm+0xb3e>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 3) % 4] = Wall_Here;
 8001b0a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001b14:	461c      	mov	r4, r3
 8001b16:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	425a      	negs	r2, r3
 8001b1e:	f003 0103 	and.w	r1, r3, #3
 8001b22:	f002 0303 	and.w	r3, r2, #3
 8001b26:	bf58      	it	pl
 8001b28:	4259      	negpl	r1, r3
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4422      	add	r2, r4
 8001b30:	4603      	mov	r3, r0
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4403      	add	r3, r0
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001b3e:	443b      	add	r3, r7
 8001b40:	440b      	add	r3, r1
 8001b42:	3b94      	subs	r3, #148	; 0x94
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001b48:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d876      	bhi.n	8001c3e <do_flood_fill_algorithm+0xb3e>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <do_flood_fill_algorithm+0xa58>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b6d 	.word	0x08001b6d
 8001b5c:	08001b9f 	.word	0x08001b9f
 8001b60:	08001bcf 	.word	0x08001bcf
 8001b64:	08001c01 	.word	0x08001c01
 8001b68:	08001c3f 	.word	0x08001c3f
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001b6c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d85d      	bhi.n	8001c30 <do_flood_fill_algorithm+0xb30>
 8001b74:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	461a      	mov	r2, r3
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	441a      	add	r2, r3
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001b94:	443b      	add	r3, r7
 8001b96:	3b91      	subs	r3, #145	; 0x91
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
					break;
 8001b9c:	e048      	b.n	8001c30 <do_flood_fill_algorithm+0xb30>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001b9e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d046      	beq.n	8001c34 <do_flood_fill_algorithm+0xb34>
 8001ba6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	441a      	add	r2, r3
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	440b      	add	r3, r1
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001bc4:	443b      	add	r3, r7
 8001bc6:	3b94      	subs	r3, #148	; 0x94
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
					break;
 8001bcc:	e032      	b.n	8001c34 <do_flood_fill_algorithm+0xb34>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001bce:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d030      	beq.n	8001c38 <do_flood_fill_algorithm+0xb38>
 8001bd6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001be0:	3b01      	subs	r3, #1
 8001be2:	461a      	mov	r2, r3
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	441a      	add	r2, r3
 8001be8:	460b      	mov	r3, r1
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001bf6:	443b      	add	r3, r7
 8001bf8:	3b93      	subs	r3, #147	; 0x93
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
					break;
 8001bfe:	e01b      	b.n	8001c38 <do_flood_fill_algorithm+0xb38>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001c00:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d819      	bhi.n	8001c3c <do_flood_fill_algorithm+0xb3c>
 8001c08:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001c12:	461a      	mov	r2, r3
 8001c14:	0092      	lsls	r2, r2, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001c26:	443b      	add	r3, r7
 8001c28:	3b92      	subs	r3, #146	; 0x92
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
					break;
 8001c2e:	e005      	b.n	8001c3c <do_flood_fill_algorithm+0xb3c>
					break;
 8001c30:	bf00      	nop
 8001c32:	e004      	b.n	8001c3e <do_flood_fill_algorithm+0xb3e>
					break;
 8001c34:	bf00      	nop
 8001c36:	e002      	b.n	8001c3e <do_flood_fill_algorithm+0xb3e>
					break;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <do_flood_fill_algorithm+0xb3e>
					break;
 8001c3c:	bf00      	nop
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))

			if (requested_manual_command != AUTON_CHAR)
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <do_flood_fill_algorithm+0xc98>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b41      	cmp	r3, #65	; 0x41
 8001c44:	d001      	beq.n	8001c4a <do_flood_fill_algorithm+0xb4a>
			{
				return 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e261      	b.n	800210e <do_flood_fill_algorithm+0x100e>
			}  // if (requested_manual_command != AUTON_CHAR)

			if(front_wall_cm < 16)
 8001c4a:	edd7 7a70 	vldr	s15, [r7, #448]	; 0x1c0
 8001c4e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	f140 8090 	bpl.w	8001d7e <do_flood_fill_algorithm+0xc7e>
			{
				maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 8001c5e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001c62:	4618      	mov	r0, r3
 8001c64:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001c68:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4403      	add	r3, r0
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001c80:	443b      	add	r3, r7
 8001c82:	440b      	add	r3, r1
 8001c84:	3b94      	subs	r3, #148	; 0x94
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001c8a:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d875      	bhi.n	8001d7e <do_flood_fill_algorithm+0xc7e>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <do_flood_fill_algorithm+0xb98>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001cad 	.word	0x08001cad
 8001c9c:	08001cdd 	.word	0x08001cdd
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08001d3f 	.word	0x08001d3f
 8001ca8:	08001d7f 	.word	0x08001d7f
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001cac:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d85d      	bhi.n	8001d70 <do_flood_fill_algorithm+0xc70>
 8001cb4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001cb8:	1c59      	adds	r1, r3, #1
 8001cba:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	441a      	add	r2, r3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001cd2:	443b      	add	r3, r7
 8001cd4:	3b92      	subs	r3, #146	; 0x92
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
					break;
 8001cda:	e049      	b.n	8001d70 <do_flood_fill_algorithm+0xc70>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001cdc:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d847      	bhi.n	8001d74 <do_flood_fill_algorithm+0xc74>
 8001ce4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001cee:	3301      	adds	r3, #1
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	0092      	lsls	r2, r2, #2
 8001cf4:	441a      	add	r2, r3
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001d04:	443b      	add	r3, r7
 8001d06:	3b91      	subs	r3, #145	; 0x91
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
					break;
 8001d0c:	e032      	b.n	8001d74 <do_flood_fill_algorithm+0xc74>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001d0e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d030      	beq.n	8001d78 <do_flood_fill_algorithm+0xc78>
 8001d16:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001d20:	461a      	mov	r2, r3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	460b      	mov	r3, r1
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001d34:	443b      	add	r3, r7
 8001d36:	3b94      	subs	r3, #148	; 0x94
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
					break;
 8001d3c:	e01c      	b.n	8001d78 <do_flood_fill_algorithm+0xc78>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001d3e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01a      	beq.n	8001d7c <do_flood_fill_algorithm+0xc7c>
 8001d46:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001d50:	3b01      	subs	r3, #1
 8001d52:	461a      	mov	r2, r3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	441a      	add	r2, r3
 8001d58:	460b      	mov	r3, r1
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001d66:	443b      	add	r3, r7
 8001d68:	3b93      	subs	r3, #147	; 0x93
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
					break;
 8001d6e:	e005      	b.n	8001d7c <do_flood_fill_algorithm+0xc7c>
					break;
 8001d70:	bf00      	nop
 8001d72:	e004      	b.n	8001d7e <do_flood_fill_algorithm+0xc7e>
					break;
 8001d74:	bf00      	nop
 8001d76:	e002      	b.n	8001d7e <do_flood_fill_algorithm+0xc7e>
					break;
 8001d78:	bf00      	nop
 8001d7a:	e000      	b.n	8001d7e <do_flood_fill_algorithm+0xc7e>
					break;
 8001d7c:	bf00      	nop
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Front))

			if (requested_manual_command != AUTON_CHAR)
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <do_flood_fill_algorithm+0xc98>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b41      	cmp	r3, #65	; 0x41
 8001d84:	d00a      	beq.n	8001d9c <do_flood_fill_algorithm+0xc9c>
			{
				return 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e1c1      	b.n	800210e <do_flood_fill_algorithm+0x100e>
 8001d8a:	bf00      	nop
 8001d8c:	0800a750 	.word	0x0800a750
 8001d90:	200003b8 	.word	0x200003b8
 8001d94:	20000004 	.word	0x20000004
 8001d98:	20000001 	.word	0x20000001
			}  // if (requested_manual_command != AUTON_CHAR)

			if(distance_right_cm < 16)
 8001d9c:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8001da0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	f140 8099 	bpl.w	8001ee2 <do_flood_fill_algorithm+0xde2>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001db0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001db4:	4618      	mov	r0, r3
 8001db6:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001dba:	461c      	mov	r4, r3
 8001dbc:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	425a      	negs	r2, r3
 8001dc4:	f003 0103 	and.w	r1, r3, #3
 8001dc8:	f002 0303 	and.w	r3, r2, #3
 8001dcc:	bf58      	it	pl
 8001dce:	4259      	negpl	r1, r3
 8001dd0:	4622      	mov	r2, r4
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4422      	add	r2, r4
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4403      	add	r3, r0
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001de4:	443b      	add	r3, r7
 8001de6:	440b      	add	r3, r1
 8001de8:	3b94      	subs	r3, #148	; 0x94
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001dee:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d875      	bhi.n	8001ee2 <do_flood_fill_algorithm+0xde2>
 8001df6:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <do_flood_fill_algorithm+0xcfc>)
 8001df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e43 	.word	0x08001e43
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001ee3 	.word	0x08001ee3
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001e10:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05d      	beq.n	8001ed4 <do_flood_fill_algorithm+0xdd4>
 8001e18:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001e22:	3b01      	subs	r3, #1
 8001e24:	461a      	mov	r2, r3
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	441a      	add	r2, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001e38:	443b      	add	r3, r7
 8001e3a:	3b93      	subs	r3, #147	; 0x93
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
					break;
 8001e40:	e048      	b.n	8001ed4 <do_flood_fill_algorithm+0xdd4>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001e42:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d846      	bhi.n	8001ed8 <do_flood_fill_algorithm+0xdd8>
 8001e4a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001e54:	461a      	mov	r2, r3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	441a      	add	r2, r3
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001e68:	443b      	add	r3, r7
 8001e6a:	3b92      	subs	r3, #146	; 0x92
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
					break;
 8001e70:	e032      	b.n	8001ed8 <do_flood_fill_algorithm+0xdd8>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001e72:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d830      	bhi.n	8001edc <do_flood_fill_algorithm+0xddc>
 8001e7a:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001e84:	3301      	adds	r3, #1
 8001e86:	461a      	mov	r2, r3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	441a      	add	r2, r3
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001e9a:	443b      	add	r3, r7
 8001e9c:	3b91      	subs	r3, #145	; 0x91
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
					break;
 8001ea2:	e01b      	b.n	8001edc <do_flood_fill_algorithm+0xddc>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001ea4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d019      	beq.n	8001ee0 <do_flood_fill_algorithm+0xde0>
 8001eac:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001eb0:	1e59      	subs	r1, r3, #1
 8001eb2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	441a      	add	r2, r3
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001eca:	443b      	add	r3, r7
 8001ecc:	3b94      	subs	r3, #148	; 0x94
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
					break;
 8001ed2:	e005      	b.n	8001ee0 <do_flood_fill_algorithm+0xde0>
					break;
 8001ed4:	bf00      	nop
 8001ed6:	e004      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001ed8:	bf00      	nop
 8001eda:	e002      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001edc:	bf00      	nop
 8001ede:	e000      	b.n	8001ee2 <do_flood_fill_algorithm+0xde2>
					break;
 8001ee0:	bf00      	nop
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))

			if (requested_manual_command != AUTON_CHAR)
 8001ee2:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <do_flood_fill_algorithm+0x1018>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b41      	cmp	r3, #65	; 0x41
 8001ee8:	d001      	beq.n	8001eee <do_flood_fill_algorithm+0xdee>
			{
				return 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e10f      	b.n	800210e <do_flood_fill_algorithm+0x100e>
			}  // if (requested_manual_command != AUTON_CHAR)

			maze.cell_grid[c.y][c.x].visited = 1;
 8001eee:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001ef8:	461a      	mov	r2, r3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	460b      	mov	r3, r1
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001f0c:	443b      	add	r3, r7
 8001f0e:	3b90      	subs	r3, #144	; 0x90
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
 8001f14:	e02c      	b.n	8001f70 <do_flood_fill_algorithm+0xe70>

		}  // if(!maze.cell_grid[c.y][c.x].visited)
		else
		{
			// Move in direction for visited cell
			go_forward_one_unit();
 8001f16:	f001 fba7 	bl	8003668 <go_forward_one_unit>

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001f1a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001f24:	461a      	mov	r2, r3
 8001f26:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001f2a:	487c      	ldr	r0, [pc, #496]	; (800211c <do_flood_fill_algorithm+0x101c>)
 8001f2c:	f005 ffbe 	bl	8007eac <iprintf>
			char buf[20];
			sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8001f30:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001f40:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	460b      	mov	r3, r1
 8001f48:	4975      	ldr	r1, [pc, #468]	; (8002120 <do_flood_fill_algorithm+0x1020>)
 8001f4a:	f006 f853 	bl	8007ff4 <siprintf>
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001f4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	2214      	movs	r2, #20
 8001f58:	4872      	ldr	r0, [pc, #456]	; (8002124 <do_flood_fill_algorithm+0x1024>)
 8001f5a:	f004 f962 	bl	8006222 <HAL_UART_Transmit>

			print_maze(&maze, c, direction);
 8001f5e:	f897 21c4 	ldrb.w	r2, [r7, #452]	; 0x1c4
 8001f62:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001f66:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 faca 	bl	8002504 <print_maze>
		}

		// DONE TO MAKE SURE CORRECT ANGLE

		if(found_flood_fill_destination(c, &maze))
 8001f70:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001f74:	4619      	mov	r1, r3
 8001f76:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001f7a:	f000 f92d 	bl	80021d8 <found_flood_fill_destination>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d03b      	beq.n	8001ffc <do_flood_fill_algorithm+0xefc>
		{
			set_servo_angle(Front);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f001 fb84 	bl	8003692 <set_servo_angle>

			printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001f8a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001f94:	461a      	mov	r2, r3
 8001f96:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001f9a:	4860      	ldr	r0, [pc, #384]	; (800211c <do_flood_fill_algorithm+0x101c>)
 8001f9c:	f005 ff86 	bl	8007eac <iprintf>
			char buf5[20];
			sprintf((char *)buf5, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8001fa0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8001faa:	4619      	mov	r1, r3
 8001fac:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8001fb0:	f107 0018 	add.w	r0, r7, #24
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4959      	ldr	r1, [pc, #356]	; (8002120 <do_flood_fill_algorithm+0x1020>)
 8001fba:	f006 f81b 	bl	8007ff4 <siprintf>
			HAL_UART_Transmit(&huart6, buf5, sizeof(buf5), 1000);
 8001fbe:	f107 0118 	add.w	r1, r7, #24
 8001fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc6:	2214      	movs	r2, #20
 8001fc8:	4856      	ldr	r0, [pc, #344]	; (8002124 <do_flood_fill_algorithm+0x1024>)
 8001fca:	f004 f92a 	bl	8006222 <HAL_UART_Transmit>

			printf("Completed maze!\r\n");
 8001fce:	4856      	ldr	r0, [pc, #344]	; (8002128 <do_flood_fill_algorithm+0x1028>)
 8001fd0:	f006 f808 	bl	8007fe4 <puts>
			char buf[20];
			memcpy(buf, "&COMPLETED,,,,,,,,,", 20);
 8001fd4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001fd8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fdc:	4a53      	ldr	r2, [pc, #332]	; (800212c <do_flood_fill_algorithm+0x102c>)
 8001fde:	461c      	mov	r4, r3
 8001fe0:	4615      	mov	r5, r2
 8001fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe6:	682b      	ldr	r3, [r5, #0]
 8001fe8:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001fea:	1d39      	adds	r1, r7, #4
 8001fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff0:	2214      	movs	r2, #20
 8001ff2:	484c      	ldr	r0, [pc, #304]	; (8002124 <do_flood_fill_algorithm+0x1024>)
 8001ff4:	f004 f915 	bl	8006222 <HAL_UART_Transmit>
			return 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e088      	b.n	800210e <do_flood_fill_algorithm+0x100e>
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001ffc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002000:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002004:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f8ff 	bl	800220c <minus_one_neighbor>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5

		if(desired_direction == Unknown)
 8002014:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8002018:	2b04      	cmp	r3, #4
 800201a:	d12b      	bne.n	8002074 <do_flood_fill_algorithm+0xf74>
		{
			while(!stack_is_empty(&stack))
 800201c:	e016      	b.n	800204c <do_flood_fill_algorithm+0xf4c>
			{
				if (requested_manual_command != AUTON_CHAR)
 800201e:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <do_flood_fill_algorithm+0x1018>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b41      	cmp	r3, #65	; 0x41
 8002024:	d001      	beq.n	800202a <do_flood_fill_algorithm+0xf2a>
				{
					return 0;
 8002026:	2300      	movs	r3, #0
 8002028:	e071      	b.n	800210e <do_flood_fill_algorithm+0x100e>
				}  // if (requested_manual_command != AUTON_CHAR)
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 800202a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f892 	bl	8002158 <pop_stack>
 8002034:	4603      	mov	r3, r0
 8002036:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, next_coordinate, &stack);
 800203a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800203e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002042:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f8e0 	bl	800220c <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 800204c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002050:	4618      	mov	r0, r3
 8002052:	f000 f86f 	bl	8002134 <stack_is_empty>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0e0      	beq.n	800201e <do_flood_fill_algorithm+0xf1e>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, c, &stack);
 800205c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002060:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8002064:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f8cf 	bl	800220c <minus_one_neighbor>
 800206e:	4603      	mov	r3, r0
 8002070:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
		}  // if(next_direction == Unknown)
		int difference = desired_direction - direction + 4;
 8002074:	f897 21c5 	ldrb.w	r2, [r7, #453]	; 0x1c5
 8002078:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	3304      	adds	r3, #4
 8002080:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		char buf2[20];
		sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 8002084:	f897 11c4 	ldrb.w	r1, [r7, #452]	; 0x1c4
 8002088:	f897 41c5 	ldrb.w	r4, [r7, #453]	; 0x1c5
 800208c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002090:	425a      	negs	r2, r3
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	bf58      	it	pl
 800209c:	4253      	negpl	r3, r2
 800209e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4623      	mov	r3, r4
 80020a6:	460a      	mov	r2, r1
 80020a8:	4921      	ldr	r1, [pc, #132]	; (8002130 <do_flood_fill_algorithm+0x1030>)
 80020aa:	f005 ffa3 	bl	8007ff4 <siprintf>
		HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80020ae:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	2214      	movs	r2, #20
 80020b8:	481a      	ldr	r0, [pc, #104]	; (8002124 <do_flood_fill_algorithm+0x1024>)
 80020ba:	f004 f8b2 	bl	8006222 <HAL_UART_Transmit>
		switch(difference % 4)
 80020be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	f002 0203 	and.w	r2, r2, #3
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d816      	bhi.n	8002102 <do_flood_fill_algorithm+0x1002>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <do_flood_fill_algorithm+0xfdc>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	08002103 	.word	0x08002103
 80020e0:	080020ed 	.word	0x080020ed
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020fb 	.word	0x080020fb
		{
		case 0:
			break;
		case 1:
			rotate_direction_90(Right);
 80020ec:	2002      	movs	r0, #2
 80020ee:	f001 fa7b 	bl	80035e8 <rotate_direction_90>
			break;
 80020f2:	e006      	b.n	8002102 <do_flood_fill_algorithm+0x1002>
		case 2:
			rotate_180_degrees();
 80020f4:	f001 faab 	bl	800364e <rotate_180_degrees>
			break;
 80020f8:	e003      	b.n	8002102 <do_flood_fill_algorithm+0x1002>
		case 3:
			rotate_direction_90(Left);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f001 fa74 	bl	80035e8 <rotate_direction_90>
			break;
 8002100:	bf00      	nop
		}


		direction = desired_direction;
 8002102:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8002106:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
	{
 800210a:	f7ff ba85 	b.w	8001618 <do_flood_fill_algorithm+0x518>

	}  // while(1)
}  // do_hug_left_algorithm()
 800210e:	4618      	mov	r0, r3
 8002110:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8002114:	46bd      	mov	sp, r7
 8002116:	bdb0      	pop	{r4, r5, r7, pc}
 8002118:	20000001 	.word	0x20000001
 800211c:	0800a590 	.word	0x0800a590
 8002120:	0800a5c0 	.word	0x0800a5c0
 8002124:	200003b8 	.word	0x200003b8
 8002128:	0800a604 	.word	0x0800a604
 800212c:	0800a618 	.word	0x0800a618
 8002130:	0800a5ec 	.word	0x0800a5ec

08002134 <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf0c      	ite	eq
 8002146:	2301      	moveq	r3, #1
 8002148:	2300      	movne	r3, #0
 800214a:	b2db      	uxtb	r3, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <pop_stack>:

coordinate pop_stack(stack *s)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002166:	3b01      	subs	r3, #1
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f883 2020 	strb.w	r2, [r3, #32]
	return s->coordinates[s->index + 1];
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002176:	3301      	adds	r3, #1
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	f107 020c 	add.w	r2, r7, #12
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	8013      	strh	r3, [r2, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	7b3a      	ldrb	r2, [r7, #12]
 800218a:	f362 0307 	bfi	r3, r2, #0, #8
 800218e:	7b7a      	ldrb	r2, [r7, #13]
 8002190:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <push_stack>:

void push_stack(stack* s, coordinate c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	8039      	strh	r1, [r7, #0]
	s->index = s->index + 1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]
	s->coordinates[s->index] = c;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	463a      	mov	r2, r7
 80021c8:	8812      	ldrh	r2, [r2, #0]
 80021ca:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <found_flood_fill_destination>:

uint8_t found_flood_fill_destination(coordinate c, flood_fill_maze *maze)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	80b8      	strh	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c.y][c.x] == 0;
 80021e2:	797b      	ldrb	r3, [r7, #5]
 80021e4:	793a      	ldrb	r2, [r7, #4]
 80021e6:	4611      	mov	r1, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	3350      	adds	r3, #80	; 0x50
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf0c      	ite	eq
 80021f8:	2301      	moveq	r3, #1
 80021fa:	2300      	movne	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(coordinate c, Flood_Fill_Maze *maze)
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate c, stack *s)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	8139      	strh	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
	print_distance_grid(maze);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa6b 	bl	80026f4 <print_distance_grid>

	// TODO CHANGE WHEN BACK TO 16X16 MAZE
	/*
	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
	 */
	uint16_t min_dist = 20;
 800221e:	2314      	movs	r3, #20
 8002220:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c.y][c.x] - 1;
 8002222:	7a7b      	ldrb	r3, [r7, #9]
 8002224:	7a3a      	ldrb	r2, [r7, #8]
 8002226:	4611      	mov	r1, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	440b      	add	r3, r1
 8002230:	3350      	adds	r3, #80	; 0x50
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	3b01      	subs	r3, #1
 8002238:	b29b      	uxth	r3, r3
 800223a:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 800223c:	2300      	movs	r3, #0
 800223e:	757b      	strb	r3, [r7, #21]
 8002240:	e0dd      	b.n	80023fe <minus_one_neighbor+0x1f2>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8002242:	7a7b      	ldrb	r3, [r7, #9]
 8002244:	461c      	mov	r4, r3
 8002246:	7a3b      	ldrb	r3, [r7, #8]
 8002248:	7d79      	ldrb	r1, [r7, #21]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	461a      	mov	r2, r3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	441a      	add	r2, r3
 8002252:	4623      	mov	r3, r4
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4423      	add	r3, r4
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	4403      	add	r3, r0
 800225e:	440b      	add	r3, r1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 80bf 	bne.w	80023e6 <minus_one_neighbor+0x1da>
		{
			switch(i)
 8002268:	7d7b      	ldrb	r3, [r7, #21]
 800226a:	2b04      	cmp	r3, #4
 800226c:	f200 80c4 	bhi.w	80023f8 <minus_one_neighbor+0x1ec>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <minus_one_neighbor+0x6c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	0800228d 	.word	0x0800228d
 800227c:	080022e5 	.word	0x080022e5
 8002280:	0800233b 	.word	0x0800233b
 8002284:	08002391 	.word	0x08002391
 8002288:	080023f9 	.word	0x080023f9
			{
			case North:
				if(maze->distance_grid[c.y+1][c.x] == target)
 800228c:	7a7b      	ldrb	r3, [r7, #9]
 800228e:	3301      	adds	r3, #1
 8002290:	7a3a      	ldrb	r2, [r7, #8]
 8002292:	4611      	mov	r1, r2
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	440b      	add	r3, r1
 800229c:	3350      	adds	r3, #80	; 0x50
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d101      	bne.n	80022ae <minus_one_neighbor+0xa2>
				{
					return i;
 80022aa:	7d7b      	ldrb	r3, [r7, #21]
 80022ac:	e111      	b.n	80024d2 <minus_one_neighbor+0x2c6>
				}  // if(maze->distance_grid[c.y+1][c.x] == target)
				if(maze->distance_grid[c.y+1][c.x] < min_dist)
 80022ae:	7a7b      	ldrb	r3, [r7, #9]
 80022b0:	3301      	adds	r3, #1
 80022b2:	7a3a      	ldrb	r2, [r7, #8]
 80022b4:	4611      	mov	r1, r2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	440b      	add	r3, r1
 80022be:	3350      	adds	r3, #80	; 0x50
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8afa      	ldrh	r2, [r7, #22]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f240 808f 	bls.w	80023ea <minus_one_neighbor+0x1de>
				{
					min_dist = maze->distance_grid[c.y+1][c.x];
 80022cc:	7a7b      	ldrb	r3, [r7, #9]
 80022ce:	3301      	adds	r3, #1
 80022d0:	7a3a      	ldrb	r2, [r7, #8]
 80022d2:	4611      	mov	r1, r2
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	440b      	add	r3, r1
 80022dc:	3350      	adds	r3, #80	; 0x50
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y+1][c.x] < min_dist)
				break;
 80022e2:	e082      	b.n	80023ea <minus_one_neighbor+0x1de>
			case East:
				if(maze->distance_grid[c.y][c.x+1] == target)
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	461a      	mov	r2, r3
 80022e8:	7a3b      	ldrb	r3, [r7, #8]
 80022ea:	3301      	adds	r3, #1
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	440a      	add	r2, r1
 80022f2:	4413      	add	r3, r2
 80022f4:	3350      	adds	r3, #80	; 0x50
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d101      	bne.n	8002306 <minus_one_neighbor+0xfa>
				{
					return i;
 8002302:	7d7b      	ldrb	r3, [r7, #21]
 8002304:	e0e5      	b.n	80024d2 <minus_one_neighbor+0x2c6>
				}  // if(maze->distance_grid[c.y][c.x+1] == target)
				if(maze->distance_grid[c.y][c.x+1] < min_dist)
 8002306:	7a7b      	ldrb	r3, [r7, #9]
 8002308:	461a      	mov	r2, r3
 800230a:	7a3b      	ldrb	r3, [r7, #8]
 800230c:	3301      	adds	r3, #1
 800230e:	68f9      	ldr	r1, [r7, #12]
 8002310:	0092      	lsls	r2, r2, #2
 8002312:	440a      	add	r2, r1
 8002314:	4413      	add	r3, r2
 8002316:	3350      	adds	r3, #80	; 0x50
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	8afa      	ldrh	r2, [r7, #22]
 800231e:	429a      	cmp	r2, r3
 8002320:	d965      	bls.n	80023ee <minus_one_neighbor+0x1e2>
				{
					min_dist = maze->distance_grid[c.y][c.x+1];
 8002322:	7a7b      	ldrb	r3, [r7, #9]
 8002324:	461a      	mov	r2, r3
 8002326:	7a3b      	ldrb	r3, [r7, #8]
 8002328:	3301      	adds	r3, #1
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	440a      	add	r2, r1
 8002330:	4413      	add	r3, r2
 8002332:	3350      	adds	r3, #80	; 0x50
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x+1] < min_dist)
				break;
 8002338:	e059      	b.n	80023ee <minus_one_neighbor+0x1e2>
			case South:
				if(maze->distance_grid[c.y-1][c.x] == target)
 800233a:	7a7b      	ldrb	r3, [r7, #9]
 800233c:	3b01      	subs	r3, #1
 800233e:	7a3a      	ldrb	r2, [r7, #8]
 8002340:	4611      	mov	r1, r2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	440b      	add	r3, r1
 800234a:	3350      	adds	r3, #80	; 0x50
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002354:	429a      	cmp	r2, r3
 8002356:	d101      	bne.n	800235c <minus_one_neighbor+0x150>
				{
					return i;
 8002358:	7d7b      	ldrb	r3, [r7, #21]
 800235a:	e0ba      	b.n	80024d2 <minus_one_neighbor+0x2c6>
				}  // if(maze->distance_grid[c.y-1][c.x] == target)
				if(maze->distance_grid[c.y-1][c.x] < min_dist)
 800235c:	7a7b      	ldrb	r3, [r7, #9]
 800235e:	3b01      	subs	r3, #1
 8002360:	7a3a      	ldrb	r2, [r7, #8]
 8002362:	4611      	mov	r1, r2
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	440b      	add	r3, r1
 800236c:	3350      	adds	r3, #80	; 0x50
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	8afa      	ldrh	r2, [r7, #22]
 8002374:	429a      	cmp	r2, r3
 8002376:	d93c      	bls.n	80023f2 <minus_one_neighbor+0x1e6>
				{
					min_dist = maze->distance_grid[c.y-1][c.x];
 8002378:	7a7b      	ldrb	r3, [r7, #9]
 800237a:	3b01      	subs	r3, #1
 800237c:	7a3a      	ldrb	r2, [r7, #8]
 800237e:	4611      	mov	r1, r2
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	440b      	add	r3, r1
 8002388:	3350      	adds	r3, #80	; 0x50
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y-1][c.x] < min_dist)
				break;
 800238e:	e030      	b.n	80023f2 <minus_one_neighbor+0x1e6>
			case West:
				if(maze->distance_grid[c.y][c.x-1] == target)
 8002390:	7a7b      	ldrb	r3, [r7, #9]
 8002392:	461a      	mov	r2, r3
 8002394:	7a3b      	ldrb	r3, [r7, #8]
 8002396:	3b01      	subs	r3, #1
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	440a      	add	r2, r1
 800239e:	4413      	add	r3, r2
 80023a0:	3350      	adds	r3, #80	; 0x50
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d101      	bne.n	80023b2 <minus_one_neighbor+0x1a6>
				{
					return i;
 80023ae:	7d7b      	ldrb	r3, [r7, #21]
 80023b0:	e08f      	b.n	80024d2 <minus_one_neighbor+0x2c6>
				}  // if(maze->distance_grid[c.y][c.x-1] == target)
				if(maze->distance_grid[c.y][c.x-1] < min_dist)
 80023b2:	7a7b      	ldrb	r3, [r7, #9]
 80023b4:	461a      	mov	r2, r3
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	0092      	lsls	r2, r2, #2
 80023be:	440a      	add	r2, r1
 80023c0:	4413      	add	r3, r2
 80023c2:	3350      	adds	r3, #80	; 0x50
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8afa      	ldrh	r2, [r7, #22]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d913      	bls.n	80023f6 <minus_one_neighbor+0x1ea>
				{
					min_dist = maze->distance_grid[c.y][c.x-1];
 80023ce:	7a7b      	ldrb	r3, [r7, #9]
 80023d0:	461a      	mov	r2, r3
 80023d2:	7a3b      	ldrb	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	440a      	add	r2, r1
 80023dc:	4413      	add	r3, r2
 80023de:	3350      	adds	r3, #80	; 0x50
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x-1] < min_dist)
				break;
 80023e4:	e007      	b.n	80023f6 <minus_one_neighbor+0x1ea>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 80023e6:	bf00      	nop
 80023e8:	e006      	b.n	80023f8 <minus_one_neighbor+0x1ec>
				break;
 80023ea:	bf00      	nop
 80023ec:	e004      	b.n	80023f8 <minus_one_neighbor+0x1ec>
				break;
 80023ee:	bf00      	nop
 80023f0:	e002      	b.n	80023f8 <minus_one_neighbor+0x1ec>
				break;
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <minus_one_neighbor+0x1ec>
				break;
 80023f6:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 80023f8:	7d7b      	ldrb	r3, [r7, #21]
 80023fa:	3301      	adds	r3, #1
 80023fc:	757b      	strb	r3, [r7, #21]
 80023fe:	7d7b      	ldrb	r3, [r7, #21]
 8002400:	2b03      	cmp	r3, #3
 8002402:	f67f af1e 	bls.w	8002242 <minus_one_neighbor+0x36>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c.y][c.x] = min_dist + 1;
 8002406:	8afb      	ldrh	r3, [r7, #22]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	7a7a      	ldrb	r2, [r7, #9]
 800240c:	4614      	mov	r4, r2
 800240e:	7a3a      	ldrb	r2, [r7, #8]
 8002410:	4610      	mov	r0, r2
 8002412:	3301      	adds	r3, #1
 8002414:	b2d9      	uxtb	r1, r3
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	00a3      	lsls	r3, r4, #2
 800241a:	4413      	add	r3, r2
 800241c:	4403      	add	r3, r0
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	460a      	mov	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 8002424:	2300      	movs	r3, #0
 8002426:	753b      	strb	r3, [r7, #20]
 8002428:	e04f      	b.n	80024ca <minus_one_neighbor+0x2be>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 800242a:	7a7b      	ldrb	r3, [r7, #9]
 800242c:	461c      	mov	r4, r3
 800242e:	7a3b      	ldrb	r3, [r7, #8]
 8002430:	7d39      	ldrb	r1, [r7, #20]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	461a      	mov	r2, r3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	441a      	add	r2, r3
 800243a:	4623      	mov	r3, r4
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4423      	add	r3, r4
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	4403      	add	r3, r0
 8002446:	440b      	add	r3, r1
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d13a      	bne.n	80024c4 <minus_one_neighbor+0x2b8>
		{
			coordinate temp;
			switch(i)
 800244e:	7d3b      	ldrb	r3, [r7, #20]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d833      	bhi.n	80024bc <minus_one_neighbor+0x2b0>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <minus_one_neighbor+0x250>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002481 	.word	0x08002481
 8002464:	08002495 	.word	0x08002495
 8002468:	080024a9 	.word	0x080024a9
			{
			case North:
				init_coordinate(&temp, c.x, c.y + 1);
 800246c:	7a39      	ldrb	r1, [r7, #8]
 800246e:	7a7b      	ldrb	r3, [r7, #9]
 8002470:	3301      	adds	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f82f 	bl	80024dc <init_coordinate>
				break;
 800247e:	e01d      	b.n	80024bc <minus_one_neighbor+0x2b0>
			case East:
				init_coordinate(&temp, c.x + 1, c.y);
 8002480:	7a3b      	ldrb	r3, [r7, #8]
 8002482:	3301      	adds	r3, #1
 8002484:	b2d9      	uxtb	r1, r3
 8002486:	7a7a      	ldrb	r2, [r7, #9]
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f825 	bl	80024dc <init_coordinate>
				break;
 8002492:	e013      	b.n	80024bc <minus_one_neighbor+0x2b0>
			case South:
				init_coordinate(&temp, c.x, c.y - 1);
 8002494:	7a39      	ldrb	r1, [r7, #8]
 8002496:	7a7b      	ldrb	r3, [r7, #9]
 8002498:	3b01      	subs	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f81b 	bl	80024dc <init_coordinate>
				break;
 80024a6:	e009      	b.n	80024bc <minus_one_neighbor+0x2b0>
			case West:
				init_coordinate(&temp, c.x - 1, c.y);
 80024a8:	7a3b      	ldrb	r3, [r7, #8]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b2d9      	uxtb	r1, r3
 80024ae:	7a7a      	ldrb	r2, [r7, #9]
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f811 	bl	80024dc <init_coordinate>
				break;
 80024ba:	bf00      	nop
			}  // switch(i)
			push_stack(s, temp);
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fe6e 	bl	80021a0 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 80024c4:	7d3b      	ldrb	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	753b      	strb	r3, [r7, #20]
 80024ca:	7d3b      	ldrb	r3, [r7, #20]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d9ac      	bls.n	800242a <minus_one_neighbor+0x21e>
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 80024d0:	2304      	movs	r3, #4
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	371c      	adds	r7, #28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	bf00      	nop

080024dc <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
 80024e8:	4613      	mov	r3, r2
 80024ea:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	78fa      	ldrb	r2, [r7, #3]
 80024f0:	701a      	strb	r2, [r3, #0]
	c->y = y;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	78ba      	ldrb	r2, [r7, #2]
 80024f6:	705a      	strb	r2, [r3, #1]
}  // void init_coor(coordinate c, uint8_t x, uint8_t y)
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	8139      	strh	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
	printf("Printing maze grid. \r\n");
 8002512:	4876      	ldr	r0, [pc, #472]	; (80026ec <print_maze+0x1e8>)
 8002514:	f005 fd66 	bl	8007fe4 <puts>
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800251e:	e079      	b.n	8002614 <print_maze+0x110>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002526:	e06c      	b.n	8002602 <print_maze+0xfe>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8002528:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800252c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	441a      	add	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	4403      	add	r3, r0
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			number |= maze->cell_grid[i][j].walls[East] << 1;
 800254a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800254e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	461a      	mov	r2, r3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	441a      	add	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	4403      	add	r3, r0
 8002566:	3301      	adds	r3, #1
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	b25a      	sxtb	r2, r3
 800256e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002572:	4313      	orrs	r3, r2
 8002574:	b25b      	sxtb	r3, r3
 8002576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			number |= maze->cell_grid[i][j].walls[South] << 2;
 800257a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800257e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	441a      	add	r2, r3
 800258a:	460b      	mov	r3, r1
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	4403      	add	r3, r0
 8002596:	3302      	adds	r3, #2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	b25a      	sxtb	r2, r3
 800259e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			number |= maze->cell_grid[i][j].walls[West] << 3;
 80025aa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80025ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	461a      	mov	r2, r3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	441a      	add	r2, r3
 80025ba:	460b      	mov	r3, r1
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	4403      	add	r3, r0
 80025c6:	3303      	adds	r3, #3
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	b25a      	sxtb	r2, r3
 80025ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80025d2:	4313      	orrs	r3, r2
 80025d4:	b25b      	sxtb	r3, r3
 80025d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			maze_map[i][j] = 'a' + number;
 80025da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80025de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025e2:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80025e6:	3161      	adds	r1, #97	; 0x61
 80025e8:	b2c9      	uxtb	r1, r1
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	3228      	adds	r2, #40	; 0x28
 80025ee:	443a      	add	r2, r7
 80025f0:	4413      	add	r3, r2
 80025f2:	3b18      	subs	r3, #24
 80025f4:	460a      	mov	r2, r1
 80025f6:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80025f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025fc:	3301      	adds	r3, #1
 80025fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002606:	2b03      	cmp	r3, #3
 8002608:	d98e      	bls.n	8002528 <print_maze+0x24>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 800260a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260e:	3301      	adds	r3, #1
 8002610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002618:	2b03      	cmp	r3, #3
 800261a:	d981      	bls.n	8002520 <print_maze+0x1c>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b04      	cmp	r3, #4
 8002620:	d834      	bhi.n	800268c <print_maze+0x188>
 8002622:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <print_maze+0x124>)
 8002624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002628:	0800263d 	.word	0x0800263d
 800262c:	08002651 	.word	0x08002651
 8002630:	08002665 	.word	0x08002665
 8002634:	08002679 	.word	0x08002679
 8002638:	0800268d 	.word	0x0800268d
	{
	case North:
		maze_map[c.y][c.x] = 'N';
 800263c:	7a7b      	ldrb	r3, [r7, #9]
 800263e:	7a3a      	ldrb	r2, [r7, #8]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	3328      	adds	r3, #40	; 0x28
 8002644:	443b      	add	r3, r7
 8002646:	4413      	add	r3, r2
 8002648:	3b18      	subs	r3, #24
 800264a:	224e      	movs	r2, #78	; 0x4e
 800264c:	701a      	strb	r2, [r3, #0]
		break;
 800264e:	e01d      	b.n	800268c <print_maze+0x188>
	case East:
		maze_map[c.y][c.x] = 'E';
 8002650:	7a7b      	ldrb	r3, [r7, #9]
 8002652:	7a3a      	ldrb	r2, [r7, #8]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3328      	adds	r3, #40	; 0x28
 8002658:	443b      	add	r3, r7
 800265a:	4413      	add	r3, r2
 800265c:	3b18      	subs	r3, #24
 800265e:	2245      	movs	r2, #69	; 0x45
 8002660:	701a      	strb	r2, [r3, #0]
		break;
 8002662:	e013      	b.n	800268c <print_maze+0x188>
	case South:
		maze_map[c.y][c.x] = 'S';
 8002664:	7a7b      	ldrb	r3, [r7, #9]
 8002666:	7a3a      	ldrb	r2, [r7, #8]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	3328      	adds	r3, #40	; 0x28
 800266c:	443b      	add	r3, r7
 800266e:	4413      	add	r3, r2
 8002670:	3b18      	subs	r3, #24
 8002672:	2253      	movs	r2, #83	; 0x53
 8002674:	701a      	strb	r2, [r3, #0]
		break;
 8002676:	e009      	b.n	800268c <print_maze+0x188>
	case West:
		maze_map[c.y][c.x] = 'W';
 8002678:	7a7b      	ldrb	r3, [r7, #9]
 800267a:	7a3a      	ldrb	r2, [r7, #8]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3328      	adds	r3, #40	; 0x28
 8002680:	443b      	add	r3, r7
 8002682:	4413      	add	r3, r2
 8002684:	3b18      	subs	r3, #24
 8002686:	2257      	movs	r2, #87	; 0x57
 8002688:	701a      	strb	r2, [r3, #0]
		break;
 800268a:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 800268c:	2303      	movs	r3, #3
 800268e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002692:	e022      	b.n	80026da <print_maze+0x1d6>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800269a:	e011      	b.n	80026c0 <print_maze+0x1bc>
		{
			printf("%c", maze_map[i][j]);
 800269c:	f997 2025 	ldrsb.w	r2, [r7, #37]	; 0x25
 80026a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026a4:	0092      	lsls	r2, r2, #2
 80026a6:	3228      	adds	r2, #40	; 0x28
 80026a8:	443a      	add	r2, r7
 80026aa:	4413      	add	r3, r2
 80026ac:	3b18      	subs	r3, #24
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f005 fc13 	bl	8007edc <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80026b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026ba:	3301      	adds	r3, #1
 80026bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80026c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d9e9      	bls.n	800269c <print_maze+0x198>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)

		printf("\r\n");
 80026c8:	4809      	ldr	r0, [pc, #36]	; (80026f0 <print_maze+0x1ec>)
 80026ca:	f005 fc8b 	bl	8007fe4 <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 80026ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80026da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80026de:	2b00      	cmp	r3, #0
 80026e0:	dad8      	bge.n	8002694 <print_maze+0x190>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_maze(flood_fill_maze *m, coordinate c)
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	3728      	adds	r7, #40	; 0x28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	0800a764 	.word	0x0800a764
 80026f0:	0800a77c 	.word	0x0800a77c

080026f4 <print_distance_grid>:

void print_distance_grid(flood_fill_maze *maze)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

	printf("Printing distance grid. \r\n");
 80026fc:	4815      	ldr	r0, [pc, #84]	; (8002754 <print_distance_grid+0x60>)
 80026fe:	f005 fc71 	bl	8007fe4 <puts>

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	e01c      	b.n	8002742 <print_distance_grid+0x4e>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002708:	2300      	movs	r3, #0
 800270a:	73bb      	strb	r3, [r7, #14]
 800270c:	e00f      	b.n	800272e <print_distance_grid+0x3a>
		{
			printf("%c", 'a' + maze->distance_grid[i][j]);
 800270e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002712:	7bbb      	ldrb	r3, [r7, #14]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	440a      	add	r2, r1
 800271a:	4413      	add	r3, r2
 800271c:	3350      	adds	r3, #80	; 0x50
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	3361      	adds	r3, #97	; 0x61
 8002722:	4618      	mov	r0, r3
 8002724:	f005 fbda 	bl	8007edc <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002728:	7bbb      	ldrb	r3, [r7, #14]
 800272a:	3301      	adds	r3, #1
 800272c:	73bb      	strb	r3, [r7, #14]
 800272e:	7bbb      	ldrb	r3, [r7, #14]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d9ec      	bls.n	800270e <print_distance_grid+0x1a>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		printf("\r\n");
 8002734:	4808      	ldr	r0, [pc, #32]	; (8002758 <print_distance_grid+0x64>)
 8002736:	f005 fc55 	bl	8007fe4 <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3b01      	subs	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	dade      	bge.n	8002708 <print_distance_grid+0x14>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_distance_grid(flood_fill_maze *maze)
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	0800a780 	.word	0x0800a780
 8002758:	0800a77c 	.word	0x0800a77c

0800275c <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 8002760:	2000      	movs	r0, #0
 8002762:	f001 fbab 	bl	8003ebc <is_there_wall_on_direction>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 800276c:	2000      	movs	r0, #0
 800276e:	f000 ff3b 	bl	80035e8 <rotate_direction_90>
		go_forward_one_unit();
 8002772:	f000 ff79 	bl	8003668 <go_forward_one_unit>
 8002776:	e018      	b.n	80027aa <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8002778:	2001      	movs	r0, #1
 800277a:	f001 fb9f 	bl	8003ebc <is_there_wall_on_direction>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8002784:	2002      	movs	r0, #2
 8002786:	f001 fb99 	bl	8003ebc <is_there_wall_on_direction>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8002790:	f000 ff5d 	bl	800364e <rotate_180_degrees>
			go_forward_one_unit();
 8002794:	f000 ff68 	bl	8003668 <go_forward_one_unit>
 8002798:	e007      	b.n	80027aa <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 800279a:	2002      	movs	r0, #2
 800279c:	f000 ff24 	bl	80035e8 <rotate_direction_90>
			go_forward_one_unit();
 80027a0:	f000 ff62 	bl	8003668 <go_forward_one_unit>
 80027a4:	e001      	b.n	80027aa <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 80027a6:	f000 ff5f 	bl	8003668 <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 80027aa:	f000 f808 	bl	80027be <found_hugger_destination>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 80027b4:	f7ff ffd2 	bl	800275c <do_hug_left_algorithm>
 80027b8:	e000      	b.n	80027bc <do_hug_left_algorithm+0x60>
		return;
 80027ba:	bf00      	nop
}  // do_hug_left_algorithm()
 80027bc:	bd80      	pop	{r7, pc}

080027be <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 80027c2:	2300      	movs	r3, #0
}  // found_hugger_destination()
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 80027d8:	2047      	movs	r0, #71	; 0x47
 80027da:	f001 fe1c 	bl	8004416 <HAL_NVIC_DisableIRQ>
	// Save the last command

	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027de:	2047      	movs	r0, #71	; 0x47
 80027e0:	f001 fe0b 	bl	80043fa <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80027e4:	2201      	movs	r2, #1
 80027e6:	4913      	ldr	r1, [pc, #76]	; (8002834 <HAL_UART_RxCpltCallback+0x64>)
 80027e8:	4813      	ldr	r0, [pc, #76]	; (8002838 <HAL_UART_RxCpltCallback+0x68>)
 80027ea:	f003 fdac 	bl	8006346 <HAL_UART_Receive_IT>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]

	//	__HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d011      	beq.n	800281c <HAL_UART_RxCpltCallback+0x4c>
		Error_Handler();
 80027f8:	f000 fbba 	bl	8002f70 <Error_Handler>
		HAL_UART_Abort_IT(&huart6);
 80027fc:	480e      	ldr	r0, [pc, #56]	; (8002838 <HAL_UART_RxCpltCallback+0x68>)
 80027fe:	f003 fdd3 	bl	80063a8 <HAL_UART_Abort_IT>
		SET_BIT(huart6.Instance->CR3, USART_CR3_EIE);
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_UART_RxCpltCallback+0x68>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_UART_RxCpltCallback+0x68>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	615a      	str	r2, [r3, #20]
		HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002812:	2201      	movs	r2, #1
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <HAL_UART_RxCpltCallback+0x64>)
 8002816:	4808      	ldr	r0, [pc, #32]	; (8002838 <HAL_UART_RxCpltCallback+0x68>)
 8002818:	f003 fd95 	bl	8006346 <HAL_UART_Receive_IT>
	}
	HAL_NVIC_ClearPendingIRQ(USART6_IRQn);
 800281c:	2047      	movs	r0, #71	; 0x47
 800281e:	f001 fe14 	bl	800444a <HAL_NVIC_ClearPendingIRQ>
	requested_manual_command = UART6_rxBuffer[0];
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_UART_RxCpltCallback+0x64>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_UART_RxCpltCallback+0x6c>)
 8002828:	701a      	strb	r2, [r3, #0]
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200003fc 	.word	0x200003fc
 8002838:	200003b8 	.word	0x200003b8
 800283c:	20000001 	.word	0x20000001

08002840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002846:	f001 fc09 	bl	800405c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800284a:	f000 f8c1 	bl	80029d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800284e:	f000 fb1f 	bl	8002e90 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002852:	f000 f973 	bl	8002b3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002856:	f000 f9cb 	bl	8002bf0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800285a:	f000 f917 	bl	8002a8c <MX_TIM2_Init>
  MX_TIM5_Init();
 800285e:	f000 fa21 	bl	8002ca4 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8002862:	f000 faeb 	bl	8002e3c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8002866:	f000 fa71 	bl	8002d4c <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800286a:	f000 fabd 	bl	8002de8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fb74 	bl	8000f5c <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8002874:	2101      	movs	r1, #1
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe fb8f 	bl	8000f9a <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 800287c:	2001      	movs	r0, #1
 800287e:	f000 ff08 	bl	8003692 <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8002882:	f000 fc45 	bl	8003110 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <main+0x154>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <main+0x154>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0204 	orr.w	r2, r2, #4
 8002894:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8002896:	2100      	movs	r1, #0
 8002898:	483f      	ldr	r0, [pc, #252]	; (8002998 <main+0x158>)
 800289a:	f002 fd0b 	bl	80052b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 800289e:	2104      	movs	r1, #4
 80028a0:	483e      	ldr	r0, [pc, #248]	; (800299c <main+0x15c>)
 80028a2:	f002 fd07 	bl	80052b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 80028a6:	2100      	movs	r1, #0
 80028a8:	483d      	ldr	r0, [pc, #244]	; (80029a0 <main+0x160>)
 80028aa:	f002 fd03 	bl	80052b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 80028ae:	2104      	movs	r1, #4
 80028b0:	4838      	ldr	r0, [pc, #224]	; (8002994 <main+0x154>)
 80028b2:	f002 fcff 	bl	80052b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  // Sonic Trigger PWM
 80028b6:	2100      	movs	r1, #0
 80028b8:	483a      	ldr	r0, [pc, #232]	; (80029a4 <main+0x164>)
 80028ba:	f002 fcfb 	bl	80052b4 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80028be:	2201      	movs	r2, #1
 80028c0:	4939      	ldr	r1, [pc, #228]	; (80029a8 <main+0x168>)
 80028c2:	483a      	ldr	r0, [pc, #232]	; (80029ac <main+0x16c>)
 80028c4:	f003 fd3f 	bl	8006346 <HAL_UART_Receive_IT>
  uint8_t determined_algorithm = determine_algorithm();
 80028c8:	f7fe fbc2 	bl	8001050 <determine_algorithm>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  requested_manual_command = S_CHAR;  // TODO - change to S_CHAR if manual mode is supported, AUTON_CHAR if not
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <main+0x170>)
 80028d4:	2238      	movs	r2, #56	; 0x38
 80028d6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	LEFT_MOTOR_MULT = LEFT_MOTOR_MULT_DEFAULT;
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <main+0x174>)
 80028da:	22ac      	movs	r2, #172	; 0xac
 80028dc:	601a      	str	r2, [r3, #0]
	RIGHT_MOTOR_MULT = RIGHT_MOTOR_MULT_DEFAULT;
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <main+0x178>)
 80028e0:	22dc      	movs	r2, #220	; 0xdc
 80028e2:	601a      	str	r2, [r3, #0]
    set_servo_angle(Front);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f000 fed4 	bl	8003692 <set_servo_angle>
    if (current_manual_command != COMPLETED_CHAR)
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <main+0x17c>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b2d      	cmp	r3, #45	; 0x2d
 80028f0:	d01c      	beq.n	800292c <main+0xec>
    {
		printf("Currently changing to manual mode.\r\n");
 80028f2:	4833      	ldr	r0, [pc, #204]	; (80029c0 <main+0x180>)
 80028f4:	f005 fb76 	bl	8007fe4 <puts>
		char buf[20];
		memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <main+0x184>)
 80028fa:	1d3c      	adds	r4, r7, #4
 80028fc:	461d      	mov	r5, r3
 80028fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002906:	1d39      	adds	r1, r7, #4
 8002908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290c:	2214      	movs	r2, #20
 800290e:	4827      	ldr	r0, [pc, #156]	; (80029ac <main+0x16c>)
 8002910:	f003 fc87 	bl	8006222 <HAL_UART_Transmit>
    }  // if (current_manual_command != COMPLETED_CHAR && current_manual_command != S_CHAR)

	  while (current_manual_command != AUTON_CHAR)
 8002914:	e00a      	b.n	800292c <main+0xec>
	  {
//			printf("Currently changing to manual mode.\r\n");
//			char buf[20];
//			memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
//			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		  if(requested_manual_command != current_manual_command)
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <main+0x170>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b28      	ldr	r3, [pc, #160]	; (80029bc <main+0x17c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d004      	beq.n	800292c <main+0xec>
		  {
			  execute_manual_command(requested_manual_command);
 8002922:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <main+0x170>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fb28 	bl	8002f7c <execute_manual_command>
	  while (current_manual_command != AUTON_CHAR)
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <main+0x17c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b41      	cmp	r3, #65	; 0x41
 8002932:	d1f0      	bne.n	8002916 <main+0xd6>
		  }  // if(requested_manual_command != current_manual_command)
	  }  // while (current_manual_command != AUTON_CHAR)

    set_servo_angle(Front);
 8002934:	2001      	movs	r0, #1
 8002936:	f000 feac 	bl	8003692 <set_servo_angle>
    printf("Changing to autonomous mode.\r\n");
 800293a:	4823      	ldr	r0, [pc, #140]	; (80029c8 <main+0x188>)
 800293c:	f005 fb52 	bl	8007fe4 <puts>
    char buf[20];
    memcpy(buf, "&AUTONOMOUS,,,,,,,,", 20);
 8002940:	4b22      	ldr	r3, [pc, #136]	; (80029cc <main+0x18c>)
 8002942:	f107 0418 	add.w	r4, r7, #24
 8002946:	461d      	mov	r5, r3
 8002948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8002950:	f107 0118 	add.w	r1, r7, #24
 8002954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002958:	2214      	movs	r2, #20
 800295a:	4814      	ldr	r0, [pc, #80]	; (80029ac <main+0x16c>)
 800295c:	f003 fc61 	bl	8006222 <HAL_UART_Transmit>

	  uint8_t completed = do_search_algorithm(determined_algorithm);
 8002960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe fb91 	bl	800108c <do_search_algorithm>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  
    if (completed)
 8002970:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <main+0x14a>
    {
      complete_search_algorithm();
 8002978:	f7fe fbb2 	bl	80010e0 <complete_search_algorithm>
      requested_manual_command = COMPLETED_CHAR;
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <main+0x170>)
 800297e:	222d      	movs	r2, #45	; 0x2d
 8002980:	701a      	strb	r2, [r3, #0]
      current_manual_command = COMPLETED_CHAR;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <main+0x17c>)
 8002984:	222d      	movs	r2, #45	; 0x2d
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e7a6      	b.n	80028d8 <main+0x98>
    }  // if (completed)
    else
    {
	  current_manual_command = S_CHAR;
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <main+0x17c>)
 800298c:	2238      	movs	r2, #56	; 0x38
 800298e:	701a      	strb	r2, [r3, #0]
  {
 8002990:	e7a2      	b.n	80028d8 <main+0x98>
 8002992:	bf00      	nop
 8002994:	200002e4 	.word	0x200002e4
 8002998:	2000029c 	.word	0x2000029c
 800299c:	20000254 	.word	0x20000254
 80029a0:	2000020c 	.word	0x2000020c
 80029a4:	2000032c 	.word	0x2000032c
 80029a8:	200003fc 	.word	0x200003fc
 80029ac:	200003b8 	.word	0x200003b8
 80029b0:	20000001 	.word	0x20000001
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20000008 	.word	0x20000008
 80029bc:	20000000 	.word	0x20000000
 80029c0:	0800a79c 	.word	0x0800a79c
 80029c4:	0800a7c0 	.word	0x0800a7c0
 80029c8:	0800a7d4 	.word	0x0800a7d4
 80029cc:	0800a7f4 	.word	0x0800a7f4

080029d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d6:	f107 0320 	add.w	r3, r7, #32
 80029da:	2230      	movs	r2, #48	; 0x30
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fdf2 	bl	80075c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <SystemClock_Config+0xb4>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a21      	ldr	r2, [pc, #132]	; (8002a84 <SystemClock_Config+0xb4>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <SystemClock_Config+0xb4>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <SystemClock_Config+0xb8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <SystemClock_Config+0xb8>)
 8002a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <SystemClock_Config+0xb8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a30:	2301      	movs	r3, #1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a34:	2310      	movs	r3, #16
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 ff41 	bl	80048c8 <HAL_RCC_OscConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a4c:	f000 fa90 	bl	8002f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	230f      	movs	r3, #15
 8002a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 f9a4 	bl	8004db8 <HAL_RCC_ClockConfig>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002a76:	f000 fa7b 	bl	8002f70 <Error_Handler>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3750      	adds	r7, #80	; 0x50
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000

08002a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a92:	f107 0320 	add.w	r3, r7, #32
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	615a      	str	r2, [r3, #20]
 8002aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002ab8:	229f      	movs	r2, #159	; 0x9f
 8002aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b1e      	ldr	r3, [pc, #120]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002ac4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ad6:	4818      	ldr	r0, [pc, #96]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002ad8:	f002 fb9d 	bl	8005216 <HAL_TIM_PWM_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002ae2:	f000 fa45 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aee:	f107 0320 	add.w	r3, r7, #32
 8002af2:	4619      	mov	r1, r3
 8002af4:	4810      	ldr	r0, [pc, #64]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002af6:	f003 fac5 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002b00:	f000 fa36 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b04:	2360      	movs	r3, #96	; 0x60
 8002b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4807      	ldr	r0, [pc, #28]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002b1c:	f002 fe6e 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002b26:	f000 fa23 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b2a:	4803      	ldr	r0, [pc, #12]	; (8002b38 <MX_TIM2_Init+0xac>)
 8002b2c:	f000 feba 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000020c 	.word	0x2000020c

08002b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b42:	f107 0320 	add.w	r3, r7, #32
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <MX_TIM3_Init+0xb0>)
 8002b62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002b76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b84:	4818      	ldr	r0, [pc, #96]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002b86:	f002 fb46 	bl	8005216 <HAL_TIM_PWM_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002b90:	f000 f9ee 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b9c:	f107 0320 	add.w	r3, r7, #32
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4811      	ldr	r0, [pc, #68]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002ba4:	f003 fa6e 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002bae:	f000 f9df 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb2:	2360      	movs	r3, #96	; 0x60
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4807      	ldr	r0, [pc, #28]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002bca:	f002 fe17 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002bd4:	f000 f9cc 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002bd8:	4803      	ldr	r0, [pc, #12]	; (8002be8 <MX_TIM3_Init+0xac>)
 8002bda:	f000 fe63 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	; 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000254 	.word	0x20000254
 8002bec:	40000400 	.word	0x40000400

08002bf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	; 0x28
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf6:	f107 0320 	add.w	r3, r7, #32
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
 8002c0c:	611a      	str	r2, [r3, #16]
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <MX_TIM4_Init+0xb0>)
 8002c16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c1a:	224f      	movs	r2, #79	; 0x4f
 8002c1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c26:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c38:	4818      	ldr	r0, [pc, #96]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c3a:	f002 faec 	bl	8005216 <HAL_TIM_PWM_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002c44:	f000 f994 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c50:	f107 0320 	add.w	r3, r7, #32
 8002c54:	4619      	mov	r1, r3
 8002c56:	4811      	ldr	r0, [pc, #68]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c58:	f003 fa14 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002c62:	f000 f985 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c66:	2360      	movs	r3, #96	; 0x60
 8002c68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4807      	ldr	r0, [pc, #28]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c7e:	f002 fdbd 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002c88:	f000 f972 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c8c:	4803      	ldr	r0, [pc, #12]	; (8002c9c <MX_TIM4_Init+0xac>)
 8002c8e:	f000 fe09 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	2000029c 	.word	0x2000029c
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002caa:	f107 0310 	add.w	r3, r7, #16
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <MX_TIM5_Init+0xa4>)
 8002cc4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002cc8:	220f      	movs	r2, #15
 8002cca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002ce6:	4817      	ldr	r0, [pc, #92]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002ce8:	f002 fb94 	bl	8005414 <HAL_TIM_IC_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002cf2:	f000 f93d 	bl	8002f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	4619      	mov	r1, r3
 8002d04:	480f      	ldr	r0, [pc, #60]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002d06:	f003 f9bd 	bl	8006084 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002d10:	f000 f92e 	bl	8002f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d14:	2300      	movs	r3, #0
 8002d16:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	2204      	movs	r2, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4806      	ldr	r0, [pc, #24]	; (8002d44 <MX_TIM5_Init+0xa0>)
 8002d2c:	f002 fcc9 	bl	80056c2 <HAL_TIM_IC_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8002d36:	f000 f91b 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200002e4 	.word	0x200002e4
 8002d48:	40000c00 	.word	0x40000c00

08002d4c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <MX_TIM10_Init+0x98>)
 8002d68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d6c:	229f      	movs	r2, #159	; 0x9f
 8002d6e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d78:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002d7c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d8a:	4815      	ldr	r0, [pc, #84]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d8c:	f002 f9f4 	bl	8005178 <HAL_TIM_Base_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002d96:	f000 f8eb 	bl	8002f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002d9a:	4811      	ldr	r0, [pc, #68]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002d9c:	f002 fa3b 	bl	8005216 <HAL_TIM_PWM_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002da6:	f000 f8e3 	bl	8002f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002daa:	2360      	movs	r3, #96	; 0x60
 8002dac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4807      	ldr	r0, [pc, #28]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002dc2:	f002 fd1b 	bl	80057fc <HAL_TIM_PWM_ConfigChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002dcc:	f000 f8d0 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <MX_TIM10_Init+0x94>)
 8002dd2:	f000 fd67 	bl	80038a4 <HAL_TIM_MspPostInit>

}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000032c 	.word	0x2000032c
 8002de4:	40014400 	.word	0x40014400

08002de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <MX_USART2_UART_Init+0x50>)
 8002df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e0e:	220c      	movs	r2, #12
 8002e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e1e:	4805      	ldr	r0, [pc, #20]	; (8002e34 <MX_USART2_UART_Init+0x4c>)
 8002e20:	f003 f9b2 	bl	8006188 <HAL_UART_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e2a:	f000 f8a1 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000374 	.word	0x20000374
 8002e38:	40004400 	.word	0x40004400

08002e3c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <MX_USART6_UART_Init+0x50>)
 8002e44:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e4c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e62:	220c      	movs	r2, #12
 8002e64:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_USART6_UART_Init+0x4c>)
 8002e74:	f003 f988 	bl	8006188 <HAL_UART_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002e7e:	f000 f877 	bl	8002f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200003b8 	.word	0x200003b8
 8002e8c:	40011400 	.word	0x40011400

08002e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	f107 030c 	add.w	r3, r7, #12
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
 8002ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b26      	ldr	r3, [pc, #152]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	603b      	str	r3, [r7, #0]
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_GPIO_Init+0xb4>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 8002efa:	2200      	movs	r2, #0
 8002efc:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002f00:	4811      	ldr	r0, [pc, #68]	; (8002f48 <MX_GPIO_Init+0xb8>)
 8002f02:	f001 fcc7 	bl	8004894 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 8002f06:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 030c 	add.w	r3, r7, #12
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480a      	ldr	r0, [pc, #40]	; (8002f48 <MX_GPIO_Init+0xb8>)
 8002f20:	f001 fb34 	bl	800458c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8002f24:	2340      	movs	r3, #64	; 0x40
 8002f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4619      	mov	r1, r3
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <MX_GPIO_Init+0xb8>)
 8002f38:	f001 fb28 	bl	800458c <HAL_GPIO_Init>

}
 8002f3c:	bf00      	nop
 8002f3e:	3720      	adds	r7, #32
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000

08002f4c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002f54:	1d39      	adds	r1, r7, #4
 8002f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	4803      	ldr	r0, [pc, #12]	; (8002f6c <__io_putchar+0x20>)
 8002f5e:	f003 f960 	bl	8006222 <HAL_UART_Transmit>
  return ch;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000374 	.word	0x20000374

08002f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f74:	b672      	cpsid	i
}
 8002f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <Error_Handler+0x8>
	...

08002f7c <execute_manual_command>:
#include "manual_control.h"

void execute_manual_command(char command)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]

	switch(command)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	3b32      	subs	r3, #50	; 0x32
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d837      	bhi.n	8002ffe <execute_manual_command+0x82>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <execute_manual_command+0x18>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08002fed 	.word	0x08002fed
 8002f98:	08002fff 	.word	0x08002fff
 8002f9c:	08002fd5 	.word	0x08002fd5
 8002fa0:	08002ff3 	.word	0x08002ff3
 8002fa4:	08002fe1 	.word	0x08002fe1
 8002fa8:	08002fff 	.word	0x08002fff
 8002fac:	08002ff9 	.word	0x08002ff9
 8002fb0:	08002fff 	.word	0x08002fff
 8002fb4:	08002fff 	.word	0x08002fff
 8002fb8:	08002fff 	.word	0x08002fff
 8002fbc:	08002fff 	.word	0x08002fff
 8002fc0:	08002fff 	.word	0x08002fff
 8002fc4:	08002fff 	.word	0x08002fff
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002ff9 	.word	0x08002ff9
	{
	case LEFT_CHAR:
		manual_turn(Left, 0.6);
 8002fd4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8003010 <execute_manual_command+0x94>
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 f81f 	bl	800301c <manual_turn>
		break;
 8002fde:	e00f      	b.n	8003000 <execute_manual_command+0x84>
	case RIGHT_CHAR:
		manual_turn(Right, 0.6);
 8002fe0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003010 <execute_manual_command+0x94>
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f000 f819 	bl	800301c <manual_turn>
		break;
 8002fea:	e009      	b.n	8003000 <execute_manual_command+0x84>
	case FORWARD_CHAR:
		manual_forward();
 8002fec:	f000 f827 	bl	800303e <manual_forward>
		break;
 8002ff0:	e006      	b.n	8003000 <execute_manual_command+0x84>
	case BACKWARD_CHAR:
		manual_backward();
 8002ff2:	f000 f82c 	bl	800304e <manual_backward>
		break;
 8002ff6:	e003      	b.n	8003000 <execute_manual_command+0x84>
	case AUTON_CHAR:
	case S_CHAR:
		manual_stop();
 8002ff8:	f000 f831 	bl	800305e <manual_stop>
		break;
 8002ffc:	e000      	b.n	8003000 <execute_manual_command+0x84>
	default:
		break;
 8002ffe:	bf00      	nop
	}  // switch(command)
	current_manual_command = requested_manual_command;
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <execute_manual_command+0x98>)
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <execute_manual_command+0x9c>)
 8003006:	701a      	strb	r2, [r3, #0]


}  // void execute_manual_command(char message[30])
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	3f19999a 	.word	0x3f19999a
 8003014:	20000001 	.word	0x20000001
 8003018:	20000000 	.word	0x20000000

0800301c <manual_turn>:

void manual_turn(direction d, float speed_1)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	ed87 0a00 	vstr	s0, [r7]
 8003028:	71fb      	strb	r3, [r7, #7]
	rotate_direction(d, speed_1);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	ed97 0a00 	vldr	s0, [r7]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f891 	bl	8003158 <rotate_direction>
}  // void manual_turn(direction d)
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <manual_forward>:

void manual_forward()
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
	motors_forward(0.5);
 8003042:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003046:	f000 f91f 	bl	8003288 <motors_forward>
}  // void manual_forward()
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}

0800304e <manual_backward>:

void manual_backward()
{
 800304e:	b580      	push	{r7, lr}
 8003050:	af00      	add	r7, sp, #0
	motors_backward(0.5);
 8003052:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003056:	f000 f965 	bl	8003324 <motors_backward>
}  // void manual_backward()
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}

0800305e <manual_stop>:

void manual_stop()
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
	stop_all_motors();
 8003062:	f000 f855 	bl	8003110 <stop_all_motors>
}  // void manual_stop()
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <set_motor_speed>:

int LEFT_MOTOR_MULT = LEFT_MOTOR_MULT_DEFAULT;
int RIGHT_MOTOR_MULT = RIGHT_MOTOR_MULT_DEFAULT;

void set_motor_speed(motor_side side, int16_t speed400)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	460a      	mov	r2, r1
 8003076:	71fb      	strb	r3, [r7, #7]
 8003078:	4613      	mov	r3, r2
 800307a:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <set_motor_speed+0x1c>
 8003082:	2b01      	cmp	r3, #1
 8003084:	d016      	beq.n	80030b4 <set_motor_speed+0x48>
 8003086:	e02b      	b.n	80030e0 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003088:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	bfd4      	ite	le
 8003090:	2301      	movle	r3, #1
 8003092:	2300      	movgt	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800309c:	4812      	ldr	r0, [pc, #72]	; (80030e8 <set_motor_speed+0x7c>)
 800309e:	f001 fbf9 	bl	8004894 <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 80030a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfb8      	it	lt
 80030aa:	425b      	neglt	r3, r3
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <set_motor_speed+0x80>)
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80030b2:	e015      	b.n	80030e0 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80030b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bfd4      	ite	le
 80030bc:	2301      	movle	r3, #1
 80030be:	2300      	movgt	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030c8:	4807      	ldr	r0, [pc, #28]	; (80030e8 <set_motor_speed+0x7c>)
 80030ca:	f001 fbe3 	bl	8004894 <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 80030ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfb8      	it	lt
 80030d6:	425b      	neglt	r3, r3
 80030d8:	b29a      	uxth	r2, r3
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <set_motor_speed+0x84>)
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 80030de:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000400 	.word	0x40000400

080030f4 <stop_motor>:

void stop_motor(motor_side side)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
	set_motor_speed(side, 0);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ffb2 	bl	800306c <set_motor_speed>
}  // stop_motor(motor_side side)
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <stop_all_motors>:

void stop_all_motors()
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
	printf("Currently stopping the motors.\r\n");
 8003116:	480d      	ldr	r0, [pc, #52]	; (800314c <stop_all_motors+0x3c>)
 8003118:	f004 ff64 	bl	8007fe4 <puts>
	char buf[20];
	memcpy(buf, "$STOP,,,,,,,,,,,,,,", 20);
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <stop_all_motors+0x40>)
 800311e:	1d3c      	adds	r4, r7, #4
 8003120:	461d      	mov	r5, r3
 8003122:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003126:	682b      	ldr	r3, [r5, #0]
 8003128:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800312a:	1d39      	adds	r1, r7, #4
 800312c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003130:	2214      	movs	r2, #20
 8003132:	4808      	ldr	r0, [pc, #32]	; (8003154 <stop_all_motors+0x44>)
 8003134:	f003 f875 	bl	8006222 <HAL_UART_Transmit>
	stop_motor(Left_Motor);
 8003138:	2000      	movs	r0, #0
 800313a:	f7ff ffdb 	bl	80030f4 <stop_motor>
	stop_motor(Right_Motor);
 800313e:	2001      	movs	r0, #1
 8003140:	f7ff ffd8 	bl	80030f4 <stop_motor>
}  // stop_all_motors()
 8003144:	bf00      	nop
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bdb0      	pop	{r4, r5, r7, pc}
 800314c:	0800a808 	.word	0x0800a808
 8003150:	0800a828 	.word	0x0800a828
 8003154:	200003b8 	.word	0x200003b8

08003158 <rotate_direction>:

void rotate_direction(direction d, float speed_1)
{
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	ed87 0a00 	vstr	s0, [r7]
 8003164:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	char buf[20];
	switch(d)
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	2b02      	cmp	r3, #2
 800316a:	d040      	beq.n	80031ee <rotate_direction+0x96>
 800316c:	2b02      	cmp	r3, #2
 800316e:	dc79      	bgt.n	8003264 <rotate_direction+0x10c>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <rotate_direction+0x20>
 8003174:	2b01      	cmp	r3, #1
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
		return;
	case Front:
		return;
 8003176:	e075      	b.n	8003264 <rotate_direction+0x10c>
		printf("Currently rotating left.\r\n");
 8003178:	483c      	ldr	r0, [pc, #240]	; (800326c <rotate_direction+0x114>)
 800317a:	f004 ff33 	bl	8007fe4 <puts>
		memcpy(buf, "$LEFT,,,,,,,,,,,,,,", 20);
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <rotate_direction+0x118>)
 8003180:	f107 040c 	add.w	r4, r7, #12
 8003184:	461d      	mov	r5, r3
 8003186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800318e:	f107 010c 	add.w	r1, r7, #12
 8003192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003196:	2214      	movs	r2, #20
 8003198:	4836      	ldr	r0, [pc, #216]	; (8003274 <rotate_direction+0x11c>)
 800319a:	f003 f842 	bl	8006222 <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <rotate_direction+0x120>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	425b      	negs	r3, r3
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031ac:	edd7 7a00 	vldr	s15, [r7]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b8:	ee17 3a90 	vmov	r3, s15
 80031bc:	b21b      	sxth	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7ff ff53 	bl	800306c <set_motor_speed>
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <rotate_direction+0x124>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d2:	edd7 7a00 	vldr	s15, [r7]
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031de:	ee17 3a90 	vmov	r3, s15
 80031e2:	b21b      	sxth	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7ff ff40 	bl	800306c <set_motor_speed>
		return;
 80031ec:	e03a      	b.n	8003264 <rotate_direction+0x10c>
	case Right:
		printf("Currently rotating right.\r\n");
 80031ee:	4824      	ldr	r0, [pc, #144]	; (8003280 <rotate_direction+0x128>)
 80031f0:	f004 fef8 	bl	8007fe4 <puts>
		memcpy(buf, "$RIGHT,,,,,,,,,,,,,", 20);
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <rotate_direction+0x12c>)
 80031f6:	f107 040c 	add.w	r4, r7, #12
 80031fa:	461d      	mov	r5, r3
 80031fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003204:	f107 010c 	add.w	r1, r7, #12
 8003208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320c:	2214      	movs	r2, #20
 800320e:	4819      	ldr	r0, [pc, #100]	; (8003274 <rotate_direction+0x11c>)
 8003210:	f003 f807 	bl	8006222 <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <rotate_direction+0x120>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	b21b      	sxth	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff ff19 	bl	800306c <set_motor_speed>
		set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 800323a:	4b10      	ldr	r3, [pc, #64]	; (800327c <rotate_direction+0x124>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	425b      	negs	r3, r3
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003254:	ee17 3a90 	vmov	r3, s15
 8003258:	b21b      	sxth	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	2001      	movs	r0, #1
 800325e:	f7ff ff05 	bl	800306c <set_motor_speed>
		return;
 8003262:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d, float speed_1)
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bdb0      	pop	{r4, r5, r7, pc}
 800326a:	bf00      	nop
 800326c:	0800a83c 	.word	0x0800a83c
 8003270:	0800a858 	.word	0x0800a858
 8003274:	200003b8 	.word	0x200003b8
 8003278:	20000004 	.word	0x20000004
 800327c:	20000008 	.word	0x20000008
 8003280:	0800a86c 	.word	0x0800a86c
 8003284:	0800a888 	.word	0x0800a888

08003288 <motors_forward>:

void motors_forward(float speed_1)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors forward.\r\n");
 8003292:	481f      	ldr	r0, [pc, #124]	; (8003310 <motors_forward+0x88>)
 8003294:	f004 fea6 	bl	8007fe4 <puts>
	char buf[20];
	memcpy(buf, "$FORWARD,,,,,,,,,,,", 20);
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <motors_forward+0x8c>)
 800329a:	f107 040c 	add.w	r4, r7, #12
 800329e:	461d      	mov	r5, r3
 80032a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80032a8:	f107 010c 	add.w	r1, r7, #12
 80032ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b0:	2214      	movs	r2, #20
 80032b2:	4819      	ldr	r0, [pc, #100]	; (8003318 <motors_forward+0x90>)
 80032b4:	f002 ffb5 	bl	8006222 <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <motors_forward+0x94>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	425b      	negs	r3, r3
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d2:	ee17 3a90 	vmov	r3, s15
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	2000      	movs	r0, #0
 80032dc:	f7ff fec6 	bl	800306c <set_motor_speed>
	set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <motors_forward+0x98>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	425b      	negs	r3, r3
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032fa:	ee17 3a90 	vmov	r3, s15
 80032fe:	b21b      	sxth	r3, r3
 8003300:	4619      	mov	r1, r3
 8003302:	2001      	movs	r0, #1
 8003304:	f7ff feb2 	bl	800306c <set_motor_speed>
}  // void motors_forward(float speed_1)
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bdb0      	pop	{r4, r5, r7, pc}
 8003310:	0800a89c 	.word	0x0800a89c
 8003314:	0800a8b8 	.word	0x0800a8b8
 8003318:	200003b8 	.word	0x200003b8
 800331c:	20000004 	.word	0x20000004
 8003320:	20000008 	.word	0x20000008

08003324 <motors_backward>:

void motors_backward(float speed_1)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors backward.\r\n");
 800332e:	481e      	ldr	r0, [pc, #120]	; (80033a8 <motors_backward+0x84>)
 8003330:	f004 fe58 	bl	8007fe4 <puts>
	char buf[20];
	memcpy(buf, "$BACKWARD,,,,,,,,,,", 20);
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <motors_backward+0x88>)
 8003336:	f107 040c 	add.w	r4, r7, #12
 800333a:	461d      	mov	r5, r3
 800333c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800333e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003344:	f107 010c 	add.w	r1, r7, #12
 8003348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334c:	2214      	movs	r2, #20
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <motors_backward+0x8c>)
 8003350:	f002 ff67 	bl	8006222 <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 8003354:	4b17      	ldr	r3, [pc, #92]	; (80033b4 <motors_backward+0x90>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003360:	edd7 7a01 	vldr	s15, [r7, #4]
 8003364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336c:	ee17 3a90 	vmov	r3, s15
 8003370:	b21b      	sxth	r3, r3
 8003372:	4619      	mov	r1, r3
 8003374:	2000      	movs	r0, #0
 8003376:	f7ff fe79 	bl	800306c <set_motor_speed>
	set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <motors_backward+0x94>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003386:	edd7 7a01 	vldr	s15, [r7, #4]
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003392:	ee17 3a90 	vmov	r3, s15
 8003396:	b21b      	sxth	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	2001      	movs	r0, #1
 800339c:	f7ff fe66 	bl	800306c <set_motor_speed>
}  // void motors_backward(float speed_1)
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bdb0      	pop	{r4, r5, r7, pc}
 80033a8:	0800a8cc 	.word	0x0800a8cc
 80033ac:	0800a8ec 	.word	0x0800a8ec
 80033b0:	200003b8 	.word	0x200003b8
 80033b4:	20000004 	.word	0x20000004
 80033b8:	20000008 	.word	0x20000008
 80033bc:	00000000 	.word	0x00000000

080033c0 <recalibrate_by_turning>:
#include "mouse.h"

void recalibrate_by_turning()
{
 80033c0:	b5b0      	push	{r4, r5, r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
	set_servo_angle(Front);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f000 f963 	bl	8003692 <set_servo_angle>
	int total_change = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
	direction recalibrate_dir[6] = { Left, Right, Left, Right, Left, Right };
 80033d0:	4a47      	ldr	r2, [pc, #284]	; (80034f0 <recalibrate_by_turning+0x130>)
 80033d2:	463b      	mov	r3, r7
 80033d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d8:	6018      	str	r0, [r3, #0]
 80033da:	3304      	adds	r3, #4
 80033dc:	8019      	strh	r1, [r3, #0]
	float min_cm_front = distance_of_object_in_cm();
 80033de:	f000 fd55 	bl	8003e8c <distance_of_object_in_cm>
 80033e2:	ed87 0a06 	vstr	s0, [r7, #24]
	for (int i = 0; i < 4; ++i)
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e065      	b.n	80034b8 <recalibrate_by_turning+0xf8>
	{
		direction readjust_dir = recalibrate_dir[i];
 80033ec:	463a      	mov	r2, r7
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	73fb      	strb	r3, [r7, #15]
		for (int j = 0; j < 6; ++j)
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	e053      	b.n	80034a4 <recalibrate_by_turning+0xe4>
		{
			total_change += readjust_dir - 1;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3b01      	subs	r3, #1
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	61fb      	str	r3, [r7, #28]
			if (total_change >= 10 || total_change <= -10)
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	2b09      	cmp	r3, #9
 800340a:	dc67      	bgt.n	80034dc <recalibrate_by_turning+0x11c>
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f113 0f09 	cmn.w	r3, #9
 8003412:	db63      	blt.n	80034dc <recalibrate_by_turning+0x11c>
			{
				return;
			}
			if (requested_manual_command != AUTON_CHAR)
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <recalibrate_by_turning+0x134>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b41      	cmp	r3, #65	; 0x41
 800341a:	d161      	bne.n	80034e0 <recalibrate_by_turning+0x120>
			{
				return 0;
			}  // if (requested_manual_command != AUTON_CHAR)
			rotate_direction(readjust_dir, 0.5);
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fe98 	bl	8003158 <rotate_direction>
			HAL_Delay(30);
 8003428:	201e      	movs	r0, #30
 800342a:	f000 fe89 	bl	8004140 <HAL_Delay>
			stop_all_motors();
 800342e:	f7ff fe6f 	bl	8003110 <stop_all_motors>
			HAL_Delay(100);
 8003432:	2064      	movs	r0, #100	; 0x64
 8003434:	f000 fe84 	bl	8004140 <HAL_Delay>
			float current_cm_front = distance_of_object_in_cm();
 8003438:	f000 fd28 	bl	8003e8c <distance_of_object_in_cm>
 800343c:	ed87 0a02 	vstr	s0, [r7, #8]
			if (current_cm_front < min_cm_front - 1)
 8003440:	edd7 7a06 	vldr	s15, [r7, #24]
 8003444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800344c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003450:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	d428      	bmi.n	80034ac <recalibrate_by_turning+0xec>
			{
				break;  // if it jumped too much, then you probably looked at a different wall, so break.
			}
			else if (current_cm_front < min_cm_front)
 800345a:	ed97 7a02 	vldr	s14, [r7, #8]
 800345e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003462:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	d502      	bpl.n	8003472 <recalibrate_by_turning+0xb2>
			{
				min_cm_front = current_cm_front;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e015      	b.n	800349e <recalibrate_by_turning+0xde>
			}  // if (current_cm_front > max_cm_front)
			else if (current_cm_front > min_cm_front * 1.000005)
 8003472:	68b8      	ldr	r0, [r7, #8]
 8003474:	f7fd f870 	bl	8000558 <__aeabi_f2d>
 8003478:	4604      	mov	r4, r0
 800347a:	460d      	mov	r5, r1
 800347c:	69b8      	ldr	r0, [r7, #24]
 800347e:	f7fd f86b 	bl	8000558 <__aeabi_f2d>
 8003482:	a319      	add	r3, pc, #100	; (adr r3, 80034e8 <recalibrate_by_turning+0x128>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f8be 	bl	8000608 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fd fb48 	bl	8000b28 <__aeabi_dcmpgt>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d108      	bne.n	80034b0 <recalibrate_by_turning+0xf0>
		for (int j = 0; j < 6; ++j)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	3301      	adds	r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	dda8      	ble.n	80033fc <recalibrate_by_turning+0x3c>
 80034aa:	e002      	b.n	80034b2 <recalibrate_by_turning+0xf2>
				break;  // if it jumped too much, then you probably looked at a different wall, so break.
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <recalibrate_by_turning+0xf2>
			{
				break;  // if getting larger, then break
 80034b0:	bf00      	nop
	for (int i = 0; i < 4; ++i)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	dd96      	ble.n	80033ec <recalibrate_by_turning+0x2c>
			}  // else
		}  // while (1)
	}
	rotate_direction(Left, 0.5);
 80034be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff fe48 	bl	8003158 <rotate_direction>
	HAL_Delay(30);
 80034c8:	201e      	movs	r0, #30
 80034ca:	f000 fe39 	bl	8004140 <HAL_Delay>
	stop_all_motors();
 80034ce:	f7ff fe1f 	bl	8003110 <stop_all_motors>
	HAL_Delay(400);
 80034d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80034d6:	f000 fe33 	bl	8004140 <HAL_Delay>
 80034da:	e002      	b.n	80034e2 <recalibrate_by_turning+0x122>
				return;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <recalibrate_by_turning+0x122>
				return 0;
 80034e0:	bf00      	nop

}  // void recalibrate_by_turning()
 80034e2:	3720      	adds	r7, #32
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bdb0      	pop	{r4, r5, r7, pc}
 80034e8:	3e2d6239 	.word	0x3e2d6239
 80034ec:	3ff00005 	.word	0x3ff00005
 80034f0:	0800a900 	.word	0x0800a900
 80034f4:	20000001 	.word	0x20000001

080034f8 <calibrate_at_walls>:

void calibrate_at_walls()
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
	set_servo_angle(Left);
 80034fe:	2000      	movs	r0, #0
 8003500:	f000 f8c7 	bl	8003692 <set_servo_angle>
	motors_backward(0.75);
 8003504:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8003508:	f7ff ff0c 	bl	8003324 <motors_backward>
	HAL_Delay(150);
 800350c:	2096      	movs	r0, #150	; 0x96
 800350e:	f000 fe17 	bl	8004140 <HAL_Delay>
	stop_all_motors();
 8003512:	f7ff fdfd 	bl	8003110 <stop_all_motors>
	HAL_Delay(500);
 8003516:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800351a:	f000 fe11 	bl	8004140 <HAL_Delay>
	float distance_left_cm = distance_of_object_in_cm();
 800351e:	f000 fcb5 	bl	8003e8c <distance_of_object_in_cm>
 8003522:	ed87 0a03 	vstr	s0, [r7, #12]
	set_servo_angle(Right);
 8003526:	2002      	movs	r0, #2
 8003528:	f000 f8b3 	bl	8003692 <set_servo_angle>
	HAL_Delay(1000);
 800352c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003530:	f000 fe06 	bl	8004140 <HAL_Delay>
	float distance_right_cm = distance_of_object_in_cm();
 8003534:	f000 fcaa 	bl	8003e8c <distance_of_object_in_cm>
 8003538:	ed87 0a02 	vstr	s0, [r7, #8]
	set_servo_angle(Front);
 800353c:	2001      	movs	r0, #1
 800353e:	f000 f8a8 	bl	8003692 <set_servo_angle>

	if (distance_left_cm < 16 && distance_right_cm < 16)
 8003542:	edd7 7a03 	vldr	s15, [r7, #12]
 8003546:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800354a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003552:	d535      	bpl.n	80035c0 <calibrate_at_walls+0xc8>
 8003554:	edd7 7a02 	vldr	s15, [r7, #8]
 8003558:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800355c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	d52c      	bpl.n	80035c0 <calibrate_at_walls+0xc8>
	{
		float distance_difference_right_left_cm = distance_right_cm - distance_left_cm;
 8003566:	ed97 7a02 	vldr	s14, [r7, #8]
 800356a:	edd7 7a03 	vldr	s15, [r7, #12]
 800356e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003572:	edc7 7a01 	vstr	s15, [r7, #4]
		int proposed_left_motor_mult = LEFT_MOTOR_MULT - distance_difference_right_left_cm * 10;
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <calibrate_at_walls+0xec>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003582:	edd7 7a01 	vldr	s15, [r7, #4]
 8003586:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800358a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800358e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003596:	ee17 3a90 	vmov	r3, s15
 800359a:	603b      	str	r3, [r7, #0]
		// Subtract for the left motor multiplier because the left motor is actually the right one
		LEFT_MOTOR_MULT = proposed_left_motor_mult < LEFT_MOTOR_MULT_DEFAULT - MAX_MULT_CHANGE_RANGE ? LEFT_MOTOR_MULT : proposed_left_motor_mult;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b8d      	cmp	r3, #141	; 0x8d
 80035a0:	dc02      	bgt.n	80035a8 <calibrate_at_walls+0xb0>
 80035a2:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <calibrate_at_walls+0xec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e000      	b.n	80035aa <calibrate_at_walls+0xb2>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <calibrate_at_walls+0xec>)
 80035ac:	6013      	str	r3, [r2, #0]
		LEFT_MOTOR_MULT = proposed_left_motor_mult > LEFT_MOTOR_MULT_DEFAULT + MAX_MULT_CHANGE_RANGE ? LEFT_MOTOR_MULT : proposed_left_motor_mult;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2bca      	cmp	r3, #202	; 0xca
 80035b2:	dd02      	ble.n	80035ba <calibrate_at_walls+0xc2>
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <calibrate_at_walls+0xec>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	e000      	b.n	80035bc <calibrate_at_walls+0xc4>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <calibrate_at_walls+0xec>)
 80035be:	6013      	str	r3, [r2, #0]
	}
	motors_forward(0.75);
 80035c0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80035c4:	f7ff fe60 	bl	8003288 <motors_forward>
	HAL_Delay(150);
 80035c8:	2096      	movs	r0, #150	; 0x96
 80035ca:	f000 fdb9 	bl	8004140 <HAL_Delay>
	stop_all_motors();
 80035ce:	f7ff fd9f 	bl	8003110 <stop_all_motors>
	HAL_Delay(400);
 80035d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80035d6:	f000 fdb3 	bl	8004140 <HAL_Delay>

}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000004 	.word	0x20000004

080035e8 <rotate_direction_90>:

void rotate_direction_90(direction d)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
	recalibrate_by_turning();
 80035f2:	f7ff fee5 	bl	80033c0 <recalibrate_by_turning>
	set_servo_angle(Front);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f000 f84b 	bl	8003692 <set_servo_angle>
	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d012      	beq.n	8003628 <rotate_direction_90+0x40>
 8003602:	2b02      	cmp	r3, #2
 8003604:	dc1c      	bgt.n	8003640 <rotate_direction_90+0x58>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <rotate_direction_90+0x28>
 800360a:	2b01      	cmp	r3, #1
 800360c:	d01b      	beq.n	8003646 <rotate_direction_90+0x5e>
 800360e:	e017      	b.n	8003640 <rotate_direction_90+0x58>
	{
	case Left:
		rotate_direction(Left, 1);
 8003610:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff fd9f 	bl	8003158 <rotate_direction>
		HAL_Delay(390);
 800361a:	f44f 70c3 	mov.w	r0, #390	; 0x186
 800361e:	f000 fd8f 	bl	8004140 <HAL_Delay>
		stop_all_motors();
 8003622:	f7ff fd75 	bl	8003110 <stop_all_motors>
		return;
 8003626:	e00f      	b.n	8003648 <rotate_direction_90+0x60>
	case Front:
		return;
	case Right:
		rotate_direction(Right, 1);
 8003628:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800362c:	2002      	movs	r0, #2
 800362e:	f7ff fd93 	bl	8003158 <rotate_direction>
		HAL_Delay(400);
 8003632:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003636:	f000 fd83 	bl	8004140 <HAL_Delay>
		stop_all_motors();
 800363a:	f7ff fd69 	bl	8003110 <stop_all_motors>
		return;
 800363e:	e003      	b.n	8003648 <rotate_direction_90+0x60>
	}  // switch(d)

	// Done to try to adjust the robot.
	recalibrate_by_turning();
 8003640:	f7ff febe 	bl	80033c0 <recalibrate_by_turning>
 8003644:	e000      	b.n	8003648 <rotate_direction_90+0x60>
		return;
 8003646:	bf00      	nop
}  // rotate_direction_90(direction d)
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <rotate_180_degrees>:

void rotate_180_degrees()
{
 800364e:	b580      	push	{r7, lr}
 8003650:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 8003652:	2000      	movs	r0, #0
 8003654:	f7ff ffc8 	bl	80035e8 <rotate_direction_90>
	HAL_Delay(200);
 8003658:	20c8      	movs	r0, #200	; 0xc8
 800365a:	f000 fd71 	bl	8004140 <HAL_Delay>
	rotate_direction_90(Left);
 800365e:	2000      	movs	r0, #0
 8003660:	f7ff ffc2 	bl	80035e8 <rotate_direction_90>

}  // rotate_180_degrees()
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}

08003668 <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	motors_forward(1);
 800366c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003670:	f7ff fe0a 	bl	8003288 <motors_forward>
	HAL_Delay(640);
 8003674:	f44f 7020 	mov.w	r0, #640	; 0x280
 8003678:	f000 fd62 	bl	8004140 <HAL_Delay>
	stop_all_motors();
 800367c:	f7ff fd48 	bl	8003110 <stop_all_motors>
	HAL_Delay(200);
 8003680:	20c8      	movs	r0, #200	; 0xc8
 8003682:	f000 fd5d 	bl	8004140 <HAL_Delay>
	calibrate_at_walls();
 8003686:	f7ff ff37 	bl	80034f8 <calibrate_at_walls>
	recalibrate_by_turning();
 800368a:	f7ff fe99 	bl	80033c0 <recalibrate_by_turning>
}  // go_forward()
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}

08003692 <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d010      	beq.n	80036c4 <set_servo_angle+0x32>
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	dc13      	bgt.n	80036ce <set_servo_angle+0x3c>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <set_servo_angle+0x1e>
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d005      	beq.n	80036ba <set_servo_angle+0x28>
 80036ae:	e00e      	b.n	80036ce <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 180;
 80036b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036b4:	22b4      	movs	r2, #180	; 0xb4
 80036b6:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80036b8:	e009      	b.n	80036ce <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 100;
 80036ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036be:	2264      	movs	r2, #100	; 0x64
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80036c2:	e004      	b.n	80036ce <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 20;
 80036c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036c8:	2214      	movs	r2, #20
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80036cc:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <HAL_MspInit+0x4c>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <HAL_MspInit+0x4c>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_MspInit+0x4c>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_MspInit+0x4c>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_MspInit+0x4c>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_MspInit+0x4c>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800

08003728 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b1a      	ldr	r3, [pc, #104]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003756:	e026      	b.n	80037a6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <HAL_TIM_PWM_MspInit+0x90>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a12      	ldr	r2, [pc, #72]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
}
 800377e:	e012      	b.n	80037a6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <HAL_TIM_PWM_MspInit+0x94>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10d      	bne.n	80037a6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <HAL_TIM_PWM_MspInit+0x8c>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800

080037c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <HAL_TIM_IC_MspInit+0x94>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d133      	bne.n	800384a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	6413      	str	r3, [r2, #64]	; 0x40
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_TIM_IC_MspInit+0x98>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 800381a:	2302      	movs	r3, #2
 800381c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800382a:	2302      	movs	r3, #2
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <HAL_TIM_IC_MspInit+0x9c>)
 8003836:	f000 fea9 	bl	800458c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2100      	movs	r1, #0
 800383e:	2032      	movs	r0, #50	; 0x32
 8003840:	f000 fdbf 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003844:	2032      	movs	r0, #50	; 0x32
 8003846:	f000 fdd8 	bl	80043fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800384a:	bf00      	nop
 800384c:	3728      	adds	r7, #40	; 0x28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40023800 	.word	0x40023800
 800385c:	40020000 	.word	0x40020000

08003860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <HAL_TIM_Base_MspInit+0x3c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10d      	bne.n	800388e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_TIM_Base_MspInit+0x40>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_TIM_Base_MspInit+0x40>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_TIM_Base_MspInit+0x40>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40014400 	.word	0x40014400
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d11f      	bne.n	8003906 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a46      	ldr	r2, [pc, #280]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80038e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038f4:	2301      	movs	r3, #1
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	483b      	ldr	r0, [pc, #236]	; (80039ec <HAL_TIM_MspPostInit+0x148>)
 8003900:	f000 fe44 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003904:	e06b      	b.n	80039de <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a39      	ldr	r2, [pc, #228]	; (80039f0 <HAL_TIM_MspPostInit+0x14c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d11e      	bne.n	800394e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	6313      	str	r3, [r2, #48]	; 0x30
 8003920:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003938:	2300      	movs	r3, #0
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800393c:	2302      	movs	r3, #2
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003940:	f107 031c 	add.w	r3, r7, #28
 8003944:	4619      	mov	r1, r3
 8003946:	482b      	ldr	r0, [pc, #172]	; (80039f4 <HAL_TIM_MspPostInit+0x150>)
 8003948:	f000 fe20 	bl	800458c <HAL_GPIO_Init>
}
 800394c:	e047      	b.n	80039de <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <HAL_TIM_MspPostInit+0x154>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d11e      	bne.n	8003996 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	6313      	str	r3, [r2, #48]	; 0x30
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8003974:	2340      	movs	r3, #64	; 0x40
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003980:	2300      	movs	r3, #0
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003984:	2302      	movs	r3, #2
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003988:	f107 031c 	add.w	r3, r7, #28
 800398c:	4619      	mov	r1, r3
 800398e:	481b      	ldr	r0, [pc, #108]	; (80039fc <HAL_TIM_MspPostInit+0x158>)
 8003990:	f000 fdfc 	bl	800458c <HAL_GPIO_Init>
}
 8003994:	e023      	b.n	80039de <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_TIM_MspPostInit+0x15c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d11e      	bne.n	80039de <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	6313      	str	r3, [r2, #48]	; 0x30
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_TIM_MspPostInit+0x144>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 80039bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ca:	2300      	movs	r3, #0
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80039ce:	2303      	movs	r3, #3
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	4619      	mov	r1, r3
 80039d8:	4808      	ldr	r0, [pc, #32]	; (80039fc <HAL_TIM_MspPostInit+0x158>)
 80039da:	f000 fdd7 	bl	800458c <HAL_GPIO_Init>
}
 80039de:	bf00      	nop
 80039e0:	3730      	adds	r7, #48	; 0x30
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020000 	.word	0x40020000
 80039f0:	40000400 	.word	0x40000400
 80039f4:	40020800 	.word	0x40020800
 80039f8:	40000800 	.word	0x40000800
 80039fc:	40020400 	.word	0x40020400
 8003a00:	40014400 	.word	0x40014400

08003a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <HAL_UART_MspInit+0x134>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d12c      	bne.n	8003a80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a3c      	ldr	r2, [pc, #240]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_PRINT_USB_Pin|GPIO_PIN_3;
 8003a5e:	230c      	movs	r3, #12
 8003a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a62:	2302      	movs	r3, #2
 8003a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a6e:	2307      	movs	r3, #7
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	f107 031c 	add.w	r3, r7, #28
 8003a76:	4619      	mov	r1, r3
 8003a78:	4831      	ldr	r0, [pc, #196]	; (8003b40 <HAL_UART_MspInit+0x13c>)
 8003a7a:	f000 fd87 	bl	800458c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a7e:	e057      	b.n	8003b30 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_UART_MspInit+0x140>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d152      	bne.n	8003b30 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a94:	f043 0320 	orr.w	r3, r3, #32
 8003a98:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9a:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b21      	ldr	r3, [pc, #132]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	; (8003b3c <HAL_UART_MspInit+0x138>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aea:	2303      	movs	r3, #3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003aee:	2308      	movs	r3, #8
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af2:	f107 031c 	add.w	r3, r7, #28
 8003af6:	4619      	mov	r1, r3
 8003af8:	4813      	ldr	r0, [pc, #76]	; (8003b48 <HAL_UART_MspInit+0x144>)
 8003afa:	f000 fd47 	bl	800458c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b10:	2308      	movs	r3, #8
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4809      	ldr	r0, [pc, #36]	; (8003b40 <HAL_UART_MspInit+0x13c>)
 8003b1c:	f000 fd36 	bl	800458c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b20:	2200      	movs	r2, #0
 8003b22:	2100      	movs	r1, #0
 8003b24:	2047      	movs	r0, #71	; 0x47
 8003b26:	f000 fc4c 	bl	80043c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b2a:	2047      	movs	r0, #71	; 0x47
 8003b2c:	f000 fc65 	bl	80043fa <HAL_NVIC_EnableIRQ>
}
 8003b30:	bf00      	nop
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40011400 	.word	0x40011400
 8003b48:	40020800 	.word	0x40020800

08003b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b50:	e7fe      	b.n	8003b50 <NMI_Handler+0x4>

08003b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b56:	e7fe      	b.n	8003b56 <HardFault_Handler+0x4>

08003b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b5c:	e7fe      	b.n	8003b5c <MemManage_Handler+0x4>

08003b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b62:	e7fe      	b.n	8003b62 <BusFault_Handler+0x4>

08003b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b68:	e7fe      	b.n	8003b68 <UsageFault_Handler+0x4>

08003b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b98:	f000 fab2 	bl	8004100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ba6:	4830      	ldr	r0, [pc, #192]	; (8003c68 <TIM5_IRQHandler+0xc8>)
 8003ba8:	f001 fc83 	bl	80054b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  if (risingEdgeInterrupt == 1)
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <TIM5_IRQHandler+0xcc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d118      	bne.n	8003be6 <TIM5_IRQHandler+0x46>
  {
	TIM5->CCER &= ~(1 << 7);
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bbe:	6213      	str	r3, [r2, #32]
	TIM5->CCER &= ~(1 << 5);
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bc6:	f023 0320 	bic.w	r3, r3, #32
 8003bca:	6213      	str	r3, [r2, #32]
	TIM5->CCER |= (1 << 5);
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4a27      	ldr	r2, [pc, #156]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bd2:	f043 0320 	orr.w	r3, r3, #32
 8003bd6:	6213      	str	r3, [r2, #32]
	TIM5->CNT = 0;
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
	risingEdgeInterrupt = 0;
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <TIM5_IRQHandler+0xcc>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 8003be4:	e036      	b.n	8003c54 <TIM5_IRQHandler+0xb4>
	  counter = TIM5->CNT;
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <TIM5_IRQHandler+0xd4>)
 8003bee:	601a      	str	r2, [r3, #0]
	  TIM5->CCER &= ~(1 << 7);
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfa:	6213      	str	r3, [r2, #32]
	  TIM5->CCER &= ~(1 << 5);
 8003bfc:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <TIM5_IRQHandler+0xd0>)
 8003c02:	f023 0320 	bic.w	r3, r3, #32
 8003c06:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <TIM5_IRQHandler+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fc91 	bl	8000534 <__aeabi_i2d>
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <TIM5_IRQHandler+0xd8>)
 8003c18:	f7fc fe20 	bl	800085c <__aeabi_ddiv>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ffc8 	bl	8000bb8 <__aeabi_d2f>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fc fc93 	bl	8000558 <__aeabi_f2d>
 8003c32:	a30b      	add	r3, pc, #44	; (adr r3, 8003c60 <TIM5_IRQHandler+0xc0>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fce6 	bl	8000608 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f7fc ffb8 	bl	8000bb8 <__aeabi_d2f>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <TIM5_IRQHandler+0xdc>)
 8003c4c:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <TIM5_IRQHandler+0xcc>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	f3af 8000 	nop.w
 8003c60:	851eb852 	.word	0x851eb852
 8003c64:	400451eb 	.word	0x400451eb
 8003c68:	200002e4 	.word	0x200002e4
 8003c6c:	20000010 	.word	0x20000010
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	20000404 	.word	0x20000404
 8003c78:	40620000 	.word	0x40620000
 8003c7c:	20000014 	.word	0x20000014

08003c80 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <USART6_IRQHandler+0x10>)
 8003c86:	f002 fca3 	bl	80065d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200003b8 	.word	0x200003b8

08003c94 <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 8003c98:	2300      	movs	r3, #0
}   // is_switch_on()
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
	return 1;
 8003ca8:	2301      	movs	r3, #1
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_kill>:

int _kill(int pid, int sig)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cbe:	f003 fc59 	bl	8007574 <__errno>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2216      	movs	r2, #22
 8003cc6:	601a      	str	r2, [r3, #0]
	return -1;
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <_exit>:

void _exit (int status)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ffe7 	bl	8003cb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ce6:	e7fe      	b.n	8003ce6 <_exit+0x12>

08003ce8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e00a      	b.n	8003d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cfa:	f3af 8000 	nop.w
 8003cfe:	4601      	mov	r1, r0
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	60ba      	str	r2, [r7, #8]
 8003d06:	b2ca      	uxtb	r2, r1
 8003d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	dbf0      	blt.n	8003cfa <_read+0x12>
	}

return len;
 8003d18:	687b      	ldr	r3, [r7, #4]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b086      	sub	sp, #24
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e009      	b.n	8003d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	60ba      	str	r2, [r7, #8]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff f905 	bl	8002f4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	dbf1      	blt.n	8003d34 <_write+0x12>
	}
	return len;
 8003d50:	687b      	ldr	r3, [r7, #4]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <_close>:

int _close(int file)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
	return -1;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d82:	605a      	str	r2, [r3, #4]
	return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_isatty>:

int _isatty(int file)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	return 1;
 8003d9a:	2301      	movs	r3, #1
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
	return 0;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <_sbrk+0x5c>)
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <_sbrk+0x60>)
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <_sbrk+0x64>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <_sbrk+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df4:	f003 fbbe 	bl	8007574 <__errno>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	e009      	b.n	8003e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <_sbrk+0x64>)
 8003e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20020000 	.word	0x20020000
 8003e24:	00000400 	.word	0x00000400
 8003e28:	20000400 	.word	0x20000400
 8003e2c:	20000420 	.word	0x20000420

08003e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <SystemInit+0x20>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <SystemInit+0x20>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000ed00 	.word	0xe000ed00

08003e54 <test_turn_left>:
#include "test.h"

void test_turn_left()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	rotate_direction_90(Right);
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f7ff fbc5 	bl	80035e8 <rotate_direction_90>
	HAL_Delay(1000);
 8003e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e62:	f000 f96d 	bl	8004140 <HAL_Delay>
}  // void test_turn_left()
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	if (requested_manual_command != AUTON_CHAR)
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <do_test_algorithm+0x1c>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b41      	cmp	r3, #65	; 0x41
 8003e76:	d104      	bne.n	8003e82 <do_test_algorithm+0x16>
	}


//	test_alternate_left_right();
//	test_zig_zag();
	test_turn_left();
 8003e78:	f7ff ffec 	bl	8003e54 <test_turn_left>
//	go_forward_one_unit();
//	HAL_Delay(2000);

//	distance_of_object_in_cm();

	return do_test_algorithm();
 8003e7c:	f7ff fff6 	bl	8003e6c <do_test_algorithm>
 8003e80:	e000      	b.n	8003e84 <do_test_algorithm+0x18>
		return;
 8003e82:	bf00      	nop
}  // do_test_algorithm()
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000001 	.word	0x20000001

08003e8c <distance_of_object_in_cm>:
int risingEdgeInterrupt = 1;
int counter;
float centimeters = 18;

float distance_of_object_in_cm()
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
	printf("Distance is %f cm\r\n", centimeters);
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <distance_of_object_in_cm+0x28>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fc fb5f 	bl	8000558 <__aeabi_f2d>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4806      	ldr	r0, [pc, #24]	; (8003eb8 <distance_of_object_in_cm+0x2c>)
 8003ea0:	f004 f804 	bl	8007eac <iprintf>
	return centimeters;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <distance_of_object_in_cm+0x28>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	ee07 3a90 	vmov	s15, r3
}  // float distance_of_object_in_cm()
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000014 	.word	0x20000014
 8003eb8:	0800a908 	.word	0x0800a908

08003ebc <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 8003ebc:	b5b0      	push	{r4, r5, r7, lr}
 8003ebe:	b08a      	sub	sp, #40	; 0x28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fbe2 	bl	8003692 <set_servo_angle>
	HAL_Delay(1000);
 8003ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ed2:	f000 f935 	bl	8004140 <HAL_Delay>
	float distance_cm = distance_of_object_in_cm();
 8003ed6:	f7ff ffd9 	bl	8003e8c <distance_of_object_in_cm>
 8003eda:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	uint8_t wall_detected = distance_cm < 16 ;
 8003ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ee2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	bf4c      	ite	mi
 8003ef0:	2301      	movmi	r3, #1
 8003ef2:	2300      	movpl	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	char buf[20];
	switch(d)
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d03e      	beq.n	8003f7e <is_there_wall_on_direction+0xc2>
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	dc58      	bgt.n	8003fb6 <is_there_wall_on_direction+0xfa>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <is_there_wall_on_direction+0x52>
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d01c      	beq.n	8003f46 <is_there_wall_on_direction+0x8a>
 8003f0c:	e053      	b.n	8003fb6 <is_there_wall_on_direction+0xfa>
	{
	case Left:
		printf(wall_detected ? "There is a wall on the left.\r\n" : "There is no wall on the left.\r\n");
 8003f0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <is_there_wall_on_direction+0x5e>
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <is_there_wall_on_direction+0x118>)
 8003f18:	e000      	b.n	8003f1c <is_there_wall_on_direction+0x60>
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <is_there_wall_on_direction+0x11c>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 ffc5 	bl	8007eac <iprintf>
		memcpy(buf, wall_detected ? "\%LEFT,1,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 8003f22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <is_there_wall_on_direction+0x72>
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <is_there_wall_on_direction+0x120>)
 8003f2c:	e000      	b.n	8003f30 <is_there_wall_on_direction+0x74>
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	; (8003fe0 <is_there_wall_on_direction+0x124>)
 8003f30:	f107 040c 	add.w	r4, r7, #12
 8003f34:	461d      	mov	r5, r3
 8003f36:	6828      	ldr	r0, [r5, #0]
 8003f38:	6869      	ldr	r1, [r5, #4]
 8003f3a:	68aa      	ldr	r2, [r5, #8]
 8003f3c:	68eb      	ldr	r3, [r5, #12]
 8003f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f40:	6928      	ldr	r0, [r5, #16]
 8003f42:	6020      	str	r0, [r4, #0]
		break;
 8003f44:	e037      	b.n	8003fb6 <is_there_wall_on_direction+0xfa>
	case Front:
		printf(wall_detected ? "There is a wall in front.\r\n" : "There is no wall in front.\r\n");
 8003f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <is_there_wall_on_direction+0x96>
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <is_there_wall_on_direction+0x128>)
 8003f50:	e000      	b.n	8003f54 <is_there_wall_on_direction+0x98>
 8003f52:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <is_there_wall_on_direction+0x12c>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 ffa9 	bl	8007eac <iprintf>
		memcpy(buf, wall_detected ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 8003f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <is_there_wall_on_direction+0xaa>
 8003f62:	4b22      	ldr	r3, [pc, #136]	; (8003fec <is_there_wall_on_direction+0x130>)
 8003f64:	e000      	b.n	8003f68 <is_there_wall_on_direction+0xac>
 8003f66:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <is_there_wall_on_direction+0x134>)
 8003f68:	f107 040c 	add.w	r4, r7, #12
 8003f6c:	461d      	mov	r5, r3
 8003f6e:	6828      	ldr	r0, [r5, #0]
 8003f70:	6869      	ldr	r1, [r5, #4]
 8003f72:	68aa      	ldr	r2, [r5, #8]
 8003f74:	68eb      	ldr	r3, [r5, #12]
 8003f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f78:	6928      	ldr	r0, [r5, #16]
 8003f7a:	6020      	str	r0, [r4, #0]
		break;
 8003f7c:	e01b      	b.n	8003fb6 <is_there_wall_on_direction+0xfa>
	case Right:
		printf(wall_detected ? "There is a wall on the right.\r\n" : "There is no wall on the right.\r\n");
 8003f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <is_there_wall_on_direction+0xce>
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <is_there_wall_on_direction+0x138>)
 8003f88:	e000      	b.n	8003f8c <is_there_wall_on_direction+0xd0>
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <is_there_wall_on_direction+0x13c>)
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f003 ff8d 	bl	8007eac <iprintf>
		memcpy(buf, wall_detected ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <is_there_wall_on_direction+0xe2>
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <is_there_wall_on_direction+0x140>)
 8003f9c:	e000      	b.n	8003fa0 <is_there_wall_on_direction+0xe4>
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <is_there_wall_on_direction+0x144>)
 8003fa0:	f107 040c 	add.w	r4, r7, #12
 8003fa4:	461d      	mov	r5, r3
 8003fa6:	6828      	ldr	r0, [r5, #0]
 8003fa8:	6869      	ldr	r1, [r5, #4]
 8003faa:	68aa      	ldr	r2, [r5, #8]
 8003fac:	68eb      	ldr	r3, [r5, #12]
 8003fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb0:	6928      	ldr	r0, [r5, #16]
 8003fb2:	6020      	str	r0, [r4, #0]
		break;
 8003fb4:	bf00      	nop
	}  // switch(d)
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003fb6:	f107 010c 	add.w	r1, r7, #12
 8003fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fbe:	2214      	movs	r2, #20
 8003fc0:	4810      	ldr	r0, [pc, #64]	; (8004004 <is_there_wall_on_direction+0x148>)
 8003fc2:	f002 f92e 	bl	8006222 <HAL_UART_Transmit>
	return wall_detected;
 8003fc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}  // is_there_wall_on_direction(direction d)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3728      	adds	r7, #40	; 0x28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	0800a91c 	.word	0x0800a91c
 8003fd8:	0800a93c 	.word	0x0800a93c
 8003fdc:	0800a95c 	.word	0x0800a95c
 8003fe0:	0800a970 	.word	0x0800a970
 8003fe4:	0800a984 	.word	0x0800a984
 8003fe8:	0800a9a0 	.word	0x0800a9a0
 8003fec:	0800a9c0 	.word	0x0800a9c0
 8003ff0:	0800a9d4 	.word	0x0800a9d4
 8003ff4:	0800a9e8 	.word	0x0800a9e8
 8003ff8:	0800aa08 	.word	0x0800aa08
 8003ffc:	0800aa2c 	.word	0x0800aa2c
 8004000:	0800aa40 	.word	0x0800aa40
 8004004:	200003b8 	.word	0x200003b8

08004008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   sp, =_estack    		 /* set stack pointer */
 8004008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800400c:	480d      	ldr	r0, [pc, #52]	; (8004044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800400e:	490e      	ldr	r1, [pc, #56]	; (8004048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004010:	4a0e      	ldr	r2, [pc, #56]	; (800404c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004014:	e002      	b.n	800401c <LoopCopyDataInit>

08004016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800401a:	3304      	adds	r3, #4

0800401c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800401c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800401e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004020:	d3f9      	bcc.n	8004016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004024:	4c0b      	ldr	r4, [pc, #44]	; (8004054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004026:	2300      	movs	r3, #0
   b LoopFillZerobss
 8004028:	e001      	b.n	800402e <LoopFillZerobss>

0800402a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800402a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800402c:	3204      	adds	r2, #4

0800402e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800402e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004030:	d3fb      	bcc.n	800402a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004032:	f7ff fefd 	bl	8003e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004036:	f003 faa3 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800403a:	f7fe fc01 	bl	8002840 <main>
  bx  lr    
 800403e:	4770      	bx	lr
    ldr   sp, =_estack    		 /* set stack pointer */
 8004040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004048:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800404c:	0800ae54 	.word	0x0800ae54
  ldr r2, =_sbss
 8004050:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004054:	2000041c 	.word	0x2000041c

08004058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004058:	e7fe      	b.n	8004058 <ADC_IRQHandler>
	...

0800405c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_Init+0x40>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_Init+0x40>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_Init+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0a      	ldr	r2, [pc, #40]	; (800409c <HAL_Init+0x40>)
 8004072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_Init+0x40>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a07      	ldr	r2, [pc, #28]	; (800409c <HAL_Init+0x40>)
 800407e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004084:	2003      	movs	r0, #3
 8004086:	f000 f991 	bl	80043ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800408a:	200f      	movs	r0, #15
 800408c:	f000 f808 	bl	80040a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004090:	f7ff fb22 	bl	80036d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023c00 	.word	0x40023c00

080040a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040a8:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_InitTick+0x54>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_InitTick+0x58>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	4619      	mov	r1, r3
 80040b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f9b7 	bl	8004432 <HAL_SYSTICK_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00e      	b.n	80040ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b0f      	cmp	r3, #15
 80040d2:	d80a      	bhi.n	80040ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040d4:	2200      	movs	r2, #0
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	f000 f971 	bl	80043c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040e0:	4a06      	ldr	r2, [pc, #24]	; (80040fc <HAL_InitTick+0x5c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	e000      	b.n	80040ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	2000000c 	.word	0x2000000c
 80040f8:	2000001c 	.word	0x2000001c
 80040fc:	20000018 	.word	0x20000018

08004100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_IncTick+0x20>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_IncTick+0x24>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4413      	add	r3, r2
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_IncTick+0x24>)
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	2000001c 	.word	0x2000001c
 8004124:	20000408 	.word	0x20000408

08004128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return uwTick;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_GetTick+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000408 	.word	0x20000408

08004140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004148:	f7ff ffee 	bl	8004128 <HAL_GetTick>
 800414c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d005      	beq.n	8004166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_Delay+0x44>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004166:	bf00      	nop
 8004168:	f7ff ffde 	bl	8004128 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d8f7      	bhi.n	8004168 <HAL_Delay+0x28>
  {
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	2000001c 	.word	0x2000001c

08004188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041a4:	4013      	ands	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ba:	4a04      	ldr	r2, [pc, #16]	; (80041cc <__NVIC_SetPriorityGrouping+0x44>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	60d3      	str	r3, [r2, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <__NVIC_GetPriorityGrouping+0x18>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	f003 0307 	and.w	r3, r3, #7
}
 80041de:	4618      	mov	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	db0b      	blt.n	8004216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	f003 021f 	and.w	r2, r3, #31
 8004204:	4907      	ldr	r1, [pc, #28]	; (8004224 <__NVIC_EnableIRQ+0x38>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2001      	movs	r0, #1
 800420e:	fa00 f202 	lsl.w	r2, r0, r2
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000e100 	.word	0xe000e100

08004228 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	2b00      	cmp	r3, #0
 8004238:	db12      	blt.n	8004260 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	490a      	ldr	r1, [pc, #40]	; (800426c <__NVIC_DisableIRQ+0x44>)
 8004242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2001      	movs	r0, #1
 800424a:	fa00 f202 	lsl.w	r2, r0, r2
 800424e:	3320      	adds	r3, #32
 8004250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004254:	f3bf 8f4f 	dsb	sy
}
 8004258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800425a:	f3bf 8f6f 	isb	sy
}
 800425e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000e100 	.word	0xe000e100

08004270 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	2b00      	cmp	r3, #0
 8004280:	db0c      	blt.n	800429c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	4907      	ldr	r1, [pc, #28]	; (80042a8 <__NVIC_ClearPendingIRQ+0x38>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	2001      	movs	r0, #1
 8004292:	fa00 f202 	lsl.w	r2, r0, r2
 8004296:	3360      	adds	r3, #96	; 0x60
 8004298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	e000e100 	.word	0xe000e100

080042ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	db0a      	blt.n	80042d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	490c      	ldr	r1, [pc, #48]	; (80042f8 <__NVIC_SetPriority+0x4c>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	0112      	lsls	r2, r2, #4
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	440b      	add	r3, r1
 80042d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d4:	e00a      	b.n	80042ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <__NVIC_SetPriority+0x50>)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	3b04      	subs	r3, #4
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	440b      	add	r3, r1
 80042ea:	761a      	strb	r2, [r3, #24]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000e100 	.word	0xe000e100
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004300:	b480      	push	{r7}
 8004302:	b089      	sub	sp, #36	; 0x24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f1c3 0307 	rsb	r3, r3, #7
 800431a:	2b04      	cmp	r3, #4
 800431c:	bf28      	it	cs
 800431e:	2304      	movcs	r3, #4
 8004320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3304      	adds	r3, #4
 8004326:	2b06      	cmp	r3, #6
 8004328:	d902      	bls.n	8004330 <NVIC_EncodePriority+0x30>
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	3b03      	subs	r3, #3
 800432e:	e000      	b.n	8004332 <NVIC_EncodePriority+0x32>
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43da      	mvns	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	401a      	ands	r2, r3
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004348:	f04f 31ff 	mov.w	r1, #4294967295
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	43d9      	mvns	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	4313      	orrs	r3, r2
         );
}
 800435a:	4618      	mov	r0, r3
 800435c:	3724      	adds	r7, #36	; 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004378:	d301      	bcc.n	800437e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800437a:	2301      	movs	r3, #1
 800437c:	e00f      	b.n	800439e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437e:	4a0a      	ldr	r2, [pc, #40]	; (80043a8 <SysTick_Config+0x40>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004386:	210f      	movs	r1, #15
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	f7ff ff8e 	bl	80042ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <SysTick_Config+0x40>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <SysTick_Config+0x40>)
 8004398:	2207      	movs	r2, #7
 800439a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	e000e010 	.word	0xe000e010

080043ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fee7 	bl	8004188 <__NVIC_SetPriorityGrouping>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	4603      	mov	r3, r0
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043d4:	f7ff fefc 	bl	80041d0 <__NVIC_GetPriorityGrouping>
 80043d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7ff ff8e 	bl	8004300 <NVIC_EncodePriority>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff5d 	bl	80042ac <__NVIC_SetPriority>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff feef 	bl	80041ec <__NVIC_EnableIRQ>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff feff 	bl	8004228 <__NVIC_DisableIRQ>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ff94 	bl	8004368 <SysTick_Config>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff09 	bl	8004270 <__NVIC_ClearPendingIRQ>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff fe58 	bl	8004128 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d008      	beq.n	8004498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2280      	movs	r2, #128	; 0x80
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e052      	b.n	800453e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0216 	bic.w	r2, r2, #22
 80044a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d103      	bne.n	80044c8 <HAL_DMA_Abort+0x62>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0208 	bic.w	r2, r2, #8
 80044d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044e8:	e013      	b.n	8004512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ea:	f7ff fe1d 	bl	8004128 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d90c      	bls.n	8004512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e015      	b.n	800453e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e4      	bne.n	80044ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	223f      	movs	r2, #63	; 0x3f
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d004      	beq.n	8004564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2280      	movs	r2, #128	; 0x80
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e00c      	b.n	800457e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2205      	movs	r2, #5
 8004568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e159      	b.n	800485c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f040 8148 	bne.w	8004856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d005      	beq.n	80045de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d130      	bne.n	8004640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	2203      	movs	r2, #3
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004614:	2201      	movs	r2, #1
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 0201 	and.w	r2, r3, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d017      	beq.n	800467c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d123      	bne.n	80046d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	220f      	movs	r2, #15
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a2 	beq.w	8004856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_GPIO_Init+0x2e8>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	4a56      	ldr	r2, [pc, #344]	; (8004874 <HAL_GPIO_Init+0x2e8>)
 800471c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004720:	6453      	str	r3, [r2, #68]	; 0x44
 8004722:	4b54      	ldr	r3, [pc, #336]	; (8004874 <HAL_GPIO_Init+0x2e8>)
 8004724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800472e:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_GPIO_Init+0x2ec>)
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	220f      	movs	r2, #15
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a49      	ldr	r2, [pc, #292]	; (800487c <HAL_GPIO_Init+0x2f0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d019      	beq.n	800478e <HAL_GPIO_Init+0x202>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a48      	ldr	r2, [pc, #288]	; (8004880 <HAL_GPIO_Init+0x2f4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d013      	beq.n	800478a <HAL_GPIO_Init+0x1fe>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a47      	ldr	r2, [pc, #284]	; (8004884 <HAL_GPIO_Init+0x2f8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00d      	beq.n	8004786 <HAL_GPIO_Init+0x1fa>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a46      	ldr	r2, [pc, #280]	; (8004888 <HAL_GPIO_Init+0x2fc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <HAL_GPIO_Init+0x1f6>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a45      	ldr	r2, [pc, #276]	; (800488c <HAL_GPIO_Init+0x300>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d101      	bne.n	800477e <HAL_GPIO_Init+0x1f2>
 800477a:	2304      	movs	r3, #4
 800477c:	e008      	b.n	8004790 <HAL_GPIO_Init+0x204>
 800477e:	2307      	movs	r3, #7
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x204>
 8004782:	2303      	movs	r3, #3
 8004784:	e004      	b.n	8004790 <HAL_GPIO_Init+0x204>
 8004786:	2302      	movs	r3, #2
 8004788:	e002      	b.n	8004790 <HAL_GPIO_Init+0x204>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_GPIO_Init+0x204>
 800478e:	2300      	movs	r3, #0
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	f002 0203 	and.w	r2, r2, #3
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	4093      	lsls	r3, r2
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047a0:	4935      	ldr	r1, [pc, #212]	; (8004878 <HAL_GPIO_Init+0x2ec>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ae:	4b38      	ldr	r3, [pc, #224]	; (8004890 <HAL_GPIO_Init+0x304>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d2:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <HAL_GPIO_Init+0x304>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <HAL_GPIO_Init+0x304>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <HAL_GPIO_Init+0x304>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_GPIO_Init+0x304>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004826:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_GPIO_Init+0x304>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482c:	4b18      	ldr	r3, [pc, #96]	; (8004890 <HAL_GPIO_Init+0x304>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <HAL_GPIO_Init+0x304>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	f67f aea2 	bls.w	80045a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400
 8004884:	40020800 	.word	0x40020800
 8004888:	40020c00 	.word	0x40020c00
 800488c:	40021000 	.word	0x40021000
 8004890:	40013c00 	.word	0x40013c00

08004894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	807b      	strh	r3, [r7, #2]
 80048a0:	4613      	mov	r3, r2
 80048a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a4:	787b      	ldrb	r3, [r7, #1]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048aa:	887a      	ldrh	r2, [r7, #2]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048b0:	e003      	b.n	80048ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048b2:	887b      	ldrh	r3, [r7, #2]
 80048b4:	041a      	lsls	r2, r3, #16
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	619a      	str	r2, [r3, #24]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
	...

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e267      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d075      	beq.n	80049d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e6:	4b88      	ldr	r3, [pc, #544]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d00c      	beq.n	800490c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b85      	ldr	r3, [pc, #532]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d112      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fe:	4b82      	ldr	r3, [pc, #520]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490a:	d10b      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	4b7e      	ldr	r3, [pc, #504]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05b      	beq.n	80049d0 <HAL_RCC_OscConfig+0x108>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d157      	bne.n	80049d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e242      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x74>
 800492e:	4b76      	ldr	r3, [pc, #472]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a75      	ldr	r2, [pc, #468]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b70      	ldr	r3, [pc, #448]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6f      	ldr	r2, [pc, #444]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b6d      	ldr	r3, [pc, #436]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6c      	ldr	r2, [pc, #432]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 8004960:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a65      	ldr	r2, [pc, #404]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7ff fbd2 	bl	8004128 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7ff fbce 	bl	8004128 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e207      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b5b      	ldr	r3, [pc, #364]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xc0>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7ff fbbe 	bl	8004128 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b0:	f7ff fbba 	bl	8004128 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1f3      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b51      	ldr	r3, [pc, #324]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0xe8>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d063      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049de:	4b4a      	ldr	r3, [pc, #296]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b44      	ldr	r3, [pc, #272]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1c7      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4937      	ldr	r1, [pc, #220]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	e03a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b34      	ldr	r3, [pc, #208]	; (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7ff fb73 	bl	8004128 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a46:	f7ff fb6f 	bl	8004128 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1a8      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	4b2b      	ldr	r3, [pc, #172]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4925      	ldr	r1, [pc, #148]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7ff fb52 	bl	8004128 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a88:	f7ff fb4e 	bl	8004128 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e187      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d036      	beq.n	8004b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7ff fb32 	bl	8004128 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7ff fb2e 	bl	8004128 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e167      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x200>
 8004ae6:	e01b      	b.n	8004b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aee:	f7ff fb1b 	bl	8004128 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	e00e      	b.n	8004b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004af6:	f7ff fb17 	bl	8004128 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d907      	bls.n	8004b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e150      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	42470000 	.word	0x42470000
 8004b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	4b88      	ldr	r3, [pc, #544]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ea      	bne.n	8004af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8097 	beq.w	8004c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b81      	ldr	r3, [pc, #516]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b7d      	ldr	r3, [pc, #500]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a7c      	ldr	r2, [pc, #496]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b7a      	ldr	r3, [pc, #488]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a73      	ldr	r2, [pc, #460]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7ff fad7 	bl	8004128 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7ff fad3 	bl	8004128 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e10c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2ea>
 8004ba4:	4b64      	ldr	r3, [pc, #400]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a63      	ldr	r2, [pc, #396]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e01c      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bba:	4b5f      	ldr	r3, [pc, #380]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a5e      	ldr	r2, [pc, #376]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a5b      	ldr	r2, [pc, #364]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bd4:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	4a57      	ldr	r2, [pc, #348]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6713      	str	r3, [r2, #112]	; 0x70
 8004be0:	4b55      	ldr	r3, [pc, #340]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	4a54      	ldr	r2, [pc, #336]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7ff fa98 	bl	8004128 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7ff fa94 	bl	8004128 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0cb      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004c1e:	e014      	b.n	8004c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7ff fa82 	bl	8004128 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7ff fa7e 	bl	8004128 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0b5      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ee      	bne.n	8004c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	4a38      	ldr	r2, [pc, #224]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80a1 	beq.w	8004da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d05c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d141      	bne.n	8004cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7ff fa52 	bl	8004128 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c88:	f7ff fa4e 	bl	8004128 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e087      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	491b      	ldr	r1, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7ff fa27 	bl	8004128 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cde:	f7ff fa23 	bl	8004128 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e05c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x416>
 8004cfc:	e054      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7ff fa10 	bl	8004128 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7ff fa0c 	bl	8004128 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e045      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x444>
 8004d2a:	e03d      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e038      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d028      	beq.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d121      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11a      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d111      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800

08004db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cc      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b68      	ldr	r3, [pc, #416]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d90c      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b65      	ldr	r3, [pc, #404]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a58      	ldr	r2, [pc, #352]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a52      	ldr	r2, [pc, #328]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d044      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d119      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e06f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	4b3b      	ldr	r3, [pc, #236]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e067      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4934      	ldr	r1, [pc, #208]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea8:	f7ff f93e 	bl	8004128 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb0:	f7ff f93a 	bl	8004128 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e04f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 020c 	and.w	r2, r3, #12
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d1eb      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d20c      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b22      	ldr	r3, [pc, #136]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f821 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	; (8004f78 <HAL_RCC_ClockConfig+0x1c0>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f89e 	bl	80040a0 <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	0800aa54 	.word	0x0800aa54
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	20000018 	.word	0x20000018

08004f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b090      	sub	sp, #64	; 0x40
 8004f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f90:	2300      	movs	r3, #0
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f94:	2300      	movs	r3, #0
 8004f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9c:	4b59      	ldr	r3, [pc, #356]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	f200 80a1 	bhi.w	80050f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004fb6:	e09b      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b53      	ldr	r3, [pc, #332]	; (8005108 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004fbc:	e09b      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fbe:	4b53      	ldr	r3, [pc, #332]	; (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fc2:	e098      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fce:	4b4d      	ldr	r3, [pc, #308]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d028      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fda:	4b4a      	ldr	r3, [pc, #296]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fec:	2100      	movs	r1, #0
 8004fee:	4b47      	ldr	r3, [pc, #284]	; (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff0:	fb03 f201 	mul.w	r2, r3, r1
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	4a43      	ldr	r2, [pc, #268]	; (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005004:	460a      	mov	r2, r1
 8005006:	62ba      	str	r2, [r7, #40]	; 0x28
 8005008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800500a:	4413      	add	r3, r2
 800500c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800500e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005010:	2200      	movs	r2, #0
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	61fa      	str	r2, [r7, #28]
 8005016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800501e:	f7fb fe1b 	bl	8000c58 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4613      	mov	r3, r2
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800502a:	e053      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502c:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	2200      	movs	r2, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	617a      	str	r2, [r7, #20]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800503e:	f04f 0b00 	mov.w	fp, #0
 8005042:	4652      	mov	r2, sl
 8005044:	465b      	mov	r3, fp
 8005046:	f04f 0000 	mov.w	r0, #0
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	0159      	lsls	r1, r3, #5
 8005050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005054:	0150      	lsls	r0, r2, #5
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	ebb2 080a 	subs.w	r8, r2, sl
 800505e:	eb63 090b 	sbc.w	r9, r3, fp
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800506e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005076:	ebb2 0408 	subs.w	r4, r2, r8
 800507a:	eb63 0509 	sbc.w	r5, r3, r9
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	00eb      	lsls	r3, r5, #3
 8005088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800508c:	00e2      	lsls	r2, r4, #3
 800508e:	4614      	mov	r4, r2
 8005090:	461d      	mov	r5, r3
 8005092:	eb14 030a 	adds.w	r3, r4, sl
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	eb45 030b 	adc.w	r3, r5, fp
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050aa:	4629      	mov	r1, r5
 80050ac:	028b      	lsls	r3, r1, #10
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b4:	4621      	mov	r1, r4
 80050b6:	028a      	lsls	r2, r1, #10
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050be:	2200      	movs	r2, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	60fa      	str	r2, [r7, #12]
 80050c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c8:	f7fb fdc6 	bl	8000c58 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	3301      	adds	r3, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050ee:	e002      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetSysClockFreq+0x184>)
 80050f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3740      	adds	r7, #64	; 0x40
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800
 8005108:	00f42400 	.word	0x00f42400
 800510c:	017d7840 	.word	0x017d7840

08005110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <HAL_RCC_GetHCLKFreq+0x14>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c

08005128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800512c:	f7ff fff0 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	0a9b      	lsrs	r3, r3, #10
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4903      	ldr	r1, [pc, #12]	; (800514c <HAL_RCC_GetPCLK1Freq+0x24>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40023800 	.word	0x40023800
 800514c:	0800aa64 	.word	0x0800aa64

08005150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005154:	f7ff ffdc 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8005158:	4602      	mov	r2, r0
 800515a:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	0b5b      	lsrs	r3, r3, #13
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	4903      	ldr	r1, [pc, #12]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40023800 	.word	0x40023800
 8005174:	0800aa64 	.word	0x0800aa64

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e041      	b.n	800520e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fe fb5e 	bl	8003860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 fc14 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e041      	b.n	80052ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fe fa73 	bl	8003728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f000 fbc5 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x24>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e022      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d109      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x3e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e015      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x58>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e008      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e068      	b.n	80053f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0x82>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005334:	e013      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b04      	cmp	r3, #4
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0x92>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005344:	e00b      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0xa2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005354:	e003      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fe66 	bl	8006038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a23      	ldr	r2, [pc, #140]	; (8005400 <HAL_TIM_PWM_Start+0x14c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d107      	bne.n	8005386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <HAL_TIM_PWM_Start+0x14c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d013      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_TIM_PWM_Start+0x150>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a17      	ldr	r2, [pc, #92]	; (8005408 <HAL_TIM_PWM_Start+0x154>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a16      	ldr	r2, [pc, #88]	; (800540c <HAL_TIM_PWM_Start+0x158>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a14      	ldr	r2, [pc, #80]	; (8005410 <HAL_TIM_PWM_Start+0x15c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d111      	bne.n	80053e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d010      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	e007      	b.n	80053f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000

08005414 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e041      	b.n	80054aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fe f9c0 	bl	80037c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fac6 	bl	80059e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d122      	bne.n	800550e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d11b      	bne.n	800550e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0202 	mvn.w	r2, #2
 80054de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa57 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 80054fa:	e005      	b.n	8005508 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa49 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa5a 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b04      	cmp	r3, #4
 800551a:	d122      	bne.n	8005562 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b04      	cmp	r3, #4
 8005528:	d11b      	bne.n	8005562 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f06f 0204 	mvn.w	r2, #4
 8005532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa2d 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 800554e:	e005      	b.n	800555c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fa1f 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa30 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d122      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b08      	cmp	r3, #8
 800557c:	d11b      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f06f 0208 	mvn.w	r2, #8
 8005586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2204      	movs	r2, #4
 800558c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fa03 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 80055a2:	e005      	b.n	80055b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9f5 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa06 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d122      	bne.n	800560a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d11b      	bne.n	800560a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0210 	mvn.w	r2, #16
 80055da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2208      	movs	r2, #8
 80055e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f9d9 	bl	80059a8 <HAL_TIM_IC_CaptureCallback>
 80055f6:	e005      	b.n	8005604 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9cb 	bl	8005994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f9dc 	bl	80059bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d10e      	bne.n	8005636 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0201 	mvn.w	r2, #1
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f9a5 	bl	8005980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b80      	cmp	r3, #128	; 0x80
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fd89 	bl	8006174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d10e      	bne.n	800568e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d107      	bne.n	800568e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f9a1 	bl	80059d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d10e      	bne.n	80056ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d107      	bne.n	80056ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f06f 0220 	mvn.w	r2, #32
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fd53 	bl	8006160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056dc:	2302      	movs	r3, #2
 80056de:	e088      	b.n	80057f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d11b      	bne.n	8005726 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6818      	ldr	r0, [r3, #0]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6819      	ldr	r1, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f000 fb7d 	bl	8005dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 020c 	bic.w	r2, r2, #12
 8005710:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6999      	ldr	r1, [r3, #24]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	619a      	str	r2, [r3, #24]
 8005724:	e060      	b.n	80057e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b04      	cmp	r3, #4
 800572a:	d11c      	bne.n	8005766 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f000 fbc6 	bl	8005ecc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800574e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	021a      	lsls	r2, r3, #8
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	619a      	str	r2, [r3, #24]
 8005764:	e040      	b.n	80057e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d11b      	bne.n	80057a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f000 fbe3 	bl	8005f46 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 020c 	bic.w	r2, r2, #12
 800578e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69d9      	ldr	r1, [r3, #28]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
 80057a2:	e021      	b.n	80057e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b0c      	cmp	r3, #12
 80057a8:	d11c      	bne.n	80057e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f000 fc00 	bl	8005fbe <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69d9      	ldr	r1, [r3, #28]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	021a      	lsls	r2, r3, #8
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	61da      	str	r2, [r3, #28]
 80057e2:	e001      	b.n	80057e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005816:	2302      	movs	r3, #2
 8005818:	e0ae      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	f200 809f 	bhi.w	8005968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005865 	.word	0x08005865
 8005834:	08005969 	.word	0x08005969
 8005838:	08005969 	.word	0x08005969
 800583c:	08005969 	.word	0x08005969
 8005840:	080058a5 	.word	0x080058a5
 8005844:	08005969 	.word	0x08005969
 8005848:	08005969 	.word	0x08005969
 800584c:	08005969 	.word	0x08005969
 8005850:	080058e7 	.word	0x080058e7
 8005854:	08005969 	.word	0x08005969
 8005858:	08005969 	.word	0x08005969
 800585c:	08005969 	.word	0x08005969
 8005860:	08005927 	.word	0x08005927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68b9      	ldr	r1, [r7, #8]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f93a 	bl	8005ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0208 	orr.w	r2, r2, #8
 800587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0204 	bic.w	r2, r2, #4
 800588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6999      	ldr	r1, [r3, #24]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	619a      	str	r2, [r3, #24]
      break;
 80058a2:	e064      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f980 	bl	8005bb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6999      	ldr	r1, [r3, #24]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]
      break;
 80058e4:	e043      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9cb 	bl	8005c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0208 	orr.w	r2, r2, #8
 8005900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0204 	bic.w	r2, r2, #4
 8005910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69d9      	ldr	r1, [r3, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691a      	ldr	r2, [r3, #16]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	61da      	str	r2, [r3, #28]
      break;
 8005924:	e023      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fa15 	bl	8005d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69da      	ldr	r2, [r3, #28]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69da      	ldr	r2, [r3, #28]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69d9      	ldr	r1, [r3, #28]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	021a      	lsls	r2, r3, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	61da      	str	r2, [r3, #28]
      break;
 8005966:	e002      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <TIM_Base_SetConfig+0xe4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a02:	d00b      	beq.n	8005a1c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a31      	ldr	r2, [pc, #196]	; (8005acc <TIM_Base_SetConfig+0xe8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_Base_SetConfig+0x38>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a30      	ldr	r2, [pc, #192]	; (8005ad0 <TIM_Base_SetConfig+0xec>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <TIM_Base_SetConfig+0xf0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d108      	bne.n	8005a2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <TIM_Base_SetConfig+0xe4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d01b      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3c:	d017      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a22      	ldr	r2, [pc, #136]	; (8005acc <TIM_Base_SetConfig+0xe8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <TIM_Base_SetConfig+0xec>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00f      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <TIM_Base_SetConfig+0xf0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00b      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <TIM_Base_SetConfig+0xf4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <TIM_Base_SetConfig+0xf8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1d      	ldr	r2, [pc, #116]	; (8005ae0 <TIM_Base_SetConfig+0xfc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <TIM_Base_SetConfig+0xe4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40014000 	.word	0x40014000
 8005adc:	40014400 	.word	0x40014400
 8005ae0:	40014800 	.word	0x40014800

08005ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 0302 	bic.w	r3, r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <TIM_OC1_SetConfig+0xc8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10c      	bne.n	8005b5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0308 	bic.w	r3, r3, #8
 8005b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <TIM_OC1_SetConfig+0xc8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d111      	bne.n	8005b86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	621a      	str	r2, [r3, #32]
}
 8005ba0:	bf00      	nop
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	40010000 	.word	0x40010000

08005bb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f023 0210 	bic.w	r2, r3, #16
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f023 0320 	bic.w	r3, r3, #32
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <TIM_OC2_SetConfig+0xd4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10d      	bne.n	8005c2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	011b      	lsls	r3, r3, #4
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <TIM_OC2_SetConfig+0xd4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d113      	bne.n	8005c5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000

08005c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	; (8005d58 <TIM_OC3_SetConfig+0xd0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d10d      	bne.n	8005d02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <TIM_OC3_SetConfig+0xd0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d113      	bne.n	8005d32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	621a      	str	r2, [r3, #32]
}
 8005d4c:	bf00      	nop
 8005d4e:	371c      	adds	r7, #28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40010000 	.word	0x40010000

08005d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <TIM_OC4_SetConfig+0x9c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d109      	bne.n	8005dd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000

08005dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f023 0201 	bic.w	r2, r3, #1
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a24      	ldr	r2, [pc, #144]	; (8005eb8 <TIM_TI1_SetConfig+0xbc>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_TI1_SetConfig+0x56>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d00f      	beq.n	8005e52 <TIM_TI1_SetConfig+0x56>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <TIM_TI1_SetConfig+0xc0>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_TI1_SetConfig+0x56>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a20      	ldr	r2, [pc, #128]	; (8005ec0 <TIM_TI1_SetConfig+0xc4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_TI1_SetConfig+0x56>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a1f      	ldr	r2, [pc, #124]	; (8005ec4 <TIM_TI1_SetConfig+0xc8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_TI1_SetConfig+0x56>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <TIM_TI1_SetConfig+0xcc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d101      	bne.n	8005e56 <TIM_TI1_SetConfig+0x5a>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <TIM_TI1_SetConfig+0x5c>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e003      	b.n	8005e76 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f043 0301 	orr.w	r3, r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	011b      	lsls	r3, r3, #4
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f023 030a 	bic.w	r3, r3, #10
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f003 030a 	and.w	r3, r3, #10
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40000c00 	.word	0x40000c00
 8005ec8:	40014000 	.word	0x40014000

08005ecc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f023 0210 	bic.w	r2, r3, #16
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	031b      	lsls	r3, r3, #12
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b087      	sub	sp, #28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 0303 	bic.w	r3, r3, #3
 8005f72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b087      	sub	sp, #28
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	607a      	str	r2, [r7, #4]
 8005fca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	031b      	lsls	r3, r3, #12
 8006002:	b29b      	uxth	r3, r3
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006010:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2201      	movs	r2, #1
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1a      	ldr	r2, [r3, #32]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	431a      	orrs	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006098:	2302      	movs	r3, #2
 800609a:	e050      	b.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d018      	beq.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d013      	beq.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a18      	ldr	r2, [pc, #96]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00e      	beq.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d009      	beq.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d004      	beq.n	8006112 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10c      	bne.n	800612c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	4313      	orrs	r3, r2
 8006122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40010000 	.word	0x40010000
 8006150:	40000400 	.word	0x40000400
 8006154:	40000800 	.word	0x40000800
 8006158:	40000c00 	.word	0x40000c00
 800615c:	40014000 	.word	0x40014000

08006160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e03f      	b.n	800621a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fd fc28 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2224      	movs	r2, #36	; 0x24
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 ff5d 	bl	800708c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695a      	ldr	r2, [r3, #20]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08a      	sub	sp, #40	; 0x28
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b20      	cmp	r3, #32
 8006240:	d17c      	bne.n	800633c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_UART_Transmit+0x2c>
 8006248:	88fb      	ldrh	r3, [r7, #6]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e075      	b.n	800633e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_UART_Transmit+0x3e>
 800625c:	2302      	movs	r3, #2
 800625e:	e06e      	b.n	800633e <HAL_UART_Transmit+0x11c>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2221      	movs	r2, #33	; 0x21
 8006272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006276:	f7fd ff57 	bl	8004128 <HAL_GetTick>
 800627a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	88fa      	ldrh	r2, [r7, #6]
 8006280:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d108      	bne.n	80062a4 <HAL_UART_Transmit+0x82>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e003      	b.n	80062ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062b4:	e02a      	b.n	800630c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fc3d 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e036      	b.n	800633e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	3302      	adds	r3, #2
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e007      	b.n	80062fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	3301      	adds	r3, #1
 80062fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1cf      	bne.n	80062b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	2140      	movs	r1, #64	; 0x40
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fc0d 	bl	8006b40 <UART_WaitOnFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	e000      	b.n	800633e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800633c:	2302      	movs	r3, #2
  }
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b20      	cmp	r3, #32
 800635e:	d11d      	bne.n	800639c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Receive_IT+0x26>
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e016      	b.n	800639e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_UART_Receive_IT+0x38>
 800637a:	2302      	movs	r3, #2
 800637c:	e00f      	b.n	800639e <HAL_UART_Receive_IT+0x58>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	461a      	mov	r2, r3
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fc42 	bl	8006c1c <UART_Start_Receive_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	e000      	b.n	800639e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0a2      	sub	sp, #136	; 0x88
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80063cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063dc:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3314      	adds	r3, #20
 80063f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800640e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006410:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006414:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800641c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e5      	bne.n	80063ee <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	2b01      	cmp	r3, #1
 8006428:	d119      	bne.n	800645e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	f023 0310 	bic.w	r3, r3, #16
 8006440:	67bb      	str	r3, [r7, #120]	; 0x78
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800644a:	647a      	str	r2, [r7, #68]	; 0x44
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e5      	bne.n	800642a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d104      	bne.n	800647e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006478:	4a53      	ldr	r2, [pc, #332]	; (80065c8 <HAL_UART_Abort_IT+0x220>)
 800647a:	651a      	str	r2, [r3, #80]	; 0x50
 800647c:	e003      	b.n	8006486 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	2200      	movs	r2, #0
 8006484:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d104      	bne.n	80064a6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	4a4a      	ldr	r2, [pc, #296]	; (80065cc <HAL_UART_Abort_IT+0x224>)
 80064a2:	651a      	str	r2, [r3, #80]	; 0x50
 80064a4:	e003      	b.n	80064ae <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	2200      	movs	r2, #0
 80064ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d12d      	bne.n	8006518 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	623b      	str	r3, [r7, #32]
   return(result);
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d2:	677b      	str	r3, [r7, #116]	; 0x74
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80064dc:	633a      	str	r2, [r7, #48]	; 0x30
 80064de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00f      	beq.n	8006518 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe f822 	bl	8004546 <HAL_DMA_Abort_IT>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650c:	2200      	movs	r2, #0
 800650e:	651a      	str	r2, [r3, #80]	; 0x50
 8006510:	e002      	b.n	8006518 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8006512:	2300      	movs	r3, #0
 8006514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d130      	bne.n	8006588 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3314      	adds	r3, #20
 800652c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	60fb      	str	r3, [r7, #12]
   return(result);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	673b      	str	r3, [r7, #112]	; 0x70
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3314      	adds	r3, #20
 8006544:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006546:	61fa      	str	r2, [r7, #28]
 8006548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	617b      	str	r3, [r7, #20]
   return(result);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e5      	bne.n	8006526 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	2b00      	cmp	r3, #0
 8006560:	d012      	beq.n	8006588 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f7fd ffed 	bl	8004546 <HAL_DMA_Abort_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	2200      	movs	r2, #0
 8006578:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800657a:	2301      	movs	r3, #1
 800657c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006580:	e002      	b.n	8006588 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8006588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658c:	2b01      	cmp	r3, #1
 800658e:	d116      	bne.n	80065be <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 faab 	bl	8006b14 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3788      	adds	r7, #136	; 0x88
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	08006d87 	.word	0x08006d87
 80065cc:	08006de7 	.word	0x08006de7

080065d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b0ba      	sub	sp, #232	; 0xe8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800660e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10f      	bne.n	8006636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_UART_IRQHandler+0x66>
 8006622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc71 	bl	8006f16 <UART_Receive_IT>
      return;
 8006634:	e256      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80de 	beq.w	80067fc <HAL_UART_IRQHandler+0x22c>
 8006640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80d1 	beq.w	80067fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800665a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_UART_IRQHandler+0xae>
 8006666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	f043 0201 	orr.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_UART_IRQHandler+0xd2>
 800668a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f043 0202 	orr.w	r2, r3, #2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xf6>
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0204 	orr.w	r2, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d011      	beq.n	80066f6 <HAL_UART_IRQHandler+0x126>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0208 	orr.w	r2, r3, #8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 81ed 	beq.w	8006ada <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_UART_IRQHandler+0x14e>
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fbfc 	bl	8006f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <HAL_UART_IRQHandler+0x17a>
 8006742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006746:	2b00      	cmp	r3, #0
 8006748:	d04f      	beq.n	80067ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 faa4 	bl	8006c98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b40      	cmp	r3, #64	; 0x40
 800675c:	d141      	bne.n	80067e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800677c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3314      	adds	r3, #20
 8006786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800678a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800678e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1d9      	bne.n	800675e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d013      	beq.n	80067da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	4a7d      	ldr	r2, [pc, #500]	; (80069ac <HAL_UART_IRQHandler+0x3dc>)
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd fec1 	bl	8004546 <HAL_DMA_Abort_IT>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d016      	beq.n	80067f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e00e      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f990 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e0:	e00a      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f98c 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	e006      	b.n	80067f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f988 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067f6:	e170      	b.n	8006ada <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	bf00      	nop
    return;
 80067fa:	e16e      	b.n	8006ada <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 814a 	bne.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8143 	beq.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 813c 	beq.w	8006a9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	f040 80b4 	bne.w	80069b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8140 	beq.w	8006ade <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006866:	429a      	cmp	r2, r3
 8006868:	f080 8139 	bcs.w	8006ade <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	f000 8088 	beq.w	8006992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800689c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1d9      	bne.n	8006882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3314      	adds	r3, #20
 80068ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e1      	bne.n	80068ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800691a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800691c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800692e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800693c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e3      	bne.n	800690a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006974:	65ba      	str	r2, [r7, #88]	; 0x58
 8006976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800697a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e3      	bne.n	8006950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	4618      	mov	r0, r3
 800698e:	f7fd fd6a 	bl	8004466 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800699a:	b29b      	uxth	r3, r3
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8c0 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069a8:	e099      	b.n	8006ade <HAL_UART_IRQHandler+0x50e>
 80069aa:	bf00      	nop
 80069ac:	08006d5f 	.word	0x08006d5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 808b 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8086 	beq.w	8006ae2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	330c      	adds	r3, #12
 80069f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80069fa:	647a      	str	r2, [r7, #68]	; 0x44
 80069fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e3      	bne.n	80069d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3314      	adds	r3, #20
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a32:	633a      	str	r2, [r7, #48]	; 0x30
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e3      	bne.n	8006a0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0310 	bic.w	r3, r3, #16
 8006a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a78:	61fa      	str	r2, [r7, #28]
 8006a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e3      	bne.n	8006a54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f848 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a98:	e023      	b.n	8006ae2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_UART_IRQHandler+0x4ea>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9c7 	bl	8006e46 <UART_Transmit_IT>
    return;
 8006ab8:	e014      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x514>
 8006ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fa07 	bl	8006ee6 <UART_EndTransmit_IT>
    return;
 8006ad8:	e004      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
    return;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8006ae2:	bf00      	nop
  }
}
 8006ae4:	37e8      	adds	r7, #232	; 0xe8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b090      	sub	sp, #64	; 0x40
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b50:	e050      	b.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d04c      	beq.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b60:	f7fd fae2 	bl	8004128 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d241      	bcs.n	8006bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b90:	637a      	str	r2, [r7, #52]	; 0x34
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e5      	bne.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3314      	adds	r3, #20
 8006bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc4:	623a      	str	r2, [r7, #32]
 8006bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	6a3a      	ldr	r2, [r7, #32]
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e5      	bne.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e00f      	b.n	8006c14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	bf0c      	ite	eq
 8006c04:	2301      	moveq	r3, #1
 8006c06:	2300      	movne	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d09f      	beq.n	8006b52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3740      	adds	r7, #64	; 0x40
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	88fa      	ldrh	r2, [r7, #6]
 8006c3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2222      	movs	r2, #34	; 0x22
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695a      	ldr	r2, [r3, #20]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0220 	orr.w	r2, r2, #32
 8006c88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b095      	sub	sp, #84	; 0x54
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cc0:	643a      	str	r2, [r7, #64]	; 0x40
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e5      	bne.n	8006ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f023 0301 	bic.w	r3, r3, #1
 8006cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3314      	adds	r3, #20
 8006cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d119      	bne.n	8006d44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f023 0310 	bic.w	r3, r3, #16
 8006d26:	647b      	str	r3, [r7, #68]	; 0x44
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	330c      	adds	r3, #12
 8006d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d30:	61ba      	str	r2, [r7, #24]
 8006d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	e841 2300 	strex	r3, r2, [r1]
 8006d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e5      	bne.n	8006d10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d52:	bf00      	nop
 8006d54:	3754      	adds	r7, #84	; 0x54
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff fec1 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d92:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d98:	2200      	movs	r2, #0
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d117      	bne.n	8006dde <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fe9c 	bl	8006b14 <HAL_UART_AbortCpltCallback>
 8006ddc:	e000      	b.n	8006de0 <UART_DMATxAbortCallback+0x5a>
      return;
 8006dde:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	2200      	movs	r2, #0
 8006dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d117      	bne.n	8006e3e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff fe6c 	bl	8006b14 <HAL_UART_AbortCpltCallback>
 8006e3c:	e000      	b.n	8006e40 <UART_DMARxAbortCallback+0x5a>
      return;
 8006e3e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b21      	cmp	r3, #33	; 0x21
 8006e58:	d13e      	bne.n	8006ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	d114      	bne.n	8006e8e <UART_Transmit_IT+0x48>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d110      	bne.n	8006e8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	1c9a      	adds	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]
 8006e8c:	e008      	b.n	8006ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6211      	str	r1, [r2, #32]
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4619      	mov	r1, r3
 8006eae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10f      	bne.n	8006ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	e000      	b.n	8006eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ed8:	2302      	movs	r3, #2
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fdf0 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b08c      	sub	sp, #48	; 0x30
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b22      	cmp	r3, #34	; 0x22
 8006f28:	f040 80ab 	bne.w	8007082 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f34:	d117      	bne.n	8006f66 <UART_Receive_IT+0x50>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d113      	bne.n	8006f66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5e:	1c9a      	adds	r2, r3, #2
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
 8006f64:	e026      	b.n	8006fb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d007      	beq.n	8006f8a <UART_Receive_IT+0x74>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <UART_Receive_IT+0x82>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d106      	bne.n	8006f98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e008      	b.n	8006faa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	1c5a      	adds	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d15a      	bne.n	800707e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0220 	bic.w	r2, r2, #32
 8006fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695a      	ldr	r2, [r3, #20]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0201 	bic.w	r2, r2, #1
 8006ff6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	2b01      	cmp	r3, #1
 8007006:	d135      	bne.n	8007074 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	330c      	adds	r3, #12
 8007014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	613b      	str	r3, [r7, #16]
   return(result);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f023 0310 	bic.w	r3, r3, #16
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	330c      	adds	r3, #12
 800702c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702e:	623a      	str	r2, [r7, #32]
 8007030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	69f9      	ldr	r1, [r7, #28]
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	61bb      	str	r3, [r7, #24]
   return(result);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1e5      	bne.n	800700e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b10      	cmp	r3, #16
 800704e:	d10a      	bne.n	8007066 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fd5b 	bl	8006b28 <HAL_UARTEx_RxEventCallback>
 8007072:	e002      	b.n	800707a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fb fbab 	bl	80027d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e002      	b.n	8007084 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3730      	adds	r7, #48	; 0x30
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007090:	b0c0      	sub	sp, #256	; 0x100
 8007092:	af00      	add	r7, sp, #0
 8007094:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	ea40 0301 	orr.w	r3, r0, r1
 80070b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070e4:	f021 010c 	bic.w	r1, r1, #12
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070f2:	430b      	orrs	r3, r1
 80070f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007106:	6999      	ldr	r1, [r3, #24]
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	ea40 0301 	orr.w	r3, r0, r1
 8007112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b8f      	ldr	r3, [pc, #572]	; (8007358 <UART_SetConfig+0x2cc>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d005      	beq.n	800712c <UART_SetConfig+0xa0>
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b8d      	ldr	r3, [pc, #564]	; (800735c <UART_SetConfig+0x2d0>)
 8007128:	429a      	cmp	r2, r3
 800712a:	d104      	bne.n	8007136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800712c:	f7fe f810 	bl	8005150 <HAL_RCC_GetPCLK2Freq>
 8007130:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007134:	e003      	b.n	800713e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007136:	f7fd fff7 	bl	8005128 <HAL_RCC_GetPCLK1Freq>
 800713a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	f040 810c 	bne.w	8007364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007156:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800715a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	1891      	adds	r1, r2, r2
 8007164:	65b9      	str	r1, [r7, #88]	; 0x58
 8007166:	415b      	adcs	r3, r3
 8007168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800716a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800716e:	4621      	mov	r1, r4
 8007170:	eb12 0801 	adds.w	r8, r2, r1
 8007174:	4629      	mov	r1, r5
 8007176:	eb43 0901 	adc.w	r9, r3, r1
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800718a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800718e:	4690      	mov	r8, r2
 8007190:	4699      	mov	r9, r3
 8007192:	4623      	mov	r3, r4
 8007194:	eb18 0303 	adds.w	r3, r8, r3
 8007198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800719c:	462b      	mov	r3, r5
 800719e:	eb49 0303 	adc.w	r3, r9, r3
 80071a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80071b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80071b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071ba:	460b      	mov	r3, r1
 80071bc:	18db      	adds	r3, r3, r3
 80071be:	653b      	str	r3, [r7, #80]	; 0x50
 80071c0:	4613      	mov	r3, r2
 80071c2:	eb42 0303 	adc.w	r3, r2, r3
 80071c6:	657b      	str	r3, [r7, #84]	; 0x54
 80071c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071d0:	f7f9 fd42 	bl	8000c58 <__aeabi_uldivmod>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4b61      	ldr	r3, [pc, #388]	; (8007360 <UART_SetConfig+0x2d4>)
 80071da:	fba3 2302 	umull	r2, r3, r3, r2
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	011c      	lsls	r4, r3, #4
 80071e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	1891      	adds	r1, r2, r2
 80071fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80071fc:	415b      	adcs	r3, r3
 80071fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007204:	4641      	mov	r1, r8
 8007206:	eb12 0a01 	adds.w	sl, r2, r1
 800720a:	4649      	mov	r1, r9
 800720c:	eb43 0b01 	adc.w	fp, r3, r1
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800721c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007224:	4692      	mov	sl, r2
 8007226:	469b      	mov	fp, r3
 8007228:	4643      	mov	r3, r8
 800722a:	eb1a 0303 	adds.w	r3, sl, r3
 800722e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007232:	464b      	mov	r3, r9
 8007234:	eb4b 0303 	adc.w	r3, fp, r3
 8007238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007248:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800724c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007250:	460b      	mov	r3, r1
 8007252:	18db      	adds	r3, r3, r3
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
 8007256:	4613      	mov	r3, r2
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	647b      	str	r3, [r7, #68]	; 0x44
 800725e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007266:	f7f9 fcf7 	bl	8000c58 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4611      	mov	r1, r2
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <UART_SetConfig+0x2d4>)
 8007272:	fba3 2301 	umull	r2, r3, r3, r1
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	2264      	movs	r2, #100	; 0x64
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	1acb      	subs	r3, r1, r3
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007286:	4b36      	ldr	r3, [pc, #216]	; (8007360 <UART_SetConfig+0x2d4>)
 8007288:	fba3 2302 	umull	r2, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007294:	441c      	add	r4, r3
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80072a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80072a8:	4642      	mov	r2, r8
 80072aa:	464b      	mov	r3, r9
 80072ac:	1891      	adds	r1, r2, r2
 80072ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80072b0:	415b      	adcs	r3, r3
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072b8:	4641      	mov	r1, r8
 80072ba:	1851      	adds	r1, r2, r1
 80072bc:	6339      	str	r1, [r7, #48]	; 0x30
 80072be:	4649      	mov	r1, r9
 80072c0:	414b      	adcs	r3, r1
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072d0:	4659      	mov	r1, fp
 80072d2:	00cb      	lsls	r3, r1, #3
 80072d4:	4651      	mov	r1, sl
 80072d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072da:	4651      	mov	r1, sl
 80072dc:	00ca      	lsls	r2, r1, #3
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	4642      	mov	r2, r8
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072ec:	464b      	mov	r3, r9
 80072ee:	460a      	mov	r2, r1
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007304:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800730c:	460b      	mov	r3, r1
 800730e:	18db      	adds	r3, r3, r3
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
 8007312:	4613      	mov	r3, r2
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800731e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007322:	f7f9 fc99 	bl	8000c58 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <UART_SetConfig+0x2d4>)
 800732c:	fba3 1302 	umull	r1, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	2164      	movs	r1, #100	; 0x64
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	3332      	adds	r3, #50	; 0x32
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <UART_SetConfig+0x2d4>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f003 0207 	and.w	r2, r3, #7
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4422      	add	r2, r4
 8007352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007354:	e105      	b.n	8007562 <UART_SetConfig+0x4d6>
 8007356:	bf00      	nop
 8007358:	40011000 	.word	0x40011000
 800735c:	40011400 	.word	0x40011400
 8007360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800736e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007376:	4642      	mov	r2, r8
 8007378:	464b      	mov	r3, r9
 800737a:	1891      	adds	r1, r2, r2
 800737c:	6239      	str	r1, [r7, #32]
 800737e:	415b      	adcs	r3, r3
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
 8007382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007386:	4641      	mov	r1, r8
 8007388:	1854      	adds	r4, r2, r1
 800738a:	4649      	mov	r1, r9
 800738c:	eb43 0501 	adc.w	r5, r3, r1
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	00eb      	lsls	r3, r5, #3
 800739a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800739e:	00e2      	lsls	r2, r4, #3
 80073a0:	4614      	mov	r4, r2
 80073a2:	461d      	mov	r5, r3
 80073a4:	4643      	mov	r3, r8
 80073a6:	18e3      	adds	r3, r4, r3
 80073a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073ac:	464b      	mov	r3, r9
 80073ae:	eb45 0303 	adc.w	r3, r5, r3
 80073b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073d2:	4629      	mov	r1, r5
 80073d4:	008b      	lsls	r3, r1, #2
 80073d6:	4621      	mov	r1, r4
 80073d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073dc:	4621      	mov	r1, r4
 80073de:	008a      	lsls	r2, r1, #2
 80073e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073e4:	f7f9 fc38 	bl	8000c58 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4b60      	ldr	r3, [pc, #384]	; (8007570 <UART_SetConfig+0x4e4>)
 80073ee:	fba3 2302 	umull	r2, r3, r3, r2
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	011c      	lsls	r4, r3, #4
 80073f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	1891      	adds	r1, r2, r2
 800740e:	61b9      	str	r1, [r7, #24]
 8007410:	415b      	adcs	r3, r3
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007418:	4641      	mov	r1, r8
 800741a:	1851      	adds	r1, r2, r1
 800741c:	6139      	str	r1, [r7, #16]
 800741e:	4649      	mov	r1, r9
 8007420:	414b      	adcs	r3, r1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007430:	4659      	mov	r1, fp
 8007432:	00cb      	lsls	r3, r1, #3
 8007434:	4651      	mov	r1, sl
 8007436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800743a:	4651      	mov	r1, sl
 800743c:	00ca      	lsls	r2, r1, #3
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	4603      	mov	r3, r0
 8007444:	4642      	mov	r2, r8
 8007446:	189b      	adds	r3, r3, r2
 8007448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800744c:	464b      	mov	r3, r9
 800744e:	460a      	mov	r2, r1
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	67bb      	str	r3, [r7, #120]	; 0x78
 8007462:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007470:	4649      	mov	r1, r9
 8007472:	008b      	lsls	r3, r1, #2
 8007474:	4641      	mov	r1, r8
 8007476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800747a:	4641      	mov	r1, r8
 800747c:	008a      	lsls	r2, r1, #2
 800747e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007482:	f7f9 fbe9 	bl	8000c58 <__aeabi_uldivmod>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4b39      	ldr	r3, [pc, #228]	; (8007570 <UART_SetConfig+0x4e4>)
 800748c:	fba3 1302 	umull	r1, r3, r3, r2
 8007490:	095b      	lsrs	r3, r3, #5
 8007492:	2164      	movs	r1, #100	; 0x64
 8007494:	fb01 f303 	mul.w	r3, r1, r3
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	3332      	adds	r3, #50	; 0x32
 800749e:	4a34      	ldr	r2, [pc, #208]	; (8007570 <UART_SetConfig+0x4e4>)
 80074a0:	fba2 2303 	umull	r2, r3, r2, r3
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074aa:	441c      	add	r4, r3
 80074ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b0:	2200      	movs	r2, #0
 80074b2:	673b      	str	r3, [r7, #112]	; 0x70
 80074b4:	677a      	str	r2, [r7, #116]	; 0x74
 80074b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80074ba:	4642      	mov	r2, r8
 80074bc:	464b      	mov	r3, r9
 80074be:	1891      	adds	r1, r2, r2
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	415b      	adcs	r3, r3
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074ca:	4641      	mov	r1, r8
 80074cc:	1851      	adds	r1, r2, r1
 80074ce:	6039      	str	r1, [r7, #0]
 80074d0:	4649      	mov	r1, r9
 80074d2:	414b      	adcs	r3, r1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074e2:	4659      	mov	r1, fp
 80074e4:	00cb      	lsls	r3, r1, #3
 80074e6:	4651      	mov	r1, sl
 80074e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ec:	4651      	mov	r1, sl
 80074ee:	00ca      	lsls	r2, r1, #3
 80074f0:	4610      	mov	r0, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	4603      	mov	r3, r0
 80074f6:	4642      	mov	r2, r8
 80074f8:	189b      	adds	r3, r3, r2
 80074fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80074fc:	464b      	mov	r3, r9
 80074fe:	460a      	mov	r2, r1
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	663b      	str	r3, [r7, #96]	; 0x60
 8007510:	667a      	str	r2, [r7, #100]	; 0x64
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800751e:	4649      	mov	r1, r9
 8007520:	008b      	lsls	r3, r1, #2
 8007522:	4641      	mov	r1, r8
 8007524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007528:	4641      	mov	r1, r8
 800752a:	008a      	lsls	r2, r1, #2
 800752c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007530:	f7f9 fb92 	bl	8000c58 <__aeabi_uldivmod>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <UART_SetConfig+0x4e4>)
 800753a:	fba3 1302 	umull	r1, r3, r3, r2
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	2164      	movs	r1, #100	; 0x64
 8007542:	fb01 f303 	mul.w	r3, r1, r3
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	011b      	lsls	r3, r3, #4
 800754a:	3332      	adds	r3, #50	; 0x32
 800754c:	4a08      	ldr	r2, [pc, #32]	; (8007570 <UART_SetConfig+0x4e4>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	f003 020f 	and.w	r2, r3, #15
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4422      	add	r2, r4
 8007560:	609a      	str	r2, [r3, #8]
}
 8007562:	bf00      	nop
 8007564:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007568:	46bd      	mov	sp, r7
 800756a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800756e:	bf00      	nop
 8007570:	51eb851f 	.word	0x51eb851f

08007574 <__errno>:
 8007574:	4b01      	ldr	r3, [pc, #4]	; (800757c <__errno+0x8>)
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	20000020 	.word	0x20000020

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4d0d      	ldr	r5, [pc, #52]	; (80075b8 <__libc_init_array+0x38>)
 8007584:	4c0d      	ldr	r4, [pc, #52]	; (80075bc <__libc_init_array+0x3c>)
 8007586:	1b64      	subs	r4, r4, r5
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	2600      	movs	r6, #0
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	4d0b      	ldr	r5, [pc, #44]	; (80075c0 <__libc_init_array+0x40>)
 8007592:	4c0c      	ldr	r4, [pc, #48]	; (80075c4 <__libc_init_array+0x44>)
 8007594:	f002 fff0 	bl	800a578 <_init>
 8007598:	1b64      	subs	r4, r4, r5
 800759a:	10a4      	asrs	r4, r4, #2
 800759c:	2600      	movs	r6, #0
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	0800ae4c 	.word	0x0800ae4c
 80075bc:	0800ae4c 	.word	0x0800ae4c
 80075c0:	0800ae4c 	.word	0x0800ae4c
 80075c4:	0800ae50 	.word	0x0800ae50

080075c8 <memset>:
 80075c8:	4402      	add	r2, r0
 80075ca:	4603      	mov	r3, r0
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d100      	bne.n	80075d2 <memset+0xa>
 80075d0:	4770      	bx	lr
 80075d2:	f803 1b01 	strb.w	r1, [r3], #1
 80075d6:	e7f9      	b.n	80075cc <memset+0x4>

080075d8 <__cvt>:
 80075d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	ec55 4b10 	vmov	r4, r5, d0
 80075e0:	2d00      	cmp	r5, #0
 80075e2:	460e      	mov	r6, r1
 80075e4:	4619      	mov	r1, r3
 80075e6:	462b      	mov	r3, r5
 80075e8:	bfbb      	ittet	lt
 80075ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075ee:	461d      	movlt	r5, r3
 80075f0:	2300      	movge	r3, #0
 80075f2:	232d      	movlt	r3, #45	; 0x2d
 80075f4:	700b      	strb	r3, [r1, #0]
 80075f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075fc:	4691      	mov	r9, r2
 80075fe:	f023 0820 	bic.w	r8, r3, #32
 8007602:	bfbc      	itt	lt
 8007604:	4622      	movlt	r2, r4
 8007606:	4614      	movlt	r4, r2
 8007608:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800760c:	d005      	beq.n	800761a <__cvt+0x42>
 800760e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007612:	d100      	bne.n	8007616 <__cvt+0x3e>
 8007614:	3601      	adds	r6, #1
 8007616:	2102      	movs	r1, #2
 8007618:	e000      	b.n	800761c <__cvt+0x44>
 800761a:	2103      	movs	r1, #3
 800761c:	ab03      	add	r3, sp, #12
 800761e:	9301      	str	r3, [sp, #4]
 8007620:	ab02      	add	r3, sp, #8
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	ec45 4b10 	vmov	d0, r4, r5
 8007628:	4653      	mov	r3, sl
 800762a:	4632      	mov	r2, r6
 800762c:	f000 fe50 	bl	80082d0 <_dtoa_r>
 8007630:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007634:	4607      	mov	r7, r0
 8007636:	d102      	bne.n	800763e <__cvt+0x66>
 8007638:	f019 0f01 	tst.w	r9, #1
 800763c:	d022      	beq.n	8007684 <__cvt+0xac>
 800763e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007642:	eb07 0906 	add.w	r9, r7, r6
 8007646:	d110      	bne.n	800766a <__cvt+0x92>
 8007648:	783b      	ldrb	r3, [r7, #0]
 800764a:	2b30      	cmp	r3, #48	; 0x30
 800764c:	d10a      	bne.n	8007664 <__cvt+0x8c>
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f7f9 fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800765a:	b918      	cbnz	r0, 8007664 <__cvt+0x8c>
 800765c:	f1c6 0601 	rsb	r6, r6, #1
 8007660:	f8ca 6000 	str.w	r6, [sl]
 8007664:	f8da 3000 	ldr.w	r3, [sl]
 8007668:	4499      	add	r9, r3
 800766a:	2200      	movs	r2, #0
 800766c:	2300      	movs	r3, #0
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 8007676:	b108      	cbz	r0, 800767c <__cvt+0xa4>
 8007678:	f8cd 900c 	str.w	r9, [sp, #12]
 800767c:	2230      	movs	r2, #48	; 0x30
 800767e:	9b03      	ldr	r3, [sp, #12]
 8007680:	454b      	cmp	r3, r9
 8007682:	d307      	bcc.n	8007694 <__cvt+0xbc>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007688:	1bdb      	subs	r3, r3, r7
 800768a:	4638      	mov	r0, r7
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	b004      	add	sp, #16
 8007690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007694:	1c59      	adds	r1, r3, #1
 8007696:	9103      	str	r1, [sp, #12]
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	e7f0      	b.n	800767e <__cvt+0xa6>

0800769c <__exponent>:
 800769c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800769e:	4603      	mov	r3, r0
 80076a0:	2900      	cmp	r1, #0
 80076a2:	bfb8      	it	lt
 80076a4:	4249      	neglt	r1, r1
 80076a6:	f803 2b02 	strb.w	r2, [r3], #2
 80076aa:	bfb4      	ite	lt
 80076ac:	222d      	movlt	r2, #45	; 0x2d
 80076ae:	222b      	movge	r2, #43	; 0x2b
 80076b0:	2909      	cmp	r1, #9
 80076b2:	7042      	strb	r2, [r0, #1]
 80076b4:	dd2a      	ble.n	800770c <__exponent+0x70>
 80076b6:	f10d 0407 	add.w	r4, sp, #7
 80076ba:	46a4      	mov	ip, r4
 80076bc:	270a      	movs	r7, #10
 80076be:	46a6      	mov	lr, r4
 80076c0:	460a      	mov	r2, r1
 80076c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80076c6:	fb07 1516 	mls	r5, r7, r6, r1
 80076ca:	3530      	adds	r5, #48	; 0x30
 80076cc:	2a63      	cmp	r2, #99	; 0x63
 80076ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80076d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076d6:	4631      	mov	r1, r6
 80076d8:	dcf1      	bgt.n	80076be <__exponent+0x22>
 80076da:	3130      	adds	r1, #48	; 0x30
 80076dc:	f1ae 0502 	sub.w	r5, lr, #2
 80076e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076e4:	1c44      	adds	r4, r0, #1
 80076e6:	4629      	mov	r1, r5
 80076e8:	4561      	cmp	r1, ip
 80076ea:	d30a      	bcc.n	8007702 <__exponent+0x66>
 80076ec:	f10d 0209 	add.w	r2, sp, #9
 80076f0:	eba2 020e 	sub.w	r2, r2, lr
 80076f4:	4565      	cmp	r5, ip
 80076f6:	bf88      	it	hi
 80076f8:	2200      	movhi	r2, #0
 80076fa:	4413      	add	r3, r2
 80076fc:	1a18      	subs	r0, r3, r0
 80076fe:	b003      	add	sp, #12
 8007700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007706:	f804 2f01 	strb.w	r2, [r4, #1]!
 800770a:	e7ed      	b.n	80076e8 <__exponent+0x4c>
 800770c:	2330      	movs	r3, #48	; 0x30
 800770e:	3130      	adds	r1, #48	; 0x30
 8007710:	7083      	strb	r3, [r0, #2]
 8007712:	70c1      	strb	r1, [r0, #3]
 8007714:	1d03      	adds	r3, r0, #4
 8007716:	e7f1      	b.n	80076fc <__exponent+0x60>

08007718 <_printf_float>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ed2d 8b02 	vpush	{d8}
 8007720:	b08d      	sub	sp, #52	; 0x34
 8007722:	460c      	mov	r4, r1
 8007724:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007728:	4616      	mov	r6, r2
 800772a:	461f      	mov	r7, r3
 800772c:	4605      	mov	r5, r0
 800772e:	f001 fd75 	bl	800921c <_localeconv_r>
 8007732:	f8d0 a000 	ldr.w	sl, [r0]
 8007736:	4650      	mov	r0, sl
 8007738:	f7f8 fd52 	bl	80001e0 <strlen>
 800773c:	2300      	movs	r3, #0
 800773e:	930a      	str	r3, [sp, #40]	; 0x28
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	9305      	str	r3, [sp, #20]
 8007744:	f8d8 3000 	ldr.w	r3, [r8]
 8007748:	f894 b018 	ldrb.w	fp, [r4, #24]
 800774c:	3307      	adds	r3, #7
 800774e:	f023 0307 	bic.w	r3, r3, #7
 8007752:	f103 0208 	add.w	r2, r3, #8
 8007756:	f8c8 2000 	str.w	r2, [r8]
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007762:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007766:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800776a:	9307      	str	r3, [sp, #28]
 800776c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007770:	ee08 0a10 	vmov	s16, r0
 8007774:	4b9f      	ldr	r3, [pc, #636]	; (80079f4 <_printf_float+0x2dc>)
 8007776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800777a:	f04f 32ff 	mov.w	r2, #4294967295
 800777e:	f7f9 f9dd 	bl	8000b3c <__aeabi_dcmpun>
 8007782:	bb88      	cbnz	r0, 80077e8 <_printf_float+0xd0>
 8007784:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007788:	4b9a      	ldr	r3, [pc, #616]	; (80079f4 <_printf_float+0x2dc>)
 800778a:	f04f 32ff 	mov.w	r2, #4294967295
 800778e:	f7f9 f9b7 	bl	8000b00 <__aeabi_dcmple>
 8007792:	bb48      	cbnz	r0, 80077e8 <_printf_float+0xd0>
 8007794:	2200      	movs	r2, #0
 8007796:	2300      	movs	r3, #0
 8007798:	4640      	mov	r0, r8
 800779a:	4649      	mov	r1, r9
 800779c:	f7f9 f9a6 	bl	8000aec <__aeabi_dcmplt>
 80077a0:	b110      	cbz	r0, 80077a8 <_printf_float+0x90>
 80077a2:	232d      	movs	r3, #45	; 0x2d
 80077a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a8:	4b93      	ldr	r3, [pc, #588]	; (80079f8 <_printf_float+0x2e0>)
 80077aa:	4894      	ldr	r0, [pc, #592]	; (80079fc <_printf_float+0x2e4>)
 80077ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077b0:	bf94      	ite	ls
 80077b2:	4698      	movls	r8, r3
 80077b4:	4680      	movhi	r8, r0
 80077b6:	2303      	movs	r3, #3
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	9b05      	ldr	r3, [sp, #20]
 80077bc:	f023 0204 	bic.w	r2, r3, #4
 80077c0:	6022      	str	r2, [r4, #0]
 80077c2:	f04f 0900 	mov.w	r9, #0
 80077c6:	9700      	str	r7, [sp, #0]
 80077c8:	4633      	mov	r3, r6
 80077ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80077cc:	4621      	mov	r1, r4
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 f9d8 	bl	8007b84 <_printf_common>
 80077d4:	3001      	adds	r0, #1
 80077d6:	f040 8090 	bne.w	80078fa <_printf_float+0x1e2>
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	b00d      	add	sp, #52	; 0x34
 80077e0:	ecbd 8b02 	vpop	{d8}
 80077e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f9 f9a4 	bl	8000b3c <__aeabi_dcmpun>
 80077f4:	b140      	cbz	r0, 8007808 <_printf_float+0xf0>
 80077f6:	464b      	mov	r3, r9
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bfbc      	itt	lt
 80077fc:	232d      	movlt	r3, #45	; 0x2d
 80077fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007802:	487f      	ldr	r0, [pc, #508]	; (8007a00 <_printf_float+0x2e8>)
 8007804:	4b7f      	ldr	r3, [pc, #508]	; (8007a04 <_printf_float+0x2ec>)
 8007806:	e7d1      	b.n	80077ac <_printf_float+0x94>
 8007808:	6863      	ldr	r3, [r4, #4]
 800780a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800780e:	9206      	str	r2, [sp, #24]
 8007810:	1c5a      	adds	r2, r3, #1
 8007812:	d13f      	bne.n	8007894 <_printf_float+0x17c>
 8007814:	2306      	movs	r3, #6
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	9b05      	ldr	r3, [sp, #20]
 800781a:	6861      	ldr	r1, [r4, #4]
 800781c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007820:	2300      	movs	r3, #0
 8007822:	9303      	str	r3, [sp, #12]
 8007824:	ab0a      	add	r3, sp, #40	; 0x28
 8007826:	e9cd b301 	strd	fp, r3, [sp, #4]
 800782a:	ab09      	add	r3, sp, #36	; 0x24
 800782c:	ec49 8b10 	vmov	d0, r8, r9
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	6022      	str	r2, [r4, #0]
 8007834:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007838:	4628      	mov	r0, r5
 800783a:	f7ff fecd 	bl	80075d8 <__cvt>
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007842:	2b47      	cmp	r3, #71	; 0x47
 8007844:	4680      	mov	r8, r0
 8007846:	d108      	bne.n	800785a <_printf_float+0x142>
 8007848:	1cc8      	adds	r0, r1, #3
 800784a:	db02      	blt.n	8007852 <_printf_float+0x13a>
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	4299      	cmp	r1, r3
 8007850:	dd41      	ble.n	80078d6 <_printf_float+0x1be>
 8007852:	f1ab 0b02 	sub.w	fp, fp, #2
 8007856:	fa5f fb8b 	uxtb.w	fp, fp
 800785a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800785e:	d820      	bhi.n	80078a2 <_printf_float+0x18a>
 8007860:	3901      	subs	r1, #1
 8007862:	465a      	mov	r2, fp
 8007864:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007868:	9109      	str	r1, [sp, #36]	; 0x24
 800786a:	f7ff ff17 	bl	800769c <__exponent>
 800786e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007870:	1813      	adds	r3, r2, r0
 8007872:	2a01      	cmp	r2, #1
 8007874:	4681      	mov	r9, r0
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	dc02      	bgt.n	8007880 <_printf_float+0x168>
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	07d2      	lsls	r2, r2, #31
 800787e:	d501      	bpl.n	8007884 <_printf_float+0x16c>
 8007880:	3301      	adds	r3, #1
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007888:	2b00      	cmp	r3, #0
 800788a:	d09c      	beq.n	80077c6 <_printf_float+0xae>
 800788c:	232d      	movs	r3, #45	; 0x2d
 800788e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007892:	e798      	b.n	80077c6 <_printf_float+0xae>
 8007894:	9a06      	ldr	r2, [sp, #24]
 8007896:	2a47      	cmp	r2, #71	; 0x47
 8007898:	d1be      	bne.n	8007818 <_printf_float+0x100>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1bc      	bne.n	8007818 <_printf_float+0x100>
 800789e:	2301      	movs	r3, #1
 80078a0:	e7b9      	b.n	8007816 <_printf_float+0xfe>
 80078a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078a6:	d118      	bne.n	80078da <_printf_float+0x1c2>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	6863      	ldr	r3, [r4, #4]
 80078ac:	dd0b      	ble.n	80078c6 <_printf_float+0x1ae>
 80078ae:	6121      	str	r1, [r4, #16]
 80078b0:	b913      	cbnz	r3, 80078b8 <_printf_float+0x1a0>
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	07d0      	lsls	r0, r2, #31
 80078b6:	d502      	bpl.n	80078be <_printf_float+0x1a6>
 80078b8:	3301      	adds	r3, #1
 80078ba:	440b      	add	r3, r1
 80078bc:	6123      	str	r3, [r4, #16]
 80078be:	65a1      	str	r1, [r4, #88]	; 0x58
 80078c0:	f04f 0900 	mov.w	r9, #0
 80078c4:	e7de      	b.n	8007884 <_printf_float+0x16c>
 80078c6:	b913      	cbnz	r3, 80078ce <_printf_float+0x1b6>
 80078c8:	6822      	ldr	r2, [r4, #0]
 80078ca:	07d2      	lsls	r2, r2, #31
 80078cc:	d501      	bpl.n	80078d2 <_printf_float+0x1ba>
 80078ce:	3302      	adds	r3, #2
 80078d0:	e7f4      	b.n	80078bc <_printf_float+0x1a4>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e7f2      	b.n	80078bc <_printf_float+0x1a4>
 80078d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078dc:	4299      	cmp	r1, r3
 80078de:	db05      	blt.n	80078ec <_printf_float+0x1d4>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	6121      	str	r1, [r4, #16]
 80078e4:	07d8      	lsls	r0, r3, #31
 80078e6:	d5ea      	bpl.n	80078be <_printf_float+0x1a6>
 80078e8:	1c4b      	adds	r3, r1, #1
 80078ea:	e7e7      	b.n	80078bc <_printf_float+0x1a4>
 80078ec:	2900      	cmp	r1, #0
 80078ee:	bfd4      	ite	le
 80078f0:	f1c1 0202 	rsble	r2, r1, #2
 80078f4:	2201      	movgt	r2, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	e7e0      	b.n	80078bc <_printf_float+0x1a4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	055a      	lsls	r2, r3, #21
 80078fe:	d407      	bmi.n	8007910 <_printf_float+0x1f8>
 8007900:	6923      	ldr	r3, [r4, #16]
 8007902:	4642      	mov	r2, r8
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	d12c      	bne.n	8007968 <_printf_float+0x250>
 800790e:	e764      	b.n	80077da <_printf_float+0xc2>
 8007910:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007914:	f240 80e0 	bls.w	8007ad8 <_printf_float+0x3c0>
 8007918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	f7f9 f8da 	bl	8000ad8 <__aeabi_dcmpeq>
 8007924:	2800      	cmp	r0, #0
 8007926:	d034      	beq.n	8007992 <_printf_float+0x27a>
 8007928:	4a37      	ldr	r2, [pc, #220]	; (8007a08 <_printf_float+0x2f0>)
 800792a:	2301      	movs	r3, #1
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f af51 	beq.w	80077da <_printf_float+0xc2>
 8007938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800793c:	429a      	cmp	r2, r3
 800793e:	db02      	blt.n	8007946 <_printf_float+0x22e>
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	07d8      	lsls	r0, r3, #31
 8007944:	d510      	bpl.n	8007968 <_printf_float+0x250>
 8007946:	ee18 3a10 	vmov	r3, s16
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f af41 	beq.w	80077da <_printf_float+0xc2>
 8007958:	f04f 0800 	mov.w	r8, #0
 800795c:	f104 091a 	add.w	r9, r4, #26
 8007960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007962:	3b01      	subs	r3, #1
 8007964:	4543      	cmp	r3, r8
 8007966:	dc09      	bgt.n	800797c <_printf_float+0x264>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	079b      	lsls	r3, r3, #30
 800796c:	f100 8105 	bmi.w	8007b7a <_printf_float+0x462>
 8007970:	68e0      	ldr	r0, [r4, #12]
 8007972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007974:	4298      	cmp	r0, r3
 8007976:	bfb8      	it	lt
 8007978:	4618      	movlt	r0, r3
 800797a:	e730      	b.n	80077de <_printf_float+0xc6>
 800797c:	2301      	movs	r3, #1
 800797e:	464a      	mov	r2, r9
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	f43f af27 	beq.w	80077da <_printf_float+0xc2>
 800798c:	f108 0801 	add.w	r8, r8, #1
 8007990:	e7e6      	b.n	8007960 <_printf_float+0x248>
 8007992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	dc39      	bgt.n	8007a0c <_printf_float+0x2f4>
 8007998:	4a1b      	ldr	r2, [pc, #108]	; (8007a08 <_printf_float+0x2f0>)
 800799a:	2301      	movs	r3, #1
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	f43f af19 	beq.w	80077da <_printf_float+0xc2>
 80079a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ac:	4313      	orrs	r3, r2
 80079ae:	d102      	bne.n	80079b6 <_printf_float+0x29e>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	07d9      	lsls	r1, r3, #31
 80079b4:	d5d8      	bpl.n	8007968 <_printf_float+0x250>
 80079b6:	ee18 3a10 	vmov	r3, s16
 80079ba:	4652      	mov	r2, sl
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	f43f af09 	beq.w	80077da <_printf_float+0xc2>
 80079c8:	f04f 0900 	mov.w	r9, #0
 80079cc:	f104 0a1a 	add.w	sl, r4, #26
 80079d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d2:	425b      	negs	r3, r3
 80079d4:	454b      	cmp	r3, r9
 80079d6:	dc01      	bgt.n	80079dc <_printf_float+0x2c4>
 80079d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079da:	e792      	b.n	8007902 <_printf_float+0x1ea>
 80079dc:	2301      	movs	r3, #1
 80079de:	4652      	mov	r2, sl
 80079e0:	4631      	mov	r1, r6
 80079e2:	4628      	mov	r0, r5
 80079e4:	47b8      	blx	r7
 80079e6:	3001      	adds	r0, #1
 80079e8:	f43f aef7 	beq.w	80077da <_printf_float+0xc2>
 80079ec:	f109 0901 	add.w	r9, r9, #1
 80079f0:	e7ee      	b.n	80079d0 <_printf_float+0x2b8>
 80079f2:	bf00      	nop
 80079f4:	7fefffff 	.word	0x7fefffff
 80079f8:	0800aa70 	.word	0x0800aa70
 80079fc:	0800aa74 	.word	0x0800aa74
 8007a00:	0800aa7c 	.word	0x0800aa7c
 8007a04:	0800aa78 	.word	0x0800aa78
 8007a08:	0800aa80 	.word	0x0800aa80
 8007a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a10:	429a      	cmp	r2, r3
 8007a12:	bfa8      	it	ge
 8007a14:	461a      	movge	r2, r3
 8007a16:	2a00      	cmp	r2, #0
 8007a18:	4691      	mov	r9, r2
 8007a1a:	dc37      	bgt.n	8007a8c <_printf_float+0x374>
 8007a1c:	f04f 0b00 	mov.w	fp, #0
 8007a20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a24:	f104 021a 	add.w	r2, r4, #26
 8007a28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a2a:	9305      	str	r3, [sp, #20]
 8007a2c:	eba3 0309 	sub.w	r3, r3, r9
 8007a30:	455b      	cmp	r3, fp
 8007a32:	dc33      	bgt.n	8007a9c <_printf_float+0x384>
 8007a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	db3b      	blt.n	8007ab4 <_printf_float+0x39c>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	07da      	lsls	r2, r3, #31
 8007a40:	d438      	bmi.n	8007ab4 <_printf_float+0x39c>
 8007a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a44:	9a05      	ldr	r2, [sp, #20]
 8007a46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a48:	1a9a      	subs	r2, r3, r2
 8007a4a:	eba3 0901 	sub.w	r9, r3, r1
 8007a4e:	4591      	cmp	r9, r2
 8007a50:	bfa8      	it	ge
 8007a52:	4691      	movge	r9, r2
 8007a54:	f1b9 0f00 	cmp.w	r9, #0
 8007a58:	dc35      	bgt.n	8007ac6 <_printf_float+0x3ae>
 8007a5a:	f04f 0800 	mov.w	r8, #0
 8007a5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a62:	f104 0a1a 	add.w	sl, r4, #26
 8007a66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a6a:	1a9b      	subs	r3, r3, r2
 8007a6c:	eba3 0309 	sub.w	r3, r3, r9
 8007a70:	4543      	cmp	r3, r8
 8007a72:	f77f af79 	ble.w	8007968 <_printf_float+0x250>
 8007a76:	2301      	movs	r3, #1
 8007a78:	4652      	mov	r2, sl
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b8      	blx	r7
 8007a80:	3001      	adds	r0, #1
 8007a82:	f43f aeaa 	beq.w	80077da <_printf_float+0xc2>
 8007a86:	f108 0801 	add.w	r8, r8, #1
 8007a8a:	e7ec      	b.n	8007a66 <_printf_float+0x34e>
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4642      	mov	r2, r8
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	d1c0      	bne.n	8007a1c <_printf_float+0x304>
 8007a9a:	e69e      	b.n	80077da <_printf_float+0xc2>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	9205      	str	r2, [sp, #20]
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f ae97 	beq.w	80077da <_printf_float+0xc2>
 8007aac:	9a05      	ldr	r2, [sp, #20]
 8007aae:	f10b 0b01 	add.w	fp, fp, #1
 8007ab2:	e7b9      	b.n	8007a28 <_printf_float+0x310>
 8007ab4:	ee18 3a10 	vmov	r3, s16
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d1be      	bne.n	8007a42 <_printf_float+0x32a>
 8007ac4:	e689      	b.n	80077da <_printf_float+0xc2>
 8007ac6:	9a05      	ldr	r2, [sp, #20]
 8007ac8:	464b      	mov	r3, r9
 8007aca:	4442      	add	r2, r8
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d1c1      	bne.n	8007a5a <_printf_float+0x342>
 8007ad6:	e680      	b.n	80077da <_printf_float+0xc2>
 8007ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ada:	2a01      	cmp	r2, #1
 8007adc:	dc01      	bgt.n	8007ae2 <_printf_float+0x3ca>
 8007ade:	07db      	lsls	r3, r3, #31
 8007ae0:	d538      	bpl.n	8007b54 <_printf_float+0x43c>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b8      	blx	r7
 8007aec:	3001      	adds	r0, #1
 8007aee:	f43f ae74 	beq.w	80077da <_printf_float+0xc2>
 8007af2:	ee18 3a10 	vmov	r3, s16
 8007af6:	4652      	mov	r2, sl
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f ae6b 	beq.w	80077da <_printf_float+0xc2>
 8007b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f7f8 ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b10:	b9d8      	cbnz	r0, 8007b4a <_printf_float+0x432>
 8007b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b14:	f108 0201 	add.w	r2, r8, #1
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b8      	blx	r7
 8007b20:	3001      	adds	r0, #1
 8007b22:	d10e      	bne.n	8007b42 <_printf_float+0x42a>
 8007b24:	e659      	b.n	80077da <_printf_float+0xc2>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4652      	mov	r2, sl
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	f43f ae52 	beq.w	80077da <_printf_float+0xc2>
 8007b36:	f108 0801 	add.w	r8, r8, #1
 8007b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	4543      	cmp	r3, r8
 8007b40:	dcf1      	bgt.n	8007b26 <_printf_float+0x40e>
 8007b42:	464b      	mov	r3, r9
 8007b44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b48:	e6dc      	b.n	8007904 <_printf_float+0x1ec>
 8007b4a:	f04f 0800 	mov.w	r8, #0
 8007b4e:	f104 0a1a 	add.w	sl, r4, #26
 8007b52:	e7f2      	b.n	8007b3a <_printf_float+0x422>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4642      	mov	r2, r8
 8007b58:	e7df      	b.n	8007b1a <_printf_float+0x402>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	464a      	mov	r2, r9
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f ae38 	beq.w	80077da <_printf_float+0xc2>
 8007b6a:	f108 0801 	add.w	r8, r8, #1
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	4543      	cmp	r3, r8
 8007b76:	dcf0      	bgt.n	8007b5a <_printf_float+0x442>
 8007b78:	e6fa      	b.n	8007970 <_printf_float+0x258>
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	f104 0919 	add.w	r9, r4, #25
 8007b82:	e7f4      	b.n	8007b6e <_printf_float+0x456>

08007b84 <_printf_common>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	4616      	mov	r6, r2
 8007b8a:	4699      	mov	r9, r3
 8007b8c:	688a      	ldr	r2, [r1, #8]
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfb8      	it	lt
 8007b98:	4613      	movlt	r3, r2
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b10a      	cbz	r2, 8007baa <_printf_common+0x26>
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	6033      	str	r3, [r6, #0]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	0699      	lsls	r1, r3, #26
 8007bae:	bf42      	ittt	mi
 8007bb0:	6833      	ldrmi	r3, [r6, #0]
 8007bb2:	3302      	addmi	r3, #2
 8007bb4:	6033      	strmi	r3, [r6, #0]
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	f015 0506 	ands.w	r5, r5, #6
 8007bbc:	d106      	bne.n	8007bcc <_printf_common+0x48>
 8007bbe:	f104 0a19 	add.w	sl, r4, #25
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	6832      	ldr	r2, [r6, #0]
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dc26      	bgt.n	8007c1a <_printf_common+0x96>
 8007bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd0:	1e13      	subs	r3, r2, #0
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	bf18      	it	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	0692      	lsls	r2, r2, #26
 8007bda:	d42b      	bmi.n	8007c34 <_printf_common+0xb0>
 8007bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be0:	4649      	mov	r1, r9
 8007be2:	4638      	mov	r0, r7
 8007be4:	47c0      	blx	r8
 8007be6:	3001      	adds	r0, #1
 8007be8:	d01e      	beq.n	8007c28 <_printf_common+0xa4>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	68e5      	ldr	r5, [r4, #12]
 8007bee:	6832      	ldr	r2, [r6, #0]
 8007bf0:	f003 0306 	and.w	r3, r3, #6
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	bf08      	it	eq
 8007bf8:	1aad      	subeq	r5, r5, r2
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	bf0c      	ite	eq
 8007c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c04:	2500      	movne	r5, #0
 8007c06:	4293      	cmp	r3, r2
 8007c08:	bfc4      	itt	gt
 8007c0a:	1a9b      	subgt	r3, r3, r2
 8007c0c:	18ed      	addgt	r5, r5, r3
 8007c0e:	2600      	movs	r6, #0
 8007c10:	341a      	adds	r4, #26
 8007c12:	42b5      	cmp	r5, r6
 8007c14:	d11a      	bne.n	8007c4c <_printf_common+0xc8>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e008      	b.n	8007c2c <_printf_common+0xa8>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4638      	mov	r0, r7
 8007c22:	47c0      	blx	r8
 8007c24:	3001      	adds	r0, #1
 8007c26:	d103      	bne.n	8007c30 <_printf_common+0xac>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7c6      	b.n	8007bc2 <_printf_common+0x3e>
 8007c34:	18e1      	adds	r1, r4, r3
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	2030      	movs	r0, #48	; 0x30
 8007c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c3e:	4422      	add	r2, r4
 8007c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c48:	3302      	adds	r3, #2
 8007c4a:	e7c7      	b.n	8007bdc <_printf_common+0x58>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0e6      	beq.n	8007c28 <_printf_common+0xa4>
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7d9      	b.n	8007c12 <_printf_common+0x8e>
	...

08007c60 <_printf_i>:
 8007c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	7e0f      	ldrb	r7, [r1, #24]
 8007c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c68:	2f78      	cmp	r7, #120	; 0x78
 8007c6a:	4691      	mov	r9, r2
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	469a      	mov	sl, r3
 8007c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c76:	d807      	bhi.n	8007c88 <_printf_i+0x28>
 8007c78:	2f62      	cmp	r7, #98	; 0x62
 8007c7a:	d80a      	bhi.n	8007c92 <_printf_i+0x32>
 8007c7c:	2f00      	cmp	r7, #0
 8007c7e:	f000 80d8 	beq.w	8007e32 <_printf_i+0x1d2>
 8007c82:	2f58      	cmp	r7, #88	; 0x58
 8007c84:	f000 80a3 	beq.w	8007dce <_printf_i+0x16e>
 8007c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c90:	e03a      	b.n	8007d08 <_printf_i+0xa8>
 8007c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c96:	2b15      	cmp	r3, #21
 8007c98:	d8f6      	bhi.n	8007c88 <_printf_i+0x28>
 8007c9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ca0 <_printf_i+0x40>)
 8007c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007c89 	.word	0x08007c89
 8007cac:	08007c89 	.word	0x08007c89
 8007cb0:	08007c89 	.word	0x08007c89
 8007cb4:	08007c89 	.word	0x08007c89
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007c89 	.word	0x08007c89
 8007cc0:	08007c89 	.word	0x08007c89
 8007cc4:	08007c89 	.word	0x08007c89
 8007cc8:	08007c89 	.word	0x08007c89
 8007ccc:	08007e19 	.word	0x08007e19
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007dfb 	.word	0x08007dfb
 8007cd8:	08007c89 	.word	0x08007c89
 8007cdc:	08007c89 	.word	0x08007c89
 8007ce0:	08007e3b 	.word	0x08007e3b
 8007ce4:	08007c89 	.word	0x08007c89
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007c89 	.word	0x08007c89
 8007cf0:	08007c89 	.word	0x08007c89
 8007cf4:	08007e03 	.word	0x08007e03
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0a3      	b.n	8007e54 <_printf_i+0x1f4>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	6829      	ldr	r1, [r5, #0]
 8007d10:	0606      	lsls	r6, r0, #24
 8007d12:	f101 0304 	add.w	r3, r1, #4
 8007d16:	d50a      	bpl.n	8007d2e <_printf_i+0xce>
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	da03      	bge.n	8007d28 <_printf_i+0xc8>
 8007d20:	232d      	movs	r3, #45	; 0x2d
 8007d22:	4276      	negs	r6, r6
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <_printf_i+0x244>)
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	e019      	b.n	8007d62 <_printf_i+0x102>
 8007d2e:	680e      	ldr	r6, [r1, #0]
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d36:	bf18      	it	ne
 8007d38:	b236      	sxthne	r6, r6
 8007d3a:	e7ef      	b.n	8007d1c <_printf_i+0xbc>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	6029      	str	r1, [r5, #0]
 8007d44:	0601      	lsls	r1, r0, #24
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0xec>
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0xf2>
 8007d4c:	0646      	lsls	r6, r0, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0xe8>
 8007d50:	881e      	ldrh	r6, [r3, #0]
 8007d52:	4854      	ldr	r0, [pc, #336]	; (8007ea4 <_printf_i+0x244>)
 8007d54:	2f6f      	cmp	r7, #111	; 0x6f
 8007d56:	bf0c      	ite	eq
 8007d58:	2308      	moveq	r3, #8
 8007d5a:	230a      	movne	r3, #10
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d62:	6865      	ldr	r5, [r4, #4]
 8007d64:	60a5      	str	r5, [r4, #8]
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	bfa2      	ittt	ge
 8007d6a:	6821      	ldrge	r1, [r4, #0]
 8007d6c:	f021 0104 	bicge.w	r1, r1, #4
 8007d70:	6021      	strge	r1, [r4, #0]
 8007d72:	b90e      	cbnz	r6, 8007d78 <_printf_i+0x118>
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	d04d      	beq.n	8007e14 <_printf_i+0x1b4>
 8007d78:	4615      	mov	r5, r2
 8007d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d82:	5dc7      	ldrb	r7, [r0, r7]
 8007d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d88:	4637      	mov	r7, r6
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	d9f4      	bls.n	8007d7a <_printf_i+0x11a>
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d10b      	bne.n	8007dac <_printf_i+0x14c>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	07de      	lsls	r6, r3, #31
 8007d98:	d508      	bpl.n	8007dac <_printf_i+0x14c>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	6861      	ldr	r1, [r4, #4]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	bfde      	ittt	le
 8007da2:	2330      	movle	r3, #48	; 0x30
 8007da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dac:	1b52      	subs	r2, r2, r5
 8007dae:	6122      	str	r2, [r4, #16]
 8007db0:	f8cd a000 	str.w	sl, [sp]
 8007db4:	464b      	mov	r3, r9
 8007db6:	aa03      	add	r2, sp, #12
 8007db8:	4621      	mov	r1, r4
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f7ff fee2 	bl	8007b84 <_printf_common>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d14c      	bne.n	8007e5e <_printf_i+0x1fe>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	b004      	add	sp, #16
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	4835      	ldr	r0, [pc, #212]	; (8007ea4 <_printf_i+0x244>)
 8007dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dd4:	6829      	ldr	r1, [r5, #0]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ddc:	6029      	str	r1, [r5, #0]
 8007dde:	061d      	lsls	r5, r3, #24
 8007de0:	d514      	bpl.n	8007e0c <_printf_i+0x1ac>
 8007de2:	07df      	lsls	r7, r3, #31
 8007de4:	bf44      	itt	mi
 8007de6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dea:	6023      	strmi	r3, [r4, #0]
 8007dec:	b91e      	cbnz	r6, 8007df6 <_printf_i+0x196>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	f023 0320 	bic.w	r3, r3, #32
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	2310      	movs	r3, #16
 8007df8:	e7b0      	b.n	8007d5c <_printf_i+0xfc>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f043 0320 	orr.w	r3, r3, #32
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	2378      	movs	r3, #120	; 0x78
 8007e04:	4828      	ldr	r0, [pc, #160]	; (8007ea8 <_printf_i+0x248>)
 8007e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e0a:	e7e3      	b.n	8007dd4 <_printf_i+0x174>
 8007e0c:	0659      	lsls	r1, r3, #25
 8007e0e:	bf48      	it	mi
 8007e10:	b2b6      	uxthmi	r6, r6
 8007e12:	e7e6      	b.n	8007de2 <_printf_i+0x182>
 8007e14:	4615      	mov	r5, r2
 8007e16:	e7bb      	b.n	8007d90 <_printf_i+0x130>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	6826      	ldr	r6, [r4, #0]
 8007e1c:	6961      	ldr	r1, [r4, #20]
 8007e1e:	1d18      	adds	r0, r3, #4
 8007e20:	6028      	str	r0, [r5, #0]
 8007e22:	0635      	lsls	r5, r6, #24
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0x1cc>
 8007e28:	6019      	str	r1, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0x1d2>
 8007e2c:	0670      	lsls	r0, r6, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0x1c8>
 8007e30:	8019      	strh	r1, [r3, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	6123      	str	r3, [r4, #16]
 8007e36:	4615      	mov	r5, r2
 8007e38:	e7ba      	b.n	8007db0 <_printf_i+0x150>
 8007e3a:	682b      	ldr	r3, [r5, #0]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	602a      	str	r2, [r5, #0]
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	2100      	movs	r1, #0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7f8 f9d2 	bl	80001f0 <memchr>
 8007e4c:	b108      	cbz	r0, 8007e52 <_printf_i+0x1f2>
 8007e4e:	1b40      	subs	r0, r0, r5
 8007e50:	6060      	str	r0, [r4, #4]
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	2300      	movs	r3, #0
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5c:	e7a8      	b.n	8007db0 <_printf_i+0x150>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	462a      	mov	r2, r5
 8007e62:	4649      	mov	r1, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	47d0      	blx	sl
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d0ab      	beq.n	8007dc4 <_printf_i+0x164>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	079b      	lsls	r3, r3, #30
 8007e70:	d413      	bmi.n	8007e9a <_printf_i+0x23a>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	4298      	cmp	r0, r3
 8007e78:	bfb8      	it	lt
 8007e7a:	4618      	movlt	r0, r3
 8007e7c:	e7a4      	b.n	8007dc8 <_printf_i+0x168>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4632      	mov	r2, r6
 8007e82:	4649      	mov	r1, r9
 8007e84:	4640      	mov	r0, r8
 8007e86:	47d0      	blx	sl
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d09b      	beq.n	8007dc4 <_printf_i+0x164>
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	9903      	ldr	r1, [sp, #12]
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dcf2      	bgt.n	8007e7e <_printf_i+0x21e>
 8007e98:	e7eb      	b.n	8007e72 <_printf_i+0x212>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	f104 0619 	add.w	r6, r4, #25
 8007ea0:	e7f5      	b.n	8007e8e <_printf_i+0x22e>
 8007ea2:	bf00      	nop
 8007ea4:	0800aa82 	.word	0x0800aa82
 8007ea8:	0800aa93 	.word	0x0800aa93

08007eac <iprintf>:
 8007eac:	b40f      	push	{r0, r1, r2, r3}
 8007eae:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <iprintf+0x2c>)
 8007eb0:	b513      	push	{r0, r1, r4, lr}
 8007eb2:	681c      	ldr	r4, [r3, #0]
 8007eb4:	b124      	cbz	r4, 8007ec0 <iprintf+0x14>
 8007eb6:	69a3      	ldr	r3, [r4, #24]
 8007eb8:	b913      	cbnz	r3, 8007ec0 <iprintf+0x14>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f001 f910 	bl	80090e0 <__sinit>
 8007ec0:	ab05      	add	r3, sp, #20
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	68a1      	ldr	r1, [r4, #8]
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f002 f829 	bl	8009f20 <_vfiprintf_r>
 8007ece:	b002      	add	sp, #8
 8007ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed4:	b004      	add	sp, #16
 8007ed6:	4770      	bx	lr
 8007ed8:	20000020 	.word	0x20000020

08007edc <putchar>:
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <putchar+0x28>)
 8007ede:	b513      	push	{r0, r1, r4, lr}
 8007ee0:	681c      	ldr	r4, [r3, #0]
 8007ee2:	4601      	mov	r1, r0
 8007ee4:	b134      	cbz	r4, 8007ef4 <putchar+0x18>
 8007ee6:	69a3      	ldr	r3, [r4, #24]
 8007ee8:	b923      	cbnz	r3, 8007ef4 <putchar+0x18>
 8007eea:	9001      	str	r0, [sp, #4]
 8007eec:	4620      	mov	r0, r4
 8007eee:	f001 f8f7 	bl	80090e0 <__sinit>
 8007ef2:	9901      	ldr	r1, [sp, #4]
 8007ef4:	68a2      	ldr	r2, [r4, #8]
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	b002      	add	sp, #8
 8007efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efe:	f002 b93f 	b.w	800a180 <_putc_r>
 8007f02:	bf00      	nop
 8007f04:	20000020 	.word	0x20000020

08007f08 <_puts_r>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b118      	cbz	r0, 8007f18 <_puts_r+0x10>
 8007f10:	6983      	ldr	r3, [r0, #24]
 8007f12:	b90b      	cbnz	r3, 8007f18 <_puts_r+0x10>
 8007f14:	f001 f8e4 	bl	80090e0 <__sinit>
 8007f18:	69ab      	ldr	r3, [r5, #24]
 8007f1a:	68ac      	ldr	r4, [r5, #8]
 8007f1c:	b913      	cbnz	r3, 8007f24 <_puts_r+0x1c>
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f001 f8de 	bl	80090e0 <__sinit>
 8007f24:	4b2c      	ldr	r3, [pc, #176]	; (8007fd8 <_puts_r+0xd0>)
 8007f26:	429c      	cmp	r4, r3
 8007f28:	d120      	bne.n	8007f6c <_puts_r+0x64>
 8007f2a:	686c      	ldr	r4, [r5, #4]
 8007f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f2e:	07db      	lsls	r3, r3, #31
 8007f30:	d405      	bmi.n	8007f3e <_puts_r+0x36>
 8007f32:	89a3      	ldrh	r3, [r4, #12]
 8007f34:	0598      	lsls	r0, r3, #22
 8007f36:	d402      	bmi.n	8007f3e <_puts_r+0x36>
 8007f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3a:	f001 f974 	bl	8009226 <__retarget_lock_acquire_recursive>
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	0719      	lsls	r1, r3, #28
 8007f42:	d51d      	bpl.n	8007f80 <_puts_r+0x78>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	b1db      	cbz	r3, 8007f80 <_puts_r+0x78>
 8007f48:	3e01      	subs	r6, #1
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f50:	3b01      	subs	r3, #1
 8007f52:	60a3      	str	r3, [r4, #8]
 8007f54:	bb39      	cbnz	r1, 8007fa6 <_puts_r+0x9e>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da38      	bge.n	8007fcc <_puts_r+0xc4>
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	210a      	movs	r1, #10
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 f868 	bl	8008034 <__swbuf_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d011      	beq.n	8007f8c <_puts_r+0x84>
 8007f68:	250a      	movs	r5, #10
 8007f6a:	e011      	b.n	8007f90 <_puts_r+0x88>
 8007f6c:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <_puts_r+0xd4>)
 8007f6e:	429c      	cmp	r4, r3
 8007f70:	d101      	bne.n	8007f76 <_puts_r+0x6e>
 8007f72:	68ac      	ldr	r4, [r5, #8]
 8007f74:	e7da      	b.n	8007f2c <_puts_r+0x24>
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <_puts_r+0xd8>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	bf08      	it	eq
 8007f7c:	68ec      	ldreq	r4, [r5, #12]
 8007f7e:	e7d5      	b.n	8007f2c <_puts_r+0x24>
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f8a8 	bl	80080d8 <__swsetup_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0dd      	beq.n	8007f48 <_puts_r+0x40>
 8007f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8007f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f92:	07da      	lsls	r2, r3, #31
 8007f94:	d405      	bmi.n	8007fa2 <_puts_r+0x9a>
 8007f96:	89a3      	ldrh	r3, [r4, #12]
 8007f98:	059b      	lsls	r3, r3, #22
 8007f9a:	d402      	bmi.n	8007fa2 <_puts_r+0x9a>
 8007f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9e:	f001 f943 	bl	8009228 <__retarget_lock_release_recursive>
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da04      	bge.n	8007fb4 <_puts_r+0xac>
 8007faa:	69a2      	ldr	r2, [r4, #24]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	dc06      	bgt.n	8007fbe <_puts_r+0xb6>
 8007fb0:	290a      	cmp	r1, #10
 8007fb2:	d004      	beq.n	8007fbe <_puts_r+0xb6>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	7019      	strb	r1, [r3, #0]
 8007fbc:	e7c5      	b.n	8007f4a <_puts_r+0x42>
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f000 f837 	bl	8008034 <__swbuf_r>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d1bf      	bne.n	8007f4a <_puts_r+0x42>
 8007fca:	e7df      	b.n	8007f8c <_puts_r+0x84>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	250a      	movs	r5, #10
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	6022      	str	r2, [r4, #0]
 8007fd4:	701d      	strb	r5, [r3, #0]
 8007fd6:	e7db      	b.n	8007f90 <_puts_r+0x88>
 8007fd8:	0800ab54 	.word	0x0800ab54
 8007fdc:	0800ab74 	.word	0x0800ab74
 8007fe0:	0800ab34 	.word	0x0800ab34

08007fe4 <puts>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <puts+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f7ff bf8d 	b.w	8007f08 <_puts_r>
 8007fee:	bf00      	nop
 8007ff0:	20000020 	.word	0x20000020

08007ff4 <siprintf>:
 8007ff4:	b40e      	push	{r1, r2, r3}
 8007ff6:	b500      	push	{lr}
 8007ff8:	b09c      	sub	sp, #112	; 0x70
 8007ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	9006      	str	r0, [sp, #24]
 8008000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008004:	4809      	ldr	r0, [pc, #36]	; (800802c <siprintf+0x38>)
 8008006:	9107      	str	r1, [sp, #28]
 8008008:	9104      	str	r1, [sp, #16]
 800800a:	4909      	ldr	r1, [pc, #36]	; (8008030 <siprintf+0x3c>)
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	9105      	str	r1, [sp, #20]
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	a902      	add	r1, sp, #8
 8008018:	f001 fe58 	bl	8009ccc <_svfiprintf_r>
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	b01c      	add	sp, #112	; 0x70
 8008024:	f85d eb04 	ldr.w	lr, [sp], #4
 8008028:	b003      	add	sp, #12
 800802a:	4770      	bx	lr
 800802c:	20000020 	.word	0x20000020
 8008030:	ffff0208 	.word	0xffff0208

08008034 <__swbuf_r>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	460e      	mov	r6, r1
 8008038:	4614      	mov	r4, r2
 800803a:	4605      	mov	r5, r0
 800803c:	b118      	cbz	r0, 8008046 <__swbuf_r+0x12>
 800803e:	6983      	ldr	r3, [r0, #24]
 8008040:	b90b      	cbnz	r3, 8008046 <__swbuf_r+0x12>
 8008042:	f001 f84d 	bl	80090e0 <__sinit>
 8008046:	4b21      	ldr	r3, [pc, #132]	; (80080cc <__swbuf_r+0x98>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d12b      	bne.n	80080a4 <__swbuf_r+0x70>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	69a3      	ldr	r3, [r4, #24]
 8008050:	60a3      	str	r3, [r4, #8]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	071a      	lsls	r2, r3, #28
 8008056:	d52f      	bpl.n	80080b8 <__swbuf_r+0x84>
 8008058:	6923      	ldr	r3, [r4, #16]
 800805a:	b36b      	cbz	r3, 80080b8 <__swbuf_r+0x84>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	1ac0      	subs	r0, r0, r3
 8008062:	6963      	ldr	r3, [r4, #20]
 8008064:	b2f6      	uxtb	r6, r6
 8008066:	4283      	cmp	r3, r0
 8008068:	4637      	mov	r7, r6
 800806a:	dc04      	bgt.n	8008076 <__swbuf_r+0x42>
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f000 ffa2 	bl	8008fb8 <_fflush_r>
 8008074:	bb30      	cbnz	r0, 80080c4 <__swbuf_r+0x90>
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	3b01      	subs	r3, #1
 800807a:	60a3      	str	r3, [r4, #8]
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	6022      	str	r2, [r4, #0]
 8008082:	701e      	strb	r6, [r3, #0]
 8008084:	6963      	ldr	r3, [r4, #20]
 8008086:	3001      	adds	r0, #1
 8008088:	4283      	cmp	r3, r0
 800808a:	d004      	beq.n	8008096 <__swbuf_r+0x62>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	07db      	lsls	r3, r3, #31
 8008090:	d506      	bpl.n	80080a0 <__swbuf_r+0x6c>
 8008092:	2e0a      	cmp	r6, #10
 8008094:	d104      	bne.n	80080a0 <__swbuf_r+0x6c>
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 ff8d 	bl	8008fb8 <_fflush_r>
 800809e:	b988      	cbnz	r0, 80080c4 <__swbuf_r+0x90>
 80080a0:	4638      	mov	r0, r7
 80080a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <__swbuf_r+0x9c>)
 80080a6:	429c      	cmp	r4, r3
 80080a8:	d101      	bne.n	80080ae <__swbuf_r+0x7a>
 80080aa:	68ac      	ldr	r4, [r5, #8]
 80080ac:	e7cf      	b.n	800804e <__swbuf_r+0x1a>
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <__swbuf_r+0xa0>)
 80080b0:	429c      	cmp	r4, r3
 80080b2:	bf08      	it	eq
 80080b4:	68ec      	ldreq	r4, [r5, #12]
 80080b6:	e7ca      	b.n	800804e <__swbuf_r+0x1a>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f80c 	bl	80080d8 <__swsetup_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d0cb      	beq.n	800805c <__swbuf_r+0x28>
 80080c4:	f04f 37ff 	mov.w	r7, #4294967295
 80080c8:	e7ea      	b.n	80080a0 <__swbuf_r+0x6c>
 80080ca:	bf00      	nop
 80080cc:	0800ab54 	.word	0x0800ab54
 80080d0:	0800ab74 	.word	0x0800ab74
 80080d4:	0800ab34 	.word	0x0800ab34

080080d8 <__swsetup_r>:
 80080d8:	4b32      	ldr	r3, [pc, #200]	; (80081a4 <__swsetup_r+0xcc>)
 80080da:	b570      	push	{r4, r5, r6, lr}
 80080dc:	681d      	ldr	r5, [r3, #0]
 80080de:	4606      	mov	r6, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	b125      	cbz	r5, 80080ee <__swsetup_r+0x16>
 80080e4:	69ab      	ldr	r3, [r5, #24]
 80080e6:	b913      	cbnz	r3, 80080ee <__swsetup_r+0x16>
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fff9 	bl	80090e0 <__sinit>
 80080ee:	4b2e      	ldr	r3, [pc, #184]	; (80081a8 <__swsetup_r+0xd0>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	d10f      	bne.n	8008114 <__swsetup_r+0x3c>
 80080f4:	686c      	ldr	r4, [r5, #4]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080fc:	0719      	lsls	r1, r3, #28
 80080fe:	d42c      	bmi.n	800815a <__swsetup_r+0x82>
 8008100:	06dd      	lsls	r5, r3, #27
 8008102:	d411      	bmi.n	8008128 <__swsetup_r+0x50>
 8008104:	2309      	movs	r3, #9
 8008106:	6033      	str	r3, [r6, #0]
 8008108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	f04f 30ff 	mov.w	r0, #4294967295
 8008112:	e03e      	b.n	8008192 <__swsetup_r+0xba>
 8008114:	4b25      	ldr	r3, [pc, #148]	; (80081ac <__swsetup_r+0xd4>)
 8008116:	429c      	cmp	r4, r3
 8008118:	d101      	bne.n	800811e <__swsetup_r+0x46>
 800811a:	68ac      	ldr	r4, [r5, #8]
 800811c:	e7eb      	b.n	80080f6 <__swsetup_r+0x1e>
 800811e:	4b24      	ldr	r3, [pc, #144]	; (80081b0 <__swsetup_r+0xd8>)
 8008120:	429c      	cmp	r4, r3
 8008122:	bf08      	it	eq
 8008124:	68ec      	ldreq	r4, [r5, #12]
 8008126:	e7e6      	b.n	80080f6 <__swsetup_r+0x1e>
 8008128:	0758      	lsls	r0, r3, #29
 800812a:	d512      	bpl.n	8008152 <__swsetup_r+0x7a>
 800812c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800812e:	b141      	cbz	r1, 8008142 <__swsetup_r+0x6a>
 8008130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008134:	4299      	cmp	r1, r3
 8008136:	d002      	beq.n	800813e <__swsetup_r+0x66>
 8008138:	4630      	mov	r0, r6
 800813a:	f001 fc8b 	bl	8009a54 <_free_r>
 800813e:	2300      	movs	r3, #0
 8008140:	6363      	str	r3, [r4, #52]	; 0x34
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008148:	81a3      	strh	r3, [r4, #12]
 800814a:	2300      	movs	r3, #0
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f043 0308 	orr.w	r3, r3, #8
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	b94b      	cbnz	r3, 8008172 <__swsetup_r+0x9a>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008168:	d003      	beq.n	8008172 <__swsetup_r+0x9a>
 800816a:	4621      	mov	r1, r4
 800816c:	4630      	mov	r0, r6
 800816e:	f001 f881 	bl	8009274 <__smakebuf_r>
 8008172:	89a0      	ldrh	r0, [r4, #12]
 8008174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008178:	f010 0301 	ands.w	r3, r0, #1
 800817c:	d00a      	beq.n	8008194 <__swsetup_r+0xbc>
 800817e:	2300      	movs	r3, #0
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	6963      	ldr	r3, [r4, #20]
 8008184:	425b      	negs	r3, r3
 8008186:	61a3      	str	r3, [r4, #24]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b943      	cbnz	r3, 800819e <__swsetup_r+0xc6>
 800818c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008190:	d1ba      	bne.n	8008108 <__swsetup_r+0x30>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	0781      	lsls	r1, r0, #30
 8008196:	bf58      	it	pl
 8008198:	6963      	ldrpl	r3, [r4, #20]
 800819a:	60a3      	str	r3, [r4, #8]
 800819c:	e7f4      	b.n	8008188 <__swsetup_r+0xb0>
 800819e:	2000      	movs	r0, #0
 80081a0:	e7f7      	b.n	8008192 <__swsetup_r+0xba>
 80081a2:	bf00      	nop
 80081a4:	20000020 	.word	0x20000020
 80081a8:	0800ab54 	.word	0x0800ab54
 80081ac:	0800ab74 	.word	0x0800ab74
 80081b0:	0800ab34 	.word	0x0800ab34

080081b4 <quorem>:
 80081b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	6903      	ldr	r3, [r0, #16]
 80081ba:	690c      	ldr	r4, [r1, #16]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	4607      	mov	r7, r0
 80081c0:	f2c0 8081 	blt.w	80082c6 <quorem+0x112>
 80081c4:	3c01      	subs	r4, #1
 80081c6:	f101 0814 	add.w	r8, r1, #20
 80081ca:	f100 0514 	add.w	r5, r0, #20
 80081ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d2:	9301      	str	r3, [sp, #4]
 80081d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081dc:	3301      	adds	r3, #1
 80081de:	429a      	cmp	r2, r3
 80081e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80081ec:	d331      	bcc.n	8008252 <quorem+0x9e>
 80081ee:	f04f 0e00 	mov.w	lr, #0
 80081f2:	4640      	mov	r0, r8
 80081f4:	46ac      	mov	ip, r5
 80081f6:	46f2      	mov	sl, lr
 80081f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80081fc:	b293      	uxth	r3, r2
 80081fe:	fb06 e303 	mla	r3, r6, r3, lr
 8008202:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008206:	b29b      	uxth	r3, r3
 8008208:	ebaa 0303 	sub.w	r3, sl, r3
 800820c:	f8dc a000 	ldr.w	sl, [ip]
 8008210:	0c12      	lsrs	r2, r2, #16
 8008212:	fa13 f38a 	uxtah	r3, r3, sl
 8008216:	fb06 e202 	mla	r2, r6, r2, lr
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	9b00      	ldr	r3, [sp, #0]
 800821e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008222:	b292      	uxth	r2, r2
 8008224:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800822c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008230:	4581      	cmp	r9, r0
 8008232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008236:	f84c 3b04 	str.w	r3, [ip], #4
 800823a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800823e:	d2db      	bcs.n	80081f8 <quorem+0x44>
 8008240:	f855 300b 	ldr.w	r3, [r5, fp]
 8008244:	b92b      	cbnz	r3, 8008252 <quorem+0x9e>
 8008246:	9b01      	ldr	r3, [sp, #4]
 8008248:	3b04      	subs	r3, #4
 800824a:	429d      	cmp	r5, r3
 800824c:	461a      	mov	r2, r3
 800824e:	d32e      	bcc.n	80082ae <quorem+0xfa>
 8008250:	613c      	str	r4, [r7, #16]
 8008252:	4638      	mov	r0, r7
 8008254:	f001 fae6 	bl	8009824 <__mcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	db24      	blt.n	80082a6 <quorem+0xf2>
 800825c:	3601      	adds	r6, #1
 800825e:	4628      	mov	r0, r5
 8008260:	f04f 0c00 	mov.w	ip, #0
 8008264:	f858 2b04 	ldr.w	r2, [r8], #4
 8008268:	f8d0 e000 	ldr.w	lr, [r0]
 800826c:	b293      	uxth	r3, r2
 800826e:	ebac 0303 	sub.w	r3, ip, r3
 8008272:	0c12      	lsrs	r2, r2, #16
 8008274:	fa13 f38e 	uxtah	r3, r3, lr
 8008278:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800827c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008280:	b29b      	uxth	r3, r3
 8008282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008286:	45c1      	cmp	r9, r8
 8008288:	f840 3b04 	str.w	r3, [r0], #4
 800828c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008290:	d2e8      	bcs.n	8008264 <quorem+0xb0>
 8008292:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008296:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800829a:	b922      	cbnz	r2, 80082a6 <quorem+0xf2>
 800829c:	3b04      	subs	r3, #4
 800829e:	429d      	cmp	r5, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	d30a      	bcc.n	80082ba <quorem+0x106>
 80082a4:	613c      	str	r4, [r7, #16]
 80082a6:	4630      	mov	r0, r6
 80082a8:	b003      	add	sp, #12
 80082aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ae:	6812      	ldr	r2, [r2, #0]
 80082b0:	3b04      	subs	r3, #4
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	d1cc      	bne.n	8008250 <quorem+0x9c>
 80082b6:	3c01      	subs	r4, #1
 80082b8:	e7c7      	b.n	800824a <quorem+0x96>
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	3b04      	subs	r3, #4
 80082be:	2a00      	cmp	r2, #0
 80082c0:	d1f0      	bne.n	80082a4 <quorem+0xf0>
 80082c2:	3c01      	subs	r4, #1
 80082c4:	e7eb      	b.n	800829e <quorem+0xea>
 80082c6:	2000      	movs	r0, #0
 80082c8:	e7ee      	b.n	80082a8 <quorem+0xf4>
 80082ca:	0000      	movs	r0, r0
 80082cc:	0000      	movs	r0, r0
	...

080082d0 <_dtoa_r>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	ed2d 8b04 	vpush	{d8-d9}
 80082d8:	ec57 6b10 	vmov	r6, r7, d0
 80082dc:	b093      	sub	sp, #76	; 0x4c
 80082de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082e4:	9106      	str	r1, [sp, #24]
 80082e6:	ee10 aa10 	vmov	sl, s0
 80082ea:	4604      	mov	r4, r0
 80082ec:	9209      	str	r2, [sp, #36]	; 0x24
 80082ee:	930c      	str	r3, [sp, #48]	; 0x30
 80082f0:	46bb      	mov	fp, r7
 80082f2:	b975      	cbnz	r5, 8008312 <_dtoa_r+0x42>
 80082f4:	2010      	movs	r0, #16
 80082f6:	f000 fffd 	bl	80092f4 <malloc>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6260      	str	r0, [r4, #36]	; 0x24
 80082fe:	b920      	cbnz	r0, 800830a <_dtoa_r+0x3a>
 8008300:	4ba7      	ldr	r3, [pc, #668]	; (80085a0 <_dtoa_r+0x2d0>)
 8008302:	21ea      	movs	r1, #234	; 0xea
 8008304:	48a7      	ldr	r0, [pc, #668]	; (80085a4 <_dtoa_r+0x2d4>)
 8008306:	f001 ffe9 	bl	800a2dc <__assert_func>
 800830a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800830e:	6005      	str	r5, [r0, #0]
 8008310:	60c5      	str	r5, [r0, #12]
 8008312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	b151      	cbz	r1, 800832e <_dtoa_r+0x5e>
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	604a      	str	r2, [r1, #4]
 800831c:	2301      	movs	r3, #1
 800831e:	4093      	lsls	r3, r2
 8008320:	608b      	str	r3, [r1, #8]
 8008322:	4620      	mov	r0, r4
 8008324:	f001 f83c 	bl	80093a0 <_Bfree>
 8008328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	1e3b      	subs	r3, r7, #0
 8008330:	bfaa      	itet	ge
 8008332:	2300      	movge	r3, #0
 8008334:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008338:	f8c8 3000 	strge.w	r3, [r8]
 800833c:	4b9a      	ldr	r3, [pc, #616]	; (80085a8 <_dtoa_r+0x2d8>)
 800833e:	bfbc      	itt	lt
 8008340:	2201      	movlt	r2, #1
 8008342:	f8c8 2000 	strlt.w	r2, [r8]
 8008346:	ea33 030b 	bics.w	r3, r3, fp
 800834a:	d11b      	bne.n	8008384 <_dtoa_r+0xb4>
 800834c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800834e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008352:	6013      	str	r3, [r2, #0]
 8008354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008358:	4333      	orrs	r3, r6
 800835a:	f000 8592 	beq.w	8008e82 <_dtoa_r+0xbb2>
 800835e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008360:	b963      	cbnz	r3, 800837c <_dtoa_r+0xac>
 8008362:	4b92      	ldr	r3, [pc, #584]	; (80085ac <_dtoa_r+0x2dc>)
 8008364:	e022      	b.n	80083ac <_dtoa_r+0xdc>
 8008366:	4b92      	ldr	r3, [pc, #584]	; (80085b0 <_dtoa_r+0x2e0>)
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	3308      	adds	r3, #8
 800836c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	9801      	ldr	r0, [sp, #4]
 8008372:	b013      	add	sp, #76	; 0x4c
 8008374:	ecbd 8b04 	vpop	{d8-d9}
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	4b8b      	ldr	r3, [pc, #556]	; (80085ac <_dtoa_r+0x2dc>)
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	3303      	adds	r3, #3
 8008382:	e7f3      	b.n	800836c <_dtoa_r+0x9c>
 8008384:	2200      	movs	r2, #0
 8008386:	2300      	movs	r3, #0
 8008388:	4650      	mov	r0, sl
 800838a:	4659      	mov	r1, fp
 800838c:	f7f8 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008390:	ec4b ab19 	vmov	d9, sl, fp
 8008394:	4680      	mov	r8, r0
 8008396:	b158      	cbz	r0, 80083b0 <_dtoa_r+0xe0>
 8008398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800839a:	2301      	movs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
 800839e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 856b 	beq.w	8008e7c <_dtoa_r+0xbac>
 80083a6:	4883      	ldr	r0, [pc, #524]	; (80085b4 <_dtoa_r+0x2e4>)
 80083a8:	6018      	str	r0, [r3, #0]
 80083aa:	1e43      	subs	r3, r0, #1
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	e7df      	b.n	8008370 <_dtoa_r+0xa0>
 80083b0:	ec4b ab10 	vmov	d0, sl, fp
 80083b4:	aa10      	add	r2, sp, #64	; 0x40
 80083b6:	a911      	add	r1, sp, #68	; 0x44
 80083b8:	4620      	mov	r0, r4
 80083ba:	f001 fad9 	bl	8009970 <__d2b>
 80083be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083c2:	ee08 0a10 	vmov	s16, r0
 80083c6:	2d00      	cmp	r5, #0
 80083c8:	f000 8084 	beq.w	80084d4 <_dtoa_r+0x204>
 80083cc:	ee19 3a90 	vmov	r3, s19
 80083d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083d8:	4656      	mov	r6, sl
 80083da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083e6:	4b74      	ldr	r3, [pc, #464]	; (80085b8 <_dtoa_r+0x2e8>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 ff53 	bl	8000298 <__aeabi_dsub>
 80083f2:	a365      	add	r3, pc, #404	; (adr r3, 8008588 <_dtoa_r+0x2b8>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f7f8 f906 	bl	8000608 <__aeabi_dmul>
 80083fc:	a364      	add	r3, pc, #400	; (adr r3, 8008590 <_dtoa_r+0x2c0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f7 ff4b 	bl	800029c <__adddf3>
 8008406:	4606      	mov	r6, r0
 8008408:	4628      	mov	r0, r5
 800840a:	460f      	mov	r7, r1
 800840c:	f7f8 f892 	bl	8000534 <__aeabi_i2d>
 8008410:	a361      	add	r3, pc, #388	; (adr r3, 8008598 <_dtoa_r+0x2c8>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	f7f8 f8f7 	bl	8000608 <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7f7 ff3b 	bl	800029c <__adddf3>
 8008426:	4606      	mov	r6, r0
 8008428:	460f      	mov	r7, r1
 800842a:	f7f8 fb9d 	bl	8000b68 <__aeabi_d2iz>
 800842e:	2200      	movs	r2, #0
 8008430:	9000      	str	r0, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	4630      	mov	r0, r6
 8008436:	4639      	mov	r1, r7
 8008438:	f7f8 fb58 	bl	8000aec <__aeabi_dcmplt>
 800843c:	b150      	cbz	r0, 8008454 <_dtoa_r+0x184>
 800843e:	9800      	ldr	r0, [sp, #0]
 8008440:	f7f8 f878 	bl	8000534 <__aeabi_i2d>
 8008444:	4632      	mov	r2, r6
 8008446:	463b      	mov	r3, r7
 8008448:	f7f8 fb46 	bl	8000ad8 <__aeabi_dcmpeq>
 800844c:	b910      	cbnz	r0, 8008454 <_dtoa_r+0x184>
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	2b16      	cmp	r3, #22
 8008458:	d85a      	bhi.n	8008510 <_dtoa_r+0x240>
 800845a:	9a00      	ldr	r2, [sp, #0]
 800845c:	4b57      	ldr	r3, [pc, #348]	; (80085bc <_dtoa_r+0x2ec>)
 800845e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008466:	ec51 0b19 	vmov	r0, r1, d9
 800846a:	f7f8 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	d050      	beq.n	8008514 <_dtoa_r+0x244>
 8008472:	9b00      	ldr	r3, [sp, #0]
 8008474:	3b01      	subs	r3, #1
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	930b      	str	r3, [sp, #44]	; 0x2c
 800847c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847e:	1b5d      	subs	r5, r3, r5
 8008480:	1e6b      	subs	r3, r5, #1
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	bf45      	ittet	mi
 8008486:	f1c5 0301 	rsbmi	r3, r5, #1
 800848a:	9304      	strmi	r3, [sp, #16]
 800848c:	2300      	movpl	r3, #0
 800848e:	2300      	movmi	r3, #0
 8008490:	bf4c      	ite	mi
 8008492:	9305      	strmi	r3, [sp, #20]
 8008494:	9304      	strpl	r3, [sp, #16]
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	db3d      	blt.n	8008518 <_dtoa_r+0x248>
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	9a00      	ldr	r2, [sp, #0]
 80084a0:	920a      	str	r2, [sp, #40]	; 0x28
 80084a2:	4413      	add	r3, r2
 80084a4:	9305      	str	r3, [sp, #20]
 80084a6:	2300      	movs	r3, #0
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	9b06      	ldr	r3, [sp, #24]
 80084ac:	2b09      	cmp	r3, #9
 80084ae:	f200 8089 	bhi.w	80085c4 <_dtoa_r+0x2f4>
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	bfc4      	itt	gt
 80084b6:	3b04      	subgt	r3, #4
 80084b8:	9306      	strgt	r3, [sp, #24]
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	f1a3 0302 	sub.w	r3, r3, #2
 80084c0:	bfcc      	ite	gt
 80084c2:	2500      	movgt	r5, #0
 80084c4:	2501      	movle	r5, #1
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	f200 8087 	bhi.w	80085da <_dtoa_r+0x30a>
 80084cc:	e8df f003 	tbb	[pc, r3]
 80084d0:	59383a2d 	.word	0x59383a2d
 80084d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084d8:	441d      	add	r5, r3
 80084da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084de:	2b20      	cmp	r3, #32
 80084e0:	bfc1      	itttt	gt
 80084e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80084ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80084f2:	bfda      	itte	le
 80084f4:	f1c3 0320 	rsble	r3, r3, #32
 80084f8:	fa06 f003 	lslle.w	r0, r6, r3
 80084fc:	4318      	orrgt	r0, r3
 80084fe:	f7f8 f809 	bl	8000514 <__aeabi_ui2d>
 8008502:	2301      	movs	r3, #1
 8008504:	4606      	mov	r6, r0
 8008506:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800850a:	3d01      	subs	r5, #1
 800850c:	930e      	str	r3, [sp, #56]	; 0x38
 800850e:	e76a      	b.n	80083e6 <_dtoa_r+0x116>
 8008510:	2301      	movs	r3, #1
 8008512:	e7b2      	b.n	800847a <_dtoa_r+0x1aa>
 8008514:	900b      	str	r0, [sp, #44]	; 0x2c
 8008516:	e7b1      	b.n	800847c <_dtoa_r+0x1ac>
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	9a00      	ldr	r2, [sp, #0]
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	9304      	str	r3, [sp, #16]
 8008520:	4253      	negs	r3, r2
 8008522:	9307      	str	r3, [sp, #28]
 8008524:	2300      	movs	r3, #0
 8008526:	930a      	str	r3, [sp, #40]	; 0x28
 8008528:	e7bf      	b.n	80084aa <_dtoa_r+0x1da>
 800852a:	2300      	movs	r3, #0
 800852c:	9308      	str	r3, [sp, #32]
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	dc55      	bgt.n	80085e0 <_dtoa_r+0x310>
 8008534:	2301      	movs	r3, #1
 8008536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800853a:	461a      	mov	r2, r3
 800853c:	9209      	str	r2, [sp, #36]	; 0x24
 800853e:	e00c      	b.n	800855a <_dtoa_r+0x28a>
 8008540:	2301      	movs	r3, #1
 8008542:	e7f3      	b.n	800852c <_dtoa_r+0x25c>
 8008544:	2300      	movs	r3, #0
 8008546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008548:	9308      	str	r3, [sp, #32]
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	4413      	add	r3, r2
 800854e:	9302      	str	r3, [sp, #8]
 8008550:	3301      	adds	r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	bfb8      	it	lt
 8008558:	2301      	movlt	r3, #1
 800855a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800855c:	2200      	movs	r2, #0
 800855e:	6042      	str	r2, [r0, #4]
 8008560:	2204      	movs	r2, #4
 8008562:	f102 0614 	add.w	r6, r2, #20
 8008566:	429e      	cmp	r6, r3
 8008568:	6841      	ldr	r1, [r0, #4]
 800856a:	d93d      	bls.n	80085e8 <_dtoa_r+0x318>
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fed7 	bl	8009320 <_Balloc>
 8008572:	9001      	str	r0, [sp, #4]
 8008574:	2800      	cmp	r0, #0
 8008576:	d13b      	bne.n	80085f0 <_dtoa_r+0x320>
 8008578:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <_dtoa_r+0x2f0>)
 800857a:	4602      	mov	r2, r0
 800857c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008580:	e6c0      	b.n	8008304 <_dtoa_r+0x34>
 8008582:	2301      	movs	r3, #1
 8008584:	e7df      	b.n	8008546 <_dtoa_r+0x276>
 8008586:	bf00      	nop
 8008588:	636f4361 	.word	0x636f4361
 800858c:	3fd287a7 	.word	0x3fd287a7
 8008590:	8b60c8b3 	.word	0x8b60c8b3
 8008594:	3fc68a28 	.word	0x3fc68a28
 8008598:	509f79fb 	.word	0x509f79fb
 800859c:	3fd34413 	.word	0x3fd34413
 80085a0:	0800aab1 	.word	0x0800aab1
 80085a4:	0800aac8 	.word	0x0800aac8
 80085a8:	7ff00000 	.word	0x7ff00000
 80085ac:	0800aaad 	.word	0x0800aaad
 80085b0:	0800aaa4 	.word	0x0800aaa4
 80085b4:	0800aa81 	.word	0x0800aa81
 80085b8:	3ff80000 	.word	0x3ff80000
 80085bc:	0800ac18 	.word	0x0800ac18
 80085c0:	0800ab23 	.word	0x0800ab23
 80085c4:	2501      	movs	r5, #1
 80085c6:	2300      	movs	r3, #0
 80085c8:	9306      	str	r3, [sp, #24]
 80085ca:	9508      	str	r5, [sp, #32]
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2312      	movs	r3, #18
 80085d8:	e7b0      	b.n	800853c <_dtoa_r+0x26c>
 80085da:	2301      	movs	r3, #1
 80085dc:	9308      	str	r3, [sp, #32]
 80085de:	e7f5      	b.n	80085cc <_dtoa_r+0x2fc>
 80085e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085e6:	e7b8      	b.n	800855a <_dtoa_r+0x28a>
 80085e8:	3101      	adds	r1, #1
 80085ea:	6041      	str	r1, [r0, #4]
 80085ec:	0052      	lsls	r2, r2, #1
 80085ee:	e7b8      	b.n	8008562 <_dtoa_r+0x292>
 80085f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085f2:	9a01      	ldr	r2, [sp, #4]
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	2b0e      	cmp	r3, #14
 80085fa:	f200 809d 	bhi.w	8008738 <_dtoa_r+0x468>
 80085fe:	2d00      	cmp	r5, #0
 8008600:	f000 809a 	beq.w	8008738 <_dtoa_r+0x468>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd32      	ble.n	8008670 <_dtoa_r+0x3a0>
 800860a:	4ab7      	ldr	r2, [pc, #732]	; (80088e8 <_dtoa_r+0x618>)
 800860c:	f003 030f 	and.w	r3, r3, #15
 8008610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	05d8      	lsls	r0, r3, #23
 800861c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008620:	d516      	bpl.n	8008650 <_dtoa_r+0x380>
 8008622:	4bb2      	ldr	r3, [pc, #712]	; (80088ec <_dtoa_r+0x61c>)
 8008624:	ec51 0b19 	vmov	r0, r1, d9
 8008628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800862c:	f7f8 f916 	bl	800085c <__aeabi_ddiv>
 8008630:	f007 070f 	and.w	r7, r7, #15
 8008634:	4682      	mov	sl, r0
 8008636:	468b      	mov	fp, r1
 8008638:	2503      	movs	r5, #3
 800863a:	4eac      	ldr	r6, [pc, #688]	; (80088ec <_dtoa_r+0x61c>)
 800863c:	b957      	cbnz	r7, 8008654 <_dtoa_r+0x384>
 800863e:	4642      	mov	r2, r8
 8008640:	464b      	mov	r3, r9
 8008642:	4650      	mov	r0, sl
 8008644:	4659      	mov	r1, fp
 8008646:	f7f8 f909 	bl	800085c <__aeabi_ddiv>
 800864a:	4682      	mov	sl, r0
 800864c:	468b      	mov	fp, r1
 800864e:	e028      	b.n	80086a2 <_dtoa_r+0x3d2>
 8008650:	2502      	movs	r5, #2
 8008652:	e7f2      	b.n	800863a <_dtoa_r+0x36a>
 8008654:	07f9      	lsls	r1, r7, #31
 8008656:	d508      	bpl.n	800866a <_dtoa_r+0x39a>
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008660:	f7f7 ffd2 	bl	8000608 <__aeabi_dmul>
 8008664:	3501      	adds	r5, #1
 8008666:	4680      	mov	r8, r0
 8008668:	4689      	mov	r9, r1
 800866a:	107f      	asrs	r7, r7, #1
 800866c:	3608      	adds	r6, #8
 800866e:	e7e5      	b.n	800863c <_dtoa_r+0x36c>
 8008670:	f000 809b 	beq.w	80087aa <_dtoa_r+0x4da>
 8008674:	9b00      	ldr	r3, [sp, #0]
 8008676:	4f9d      	ldr	r7, [pc, #628]	; (80088ec <_dtoa_r+0x61c>)
 8008678:	425e      	negs	r6, r3
 800867a:	4b9b      	ldr	r3, [pc, #620]	; (80088e8 <_dtoa_r+0x618>)
 800867c:	f006 020f 	and.w	r2, r6, #15
 8008680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	ec51 0b19 	vmov	r0, r1, d9
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	1136      	asrs	r6, r6, #4
 8008692:	4682      	mov	sl, r0
 8008694:	468b      	mov	fp, r1
 8008696:	2300      	movs	r3, #0
 8008698:	2502      	movs	r5, #2
 800869a:	2e00      	cmp	r6, #0
 800869c:	d17a      	bne.n	8008794 <_dtoa_r+0x4c4>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1d3      	bne.n	800864a <_dtoa_r+0x37a>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8082 	beq.w	80087ae <_dtoa_r+0x4de>
 80086aa:	4b91      	ldr	r3, [pc, #580]	; (80088f0 <_dtoa_r+0x620>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4650      	mov	r0, sl
 80086b0:	4659      	mov	r1, fp
 80086b2:	f7f8 fa1b 	bl	8000aec <__aeabi_dcmplt>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d079      	beq.n	80087ae <_dtoa_r+0x4de>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d076      	beq.n	80087ae <_dtoa_r+0x4de>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd36      	ble.n	8008734 <_dtoa_r+0x464>
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	4650      	mov	r0, sl
 80086ca:	4659      	mov	r1, fp
 80086cc:	1e5f      	subs	r7, r3, #1
 80086ce:	2200      	movs	r2, #0
 80086d0:	4b88      	ldr	r3, [pc, #544]	; (80088f4 <_dtoa_r+0x624>)
 80086d2:	f7f7 ff99 	bl	8000608 <__aeabi_dmul>
 80086d6:	9e02      	ldr	r6, [sp, #8]
 80086d8:	4682      	mov	sl, r0
 80086da:	468b      	mov	fp, r1
 80086dc:	3501      	adds	r5, #1
 80086de:	4628      	mov	r0, r5
 80086e0:	f7f7 ff28 	bl	8000534 <__aeabi_i2d>
 80086e4:	4652      	mov	r2, sl
 80086e6:	465b      	mov	r3, fp
 80086e8:	f7f7 ff8e 	bl	8000608 <__aeabi_dmul>
 80086ec:	4b82      	ldr	r3, [pc, #520]	; (80088f8 <_dtoa_r+0x628>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	f7f7 fdd4 	bl	800029c <__adddf3>
 80086f4:	46d0      	mov	r8, sl
 80086f6:	46d9      	mov	r9, fp
 80086f8:	4682      	mov	sl, r0
 80086fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086fe:	2e00      	cmp	r6, #0
 8008700:	d158      	bne.n	80087b4 <_dtoa_r+0x4e4>
 8008702:	4b7e      	ldr	r3, [pc, #504]	; (80088fc <_dtoa_r+0x62c>)
 8008704:	2200      	movs	r2, #0
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f7 fdc5 	bl	8000298 <__aeabi_dsub>
 800870e:	4652      	mov	r2, sl
 8008710:	465b      	mov	r3, fp
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	f7f8 fa07 	bl	8000b28 <__aeabi_dcmpgt>
 800871a:	2800      	cmp	r0, #0
 800871c:	f040 8295 	bne.w	8008c4a <_dtoa_r+0x97a>
 8008720:	4652      	mov	r2, sl
 8008722:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008726:	4640      	mov	r0, r8
 8008728:	4649      	mov	r1, r9
 800872a:	f7f8 f9df 	bl	8000aec <__aeabi_dcmplt>
 800872e:	2800      	cmp	r0, #0
 8008730:	f040 8289 	bne.w	8008c46 <_dtoa_r+0x976>
 8008734:	ec5b ab19 	vmov	sl, fp, d9
 8008738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800873a:	2b00      	cmp	r3, #0
 800873c:	f2c0 8148 	blt.w	80089d0 <_dtoa_r+0x700>
 8008740:	9a00      	ldr	r2, [sp, #0]
 8008742:	2a0e      	cmp	r2, #14
 8008744:	f300 8144 	bgt.w	80089d0 <_dtoa_r+0x700>
 8008748:	4b67      	ldr	r3, [pc, #412]	; (80088e8 <_dtoa_r+0x618>)
 800874a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	f280 80d5 	bge.w	8008904 <_dtoa_r+0x634>
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f300 80d1 	bgt.w	8008904 <_dtoa_r+0x634>
 8008762:	f040 826f 	bne.w	8008c44 <_dtoa_r+0x974>
 8008766:	4b65      	ldr	r3, [pc, #404]	; (80088fc <_dtoa_r+0x62c>)
 8008768:	2200      	movs	r2, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 ff4b 	bl	8000608 <__aeabi_dmul>
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	f7f8 f9cd 	bl	8000b14 <__aeabi_dcmpge>
 800877a:	9e03      	ldr	r6, [sp, #12]
 800877c:	4637      	mov	r7, r6
 800877e:	2800      	cmp	r0, #0
 8008780:	f040 8245 	bne.w	8008c0e <_dtoa_r+0x93e>
 8008784:	9d01      	ldr	r5, [sp, #4]
 8008786:	2331      	movs	r3, #49	; 0x31
 8008788:	f805 3b01 	strb.w	r3, [r5], #1
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	3301      	adds	r3, #1
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	e240      	b.n	8008c16 <_dtoa_r+0x946>
 8008794:	07f2      	lsls	r2, r6, #31
 8008796:	d505      	bpl.n	80087a4 <_dtoa_r+0x4d4>
 8008798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879c:	f7f7 ff34 	bl	8000608 <__aeabi_dmul>
 80087a0:	3501      	adds	r5, #1
 80087a2:	2301      	movs	r3, #1
 80087a4:	1076      	asrs	r6, r6, #1
 80087a6:	3708      	adds	r7, #8
 80087a8:	e777      	b.n	800869a <_dtoa_r+0x3ca>
 80087aa:	2502      	movs	r5, #2
 80087ac:	e779      	b.n	80086a2 <_dtoa_r+0x3d2>
 80087ae:	9f00      	ldr	r7, [sp, #0]
 80087b0:	9e03      	ldr	r6, [sp, #12]
 80087b2:	e794      	b.n	80086de <_dtoa_r+0x40e>
 80087b4:	9901      	ldr	r1, [sp, #4]
 80087b6:	4b4c      	ldr	r3, [pc, #304]	; (80088e8 <_dtoa_r+0x618>)
 80087b8:	4431      	add	r1, r6
 80087ba:	910d      	str	r1, [sp, #52]	; 0x34
 80087bc:	9908      	ldr	r1, [sp, #32]
 80087be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087c6:	2900      	cmp	r1, #0
 80087c8:	d043      	beq.n	8008852 <_dtoa_r+0x582>
 80087ca:	494d      	ldr	r1, [pc, #308]	; (8008900 <_dtoa_r+0x630>)
 80087cc:	2000      	movs	r0, #0
 80087ce:	f7f8 f845 	bl	800085c <__aeabi_ddiv>
 80087d2:	4652      	mov	r2, sl
 80087d4:	465b      	mov	r3, fp
 80087d6:	f7f7 fd5f 	bl	8000298 <__aeabi_dsub>
 80087da:	9d01      	ldr	r5, [sp, #4]
 80087dc:	4682      	mov	sl, r0
 80087de:	468b      	mov	fp, r1
 80087e0:	4649      	mov	r1, r9
 80087e2:	4640      	mov	r0, r8
 80087e4:	f7f8 f9c0 	bl	8000b68 <__aeabi_d2iz>
 80087e8:	4606      	mov	r6, r0
 80087ea:	f7f7 fea3 	bl	8000534 <__aeabi_i2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 fd4f 	bl	8000298 <__aeabi_dsub>
 80087fa:	3630      	adds	r6, #48	; 0x30
 80087fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008800:	4652      	mov	r2, sl
 8008802:	465b      	mov	r3, fp
 8008804:	4680      	mov	r8, r0
 8008806:	4689      	mov	r9, r1
 8008808:	f7f8 f970 	bl	8000aec <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	d163      	bne.n	80088d8 <_dtoa_r+0x608>
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	4936      	ldr	r1, [pc, #216]	; (80088f0 <_dtoa_r+0x620>)
 8008816:	2000      	movs	r0, #0
 8008818:	f7f7 fd3e 	bl	8000298 <__aeabi_dsub>
 800881c:	4652      	mov	r2, sl
 800881e:	465b      	mov	r3, fp
 8008820:	f7f8 f964 	bl	8000aec <__aeabi_dcmplt>
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 80b5 	bne.w	8008994 <_dtoa_r+0x6c4>
 800882a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882c:	429d      	cmp	r5, r3
 800882e:	d081      	beq.n	8008734 <_dtoa_r+0x464>
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <_dtoa_r+0x624>)
 8008832:	2200      	movs	r2, #0
 8008834:	4650      	mov	r0, sl
 8008836:	4659      	mov	r1, fp
 8008838:	f7f7 fee6 	bl	8000608 <__aeabi_dmul>
 800883c:	4b2d      	ldr	r3, [pc, #180]	; (80088f4 <_dtoa_r+0x624>)
 800883e:	4682      	mov	sl, r0
 8008840:	468b      	mov	fp, r1
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	2200      	movs	r2, #0
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	e7c6      	b.n	80087e0 <_dtoa_r+0x510>
 8008852:	4650      	mov	r0, sl
 8008854:	4659      	mov	r1, fp
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885c:	9d01      	ldr	r5, [sp, #4]
 800885e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008860:	4682      	mov	sl, r0
 8008862:	468b      	mov	fp, r1
 8008864:	4649      	mov	r1, r9
 8008866:	4640      	mov	r0, r8
 8008868:	f7f8 f97e 	bl	8000b68 <__aeabi_d2iz>
 800886c:	4606      	mov	r6, r0
 800886e:	f7f7 fe61 	bl	8000534 <__aeabi_i2d>
 8008872:	3630      	adds	r6, #48	; 0x30
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f7 fd0c 	bl	8000298 <__aeabi_dsub>
 8008880:	f805 6b01 	strb.w	r6, [r5], #1
 8008884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008886:	429d      	cmp	r5, r3
 8008888:	4680      	mov	r8, r0
 800888a:	4689      	mov	r9, r1
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	d124      	bne.n	80088dc <_dtoa_r+0x60c>
 8008892:	4b1b      	ldr	r3, [pc, #108]	; (8008900 <_dtoa_r+0x630>)
 8008894:	4650      	mov	r0, sl
 8008896:	4659      	mov	r1, fp
 8008898:	f7f7 fd00 	bl	800029c <__adddf3>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4640      	mov	r0, r8
 80088a2:	4649      	mov	r1, r9
 80088a4:	f7f8 f940 	bl	8000b28 <__aeabi_dcmpgt>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d173      	bne.n	8008994 <_dtoa_r+0x6c4>
 80088ac:	4652      	mov	r2, sl
 80088ae:	465b      	mov	r3, fp
 80088b0:	4913      	ldr	r1, [pc, #76]	; (8008900 <_dtoa_r+0x630>)
 80088b2:	2000      	movs	r0, #0
 80088b4:	f7f7 fcf0 	bl	8000298 <__aeabi_dsub>
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	4640      	mov	r0, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f7f8 f914 	bl	8000aec <__aeabi_dcmplt>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f43f af35 	beq.w	8008734 <_dtoa_r+0x464>
 80088ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088cc:	1e6b      	subs	r3, r5, #1
 80088ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80088d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088d4:	2b30      	cmp	r3, #48	; 0x30
 80088d6:	d0f8      	beq.n	80088ca <_dtoa_r+0x5fa>
 80088d8:	9700      	str	r7, [sp, #0]
 80088da:	e049      	b.n	8008970 <_dtoa_r+0x6a0>
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <_dtoa_r+0x624>)
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	e7bd      	b.n	8008864 <_dtoa_r+0x594>
 80088e8:	0800ac18 	.word	0x0800ac18
 80088ec:	0800abf0 	.word	0x0800abf0
 80088f0:	3ff00000 	.word	0x3ff00000
 80088f4:	40240000 	.word	0x40240000
 80088f8:	401c0000 	.word	0x401c0000
 80088fc:	40140000 	.word	0x40140000
 8008900:	3fe00000 	.word	0x3fe00000
 8008904:	9d01      	ldr	r5, [sp, #4]
 8008906:	4656      	mov	r6, sl
 8008908:	465f      	mov	r7, fp
 800890a:	4642      	mov	r2, r8
 800890c:	464b      	mov	r3, r9
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 ffa3 	bl	800085c <__aeabi_ddiv>
 8008916:	f7f8 f927 	bl	8000b68 <__aeabi_d2iz>
 800891a:	4682      	mov	sl, r0
 800891c:	f7f7 fe0a 	bl	8000534 <__aeabi_i2d>
 8008920:	4642      	mov	r2, r8
 8008922:	464b      	mov	r3, r9
 8008924:	f7f7 fe70 	bl	8000608 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008934:	f7f7 fcb0 	bl	8000298 <__aeabi_dsub>
 8008938:	f805 6b01 	strb.w	r6, [r5], #1
 800893c:	9e01      	ldr	r6, [sp, #4]
 800893e:	9f03      	ldr	r7, [sp, #12]
 8008940:	1bae      	subs	r6, r5, r6
 8008942:	42b7      	cmp	r7, r6
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	d135      	bne.n	80089b6 <_dtoa_r+0x6e6>
 800894a:	f7f7 fca7 	bl	800029c <__adddf3>
 800894e:	4642      	mov	r2, r8
 8008950:	464b      	mov	r3, r9
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f8 f8e7 	bl	8000b28 <__aeabi_dcmpgt>
 800895a:	b9d0      	cbnz	r0, 8008992 <_dtoa_r+0x6c2>
 800895c:	4642      	mov	r2, r8
 800895e:	464b      	mov	r3, r9
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f8 f8b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008968:	b110      	cbz	r0, 8008970 <_dtoa_r+0x6a0>
 800896a:	f01a 0f01 	tst.w	sl, #1
 800896e:	d110      	bne.n	8008992 <_dtoa_r+0x6c2>
 8008970:	4620      	mov	r0, r4
 8008972:	ee18 1a10 	vmov	r1, s16
 8008976:	f000 fd13 	bl	80093a0 <_Bfree>
 800897a:	2300      	movs	r3, #0
 800897c:	9800      	ldr	r0, [sp, #0]
 800897e:	702b      	strb	r3, [r5, #0]
 8008980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008982:	3001      	adds	r0, #1
 8008984:	6018      	str	r0, [r3, #0]
 8008986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008988:	2b00      	cmp	r3, #0
 800898a:	f43f acf1 	beq.w	8008370 <_dtoa_r+0xa0>
 800898e:	601d      	str	r5, [r3, #0]
 8008990:	e4ee      	b.n	8008370 <_dtoa_r+0xa0>
 8008992:	9f00      	ldr	r7, [sp, #0]
 8008994:	462b      	mov	r3, r5
 8008996:	461d      	mov	r5, r3
 8008998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800899c:	2a39      	cmp	r2, #57	; 0x39
 800899e:	d106      	bne.n	80089ae <_dtoa_r+0x6de>
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d1f7      	bne.n	8008996 <_dtoa_r+0x6c6>
 80089a6:	9901      	ldr	r1, [sp, #4]
 80089a8:	2230      	movs	r2, #48	; 0x30
 80089aa:	3701      	adds	r7, #1
 80089ac:	700a      	strb	r2, [r1, #0]
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	3201      	adds	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e790      	b.n	80088d8 <_dtoa_r+0x608>
 80089b6:	4ba6      	ldr	r3, [pc, #664]	; (8008c50 <_dtoa_r+0x980>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	f7f7 fe25 	bl	8000608 <__aeabi_dmul>
 80089be:	2200      	movs	r2, #0
 80089c0:	2300      	movs	r3, #0
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	f7f8 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d09d      	beq.n	800890a <_dtoa_r+0x63a>
 80089ce:	e7cf      	b.n	8008970 <_dtoa_r+0x6a0>
 80089d0:	9a08      	ldr	r2, [sp, #32]
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	f000 80d7 	beq.w	8008b86 <_dtoa_r+0x8b6>
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	2a01      	cmp	r2, #1
 80089dc:	f300 80ba 	bgt.w	8008b54 <_dtoa_r+0x884>
 80089e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	f000 80b2 	beq.w	8008b4c <_dtoa_r+0x87c>
 80089e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089ec:	9e07      	ldr	r6, [sp, #28]
 80089ee:	9d04      	ldr	r5, [sp, #16]
 80089f0:	9a04      	ldr	r2, [sp, #16]
 80089f2:	441a      	add	r2, r3
 80089f4:	9204      	str	r2, [sp, #16]
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	2101      	movs	r1, #1
 80089fa:	441a      	add	r2, r3
 80089fc:	4620      	mov	r0, r4
 80089fe:	9205      	str	r2, [sp, #20]
 8008a00:	f000 fd86 	bl	8009510 <__i2b>
 8008a04:	4607      	mov	r7, r0
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	dd0c      	ble.n	8008a24 <_dtoa_r+0x754>
 8008a0a:	9b05      	ldr	r3, [sp, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	dd09      	ble.n	8008a24 <_dtoa_r+0x754>
 8008a10:	42ab      	cmp	r3, r5
 8008a12:	9a04      	ldr	r2, [sp, #16]
 8008a14:	bfa8      	it	ge
 8008a16:	462b      	movge	r3, r5
 8008a18:	1ad2      	subs	r2, r2, r3
 8008a1a:	9204      	str	r2, [sp, #16]
 8008a1c:	9a05      	ldr	r2, [sp, #20]
 8008a1e:	1aed      	subs	r5, r5, r3
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	9305      	str	r3, [sp, #20]
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	b31b      	cbz	r3, 8008a70 <_dtoa_r+0x7a0>
 8008a28:	9b08      	ldr	r3, [sp, #32]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80af 	beq.w	8008b8e <_dtoa_r+0x8be>
 8008a30:	2e00      	cmp	r6, #0
 8008a32:	dd13      	ble.n	8008a5c <_dtoa_r+0x78c>
 8008a34:	4639      	mov	r1, r7
 8008a36:	4632      	mov	r2, r6
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fe29 	bl	8009690 <__pow5mult>
 8008a3e:	ee18 2a10 	vmov	r2, s16
 8008a42:	4601      	mov	r1, r0
 8008a44:	4607      	mov	r7, r0
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fd78 	bl	800953c <__multiply>
 8008a4c:	ee18 1a10 	vmov	r1, s16
 8008a50:	4680      	mov	r8, r0
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fca4 	bl	80093a0 <_Bfree>
 8008a58:	ee08 8a10 	vmov	s16, r8
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	1b9a      	subs	r2, r3, r6
 8008a60:	d006      	beq.n	8008a70 <_dtoa_r+0x7a0>
 8008a62:	ee18 1a10 	vmov	r1, s16
 8008a66:	4620      	mov	r0, r4
 8008a68:	f000 fe12 	bl	8009690 <__pow5mult>
 8008a6c:	ee08 0a10 	vmov	s16, r0
 8008a70:	2101      	movs	r1, #1
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fd4c 	bl	8009510 <__i2b>
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	f340 8088 	ble.w	8008b92 <_dtoa_r+0x8c2>
 8008a82:	461a      	mov	r2, r3
 8008a84:	4601      	mov	r1, r0
 8008a86:	4620      	mov	r0, r4
 8008a88:	f000 fe02 	bl	8009690 <__pow5mult>
 8008a8c:	9b06      	ldr	r3, [sp, #24]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	4606      	mov	r6, r0
 8008a92:	f340 8081 	ble.w	8008b98 <_dtoa_r+0x8c8>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	6933      	ldr	r3, [r6, #16]
 8008a9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008aa0:	6918      	ldr	r0, [r3, #16]
 8008aa2:	f000 fce5 	bl	8009470 <__hi0bits>
 8008aa6:	f1c0 0020 	rsb	r0, r0, #32
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	4418      	add	r0, r3
 8008aae:	f010 001f 	ands.w	r0, r0, #31
 8008ab2:	f000 8092 	beq.w	8008bda <_dtoa_r+0x90a>
 8008ab6:	f1c0 0320 	rsb	r3, r0, #32
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	f340 808a 	ble.w	8008bd4 <_dtoa_r+0x904>
 8008ac0:	f1c0 001c 	rsb	r0, r0, #28
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	4403      	add	r3, r0
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	4403      	add	r3, r0
 8008ace:	4405      	add	r5, r0
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	9b04      	ldr	r3, [sp, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dd07      	ble.n	8008ae8 <_dtoa_r+0x818>
 8008ad8:	ee18 1a10 	vmov	r1, s16
 8008adc:	461a      	mov	r2, r3
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f000 fe30 	bl	8009744 <__lshift>
 8008ae4:	ee08 0a10 	vmov	s16, r0
 8008ae8:	9b05      	ldr	r3, [sp, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd05      	ble.n	8008afa <_dtoa_r+0x82a>
 8008aee:	4631      	mov	r1, r6
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fe26 	bl	8009744 <__lshift>
 8008af8:	4606      	mov	r6, r0
 8008afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d06e      	beq.n	8008bde <_dtoa_r+0x90e>
 8008b00:	ee18 0a10 	vmov	r0, s16
 8008b04:	4631      	mov	r1, r6
 8008b06:	f000 fe8d 	bl	8009824 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	da67      	bge.n	8008bde <_dtoa_r+0x90e>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	220a      	movs	r2, #10
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fc61 	bl	80093e4 <__multadd>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	ee08 0a10 	vmov	s16, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 81b1 	beq.w	8008e90 <_dtoa_r+0xbc0>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4639      	mov	r1, r7
 8008b32:	220a      	movs	r2, #10
 8008b34:	4620      	mov	r0, r4
 8008b36:	f000 fc55 	bl	80093e4 <__multadd>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	4607      	mov	r7, r0
 8008b40:	f300 808e 	bgt.w	8008c60 <_dtoa_r+0x990>
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc51      	bgt.n	8008bee <_dtoa_r+0x91e>
 8008b4a:	e089      	b.n	8008c60 <_dtoa_r+0x990>
 8008b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b52:	e74b      	b.n	80089ec <_dtoa_r+0x71c>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1e5e      	subs	r6, r3, #1
 8008b58:	9b07      	ldr	r3, [sp, #28]
 8008b5a:	42b3      	cmp	r3, r6
 8008b5c:	bfbf      	itttt	lt
 8008b5e:	9b07      	ldrlt	r3, [sp, #28]
 8008b60:	9607      	strlt	r6, [sp, #28]
 8008b62:	1af2      	sublt	r2, r6, r3
 8008b64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b66:	bfb6      	itet	lt
 8008b68:	189b      	addlt	r3, r3, r2
 8008b6a:	1b9e      	subge	r6, r3, r6
 8008b6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	bfb8      	it	lt
 8008b72:	2600      	movlt	r6, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	bfb7      	itett	lt
 8008b78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b80:	1a9d      	sublt	r5, r3, r2
 8008b82:	2300      	movlt	r3, #0
 8008b84:	e734      	b.n	80089f0 <_dtoa_r+0x720>
 8008b86:	9e07      	ldr	r6, [sp, #28]
 8008b88:	9d04      	ldr	r5, [sp, #16]
 8008b8a:	9f08      	ldr	r7, [sp, #32]
 8008b8c:	e73b      	b.n	8008a06 <_dtoa_r+0x736>
 8008b8e:	9a07      	ldr	r2, [sp, #28]
 8008b90:	e767      	b.n	8008a62 <_dtoa_r+0x792>
 8008b92:	9b06      	ldr	r3, [sp, #24]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	dc18      	bgt.n	8008bca <_dtoa_r+0x8fa>
 8008b98:	f1ba 0f00 	cmp.w	sl, #0
 8008b9c:	d115      	bne.n	8008bca <_dtoa_r+0x8fa>
 8008b9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ba2:	b993      	cbnz	r3, 8008bca <_dtoa_r+0x8fa>
 8008ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ba8:	0d1b      	lsrs	r3, r3, #20
 8008baa:	051b      	lsls	r3, r3, #20
 8008bac:	b183      	cbz	r3, 8008bd0 <_dtoa_r+0x900>
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	9304      	str	r3, [sp, #16]
 8008bb4:	9b05      	ldr	r3, [sp, #20]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	9305      	str	r3, [sp, #20]
 8008bba:	f04f 0801 	mov.w	r8, #1
 8008bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f47f af6a 	bne.w	8008a9a <_dtoa_r+0x7ca>
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	e76f      	b.n	8008aaa <_dtoa_r+0x7da>
 8008bca:	f04f 0800 	mov.w	r8, #0
 8008bce:	e7f6      	b.n	8008bbe <_dtoa_r+0x8ee>
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	e7f4      	b.n	8008bbe <_dtoa_r+0x8ee>
 8008bd4:	f43f af7d 	beq.w	8008ad2 <_dtoa_r+0x802>
 8008bd8:	4618      	mov	r0, r3
 8008bda:	301c      	adds	r0, #28
 8008bdc:	e772      	b.n	8008ac4 <_dtoa_r+0x7f4>
 8008bde:	9b03      	ldr	r3, [sp, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc37      	bgt.n	8008c54 <_dtoa_r+0x984>
 8008be4:	9b06      	ldr	r3, [sp, #24]
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	dd34      	ble.n	8008c54 <_dtoa_r+0x984>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	9b02      	ldr	r3, [sp, #8]
 8008bf0:	b96b      	cbnz	r3, 8008c0e <_dtoa_r+0x93e>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fbf4 	bl	80093e4 <__multadd>
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	4606      	mov	r6, r0
 8008c00:	ee18 0a10 	vmov	r0, s16
 8008c04:	f000 fe0e 	bl	8009824 <__mcmp>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f73f adbb 	bgt.w	8008784 <_dtoa_r+0x4b4>
 8008c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c10:	9d01      	ldr	r5, [sp, #4]
 8008c12:	43db      	mvns	r3, r3
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f000 fbbf 	bl	80093a0 <_Bfree>
 8008c22:	2f00      	cmp	r7, #0
 8008c24:	f43f aea4 	beq.w	8008970 <_dtoa_r+0x6a0>
 8008c28:	f1b8 0f00 	cmp.w	r8, #0
 8008c2c:	d005      	beq.n	8008c3a <_dtoa_r+0x96a>
 8008c2e:	45b8      	cmp	r8, r7
 8008c30:	d003      	beq.n	8008c3a <_dtoa_r+0x96a>
 8008c32:	4641      	mov	r1, r8
 8008c34:	4620      	mov	r0, r4
 8008c36:	f000 fbb3 	bl	80093a0 <_Bfree>
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fbaf 	bl	80093a0 <_Bfree>
 8008c42:	e695      	b.n	8008970 <_dtoa_r+0x6a0>
 8008c44:	2600      	movs	r6, #0
 8008c46:	4637      	mov	r7, r6
 8008c48:	e7e1      	b.n	8008c0e <_dtoa_r+0x93e>
 8008c4a:	9700      	str	r7, [sp, #0]
 8008c4c:	4637      	mov	r7, r6
 8008c4e:	e599      	b.n	8008784 <_dtoa_r+0x4b4>
 8008c50:	40240000 	.word	0x40240000
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 80ca 	beq.w	8008df0 <_dtoa_r+0xb20>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	9302      	str	r3, [sp, #8]
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	dd05      	ble.n	8008c70 <_dtoa_r+0x9a0>
 8008c64:	4639      	mov	r1, r7
 8008c66:	462a      	mov	r2, r5
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 fd6b 	bl	8009744 <__lshift>
 8008c6e:	4607      	mov	r7, r0
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	d05b      	beq.n	8008d2e <_dtoa_r+0xa5e>
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 fb51 	bl	8009320 <_Balloc>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b928      	cbnz	r0, 8008c8e <_dtoa_r+0x9be>
 8008c82:	4b87      	ldr	r3, [pc, #540]	; (8008ea0 <_dtoa_r+0xbd0>)
 8008c84:	4602      	mov	r2, r0
 8008c86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c8a:	f7ff bb3b 	b.w	8008304 <_dtoa_r+0x34>
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	3202      	adds	r2, #2
 8008c92:	0092      	lsls	r2, r2, #2
 8008c94:	f107 010c 	add.w	r1, r7, #12
 8008c98:	300c      	adds	r0, #12
 8008c9a:	f000 fb33 	bl	8009304 <memcpy>
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fd4e 	bl	8009744 <__lshift>
 8008ca8:	9b01      	ldr	r3, [sp, #4]
 8008caa:	f103 0901 	add.w	r9, r3, #1
 8008cae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	f00a 0301 	and.w	r3, sl, #1
 8008cba:	46b8      	mov	r8, r7
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	ee18 0a10 	vmov	r0, s16
 8008cc6:	f7ff fa75 	bl	80081b4 <quorem>
 8008cca:	4641      	mov	r1, r8
 8008ccc:	9002      	str	r0, [sp, #8]
 8008cce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cd2:	ee18 0a10 	vmov	r0, s16
 8008cd6:	f000 fda5 	bl	8009824 <__mcmp>
 8008cda:	463a      	mov	r2, r7
 8008cdc:	9003      	str	r0, [sp, #12]
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	f000 fdbb 	bl	800985c <__mdiff>
 8008ce6:	68c2      	ldr	r2, [r0, #12]
 8008ce8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cec:	4605      	mov	r5, r0
 8008cee:	bb02      	cbnz	r2, 8008d32 <_dtoa_r+0xa62>
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	ee18 0a10 	vmov	r0, s16
 8008cf6:	f000 fd95 	bl	8009824 <__mcmp>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4620      	mov	r0, r4
 8008d00:	9207      	str	r2, [sp, #28]
 8008d02:	f000 fb4d 	bl	80093a0 <_Bfree>
 8008d06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d0a:	ea43 0102 	orr.w	r1, r3, r2
 8008d0e:	9b04      	ldr	r3, [sp, #16]
 8008d10:	430b      	orrs	r3, r1
 8008d12:	464d      	mov	r5, r9
 8008d14:	d10f      	bne.n	8008d36 <_dtoa_r+0xa66>
 8008d16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d1a:	d02a      	beq.n	8008d72 <_dtoa_r+0xaa2>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	dd02      	ble.n	8008d28 <_dtoa_r+0xa58>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d28:	f88b a000 	strb.w	sl, [fp]
 8008d2c:	e775      	b.n	8008c1a <_dtoa_r+0x94a>
 8008d2e:	4638      	mov	r0, r7
 8008d30:	e7ba      	b.n	8008ca8 <_dtoa_r+0x9d8>
 8008d32:	2201      	movs	r2, #1
 8008d34:	e7e2      	b.n	8008cfc <_dtoa_r+0xa2c>
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	db04      	blt.n	8008d46 <_dtoa_r+0xa76>
 8008d3c:	9906      	ldr	r1, [sp, #24]
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	9904      	ldr	r1, [sp, #16]
 8008d42:	430b      	orrs	r3, r1
 8008d44:	d122      	bne.n	8008d8c <_dtoa_r+0xabc>
 8008d46:	2a00      	cmp	r2, #0
 8008d48:	ddee      	ble.n	8008d28 <_dtoa_r+0xa58>
 8008d4a:	ee18 1a10 	vmov	r1, s16
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fcf7 	bl	8009744 <__lshift>
 8008d56:	4631      	mov	r1, r6
 8008d58:	ee08 0a10 	vmov	s16, r0
 8008d5c:	f000 fd62 	bl	8009824 <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dc03      	bgt.n	8008d6c <_dtoa_r+0xa9c>
 8008d64:	d1e0      	bne.n	8008d28 <_dtoa_r+0xa58>
 8008d66:	f01a 0f01 	tst.w	sl, #1
 8008d6a:	d0dd      	beq.n	8008d28 <_dtoa_r+0xa58>
 8008d6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d70:	d1d7      	bne.n	8008d22 <_dtoa_r+0xa52>
 8008d72:	2339      	movs	r3, #57	; 0x39
 8008d74:	f88b 3000 	strb.w	r3, [fp]
 8008d78:	462b      	mov	r3, r5
 8008d7a:	461d      	mov	r5, r3
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d82:	2a39      	cmp	r2, #57	; 0x39
 8008d84:	d071      	beq.n	8008e6a <_dtoa_r+0xb9a>
 8008d86:	3201      	adds	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	e746      	b.n	8008c1a <_dtoa_r+0x94a>
 8008d8c:	2a00      	cmp	r2, #0
 8008d8e:	dd07      	ble.n	8008da0 <_dtoa_r+0xad0>
 8008d90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d94:	d0ed      	beq.n	8008d72 <_dtoa_r+0xaa2>
 8008d96:	f10a 0301 	add.w	r3, sl, #1
 8008d9a:	f88b 3000 	strb.w	r3, [fp]
 8008d9e:	e73c      	b.n	8008c1a <_dtoa_r+0x94a>
 8008da0:	9b05      	ldr	r3, [sp, #20]
 8008da2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008da6:	4599      	cmp	r9, r3
 8008da8:	d047      	beq.n	8008e3a <_dtoa_r+0xb6a>
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	2300      	movs	r3, #0
 8008db0:	220a      	movs	r2, #10
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fb16 	bl	80093e4 <__multadd>
 8008db8:	45b8      	cmp	r8, r7
 8008dba:	ee08 0a10 	vmov	s16, r0
 8008dbe:	f04f 0300 	mov.w	r3, #0
 8008dc2:	f04f 020a 	mov.w	r2, #10
 8008dc6:	4641      	mov	r1, r8
 8008dc8:	4620      	mov	r0, r4
 8008dca:	d106      	bne.n	8008dda <_dtoa_r+0xb0a>
 8008dcc:	f000 fb0a 	bl	80093e4 <__multadd>
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	f109 0901 	add.w	r9, r9, #1
 8008dd8:	e772      	b.n	8008cc0 <_dtoa_r+0x9f0>
 8008dda:	f000 fb03 	bl	80093e4 <__multadd>
 8008dde:	4639      	mov	r1, r7
 8008de0:	4680      	mov	r8, r0
 8008de2:	2300      	movs	r3, #0
 8008de4:	220a      	movs	r2, #10
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fafc 	bl	80093e4 <__multadd>
 8008dec:	4607      	mov	r7, r0
 8008dee:	e7f1      	b.n	8008dd4 <_dtoa_r+0xb04>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	9302      	str	r3, [sp, #8]
 8008df4:	9d01      	ldr	r5, [sp, #4]
 8008df6:	ee18 0a10 	vmov	r0, s16
 8008dfa:	4631      	mov	r1, r6
 8008dfc:	f7ff f9da 	bl	80081b4 <quorem>
 8008e00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	f805 ab01 	strb.w	sl, [r5], #1
 8008e0a:	1aea      	subs	r2, r5, r3
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	dd09      	ble.n	8008e26 <_dtoa_r+0xb56>
 8008e12:	ee18 1a10 	vmov	r1, s16
 8008e16:	2300      	movs	r3, #0
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fae2 	bl	80093e4 <__multadd>
 8008e20:	ee08 0a10 	vmov	s16, r0
 8008e24:	e7e7      	b.n	8008df6 <_dtoa_r+0xb26>
 8008e26:	9b02      	ldr	r3, [sp, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfc8      	it	gt
 8008e2c:	461d      	movgt	r5, r3
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	bfd8      	it	le
 8008e32:	2501      	movle	r5, #1
 8008e34:	441d      	add	r5, r3
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	ee18 1a10 	vmov	r1, s16
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fc7f 	bl	8009744 <__lshift>
 8008e46:	4631      	mov	r1, r6
 8008e48:	ee08 0a10 	vmov	s16, r0
 8008e4c:	f000 fcea 	bl	8009824 <__mcmp>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	dc91      	bgt.n	8008d78 <_dtoa_r+0xaa8>
 8008e54:	d102      	bne.n	8008e5c <_dtoa_r+0xb8c>
 8008e56:	f01a 0f01 	tst.w	sl, #1
 8008e5a:	d18d      	bne.n	8008d78 <_dtoa_r+0xaa8>
 8008e5c:	462b      	mov	r3, r5
 8008e5e:	461d      	mov	r5, r3
 8008e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e64:	2a30      	cmp	r2, #48	; 0x30
 8008e66:	d0fa      	beq.n	8008e5e <_dtoa_r+0xb8e>
 8008e68:	e6d7      	b.n	8008c1a <_dtoa_r+0x94a>
 8008e6a:	9a01      	ldr	r2, [sp, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d184      	bne.n	8008d7a <_dtoa_r+0xaaa>
 8008e70:	9b00      	ldr	r3, [sp, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	2331      	movs	r3, #49	; 0x31
 8008e78:	7013      	strb	r3, [r2, #0]
 8008e7a:	e6ce      	b.n	8008c1a <_dtoa_r+0x94a>
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <_dtoa_r+0xbd4>)
 8008e7e:	f7ff ba95 	b.w	80083ac <_dtoa_r+0xdc>
 8008e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f47f aa6e 	bne.w	8008366 <_dtoa_r+0x96>
 8008e8a:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <_dtoa_r+0xbd8>)
 8008e8c:	f7ff ba8e 	b.w	80083ac <_dtoa_r+0xdc>
 8008e90:	9b02      	ldr	r3, [sp, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	dcae      	bgt.n	8008df4 <_dtoa_r+0xb24>
 8008e96:	9b06      	ldr	r3, [sp, #24]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	f73f aea8 	bgt.w	8008bee <_dtoa_r+0x91e>
 8008e9e:	e7a9      	b.n	8008df4 <_dtoa_r+0xb24>
 8008ea0:	0800ab23 	.word	0x0800ab23
 8008ea4:	0800aa80 	.word	0x0800aa80
 8008ea8:	0800aaa4 	.word	0x0800aaa4

08008eac <__sflush_r>:
 8008eac:	898a      	ldrh	r2, [r1, #12]
 8008eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	0710      	lsls	r0, r2, #28
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	d458      	bmi.n	8008f6c <__sflush_r+0xc0>
 8008eba:	684b      	ldr	r3, [r1, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dc05      	bgt.n	8008ecc <__sflush_r+0x20>
 8008ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dc02      	bgt.n	8008ecc <__sflush_r+0x20>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ece:	2e00      	cmp	r6, #0
 8008ed0:	d0f9      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ed8:	682f      	ldr	r7, [r5, #0]
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	d032      	beq.n	8008f44 <__sflush_r+0x98>
 8008ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	075a      	lsls	r2, r3, #29
 8008ee4:	d505      	bpl.n	8008ef2 <__sflush_r+0x46>
 8008ee6:	6863      	ldr	r3, [r4, #4]
 8008ee8:	1ac0      	subs	r0, r0, r3
 8008eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008eec:	b10b      	cbz	r3, 8008ef2 <__sflush_r+0x46>
 8008eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ef0:	1ac0      	subs	r0, r0, r3
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ef8:	6a21      	ldr	r1, [r4, #32]
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b0      	blx	r6
 8008efe:	1c43      	adds	r3, r0, #1
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	d106      	bne.n	8008f12 <__sflush_r+0x66>
 8008f04:	6829      	ldr	r1, [r5, #0]
 8008f06:	291d      	cmp	r1, #29
 8008f08:	d82c      	bhi.n	8008f64 <__sflush_r+0xb8>
 8008f0a:	4a2a      	ldr	r2, [pc, #168]	; (8008fb4 <__sflush_r+0x108>)
 8008f0c:	40ca      	lsrs	r2, r1
 8008f0e:	07d6      	lsls	r6, r2, #31
 8008f10:	d528      	bpl.n	8008f64 <__sflush_r+0xb8>
 8008f12:	2200      	movs	r2, #0
 8008f14:	6062      	str	r2, [r4, #4]
 8008f16:	04d9      	lsls	r1, r3, #19
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	6022      	str	r2, [r4, #0]
 8008f1c:	d504      	bpl.n	8008f28 <__sflush_r+0x7c>
 8008f1e:	1c42      	adds	r2, r0, #1
 8008f20:	d101      	bne.n	8008f26 <__sflush_r+0x7a>
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	b903      	cbnz	r3, 8008f28 <__sflush_r+0x7c>
 8008f26:	6560      	str	r0, [r4, #84]	; 0x54
 8008f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f2a:	602f      	str	r7, [r5, #0]
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d0ca      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f34:	4299      	cmp	r1, r3
 8008f36:	d002      	beq.n	8008f3e <__sflush_r+0x92>
 8008f38:	4628      	mov	r0, r5
 8008f3a:	f000 fd8b 	bl	8009a54 <_free_r>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	6360      	str	r0, [r4, #52]	; 0x34
 8008f42:	e7c1      	b.n	8008ec8 <__sflush_r+0x1c>
 8008f44:	6a21      	ldr	r1, [r4, #32]
 8008f46:	2301      	movs	r3, #1
 8008f48:	4628      	mov	r0, r5
 8008f4a:	47b0      	blx	r6
 8008f4c:	1c41      	adds	r1, r0, #1
 8008f4e:	d1c7      	bne.n	8008ee0 <__sflush_r+0x34>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0c4      	beq.n	8008ee0 <__sflush_r+0x34>
 8008f56:	2b1d      	cmp	r3, #29
 8008f58:	d001      	beq.n	8008f5e <__sflush_r+0xb2>
 8008f5a:	2b16      	cmp	r3, #22
 8008f5c:	d101      	bne.n	8008f62 <__sflush_r+0xb6>
 8008f5e:	602f      	str	r7, [r5, #0]
 8008f60:	e7b1      	b.n	8008ec6 <__sflush_r+0x1a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	e7ad      	b.n	8008ec8 <__sflush_r+0x1c>
 8008f6c:	690f      	ldr	r7, [r1, #16]
 8008f6e:	2f00      	cmp	r7, #0
 8008f70:	d0a9      	beq.n	8008ec6 <__sflush_r+0x1a>
 8008f72:	0793      	lsls	r3, r2, #30
 8008f74:	680e      	ldr	r6, [r1, #0]
 8008f76:	bf08      	it	eq
 8008f78:	694b      	ldreq	r3, [r1, #20]
 8008f7a:	600f      	str	r7, [r1, #0]
 8008f7c:	bf18      	it	ne
 8008f7e:	2300      	movne	r3, #0
 8008f80:	eba6 0807 	sub.w	r8, r6, r7
 8008f84:	608b      	str	r3, [r1, #8]
 8008f86:	f1b8 0f00 	cmp.w	r8, #0
 8008f8a:	dd9c      	ble.n	8008ec6 <__sflush_r+0x1a>
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f90:	4643      	mov	r3, r8
 8008f92:	463a      	mov	r2, r7
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b0      	blx	r6
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	dc06      	bgt.n	8008faa <__sflush_r+0xfe>
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa8:	e78e      	b.n	8008ec8 <__sflush_r+0x1c>
 8008faa:	4407      	add	r7, r0
 8008fac:	eba8 0800 	sub.w	r8, r8, r0
 8008fb0:	e7e9      	b.n	8008f86 <__sflush_r+0xda>
 8008fb2:	bf00      	nop
 8008fb4:	20400001 	.word	0x20400001

08008fb8 <_fflush_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	690b      	ldr	r3, [r1, #16]
 8008fbc:	4605      	mov	r5, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b913      	cbnz	r3, 8008fc8 <_fflush_r+0x10>
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	b118      	cbz	r0, 8008fd2 <_fflush_r+0x1a>
 8008fca:	6983      	ldr	r3, [r0, #24]
 8008fcc:	b90b      	cbnz	r3, 8008fd2 <_fflush_r+0x1a>
 8008fce:	f000 f887 	bl	80090e0 <__sinit>
 8008fd2:	4b14      	ldr	r3, [pc, #80]	; (8009024 <_fflush_r+0x6c>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	d11b      	bne.n	8009010 <_fflush_r+0x58>
 8008fd8:	686c      	ldr	r4, [r5, #4]
 8008fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0ef      	beq.n	8008fc2 <_fflush_r+0xa>
 8008fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fe4:	07d0      	lsls	r0, r2, #31
 8008fe6:	d404      	bmi.n	8008ff2 <_fflush_r+0x3a>
 8008fe8:	0599      	lsls	r1, r3, #22
 8008fea:	d402      	bmi.n	8008ff2 <_fflush_r+0x3a>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f000 f91a 	bl	8009226 <__retarget_lock_acquire_recursive>
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f7ff ff59 	bl	8008eac <__sflush_r>
 8008ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ffc:	07da      	lsls	r2, r3, #31
 8008ffe:	4605      	mov	r5, r0
 8009000:	d4e0      	bmi.n	8008fc4 <_fflush_r+0xc>
 8009002:	89a3      	ldrh	r3, [r4, #12]
 8009004:	059b      	lsls	r3, r3, #22
 8009006:	d4dd      	bmi.n	8008fc4 <_fflush_r+0xc>
 8009008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900a:	f000 f90d 	bl	8009228 <__retarget_lock_release_recursive>
 800900e:	e7d9      	b.n	8008fc4 <_fflush_r+0xc>
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <_fflush_r+0x70>)
 8009012:	429c      	cmp	r4, r3
 8009014:	d101      	bne.n	800901a <_fflush_r+0x62>
 8009016:	68ac      	ldr	r4, [r5, #8]
 8009018:	e7df      	b.n	8008fda <_fflush_r+0x22>
 800901a:	4b04      	ldr	r3, [pc, #16]	; (800902c <_fflush_r+0x74>)
 800901c:	429c      	cmp	r4, r3
 800901e:	bf08      	it	eq
 8009020:	68ec      	ldreq	r4, [r5, #12]
 8009022:	e7da      	b.n	8008fda <_fflush_r+0x22>
 8009024:	0800ab54 	.word	0x0800ab54
 8009028:	0800ab74 	.word	0x0800ab74
 800902c:	0800ab34 	.word	0x0800ab34

08009030 <std>:
 8009030:	2300      	movs	r3, #0
 8009032:	b510      	push	{r4, lr}
 8009034:	4604      	mov	r4, r0
 8009036:	e9c0 3300 	strd	r3, r3, [r0]
 800903a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800903e:	6083      	str	r3, [r0, #8]
 8009040:	8181      	strh	r1, [r0, #12]
 8009042:	6643      	str	r3, [r0, #100]	; 0x64
 8009044:	81c2      	strh	r2, [r0, #14]
 8009046:	6183      	str	r3, [r0, #24]
 8009048:	4619      	mov	r1, r3
 800904a:	2208      	movs	r2, #8
 800904c:	305c      	adds	r0, #92	; 0x5c
 800904e:	f7fe fabb 	bl	80075c8 <memset>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <std+0x38>)
 8009054:	6263      	str	r3, [r4, #36]	; 0x24
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <std+0x3c>)
 8009058:	62a3      	str	r3, [r4, #40]	; 0x28
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <std+0x40>)
 800905c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std+0x44>)
 8009060:	6224      	str	r4, [r4, #32]
 8009062:	6323      	str	r3, [r4, #48]	; 0x30
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	0800a231 	.word	0x0800a231
 800906c:	0800a253 	.word	0x0800a253
 8009070:	0800a28b 	.word	0x0800a28b
 8009074:	0800a2af 	.word	0x0800a2af

08009078 <_cleanup_r>:
 8009078:	4901      	ldr	r1, [pc, #4]	; (8009080 <_cleanup_r+0x8>)
 800907a:	f000 b8af 	b.w	80091dc <_fwalk_reent>
 800907e:	bf00      	nop
 8009080:	08008fb9 	.word	0x08008fb9

08009084 <__sfmoreglue>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	2268      	movs	r2, #104	; 0x68
 8009088:	1e4d      	subs	r5, r1, #1
 800908a:	4355      	muls	r5, r2
 800908c:	460e      	mov	r6, r1
 800908e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009092:	f000 fd4b 	bl	8009b2c <_malloc_r>
 8009096:	4604      	mov	r4, r0
 8009098:	b140      	cbz	r0, 80090ac <__sfmoreglue+0x28>
 800909a:	2100      	movs	r1, #0
 800909c:	e9c0 1600 	strd	r1, r6, [r0]
 80090a0:	300c      	adds	r0, #12
 80090a2:	60a0      	str	r0, [r4, #8]
 80090a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090a8:	f7fe fa8e 	bl	80075c8 <memset>
 80090ac:	4620      	mov	r0, r4
 80090ae:	bd70      	pop	{r4, r5, r6, pc}

080090b0 <__sfp_lock_acquire>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__sfp_lock_acquire+0x8>)
 80090b2:	f000 b8b8 	b.w	8009226 <__retarget_lock_acquire_recursive>
 80090b6:	bf00      	nop
 80090b8:	2000040d 	.word	0x2000040d

080090bc <__sfp_lock_release>:
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <__sfp_lock_release+0x8>)
 80090be:	f000 b8b3 	b.w	8009228 <__retarget_lock_release_recursive>
 80090c2:	bf00      	nop
 80090c4:	2000040d 	.word	0x2000040d

080090c8 <__sinit_lock_acquire>:
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <__sinit_lock_acquire+0x8>)
 80090ca:	f000 b8ac 	b.w	8009226 <__retarget_lock_acquire_recursive>
 80090ce:	bf00      	nop
 80090d0:	2000040e 	.word	0x2000040e

080090d4 <__sinit_lock_release>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__sinit_lock_release+0x8>)
 80090d6:	f000 b8a7 	b.w	8009228 <__retarget_lock_release_recursive>
 80090da:	bf00      	nop
 80090dc:	2000040e 	.word	0x2000040e

080090e0 <__sinit>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	4604      	mov	r4, r0
 80090e4:	f7ff fff0 	bl	80090c8 <__sinit_lock_acquire>
 80090e8:	69a3      	ldr	r3, [r4, #24]
 80090ea:	b11b      	cbz	r3, 80090f4 <__sinit+0x14>
 80090ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f0:	f7ff bff0 	b.w	80090d4 <__sinit_lock_release>
 80090f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090f8:	6523      	str	r3, [r4, #80]	; 0x50
 80090fa:	4b13      	ldr	r3, [pc, #76]	; (8009148 <__sinit+0x68>)
 80090fc:	4a13      	ldr	r2, [pc, #76]	; (800914c <__sinit+0x6c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	62a2      	str	r2, [r4, #40]	; 0x28
 8009102:	42a3      	cmp	r3, r4
 8009104:	bf04      	itt	eq
 8009106:	2301      	moveq	r3, #1
 8009108:	61a3      	streq	r3, [r4, #24]
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f820 	bl	8009150 <__sfp>
 8009110:	6060      	str	r0, [r4, #4]
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f81c 	bl	8009150 <__sfp>
 8009118:	60a0      	str	r0, [r4, #8]
 800911a:	4620      	mov	r0, r4
 800911c:	f000 f818 	bl	8009150 <__sfp>
 8009120:	2200      	movs	r2, #0
 8009122:	60e0      	str	r0, [r4, #12]
 8009124:	2104      	movs	r1, #4
 8009126:	6860      	ldr	r0, [r4, #4]
 8009128:	f7ff ff82 	bl	8009030 <std>
 800912c:	68a0      	ldr	r0, [r4, #8]
 800912e:	2201      	movs	r2, #1
 8009130:	2109      	movs	r1, #9
 8009132:	f7ff ff7d 	bl	8009030 <std>
 8009136:	68e0      	ldr	r0, [r4, #12]
 8009138:	2202      	movs	r2, #2
 800913a:	2112      	movs	r1, #18
 800913c:	f7ff ff78 	bl	8009030 <std>
 8009140:	2301      	movs	r3, #1
 8009142:	61a3      	str	r3, [r4, #24]
 8009144:	e7d2      	b.n	80090ec <__sinit+0xc>
 8009146:	bf00      	nop
 8009148:	0800aa6c 	.word	0x0800aa6c
 800914c:	08009079 	.word	0x08009079

08009150 <__sfp>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	4607      	mov	r7, r0
 8009154:	f7ff ffac 	bl	80090b0 <__sfp_lock_acquire>
 8009158:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <__sfp+0x84>)
 800915a:	681e      	ldr	r6, [r3, #0]
 800915c:	69b3      	ldr	r3, [r6, #24]
 800915e:	b913      	cbnz	r3, 8009166 <__sfp+0x16>
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff ffbd 	bl	80090e0 <__sinit>
 8009166:	3648      	adds	r6, #72	; 0x48
 8009168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800916c:	3b01      	subs	r3, #1
 800916e:	d503      	bpl.n	8009178 <__sfp+0x28>
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	b30b      	cbz	r3, 80091b8 <__sfp+0x68>
 8009174:	6836      	ldr	r6, [r6, #0]
 8009176:	e7f7      	b.n	8009168 <__sfp+0x18>
 8009178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800917c:	b9d5      	cbnz	r5, 80091b4 <__sfp+0x64>
 800917e:	4b16      	ldr	r3, [pc, #88]	; (80091d8 <__sfp+0x88>)
 8009180:	60e3      	str	r3, [r4, #12]
 8009182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009186:	6665      	str	r5, [r4, #100]	; 0x64
 8009188:	f000 f84c 	bl	8009224 <__retarget_lock_init_recursive>
 800918c:	f7ff ff96 	bl	80090bc <__sfp_lock_release>
 8009190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009198:	6025      	str	r5, [r4, #0]
 800919a:	61a5      	str	r5, [r4, #24]
 800919c:	2208      	movs	r2, #8
 800919e:	4629      	mov	r1, r5
 80091a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091a4:	f7fe fa10 	bl	80075c8 <memset>
 80091a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091b0:	4620      	mov	r0, r4
 80091b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b4:	3468      	adds	r4, #104	; 0x68
 80091b6:	e7d9      	b.n	800916c <__sfp+0x1c>
 80091b8:	2104      	movs	r1, #4
 80091ba:	4638      	mov	r0, r7
 80091bc:	f7ff ff62 	bl	8009084 <__sfmoreglue>
 80091c0:	4604      	mov	r4, r0
 80091c2:	6030      	str	r0, [r6, #0]
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d1d5      	bne.n	8009174 <__sfp+0x24>
 80091c8:	f7ff ff78 	bl	80090bc <__sfp_lock_release>
 80091cc:	230c      	movs	r3, #12
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	e7ee      	b.n	80091b0 <__sfp+0x60>
 80091d2:	bf00      	nop
 80091d4:	0800aa6c 	.word	0x0800aa6c
 80091d8:	ffff0001 	.word	0xffff0001

080091dc <_fwalk_reent>:
 80091dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e0:	4606      	mov	r6, r0
 80091e2:	4688      	mov	r8, r1
 80091e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091e8:	2700      	movs	r7, #0
 80091ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ee:	f1b9 0901 	subs.w	r9, r9, #1
 80091f2:	d505      	bpl.n	8009200 <_fwalk_reent+0x24>
 80091f4:	6824      	ldr	r4, [r4, #0]
 80091f6:	2c00      	cmp	r4, #0
 80091f8:	d1f7      	bne.n	80091ea <_fwalk_reent+0xe>
 80091fa:	4638      	mov	r0, r7
 80091fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009200:	89ab      	ldrh	r3, [r5, #12]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d907      	bls.n	8009216 <_fwalk_reent+0x3a>
 8009206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800920a:	3301      	adds	r3, #1
 800920c:	d003      	beq.n	8009216 <_fwalk_reent+0x3a>
 800920e:	4629      	mov	r1, r5
 8009210:	4630      	mov	r0, r6
 8009212:	47c0      	blx	r8
 8009214:	4307      	orrs	r7, r0
 8009216:	3568      	adds	r5, #104	; 0x68
 8009218:	e7e9      	b.n	80091ee <_fwalk_reent+0x12>
	...

0800921c <_localeconv_r>:
 800921c:	4800      	ldr	r0, [pc, #0]	; (8009220 <_localeconv_r+0x4>)
 800921e:	4770      	bx	lr
 8009220:	20000174 	.word	0x20000174

08009224 <__retarget_lock_init_recursive>:
 8009224:	4770      	bx	lr

08009226 <__retarget_lock_acquire_recursive>:
 8009226:	4770      	bx	lr

08009228 <__retarget_lock_release_recursive>:
 8009228:	4770      	bx	lr

0800922a <__swhatbuf_r>:
 800922a:	b570      	push	{r4, r5, r6, lr}
 800922c:	460e      	mov	r6, r1
 800922e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009232:	2900      	cmp	r1, #0
 8009234:	b096      	sub	sp, #88	; 0x58
 8009236:	4614      	mov	r4, r2
 8009238:	461d      	mov	r5, r3
 800923a:	da08      	bge.n	800924e <__swhatbuf_r+0x24>
 800923c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	602a      	str	r2, [r5, #0]
 8009244:	061a      	lsls	r2, r3, #24
 8009246:	d410      	bmi.n	800926a <__swhatbuf_r+0x40>
 8009248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800924c:	e00e      	b.n	800926c <__swhatbuf_r+0x42>
 800924e:	466a      	mov	r2, sp
 8009250:	f001 f884 	bl	800a35c <_fstat_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	dbf1      	blt.n	800923c <__swhatbuf_r+0x12>
 8009258:	9a01      	ldr	r2, [sp, #4]
 800925a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800925e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009262:	425a      	negs	r2, r3
 8009264:	415a      	adcs	r2, r3
 8009266:	602a      	str	r2, [r5, #0]
 8009268:	e7ee      	b.n	8009248 <__swhatbuf_r+0x1e>
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	2000      	movs	r0, #0
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	b016      	add	sp, #88	; 0x58
 8009272:	bd70      	pop	{r4, r5, r6, pc}

08009274 <__smakebuf_r>:
 8009274:	898b      	ldrh	r3, [r1, #12]
 8009276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009278:	079d      	lsls	r5, r3, #30
 800927a:	4606      	mov	r6, r0
 800927c:	460c      	mov	r4, r1
 800927e:	d507      	bpl.n	8009290 <__smakebuf_r+0x1c>
 8009280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	6123      	str	r3, [r4, #16]
 8009288:	2301      	movs	r3, #1
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	b002      	add	sp, #8
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	ab01      	add	r3, sp, #4
 8009292:	466a      	mov	r2, sp
 8009294:	f7ff ffc9 	bl	800922a <__swhatbuf_r>
 8009298:	9900      	ldr	r1, [sp, #0]
 800929a:	4605      	mov	r5, r0
 800929c:	4630      	mov	r0, r6
 800929e:	f000 fc45 	bl	8009b2c <_malloc_r>
 80092a2:	b948      	cbnz	r0, 80092b8 <__smakebuf_r+0x44>
 80092a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a8:	059a      	lsls	r2, r3, #22
 80092aa:	d4ef      	bmi.n	800928c <__smakebuf_r+0x18>
 80092ac:	f023 0303 	bic.w	r3, r3, #3
 80092b0:	f043 0302 	orr.w	r3, r3, #2
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	e7e3      	b.n	8009280 <__smakebuf_r+0xc>
 80092b8:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <__smakebuf_r+0x7c>)
 80092ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	6020      	str	r0, [r4, #0]
 80092c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	6163      	str	r3, [r4, #20]
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	6120      	str	r0, [r4, #16]
 80092ce:	b15b      	cbz	r3, 80092e8 <__smakebuf_r+0x74>
 80092d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d4:	4630      	mov	r0, r6
 80092d6:	f001 f853 	bl	800a380 <_isatty_r>
 80092da:	b128      	cbz	r0, 80092e8 <__smakebuf_r+0x74>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	89a0      	ldrh	r0, [r4, #12]
 80092ea:	4305      	orrs	r5, r0
 80092ec:	81a5      	strh	r5, [r4, #12]
 80092ee:	e7cd      	b.n	800928c <__smakebuf_r+0x18>
 80092f0:	08009079 	.word	0x08009079

080092f4 <malloc>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <malloc+0xc>)
 80092f6:	4601      	mov	r1, r0
 80092f8:	6818      	ldr	r0, [r3, #0]
 80092fa:	f000 bc17 	b.w	8009b2c <_malloc_r>
 80092fe:	bf00      	nop
 8009300:	20000020 	.word	0x20000020

08009304 <memcpy>:
 8009304:	440a      	add	r2, r1
 8009306:	4291      	cmp	r1, r2
 8009308:	f100 33ff 	add.w	r3, r0, #4294967295
 800930c:	d100      	bne.n	8009310 <memcpy+0xc>
 800930e:	4770      	bx	lr
 8009310:	b510      	push	{r4, lr}
 8009312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800931a:	4291      	cmp	r1, r2
 800931c:	d1f9      	bne.n	8009312 <memcpy+0xe>
 800931e:	bd10      	pop	{r4, pc}

08009320 <_Balloc>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	b976      	cbnz	r6, 8009348 <_Balloc+0x28>
 800932a:	2010      	movs	r0, #16
 800932c:	f7ff ffe2 	bl	80092f4 <malloc>
 8009330:	4602      	mov	r2, r0
 8009332:	6260      	str	r0, [r4, #36]	; 0x24
 8009334:	b920      	cbnz	r0, 8009340 <_Balloc+0x20>
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <_Balloc+0x78>)
 8009338:	4818      	ldr	r0, [pc, #96]	; (800939c <_Balloc+0x7c>)
 800933a:	2166      	movs	r1, #102	; 0x66
 800933c:	f000 ffce 	bl	800a2dc <__assert_func>
 8009340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009344:	6006      	str	r6, [r0, #0]
 8009346:	60c6      	str	r6, [r0, #12]
 8009348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800934a:	68f3      	ldr	r3, [r6, #12]
 800934c:	b183      	cbz	r3, 8009370 <_Balloc+0x50>
 800934e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009356:	b9b8      	cbnz	r0, 8009388 <_Balloc+0x68>
 8009358:	2101      	movs	r1, #1
 800935a:	fa01 f605 	lsl.w	r6, r1, r5
 800935e:	1d72      	adds	r2, r6, #5
 8009360:	0092      	lsls	r2, r2, #2
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fb60 	bl	8009a28 <_calloc_r>
 8009368:	b160      	cbz	r0, 8009384 <_Balloc+0x64>
 800936a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800936e:	e00e      	b.n	800938e <_Balloc+0x6e>
 8009370:	2221      	movs	r2, #33	; 0x21
 8009372:	2104      	movs	r1, #4
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fb57 	bl	8009a28 <_calloc_r>
 800937a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800937c:	60f0      	str	r0, [r6, #12]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e4      	bne.n	800934e <_Balloc+0x2e>
 8009384:	2000      	movs	r0, #0
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	6802      	ldr	r2, [r0, #0]
 800938a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800938e:	2300      	movs	r3, #0
 8009390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009394:	e7f7      	b.n	8009386 <_Balloc+0x66>
 8009396:	bf00      	nop
 8009398:	0800aab1 	.word	0x0800aab1
 800939c:	0800ab94 	.word	0x0800ab94

080093a0 <_Bfree>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093a4:	4605      	mov	r5, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b976      	cbnz	r6, 80093c8 <_Bfree+0x28>
 80093aa:	2010      	movs	r0, #16
 80093ac:	f7ff ffa2 	bl	80092f4 <malloc>
 80093b0:	4602      	mov	r2, r0
 80093b2:	6268      	str	r0, [r5, #36]	; 0x24
 80093b4:	b920      	cbnz	r0, 80093c0 <_Bfree+0x20>
 80093b6:	4b09      	ldr	r3, [pc, #36]	; (80093dc <_Bfree+0x3c>)
 80093b8:	4809      	ldr	r0, [pc, #36]	; (80093e0 <_Bfree+0x40>)
 80093ba:	218a      	movs	r1, #138	; 0x8a
 80093bc:	f000 ff8e 	bl	800a2dc <__assert_func>
 80093c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093c4:	6006      	str	r6, [r0, #0]
 80093c6:	60c6      	str	r6, [r0, #12]
 80093c8:	b13c      	cbz	r4, 80093da <_Bfree+0x3a>
 80093ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093cc:	6862      	ldr	r2, [r4, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093d4:	6021      	str	r1, [r4, #0]
 80093d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	0800aab1 	.word	0x0800aab1
 80093e0:	0800ab94 	.word	0x0800ab94

080093e4 <__multadd>:
 80093e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	690d      	ldr	r5, [r1, #16]
 80093ea:	4607      	mov	r7, r0
 80093ec:	460c      	mov	r4, r1
 80093ee:	461e      	mov	r6, r3
 80093f0:	f101 0c14 	add.w	ip, r1, #20
 80093f4:	2000      	movs	r0, #0
 80093f6:	f8dc 3000 	ldr.w	r3, [ip]
 80093fa:	b299      	uxth	r1, r3
 80093fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009400:	0c1e      	lsrs	r6, r3, #16
 8009402:	0c0b      	lsrs	r3, r1, #16
 8009404:	fb02 3306 	mla	r3, r2, r6, r3
 8009408:	b289      	uxth	r1, r1
 800940a:	3001      	adds	r0, #1
 800940c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009410:	4285      	cmp	r5, r0
 8009412:	f84c 1b04 	str.w	r1, [ip], #4
 8009416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800941a:	dcec      	bgt.n	80093f6 <__multadd+0x12>
 800941c:	b30e      	cbz	r6, 8009462 <__multadd+0x7e>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	42ab      	cmp	r3, r5
 8009422:	dc19      	bgt.n	8009458 <__multadd+0x74>
 8009424:	6861      	ldr	r1, [r4, #4]
 8009426:	4638      	mov	r0, r7
 8009428:	3101      	adds	r1, #1
 800942a:	f7ff ff79 	bl	8009320 <_Balloc>
 800942e:	4680      	mov	r8, r0
 8009430:	b928      	cbnz	r0, 800943e <__multadd+0x5a>
 8009432:	4602      	mov	r2, r0
 8009434:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <__multadd+0x84>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <__multadd+0x88>)
 8009438:	21b5      	movs	r1, #181	; 0xb5
 800943a:	f000 ff4f 	bl	800a2dc <__assert_func>
 800943e:	6922      	ldr	r2, [r4, #16]
 8009440:	3202      	adds	r2, #2
 8009442:	f104 010c 	add.w	r1, r4, #12
 8009446:	0092      	lsls	r2, r2, #2
 8009448:	300c      	adds	r0, #12
 800944a:	f7ff ff5b 	bl	8009304 <memcpy>
 800944e:	4621      	mov	r1, r4
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff ffa5 	bl	80093a0 <_Bfree>
 8009456:	4644      	mov	r4, r8
 8009458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800945c:	3501      	adds	r5, #1
 800945e:	615e      	str	r6, [r3, #20]
 8009460:	6125      	str	r5, [r4, #16]
 8009462:	4620      	mov	r0, r4
 8009464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009468:	0800ab23 	.word	0x0800ab23
 800946c:	0800ab94 	.word	0x0800ab94

08009470 <__hi0bits>:
 8009470:	0c03      	lsrs	r3, r0, #16
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	b9d3      	cbnz	r3, 80094ac <__hi0bits+0x3c>
 8009476:	0400      	lsls	r0, r0, #16
 8009478:	2310      	movs	r3, #16
 800947a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800947e:	bf04      	itt	eq
 8009480:	0200      	lsleq	r0, r0, #8
 8009482:	3308      	addeq	r3, #8
 8009484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009488:	bf04      	itt	eq
 800948a:	0100      	lsleq	r0, r0, #4
 800948c:	3304      	addeq	r3, #4
 800948e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009492:	bf04      	itt	eq
 8009494:	0080      	lsleq	r0, r0, #2
 8009496:	3302      	addeq	r3, #2
 8009498:	2800      	cmp	r0, #0
 800949a:	db05      	blt.n	80094a8 <__hi0bits+0x38>
 800949c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094a0:	f103 0301 	add.w	r3, r3, #1
 80094a4:	bf08      	it	eq
 80094a6:	2320      	moveq	r3, #32
 80094a8:	4618      	mov	r0, r3
 80094aa:	4770      	bx	lr
 80094ac:	2300      	movs	r3, #0
 80094ae:	e7e4      	b.n	800947a <__hi0bits+0xa>

080094b0 <__lo0bits>:
 80094b0:	6803      	ldr	r3, [r0, #0]
 80094b2:	f013 0207 	ands.w	r2, r3, #7
 80094b6:	4601      	mov	r1, r0
 80094b8:	d00b      	beq.n	80094d2 <__lo0bits+0x22>
 80094ba:	07da      	lsls	r2, r3, #31
 80094bc:	d423      	bmi.n	8009506 <__lo0bits+0x56>
 80094be:	0798      	lsls	r0, r3, #30
 80094c0:	bf49      	itett	mi
 80094c2:	085b      	lsrmi	r3, r3, #1
 80094c4:	089b      	lsrpl	r3, r3, #2
 80094c6:	2001      	movmi	r0, #1
 80094c8:	600b      	strmi	r3, [r1, #0]
 80094ca:	bf5c      	itt	pl
 80094cc:	600b      	strpl	r3, [r1, #0]
 80094ce:	2002      	movpl	r0, #2
 80094d0:	4770      	bx	lr
 80094d2:	b298      	uxth	r0, r3
 80094d4:	b9a8      	cbnz	r0, 8009502 <__lo0bits+0x52>
 80094d6:	0c1b      	lsrs	r3, r3, #16
 80094d8:	2010      	movs	r0, #16
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	b90a      	cbnz	r2, 80094e2 <__lo0bits+0x32>
 80094de:	3008      	adds	r0, #8
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	071a      	lsls	r2, r3, #28
 80094e4:	bf04      	itt	eq
 80094e6:	091b      	lsreq	r3, r3, #4
 80094e8:	3004      	addeq	r0, #4
 80094ea:	079a      	lsls	r2, r3, #30
 80094ec:	bf04      	itt	eq
 80094ee:	089b      	lsreq	r3, r3, #2
 80094f0:	3002      	addeq	r0, #2
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d403      	bmi.n	80094fe <__lo0bits+0x4e>
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	f100 0001 	add.w	r0, r0, #1
 80094fc:	d005      	beq.n	800950a <__lo0bits+0x5a>
 80094fe:	600b      	str	r3, [r1, #0]
 8009500:	4770      	bx	lr
 8009502:	4610      	mov	r0, r2
 8009504:	e7e9      	b.n	80094da <__lo0bits+0x2a>
 8009506:	2000      	movs	r0, #0
 8009508:	4770      	bx	lr
 800950a:	2020      	movs	r0, #32
 800950c:	4770      	bx	lr
	...

08009510 <__i2b>:
 8009510:	b510      	push	{r4, lr}
 8009512:	460c      	mov	r4, r1
 8009514:	2101      	movs	r1, #1
 8009516:	f7ff ff03 	bl	8009320 <_Balloc>
 800951a:	4602      	mov	r2, r0
 800951c:	b928      	cbnz	r0, 800952a <__i2b+0x1a>
 800951e:	4b05      	ldr	r3, [pc, #20]	; (8009534 <__i2b+0x24>)
 8009520:	4805      	ldr	r0, [pc, #20]	; (8009538 <__i2b+0x28>)
 8009522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009526:	f000 fed9 	bl	800a2dc <__assert_func>
 800952a:	2301      	movs	r3, #1
 800952c:	6144      	str	r4, [r0, #20]
 800952e:	6103      	str	r3, [r0, #16]
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	0800ab23 	.word	0x0800ab23
 8009538:	0800ab94 	.word	0x0800ab94

0800953c <__multiply>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4691      	mov	r9, r2
 8009542:	690a      	ldr	r2, [r1, #16]
 8009544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009548:	429a      	cmp	r2, r3
 800954a:	bfb8      	it	lt
 800954c:	460b      	movlt	r3, r1
 800954e:	460c      	mov	r4, r1
 8009550:	bfbc      	itt	lt
 8009552:	464c      	movlt	r4, r9
 8009554:	4699      	movlt	r9, r3
 8009556:	6927      	ldr	r7, [r4, #16]
 8009558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800955c:	68a3      	ldr	r3, [r4, #8]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	eb07 060a 	add.w	r6, r7, sl
 8009564:	42b3      	cmp	r3, r6
 8009566:	b085      	sub	sp, #20
 8009568:	bfb8      	it	lt
 800956a:	3101      	addlt	r1, #1
 800956c:	f7ff fed8 	bl	8009320 <_Balloc>
 8009570:	b930      	cbnz	r0, 8009580 <__multiply+0x44>
 8009572:	4602      	mov	r2, r0
 8009574:	4b44      	ldr	r3, [pc, #272]	; (8009688 <__multiply+0x14c>)
 8009576:	4845      	ldr	r0, [pc, #276]	; (800968c <__multiply+0x150>)
 8009578:	f240 115d 	movw	r1, #349	; 0x15d
 800957c:	f000 feae 	bl	800a2dc <__assert_func>
 8009580:	f100 0514 	add.w	r5, r0, #20
 8009584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009588:	462b      	mov	r3, r5
 800958a:	2200      	movs	r2, #0
 800958c:	4543      	cmp	r3, r8
 800958e:	d321      	bcc.n	80095d4 <__multiply+0x98>
 8009590:	f104 0314 	add.w	r3, r4, #20
 8009594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009598:	f109 0314 	add.w	r3, r9, #20
 800959c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095a0:	9202      	str	r2, [sp, #8]
 80095a2:	1b3a      	subs	r2, r7, r4
 80095a4:	3a15      	subs	r2, #21
 80095a6:	f022 0203 	bic.w	r2, r2, #3
 80095aa:	3204      	adds	r2, #4
 80095ac:	f104 0115 	add.w	r1, r4, #21
 80095b0:	428f      	cmp	r7, r1
 80095b2:	bf38      	it	cc
 80095b4:	2204      	movcc	r2, #4
 80095b6:	9201      	str	r2, [sp, #4]
 80095b8:	9a02      	ldr	r2, [sp, #8]
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d80c      	bhi.n	80095da <__multiply+0x9e>
 80095c0:	2e00      	cmp	r6, #0
 80095c2:	dd03      	ble.n	80095cc <__multiply+0x90>
 80095c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d05a      	beq.n	8009682 <__multiply+0x146>
 80095cc:	6106      	str	r6, [r0, #16]
 80095ce:	b005      	add	sp, #20
 80095d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d4:	f843 2b04 	str.w	r2, [r3], #4
 80095d8:	e7d8      	b.n	800958c <__multiply+0x50>
 80095da:	f8b3 a000 	ldrh.w	sl, [r3]
 80095de:	f1ba 0f00 	cmp.w	sl, #0
 80095e2:	d024      	beq.n	800962e <__multiply+0xf2>
 80095e4:	f104 0e14 	add.w	lr, r4, #20
 80095e8:	46a9      	mov	r9, r5
 80095ea:	f04f 0c00 	mov.w	ip, #0
 80095ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095f2:	f8d9 1000 	ldr.w	r1, [r9]
 80095f6:	fa1f fb82 	uxth.w	fp, r2
 80095fa:	b289      	uxth	r1, r1
 80095fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009604:	f8d9 2000 	ldr.w	r2, [r9]
 8009608:	4461      	add	r1, ip
 800960a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800960e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	4577      	cmp	r7, lr
 800961e:	f849 1b04 	str.w	r1, [r9], #4
 8009622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009626:	d8e2      	bhi.n	80095ee <__multiply+0xb2>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f845 c002 	str.w	ip, [r5, r2]
 800962e:	9a03      	ldr	r2, [sp, #12]
 8009630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009634:	3304      	adds	r3, #4
 8009636:	f1b9 0f00 	cmp.w	r9, #0
 800963a:	d020      	beq.n	800967e <__multiply+0x142>
 800963c:	6829      	ldr	r1, [r5, #0]
 800963e:	f104 0c14 	add.w	ip, r4, #20
 8009642:	46ae      	mov	lr, r5
 8009644:	f04f 0a00 	mov.w	sl, #0
 8009648:	f8bc b000 	ldrh.w	fp, [ip]
 800964c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009650:	fb09 220b 	mla	r2, r9, fp, r2
 8009654:	4492      	add	sl, r2
 8009656:	b289      	uxth	r1, r1
 8009658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800965c:	f84e 1b04 	str.w	r1, [lr], #4
 8009660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009664:	f8be 1000 	ldrh.w	r1, [lr]
 8009668:	0c12      	lsrs	r2, r2, #16
 800966a:	fb09 1102 	mla	r1, r9, r2, r1
 800966e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009672:	4567      	cmp	r7, ip
 8009674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009678:	d8e6      	bhi.n	8009648 <__multiply+0x10c>
 800967a:	9a01      	ldr	r2, [sp, #4]
 800967c:	50a9      	str	r1, [r5, r2]
 800967e:	3504      	adds	r5, #4
 8009680:	e79a      	b.n	80095b8 <__multiply+0x7c>
 8009682:	3e01      	subs	r6, #1
 8009684:	e79c      	b.n	80095c0 <__multiply+0x84>
 8009686:	bf00      	nop
 8009688:	0800ab23 	.word	0x0800ab23
 800968c:	0800ab94 	.word	0x0800ab94

08009690 <__pow5mult>:
 8009690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009694:	4615      	mov	r5, r2
 8009696:	f012 0203 	ands.w	r2, r2, #3
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	d007      	beq.n	80096b0 <__pow5mult+0x20>
 80096a0:	4c25      	ldr	r4, [pc, #148]	; (8009738 <__pow5mult+0xa8>)
 80096a2:	3a01      	subs	r2, #1
 80096a4:	2300      	movs	r3, #0
 80096a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096aa:	f7ff fe9b 	bl	80093e4 <__multadd>
 80096ae:	4607      	mov	r7, r0
 80096b0:	10ad      	asrs	r5, r5, #2
 80096b2:	d03d      	beq.n	8009730 <__pow5mult+0xa0>
 80096b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096b6:	b97c      	cbnz	r4, 80096d8 <__pow5mult+0x48>
 80096b8:	2010      	movs	r0, #16
 80096ba:	f7ff fe1b 	bl	80092f4 <malloc>
 80096be:	4602      	mov	r2, r0
 80096c0:	6270      	str	r0, [r6, #36]	; 0x24
 80096c2:	b928      	cbnz	r0, 80096d0 <__pow5mult+0x40>
 80096c4:	4b1d      	ldr	r3, [pc, #116]	; (800973c <__pow5mult+0xac>)
 80096c6:	481e      	ldr	r0, [pc, #120]	; (8009740 <__pow5mult+0xb0>)
 80096c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096cc:	f000 fe06 	bl	800a2dc <__assert_func>
 80096d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096d4:	6004      	str	r4, [r0, #0]
 80096d6:	60c4      	str	r4, [r0, #12]
 80096d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096e0:	b94c      	cbnz	r4, 80096f6 <__pow5mult+0x66>
 80096e2:	f240 2171 	movw	r1, #625	; 0x271
 80096e6:	4630      	mov	r0, r6
 80096e8:	f7ff ff12 	bl	8009510 <__i2b>
 80096ec:	2300      	movs	r3, #0
 80096ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80096f2:	4604      	mov	r4, r0
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	f04f 0900 	mov.w	r9, #0
 80096fa:	07eb      	lsls	r3, r5, #31
 80096fc:	d50a      	bpl.n	8009714 <__pow5mult+0x84>
 80096fe:	4639      	mov	r1, r7
 8009700:	4622      	mov	r2, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff1a 	bl	800953c <__multiply>
 8009708:	4639      	mov	r1, r7
 800970a:	4680      	mov	r8, r0
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff fe47 	bl	80093a0 <_Bfree>
 8009712:	4647      	mov	r7, r8
 8009714:	106d      	asrs	r5, r5, #1
 8009716:	d00b      	beq.n	8009730 <__pow5mult+0xa0>
 8009718:	6820      	ldr	r0, [r4, #0]
 800971a:	b938      	cbnz	r0, 800972c <__pow5mult+0x9c>
 800971c:	4622      	mov	r2, r4
 800971e:	4621      	mov	r1, r4
 8009720:	4630      	mov	r0, r6
 8009722:	f7ff ff0b 	bl	800953c <__multiply>
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	f8c0 9000 	str.w	r9, [r0]
 800972c:	4604      	mov	r4, r0
 800972e:	e7e4      	b.n	80096fa <__pow5mult+0x6a>
 8009730:	4638      	mov	r0, r7
 8009732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009736:	bf00      	nop
 8009738:	0800ace0 	.word	0x0800ace0
 800973c:	0800aab1 	.word	0x0800aab1
 8009740:	0800ab94 	.word	0x0800ab94

08009744 <__lshift>:
 8009744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	6849      	ldr	r1, [r1, #4]
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	4607      	mov	r7, r0
 8009756:	4691      	mov	r9, r2
 8009758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800975c:	f108 0601 	add.w	r6, r8, #1
 8009760:	42b3      	cmp	r3, r6
 8009762:	db0b      	blt.n	800977c <__lshift+0x38>
 8009764:	4638      	mov	r0, r7
 8009766:	f7ff fddb 	bl	8009320 <_Balloc>
 800976a:	4605      	mov	r5, r0
 800976c:	b948      	cbnz	r0, 8009782 <__lshift+0x3e>
 800976e:	4602      	mov	r2, r0
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <__lshift+0xd8>)
 8009772:	482b      	ldr	r0, [pc, #172]	; (8009820 <__lshift+0xdc>)
 8009774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009778:	f000 fdb0 	bl	800a2dc <__assert_func>
 800977c:	3101      	adds	r1, #1
 800977e:	005b      	lsls	r3, r3, #1
 8009780:	e7ee      	b.n	8009760 <__lshift+0x1c>
 8009782:	2300      	movs	r3, #0
 8009784:	f100 0114 	add.w	r1, r0, #20
 8009788:	f100 0210 	add.w	r2, r0, #16
 800978c:	4618      	mov	r0, r3
 800978e:	4553      	cmp	r3, sl
 8009790:	db37      	blt.n	8009802 <__lshift+0xbe>
 8009792:	6920      	ldr	r0, [r4, #16]
 8009794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009798:	f104 0314 	add.w	r3, r4, #20
 800979c:	f019 091f 	ands.w	r9, r9, #31
 80097a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097a8:	d02f      	beq.n	800980a <__lshift+0xc6>
 80097aa:	f1c9 0e20 	rsb	lr, r9, #32
 80097ae:	468a      	mov	sl, r1
 80097b0:	f04f 0c00 	mov.w	ip, #0
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ba:	ea42 020c 	orr.w	r2, r2, ip
 80097be:	f84a 2b04 	str.w	r2, [sl], #4
 80097c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c6:	4298      	cmp	r0, r3
 80097c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097cc:	d8f2      	bhi.n	80097b4 <__lshift+0x70>
 80097ce:	1b03      	subs	r3, r0, r4
 80097d0:	3b15      	subs	r3, #21
 80097d2:	f023 0303 	bic.w	r3, r3, #3
 80097d6:	3304      	adds	r3, #4
 80097d8:	f104 0215 	add.w	r2, r4, #21
 80097dc:	4290      	cmp	r0, r2
 80097de:	bf38      	it	cc
 80097e0:	2304      	movcc	r3, #4
 80097e2:	f841 c003 	str.w	ip, [r1, r3]
 80097e6:	f1bc 0f00 	cmp.w	ip, #0
 80097ea:	d001      	beq.n	80097f0 <__lshift+0xac>
 80097ec:	f108 0602 	add.w	r6, r8, #2
 80097f0:	3e01      	subs	r6, #1
 80097f2:	4638      	mov	r0, r7
 80097f4:	612e      	str	r6, [r5, #16]
 80097f6:	4621      	mov	r1, r4
 80097f8:	f7ff fdd2 	bl	80093a0 <_Bfree>
 80097fc:	4628      	mov	r0, r5
 80097fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009802:	f842 0f04 	str.w	r0, [r2, #4]!
 8009806:	3301      	adds	r3, #1
 8009808:	e7c1      	b.n	800978e <__lshift+0x4a>
 800980a:	3904      	subs	r1, #4
 800980c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009810:	f841 2f04 	str.w	r2, [r1, #4]!
 8009814:	4298      	cmp	r0, r3
 8009816:	d8f9      	bhi.n	800980c <__lshift+0xc8>
 8009818:	e7ea      	b.n	80097f0 <__lshift+0xac>
 800981a:	bf00      	nop
 800981c:	0800ab23 	.word	0x0800ab23
 8009820:	0800ab94 	.word	0x0800ab94

08009824 <__mcmp>:
 8009824:	b530      	push	{r4, r5, lr}
 8009826:	6902      	ldr	r2, [r0, #16]
 8009828:	690c      	ldr	r4, [r1, #16]
 800982a:	1b12      	subs	r2, r2, r4
 800982c:	d10e      	bne.n	800984c <__mcmp+0x28>
 800982e:	f100 0314 	add.w	r3, r0, #20
 8009832:	3114      	adds	r1, #20
 8009834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800983c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009844:	42a5      	cmp	r5, r4
 8009846:	d003      	beq.n	8009850 <__mcmp+0x2c>
 8009848:	d305      	bcc.n	8009856 <__mcmp+0x32>
 800984a:	2201      	movs	r2, #1
 800984c:	4610      	mov	r0, r2
 800984e:	bd30      	pop	{r4, r5, pc}
 8009850:	4283      	cmp	r3, r0
 8009852:	d3f3      	bcc.n	800983c <__mcmp+0x18>
 8009854:	e7fa      	b.n	800984c <__mcmp+0x28>
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	e7f7      	b.n	800984c <__mcmp+0x28>

0800985c <__mdiff>:
 800985c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	4606      	mov	r6, r0
 8009864:	4611      	mov	r1, r2
 8009866:	4620      	mov	r0, r4
 8009868:	4690      	mov	r8, r2
 800986a:	f7ff ffdb 	bl	8009824 <__mcmp>
 800986e:	1e05      	subs	r5, r0, #0
 8009870:	d110      	bne.n	8009894 <__mdiff+0x38>
 8009872:	4629      	mov	r1, r5
 8009874:	4630      	mov	r0, r6
 8009876:	f7ff fd53 	bl	8009320 <_Balloc>
 800987a:	b930      	cbnz	r0, 800988a <__mdiff+0x2e>
 800987c:	4b3a      	ldr	r3, [pc, #232]	; (8009968 <__mdiff+0x10c>)
 800987e:	4602      	mov	r2, r0
 8009880:	f240 2132 	movw	r1, #562	; 0x232
 8009884:	4839      	ldr	r0, [pc, #228]	; (800996c <__mdiff+0x110>)
 8009886:	f000 fd29 	bl	800a2dc <__assert_func>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4643      	movge	r3, r8
 8009898:	46a0      	movge	r8, r4
 800989a:	4630      	mov	r0, r6
 800989c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098a0:	bfa6      	itte	ge
 80098a2:	461c      	movge	r4, r3
 80098a4:	2500      	movge	r5, #0
 80098a6:	2501      	movlt	r5, #1
 80098a8:	f7ff fd3a 	bl	8009320 <_Balloc>
 80098ac:	b920      	cbnz	r0, 80098b8 <__mdiff+0x5c>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__mdiff+0x10c>)
 80098b0:	4602      	mov	r2, r0
 80098b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098b6:	e7e5      	b.n	8009884 <__mdiff+0x28>
 80098b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098bc:	6926      	ldr	r6, [r4, #16]
 80098be:	60c5      	str	r5, [r0, #12]
 80098c0:	f104 0914 	add.w	r9, r4, #20
 80098c4:	f108 0514 	add.w	r5, r8, #20
 80098c8:	f100 0e14 	add.w	lr, r0, #20
 80098cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098d4:	f108 0210 	add.w	r2, r8, #16
 80098d8:	46f2      	mov	sl, lr
 80098da:	2100      	movs	r1, #0
 80098dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80098e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098e4:	fa1f f883 	uxth.w	r8, r3
 80098e8:	fa11 f18b 	uxtah	r1, r1, fp
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	eba1 0808 	sub.w	r8, r1, r8
 80098f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098fa:	fa1f f888 	uxth.w	r8, r8
 80098fe:	1419      	asrs	r1, r3, #16
 8009900:	454e      	cmp	r6, r9
 8009902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009906:	f84a 3b04 	str.w	r3, [sl], #4
 800990a:	d8e7      	bhi.n	80098dc <__mdiff+0x80>
 800990c:	1b33      	subs	r3, r6, r4
 800990e:	3b15      	subs	r3, #21
 8009910:	f023 0303 	bic.w	r3, r3, #3
 8009914:	3304      	adds	r3, #4
 8009916:	3415      	adds	r4, #21
 8009918:	42a6      	cmp	r6, r4
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	441d      	add	r5, r3
 8009920:	4473      	add	r3, lr
 8009922:	469e      	mov	lr, r3
 8009924:	462e      	mov	r6, r5
 8009926:	4566      	cmp	r6, ip
 8009928:	d30e      	bcc.n	8009948 <__mdiff+0xec>
 800992a:	f10c 0203 	add.w	r2, ip, #3
 800992e:	1b52      	subs	r2, r2, r5
 8009930:	f022 0203 	bic.w	r2, r2, #3
 8009934:	3d03      	subs	r5, #3
 8009936:	45ac      	cmp	ip, r5
 8009938:	bf38      	it	cc
 800993a:	2200      	movcc	r2, #0
 800993c:	441a      	add	r2, r3
 800993e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009942:	b17b      	cbz	r3, 8009964 <__mdiff+0x108>
 8009944:	6107      	str	r7, [r0, #16]
 8009946:	e7a3      	b.n	8009890 <__mdiff+0x34>
 8009948:	f856 8b04 	ldr.w	r8, [r6], #4
 800994c:	fa11 f288 	uxtah	r2, r1, r8
 8009950:	1414      	asrs	r4, r2, #16
 8009952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009956:	b292      	uxth	r2, r2
 8009958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800995c:	f84e 2b04 	str.w	r2, [lr], #4
 8009960:	1421      	asrs	r1, r4, #16
 8009962:	e7e0      	b.n	8009926 <__mdiff+0xca>
 8009964:	3f01      	subs	r7, #1
 8009966:	e7ea      	b.n	800993e <__mdiff+0xe2>
 8009968:	0800ab23 	.word	0x0800ab23
 800996c:	0800ab94 	.word	0x0800ab94

08009970 <__d2b>:
 8009970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009974:	4689      	mov	r9, r1
 8009976:	2101      	movs	r1, #1
 8009978:	ec57 6b10 	vmov	r6, r7, d0
 800997c:	4690      	mov	r8, r2
 800997e:	f7ff fccf 	bl	8009320 <_Balloc>
 8009982:	4604      	mov	r4, r0
 8009984:	b930      	cbnz	r0, 8009994 <__d2b+0x24>
 8009986:	4602      	mov	r2, r0
 8009988:	4b25      	ldr	r3, [pc, #148]	; (8009a20 <__d2b+0xb0>)
 800998a:	4826      	ldr	r0, [pc, #152]	; (8009a24 <__d2b+0xb4>)
 800998c:	f240 310a 	movw	r1, #778	; 0x30a
 8009990:	f000 fca4 	bl	800a2dc <__assert_func>
 8009994:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800999c:	bb35      	cbnz	r5, 80099ec <__d2b+0x7c>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	d028      	beq.n	80099f6 <__d2b+0x86>
 80099a4:	4668      	mov	r0, sp
 80099a6:	9600      	str	r6, [sp, #0]
 80099a8:	f7ff fd82 	bl	80094b0 <__lo0bits>
 80099ac:	9900      	ldr	r1, [sp, #0]
 80099ae:	b300      	cbz	r0, 80099f2 <__d2b+0x82>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f1c0 0320 	rsb	r3, r0, #32
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	430b      	orrs	r3, r1
 80099bc:	40c2      	lsrs	r2, r0
 80099be:	6163      	str	r3, [r4, #20]
 80099c0:	9201      	str	r2, [sp, #4]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	61a3      	str	r3, [r4, #24]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	bf14      	ite	ne
 80099ca:	2202      	movne	r2, #2
 80099cc:	2201      	moveq	r2, #1
 80099ce:	6122      	str	r2, [r4, #16]
 80099d0:	b1d5      	cbz	r5, 8009a08 <__d2b+0x98>
 80099d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099d6:	4405      	add	r5, r0
 80099d8:	f8c9 5000 	str.w	r5, [r9]
 80099dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099e0:	f8c8 0000 	str.w	r0, [r8]
 80099e4:	4620      	mov	r0, r4
 80099e6:	b003      	add	sp, #12
 80099e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099f0:	e7d5      	b.n	800999e <__d2b+0x2e>
 80099f2:	6161      	str	r1, [r4, #20]
 80099f4:	e7e5      	b.n	80099c2 <__d2b+0x52>
 80099f6:	a801      	add	r0, sp, #4
 80099f8:	f7ff fd5a 	bl	80094b0 <__lo0bits>
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	6163      	str	r3, [r4, #20]
 8009a00:	2201      	movs	r2, #1
 8009a02:	6122      	str	r2, [r4, #16]
 8009a04:	3020      	adds	r0, #32
 8009a06:	e7e3      	b.n	80099d0 <__d2b+0x60>
 8009a08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a10:	f8c9 0000 	str.w	r0, [r9]
 8009a14:	6918      	ldr	r0, [r3, #16]
 8009a16:	f7ff fd2b 	bl	8009470 <__hi0bits>
 8009a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a1e:	e7df      	b.n	80099e0 <__d2b+0x70>
 8009a20:	0800ab23 	.word	0x0800ab23
 8009a24:	0800ab94 	.word	0x0800ab94

08009a28 <_calloc_r>:
 8009a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a2a:	fba1 2402 	umull	r2, r4, r1, r2
 8009a2e:	b94c      	cbnz	r4, 8009a44 <_calloc_r+0x1c>
 8009a30:	4611      	mov	r1, r2
 8009a32:	9201      	str	r2, [sp, #4]
 8009a34:	f000 f87a 	bl	8009b2c <_malloc_r>
 8009a38:	9a01      	ldr	r2, [sp, #4]
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	b930      	cbnz	r0, 8009a4c <_calloc_r+0x24>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	b003      	add	sp, #12
 8009a42:	bd30      	pop	{r4, r5, pc}
 8009a44:	220c      	movs	r2, #12
 8009a46:	6002      	str	r2, [r0, #0]
 8009a48:	2500      	movs	r5, #0
 8009a4a:	e7f8      	b.n	8009a3e <_calloc_r+0x16>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	f7fd fdbb 	bl	80075c8 <memset>
 8009a52:	e7f4      	b.n	8009a3e <_calloc_r+0x16>

08009a54 <_free_r>:
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d044      	beq.n	8009ae4 <_free_r+0x90>
 8009a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a5e:	9001      	str	r0, [sp, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f1a1 0404 	sub.w	r4, r1, #4
 8009a66:	bfb8      	it	lt
 8009a68:	18e4      	addlt	r4, r4, r3
 8009a6a:	f000 fcd7 	bl	800a41c <__malloc_lock>
 8009a6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ae8 <_free_r+0x94>)
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	6813      	ldr	r3, [r2, #0]
 8009a74:	b933      	cbnz	r3, 8009a84 <_free_r+0x30>
 8009a76:	6063      	str	r3, [r4, #4]
 8009a78:	6014      	str	r4, [r2, #0]
 8009a7a:	b003      	add	sp, #12
 8009a7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a80:	f000 bcd2 	b.w	800a428 <__malloc_unlock>
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d908      	bls.n	8009a9a <_free_r+0x46>
 8009a88:	6825      	ldr	r5, [r4, #0]
 8009a8a:	1961      	adds	r1, r4, r5
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf01      	itttt	eq
 8009a90:	6819      	ldreq	r1, [r3, #0]
 8009a92:	685b      	ldreq	r3, [r3, #4]
 8009a94:	1949      	addeq	r1, r1, r5
 8009a96:	6021      	streq	r1, [r4, #0]
 8009a98:	e7ed      	b.n	8009a76 <_free_r+0x22>
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	b10b      	cbz	r3, 8009aa4 <_free_r+0x50>
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d9fa      	bls.n	8009a9a <_free_r+0x46>
 8009aa4:	6811      	ldr	r1, [r2, #0]
 8009aa6:	1855      	adds	r5, r2, r1
 8009aa8:	42a5      	cmp	r5, r4
 8009aaa:	d10b      	bne.n	8009ac4 <_free_r+0x70>
 8009aac:	6824      	ldr	r4, [r4, #0]
 8009aae:	4421      	add	r1, r4
 8009ab0:	1854      	adds	r4, r2, r1
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	6011      	str	r1, [r2, #0]
 8009ab6:	d1e0      	bne.n	8009a7a <_free_r+0x26>
 8009ab8:	681c      	ldr	r4, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	6053      	str	r3, [r2, #4]
 8009abe:	4421      	add	r1, r4
 8009ac0:	6011      	str	r1, [r2, #0]
 8009ac2:	e7da      	b.n	8009a7a <_free_r+0x26>
 8009ac4:	d902      	bls.n	8009acc <_free_r+0x78>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	e7d6      	b.n	8009a7a <_free_r+0x26>
 8009acc:	6825      	ldr	r5, [r4, #0]
 8009ace:	1961      	adds	r1, r4, r5
 8009ad0:	428b      	cmp	r3, r1
 8009ad2:	bf04      	itt	eq
 8009ad4:	6819      	ldreq	r1, [r3, #0]
 8009ad6:	685b      	ldreq	r3, [r3, #4]
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	bf04      	itt	eq
 8009adc:	1949      	addeq	r1, r1, r5
 8009ade:	6021      	streq	r1, [r4, #0]
 8009ae0:	6054      	str	r4, [r2, #4]
 8009ae2:	e7ca      	b.n	8009a7a <_free_r+0x26>
 8009ae4:	b003      	add	sp, #12
 8009ae6:	bd30      	pop	{r4, r5, pc}
 8009ae8:	20000410 	.word	0x20000410

08009aec <sbrk_aligned>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0e      	ldr	r6, [pc, #56]	; (8009b28 <sbrk_aligned+0x3c>)
 8009af0:	460c      	mov	r4, r1
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	4605      	mov	r5, r0
 8009af6:	b911      	cbnz	r1, 8009afe <sbrk_aligned+0x12>
 8009af8:	f000 fb8a 	bl	800a210 <_sbrk_r>
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 fb85 	bl	800a210 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d00a      	beq.n	8009b20 <sbrk_aligned+0x34>
 8009b0a:	1cc4      	adds	r4, r0, #3
 8009b0c:	f024 0403 	bic.w	r4, r4, #3
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d007      	beq.n	8009b24 <sbrk_aligned+0x38>
 8009b14:	1a21      	subs	r1, r4, r0
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 fb7a 	bl	800a210 <_sbrk_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d101      	bne.n	8009b24 <sbrk_aligned+0x38>
 8009b20:	f04f 34ff 	mov.w	r4, #4294967295
 8009b24:	4620      	mov	r0, r4
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	20000414 	.word	0x20000414

08009b2c <_malloc_r>:
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	1ccd      	adds	r5, r1, #3
 8009b32:	f025 0503 	bic.w	r5, r5, #3
 8009b36:	3508      	adds	r5, #8
 8009b38:	2d0c      	cmp	r5, #12
 8009b3a:	bf38      	it	cc
 8009b3c:	250c      	movcc	r5, #12
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	4607      	mov	r7, r0
 8009b42:	db01      	blt.n	8009b48 <_malloc_r+0x1c>
 8009b44:	42a9      	cmp	r1, r5
 8009b46:	d905      	bls.n	8009b54 <_malloc_r+0x28>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4630      	mov	r0, r6
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	4e2e      	ldr	r6, [pc, #184]	; (8009c10 <_malloc_r+0xe4>)
 8009b56:	f000 fc61 	bl	800a41c <__malloc_lock>
 8009b5a:	6833      	ldr	r3, [r6, #0]
 8009b5c:	461c      	mov	r4, r3
 8009b5e:	bb34      	cbnz	r4, 8009bae <_malloc_r+0x82>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4638      	mov	r0, r7
 8009b64:	f7ff ffc2 	bl	8009aec <sbrk_aligned>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	d14d      	bne.n	8009c0a <_malloc_r+0xde>
 8009b6e:	6834      	ldr	r4, [r6, #0]
 8009b70:	4626      	mov	r6, r4
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d140      	bne.n	8009bf8 <_malloc_r+0xcc>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	eb04 0803 	add.w	r8, r4, r3
 8009b80:	f000 fb46 	bl	800a210 <_sbrk_r>
 8009b84:	4580      	cmp	r8, r0
 8009b86:	d13a      	bne.n	8009bfe <_malloc_r+0xd2>
 8009b88:	6821      	ldr	r1, [r4, #0]
 8009b8a:	3503      	adds	r5, #3
 8009b8c:	1a6d      	subs	r5, r5, r1
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff ffa5 	bl	8009aec <sbrk_aligned>
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d02b      	beq.n	8009bfe <_malloc_r+0xd2>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	442b      	add	r3, r5
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	e00e      	b.n	8009bcc <_malloc_r+0xa0>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	1b52      	subs	r2, r2, r5
 8009bb2:	d41e      	bmi.n	8009bf2 <_malloc_r+0xc6>
 8009bb4:	2a0b      	cmp	r2, #11
 8009bb6:	d916      	bls.n	8009be6 <_malloc_r+0xba>
 8009bb8:	1961      	adds	r1, r4, r5
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	6025      	str	r5, [r4, #0]
 8009bbe:	bf18      	it	ne
 8009bc0:	6059      	strne	r1, [r3, #4]
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	bf08      	it	eq
 8009bc6:	6031      	streq	r1, [r6, #0]
 8009bc8:	5162      	str	r2, [r4, r5]
 8009bca:	604b      	str	r3, [r1, #4]
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f104 060b 	add.w	r6, r4, #11
 8009bd2:	f000 fc29 	bl	800a428 <__malloc_unlock>
 8009bd6:	f026 0607 	bic.w	r6, r6, #7
 8009bda:	1d23      	adds	r3, r4, #4
 8009bdc:	1af2      	subs	r2, r6, r3
 8009bde:	d0b6      	beq.n	8009b4e <_malloc_r+0x22>
 8009be0:	1b9b      	subs	r3, r3, r6
 8009be2:	50a3      	str	r3, [r4, r2]
 8009be4:	e7b3      	b.n	8009b4e <_malloc_r+0x22>
 8009be6:	6862      	ldr	r2, [r4, #4]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	bf0c      	ite	eq
 8009bec:	6032      	streq	r2, [r6, #0]
 8009bee:	605a      	strne	r2, [r3, #4]
 8009bf0:	e7ec      	b.n	8009bcc <_malloc_r+0xa0>
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	6864      	ldr	r4, [r4, #4]
 8009bf6:	e7b2      	b.n	8009b5e <_malloc_r+0x32>
 8009bf8:	4634      	mov	r4, r6
 8009bfa:	6876      	ldr	r6, [r6, #4]
 8009bfc:	e7b9      	b.n	8009b72 <_malloc_r+0x46>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	4638      	mov	r0, r7
 8009c04:	f000 fc10 	bl	800a428 <__malloc_unlock>
 8009c08:	e7a1      	b.n	8009b4e <_malloc_r+0x22>
 8009c0a:	6025      	str	r5, [r4, #0]
 8009c0c:	e7de      	b.n	8009bcc <_malloc_r+0xa0>
 8009c0e:	bf00      	nop
 8009c10:	20000410 	.word	0x20000410

08009c14 <__ssputs_r>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	688e      	ldr	r6, [r1, #8]
 8009c1a:	429e      	cmp	r6, r3
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4690      	mov	r8, r2
 8009c22:	461f      	mov	r7, r3
 8009c24:	d838      	bhi.n	8009c98 <__ssputs_r+0x84>
 8009c26:	898a      	ldrh	r2, [r1, #12]
 8009c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c2c:	d032      	beq.n	8009c94 <__ssputs_r+0x80>
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	6909      	ldr	r1, [r1, #16]
 8009c32:	eba5 0901 	sub.w	r9, r5, r1
 8009c36:	6965      	ldr	r5, [r4, #20]
 8009c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c40:	3301      	adds	r3, #1
 8009c42:	444b      	add	r3, r9
 8009c44:	106d      	asrs	r5, r5, #1
 8009c46:	429d      	cmp	r5, r3
 8009c48:	bf38      	it	cc
 8009c4a:	461d      	movcc	r5, r3
 8009c4c:	0553      	lsls	r3, r2, #21
 8009c4e:	d531      	bpl.n	8009cb4 <__ssputs_r+0xa0>
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7ff ff6b 	bl	8009b2c <_malloc_r>
 8009c56:	4606      	mov	r6, r0
 8009c58:	b950      	cbnz	r0, 8009c70 <__ssputs_r+0x5c>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	f8ca 3000 	str.w	r3, [sl]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	6921      	ldr	r1, [r4, #16]
 8009c72:	464a      	mov	r2, r9
 8009c74:	f7ff fb46 	bl	8009304 <memcpy>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	6126      	str	r6, [r4, #16]
 8009c86:	6165      	str	r5, [r4, #20]
 8009c88:	444e      	add	r6, r9
 8009c8a:	eba5 0509 	sub.w	r5, r5, r9
 8009c8e:	6026      	str	r6, [r4, #0]
 8009c90:	60a5      	str	r5, [r4, #8]
 8009c92:	463e      	mov	r6, r7
 8009c94:	42be      	cmp	r6, r7
 8009c96:	d900      	bls.n	8009c9a <__ssputs_r+0x86>
 8009c98:	463e      	mov	r6, r7
 8009c9a:	6820      	ldr	r0, [r4, #0]
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	4641      	mov	r1, r8
 8009ca0:	f000 fba2 	bl	800a3e8 <memmove>
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	1b9b      	subs	r3, r3, r6
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	4433      	add	r3, r6
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e7db      	b.n	8009c6c <__ssputs_r+0x58>
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	f000 fbbd 	bl	800a434 <_realloc_r>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e1      	bne.n	8009c84 <__ssputs_r+0x70>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f7ff fec6 	bl	8009a54 <_free_r>
 8009cc8:	e7c7      	b.n	8009c5a <__ssputs_r+0x46>
	...

08009ccc <_svfiprintf_r>:
 8009ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	4698      	mov	r8, r3
 8009cd2:	898b      	ldrh	r3, [r1, #12]
 8009cd4:	061b      	lsls	r3, r3, #24
 8009cd6:	b09d      	sub	sp, #116	; 0x74
 8009cd8:	4607      	mov	r7, r0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	4614      	mov	r4, r2
 8009cde:	d50e      	bpl.n	8009cfe <_svfiprintf_r+0x32>
 8009ce0:	690b      	ldr	r3, [r1, #16]
 8009ce2:	b963      	cbnz	r3, 8009cfe <_svfiprintf_r+0x32>
 8009ce4:	2140      	movs	r1, #64	; 0x40
 8009ce6:	f7ff ff21 	bl	8009b2c <_malloc_r>
 8009cea:	6028      	str	r0, [r5, #0]
 8009cec:	6128      	str	r0, [r5, #16]
 8009cee:	b920      	cbnz	r0, 8009cfa <_svfiprintf_r+0x2e>
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	e0d1      	b.n	8009e9e <_svfiprintf_r+0x1d2>
 8009cfa:	2340      	movs	r3, #64	; 0x40
 8009cfc:	616b      	str	r3, [r5, #20]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9309      	str	r3, [sp, #36]	; 0x24
 8009d02:	2320      	movs	r3, #32
 8009d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d0c:	2330      	movs	r3, #48	; 0x30
 8009d0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009eb8 <_svfiprintf_r+0x1ec>
 8009d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d16:	f04f 0901 	mov.w	r9, #1
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	469a      	mov	sl, r3
 8009d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d22:	b10a      	cbz	r2, 8009d28 <_svfiprintf_r+0x5c>
 8009d24:	2a25      	cmp	r2, #37	; 0x25
 8009d26:	d1f9      	bne.n	8009d1c <_svfiprintf_r+0x50>
 8009d28:	ebba 0b04 	subs.w	fp, sl, r4
 8009d2c:	d00b      	beq.n	8009d46 <_svfiprintf_r+0x7a>
 8009d2e:	465b      	mov	r3, fp
 8009d30:	4622      	mov	r2, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	4638      	mov	r0, r7
 8009d36:	f7ff ff6d 	bl	8009c14 <__ssputs_r>
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f000 80aa 	beq.w	8009e94 <_svfiprintf_r+0x1c8>
 8009d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d42:	445a      	add	r2, fp
 8009d44:	9209      	str	r2, [sp, #36]	; 0x24
 8009d46:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a2 	beq.w	8009e94 <_svfiprintf_r+0x1c8>
 8009d50:	2300      	movs	r3, #0
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d5a:	f10a 0a01 	add.w	sl, sl, #1
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d66:	931a      	str	r3, [sp, #104]	; 0x68
 8009d68:	4654      	mov	r4, sl
 8009d6a:	2205      	movs	r2, #5
 8009d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d70:	4851      	ldr	r0, [pc, #324]	; (8009eb8 <_svfiprintf_r+0x1ec>)
 8009d72:	f7f6 fa3d 	bl	80001f0 <memchr>
 8009d76:	9a04      	ldr	r2, [sp, #16]
 8009d78:	b9d8      	cbnz	r0, 8009db2 <_svfiprintf_r+0xe6>
 8009d7a:	06d0      	lsls	r0, r2, #27
 8009d7c:	bf44      	itt	mi
 8009d7e:	2320      	movmi	r3, #32
 8009d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d84:	0711      	lsls	r1, r2, #28
 8009d86:	bf44      	itt	mi
 8009d88:	232b      	movmi	r3, #43	; 0x2b
 8009d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d92:	2b2a      	cmp	r3, #42	; 0x2a
 8009d94:	d015      	beq.n	8009dc2 <_svfiprintf_r+0xf6>
 8009d96:	9a07      	ldr	r2, [sp, #28]
 8009d98:	4654      	mov	r4, sl
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	f04f 0c0a 	mov.w	ip, #10
 8009da0:	4621      	mov	r1, r4
 8009da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da6:	3b30      	subs	r3, #48	; 0x30
 8009da8:	2b09      	cmp	r3, #9
 8009daa:	d94e      	bls.n	8009e4a <_svfiprintf_r+0x17e>
 8009dac:	b1b0      	cbz	r0, 8009ddc <_svfiprintf_r+0x110>
 8009dae:	9207      	str	r2, [sp, #28]
 8009db0:	e014      	b.n	8009ddc <_svfiprintf_r+0x110>
 8009db2:	eba0 0308 	sub.w	r3, r0, r8
 8009db6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	46a2      	mov	sl, r4
 8009dc0:	e7d2      	b.n	8009d68 <_svfiprintf_r+0x9c>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	1d19      	adds	r1, r3, #4
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	9103      	str	r1, [sp, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bfbb      	ittet	lt
 8009dce:	425b      	neglt	r3, r3
 8009dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8009dd4:	9307      	strge	r3, [sp, #28]
 8009dd6:	9307      	strlt	r3, [sp, #28]
 8009dd8:	bfb8      	it	lt
 8009dda:	9204      	strlt	r2, [sp, #16]
 8009ddc:	7823      	ldrb	r3, [r4, #0]
 8009dde:	2b2e      	cmp	r3, #46	; 0x2e
 8009de0:	d10c      	bne.n	8009dfc <_svfiprintf_r+0x130>
 8009de2:	7863      	ldrb	r3, [r4, #1]
 8009de4:	2b2a      	cmp	r3, #42	; 0x2a
 8009de6:	d135      	bne.n	8009e54 <_svfiprintf_r+0x188>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	1d1a      	adds	r2, r3, #4
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	9203      	str	r2, [sp, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	bfb8      	it	lt
 8009df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009df8:	3402      	adds	r4, #2
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ec8 <_svfiprintf_r+0x1fc>
 8009e00:	7821      	ldrb	r1, [r4, #0]
 8009e02:	2203      	movs	r2, #3
 8009e04:	4650      	mov	r0, sl
 8009e06:	f7f6 f9f3 	bl	80001f0 <memchr>
 8009e0a:	b140      	cbz	r0, 8009e1e <_svfiprintf_r+0x152>
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	eba0 000a 	sub.w	r0, r0, sl
 8009e12:	fa03 f000 	lsl.w	r0, r3, r0
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	4303      	orrs	r3, r0
 8009e1a:	3401      	adds	r4, #1
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e22:	4826      	ldr	r0, [pc, #152]	; (8009ebc <_svfiprintf_r+0x1f0>)
 8009e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e28:	2206      	movs	r2, #6
 8009e2a:	f7f6 f9e1 	bl	80001f0 <memchr>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d038      	beq.n	8009ea4 <_svfiprintf_r+0x1d8>
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <_svfiprintf_r+0x1f4>)
 8009e34:	bb1b      	cbnz	r3, 8009e7e <_svfiprintf_r+0x1b2>
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	3307      	adds	r3, #7
 8009e3a:	f023 0307 	bic.w	r3, r3, #7
 8009e3e:	3308      	adds	r3, #8
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e44:	4433      	add	r3, r6
 8009e46:	9309      	str	r3, [sp, #36]	; 0x24
 8009e48:	e767      	b.n	8009d1a <_svfiprintf_r+0x4e>
 8009e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e4e:	460c      	mov	r4, r1
 8009e50:	2001      	movs	r0, #1
 8009e52:	e7a5      	b.n	8009da0 <_svfiprintf_r+0xd4>
 8009e54:	2300      	movs	r3, #0
 8009e56:	3401      	adds	r4, #1
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	f04f 0c0a 	mov.w	ip, #10
 8009e60:	4620      	mov	r0, r4
 8009e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e66:	3a30      	subs	r2, #48	; 0x30
 8009e68:	2a09      	cmp	r2, #9
 8009e6a:	d903      	bls.n	8009e74 <_svfiprintf_r+0x1a8>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0c5      	beq.n	8009dfc <_svfiprintf_r+0x130>
 8009e70:	9105      	str	r1, [sp, #20]
 8009e72:	e7c3      	b.n	8009dfc <_svfiprintf_r+0x130>
 8009e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e78:	4604      	mov	r4, r0
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e7f0      	b.n	8009e60 <_svfiprintf_r+0x194>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <_svfiprintf_r+0x1f8>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7fd fc45 	bl	8007718 <_printf_float>
 8009e8e:	1c42      	adds	r2, r0, #1
 8009e90:	4606      	mov	r6, r0
 8009e92:	d1d6      	bne.n	8009e42 <_svfiprintf_r+0x176>
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	065b      	lsls	r3, r3, #25
 8009e98:	f53f af2c 	bmi.w	8009cf4 <_svfiprintf_r+0x28>
 8009e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9e:	b01d      	add	sp, #116	; 0x74
 8009ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	ab03      	add	r3, sp, #12
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <_svfiprintf_r+0x1f8>)
 8009eac:	a904      	add	r1, sp, #16
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7fd fed6 	bl	8007c60 <_printf_i>
 8009eb4:	e7eb      	b.n	8009e8e <_svfiprintf_r+0x1c2>
 8009eb6:	bf00      	nop
 8009eb8:	0800acec 	.word	0x0800acec
 8009ebc:	0800acf6 	.word	0x0800acf6
 8009ec0:	08007719 	.word	0x08007719
 8009ec4:	08009c15 	.word	0x08009c15
 8009ec8:	0800acf2 	.word	0x0800acf2

08009ecc <__sfputc_r>:
 8009ecc:	6893      	ldr	r3, [r2, #8]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	b410      	push	{r4}
 8009ed4:	6093      	str	r3, [r2, #8]
 8009ed6:	da08      	bge.n	8009eea <__sfputc_r+0x1e>
 8009ed8:	6994      	ldr	r4, [r2, #24]
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	db01      	blt.n	8009ee2 <__sfputc_r+0x16>
 8009ede:	290a      	cmp	r1, #10
 8009ee0:	d103      	bne.n	8009eea <__sfputc_r+0x1e>
 8009ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee6:	f7fe b8a5 	b.w	8008034 <__swbuf_r>
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	1c58      	adds	r0, r3, #1
 8009eee:	6010      	str	r0, [r2, #0]
 8009ef0:	7019      	strb	r1, [r3, #0]
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <__sfputs_r>:
 8009efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	18d5      	adds	r5, r2, r3
 8009f04:	42ac      	cmp	r4, r5
 8009f06:	d101      	bne.n	8009f0c <__sfputs_r+0x12>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e007      	b.n	8009f1c <__sfputs_r+0x22>
 8009f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f10:	463a      	mov	r2, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ffda 	bl	8009ecc <__sfputc_r>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d1f3      	bne.n	8009f04 <__sfputs_r+0xa>
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f20 <_vfiprintf_r>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	460d      	mov	r5, r1
 8009f26:	b09d      	sub	sp, #116	; 0x74
 8009f28:	4614      	mov	r4, r2
 8009f2a:	4698      	mov	r8, r3
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	b118      	cbz	r0, 8009f38 <_vfiprintf_r+0x18>
 8009f30:	6983      	ldr	r3, [r0, #24]
 8009f32:	b90b      	cbnz	r3, 8009f38 <_vfiprintf_r+0x18>
 8009f34:	f7ff f8d4 	bl	80090e0 <__sinit>
 8009f38:	4b89      	ldr	r3, [pc, #548]	; (800a160 <_vfiprintf_r+0x240>)
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	d11b      	bne.n	8009f76 <_vfiprintf_r+0x56>
 8009f3e:	6875      	ldr	r5, [r6, #4]
 8009f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x32>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x32>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7ff f96a 	bl	8009226 <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x3c>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b9eb      	cbnz	r3, 8009f98 <_vfiprintf_r+0x78>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f7fe f8ba 	bl	80080d8 <__swsetup_r>
 8009f64:	b1c0      	cbz	r0, 8009f98 <_vfiprintf_r+0x78>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d50e      	bpl.n	8009f8a <_vfiprintf_r+0x6a>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	; 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <_vfiprintf_r+0x244>)
 8009f78:	429d      	cmp	r5, r3
 8009f7a:	d101      	bne.n	8009f80 <_vfiprintf_r+0x60>
 8009f7c:	68b5      	ldr	r5, [r6, #8]
 8009f7e:	e7df      	b.n	8009f40 <_vfiprintf_r+0x20>
 8009f80:	4b79      	ldr	r3, [pc, #484]	; (800a168 <_vfiprintf_r+0x248>)
 8009f82:	429d      	cmp	r5, r3
 8009f84:	bf08      	it	eq
 8009f86:	68f5      	ldreq	r5, [r6, #12]
 8009f88:	e7da      	b.n	8009f40 <_vfiprintf_r+0x20>
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	0598      	lsls	r0, r3, #22
 8009f8e:	d4ed      	bmi.n	8009f6c <_vfiprintf_r+0x4c>
 8009f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f92:	f7ff f949 	bl	8009228 <__retarget_lock_release_recursive>
 8009f96:	e7e9      	b.n	8009f6c <_vfiprintf_r+0x4c>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa6:	2330      	movs	r3, #48	; 0x30
 8009fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a16c <_vfiprintf_r+0x24c>
 8009fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb0:	f04f 0901 	mov.w	r9, #1
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	469a      	mov	sl, r3
 8009fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbc:	b10a      	cbz	r2, 8009fc2 <_vfiprintf_r+0xa2>
 8009fbe:	2a25      	cmp	r2, #37	; 0x25
 8009fc0:	d1f9      	bne.n	8009fb6 <_vfiprintf_r+0x96>
 8009fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc6:	d00b      	beq.n	8009fe0 <_vfiprintf_r+0xc0>
 8009fc8:	465b      	mov	r3, fp
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ff93 	bl	8009efa <__sfputs_r>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f000 80aa 	beq.w	800a12e <_vfiprintf_r+0x20e>
 8009fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fdc:	445a      	add	r2, fp
 8009fde:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 80a2 	beq.w	800a12e <_vfiprintf_r+0x20e>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	9307      	str	r3, [sp, #28]
 8009ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a000:	931a      	str	r3, [sp, #104]	; 0x68
 800a002:	4654      	mov	r4, sl
 800a004:	2205      	movs	r2, #5
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4858      	ldr	r0, [pc, #352]	; (800a16c <_vfiprintf_r+0x24c>)
 800a00c:	f7f6 f8f0 	bl	80001f0 <memchr>
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	b9d8      	cbnz	r0, 800a04c <_vfiprintf_r+0x12c>
 800a014:	06d1      	lsls	r1, r2, #27
 800a016:	bf44      	itt	mi
 800a018:	2320      	movmi	r3, #32
 800a01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01e:	0713      	lsls	r3, r2, #28
 800a020:	bf44      	itt	mi
 800a022:	232b      	movmi	r3, #43	; 0x2b
 800a024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b2a      	cmp	r3, #42	; 0x2a
 800a02e:	d015      	beq.n	800a05c <_vfiprintf_r+0x13c>
 800a030:	9a07      	ldr	r2, [sp, #28]
 800a032:	4654      	mov	r4, sl
 800a034:	2000      	movs	r0, #0
 800a036:	f04f 0c0a 	mov.w	ip, #10
 800a03a:	4621      	mov	r1, r4
 800a03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a040:	3b30      	subs	r3, #48	; 0x30
 800a042:	2b09      	cmp	r3, #9
 800a044:	d94e      	bls.n	800a0e4 <_vfiprintf_r+0x1c4>
 800a046:	b1b0      	cbz	r0, 800a076 <_vfiprintf_r+0x156>
 800a048:	9207      	str	r2, [sp, #28]
 800a04a:	e014      	b.n	800a076 <_vfiprintf_r+0x156>
 800a04c:	eba0 0308 	sub.w	r3, r0, r8
 800a050:	fa09 f303 	lsl.w	r3, r9, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	46a2      	mov	sl, r4
 800a05a:	e7d2      	b.n	800a002 <_vfiprintf_r+0xe2>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d19      	adds	r1, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfbb      	ittet	lt
 800a068:	425b      	neglt	r3, r3
 800a06a:	f042 0202 	orrlt.w	r2, r2, #2
 800a06e:	9307      	strge	r3, [sp, #28]
 800a070:	9307      	strlt	r3, [sp, #28]
 800a072:	bfb8      	it	lt
 800a074:	9204      	strlt	r2, [sp, #16]
 800a076:	7823      	ldrb	r3, [r4, #0]
 800a078:	2b2e      	cmp	r3, #46	; 0x2e
 800a07a:	d10c      	bne.n	800a096 <_vfiprintf_r+0x176>
 800a07c:	7863      	ldrb	r3, [r4, #1]
 800a07e:	2b2a      	cmp	r3, #42	; 0x2a
 800a080:	d135      	bne.n	800a0ee <_vfiprintf_r+0x1ce>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	1d1a      	adds	r2, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9203      	str	r2, [sp, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bfb8      	it	lt
 800a08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a092:	3402      	adds	r4, #2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a17c <_vfiprintf_r+0x25c>
 800a09a:	7821      	ldrb	r1, [r4, #0]
 800a09c:	2203      	movs	r2, #3
 800a09e:	4650      	mov	r0, sl
 800a0a0:	f7f6 f8a6 	bl	80001f0 <memchr>
 800a0a4:	b140      	cbz	r0, 800a0b8 <_vfiprintf_r+0x198>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	eba0 000a 	sub.w	r0, r0, sl
 800a0ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	4303      	orrs	r3, r0
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	482c      	ldr	r0, [pc, #176]	; (800a170 <_vfiprintf_r+0x250>)
 800a0be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c2:	2206      	movs	r2, #6
 800a0c4:	f7f6 f894 	bl	80001f0 <memchr>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d03f      	beq.n	800a14c <_vfiprintf_r+0x22c>
 800a0cc:	4b29      	ldr	r3, [pc, #164]	; (800a174 <_vfiprintf_r+0x254>)
 800a0ce:	bb1b      	cbnz	r3, 800a118 <_vfiprintf_r+0x1f8>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	3307      	adds	r3, #7
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	3308      	adds	r3, #8
 800a0da:	9303      	str	r3, [sp, #12]
 800a0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0de:	443b      	add	r3, r7
 800a0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e2:	e767      	b.n	8009fb4 <_vfiprintf_r+0x94>
 800a0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e7a5      	b.n	800a03a <_vfiprintf_r+0x11a>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f04f 0c0a 	mov.w	ip, #10
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a100:	3a30      	subs	r2, #48	; 0x30
 800a102:	2a09      	cmp	r2, #9
 800a104:	d903      	bls.n	800a10e <_vfiprintf_r+0x1ee>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0c5      	beq.n	800a096 <_vfiprintf_r+0x176>
 800a10a:	9105      	str	r1, [sp, #20]
 800a10c:	e7c3      	b.n	800a096 <_vfiprintf_r+0x176>
 800a10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a112:	4604      	mov	r4, r0
 800a114:	2301      	movs	r3, #1
 800a116:	e7f0      	b.n	800a0fa <_vfiprintf_r+0x1da>
 800a118:	ab03      	add	r3, sp, #12
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	462a      	mov	r2, r5
 800a11e:	4b16      	ldr	r3, [pc, #88]	; (800a178 <_vfiprintf_r+0x258>)
 800a120:	a904      	add	r1, sp, #16
 800a122:	4630      	mov	r0, r6
 800a124:	f7fd faf8 	bl	8007718 <_printf_float>
 800a128:	4607      	mov	r7, r0
 800a12a:	1c78      	adds	r0, r7, #1
 800a12c:	d1d6      	bne.n	800a0dc <_vfiprintf_r+0x1bc>
 800a12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a130:	07d9      	lsls	r1, r3, #31
 800a132:	d405      	bmi.n	800a140 <_vfiprintf_r+0x220>
 800a134:	89ab      	ldrh	r3, [r5, #12]
 800a136:	059a      	lsls	r2, r3, #22
 800a138:	d402      	bmi.n	800a140 <_vfiprintf_r+0x220>
 800a13a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a13c:	f7ff f874 	bl	8009228 <__retarget_lock_release_recursive>
 800a140:	89ab      	ldrh	r3, [r5, #12]
 800a142:	065b      	lsls	r3, r3, #25
 800a144:	f53f af12 	bmi.w	8009f6c <_vfiprintf_r+0x4c>
 800a148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14a:	e711      	b.n	8009f70 <_vfiprintf_r+0x50>
 800a14c:	ab03      	add	r3, sp, #12
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	462a      	mov	r2, r5
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <_vfiprintf_r+0x258>)
 800a154:	a904      	add	r1, sp, #16
 800a156:	4630      	mov	r0, r6
 800a158:	f7fd fd82 	bl	8007c60 <_printf_i>
 800a15c:	e7e4      	b.n	800a128 <_vfiprintf_r+0x208>
 800a15e:	bf00      	nop
 800a160:	0800ab54 	.word	0x0800ab54
 800a164:	0800ab74 	.word	0x0800ab74
 800a168:	0800ab34 	.word	0x0800ab34
 800a16c:	0800acec 	.word	0x0800acec
 800a170:	0800acf6 	.word	0x0800acf6
 800a174:	08007719 	.word	0x08007719
 800a178:	08009efb 	.word	0x08009efb
 800a17c:	0800acf2 	.word	0x0800acf2

0800a180 <_putc_r>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	460d      	mov	r5, r1
 800a184:	4614      	mov	r4, r2
 800a186:	4606      	mov	r6, r0
 800a188:	b118      	cbz	r0, 800a192 <_putc_r+0x12>
 800a18a:	6983      	ldr	r3, [r0, #24]
 800a18c:	b90b      	cbnz	r3, 800a192 <_putc_r+0x12>
 800a18e:	f7fe ffa7 	bl	80090e0 <__sinit>
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <_putc_r+0x84>)
 800a194:	429c      	cmp	r4, r3
 800a196:	d124      	bne.n	800a1e2 <_putc_r+0x62>
 800a198:	6874      	ldr	r4, [r6, #4]
 800a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a19c:	07d8      	lsls	r0, r3, #31
 800a19e:	d405      	bmi.n	800a1ac <_putc_r+0x2c>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	0599      	lsls	r1, r3, #22
 800a1a4:	d402      	bmi.n	800a1ac <_putc_r+0x2c>
 800a1a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1a8:	f7ff f83d 	bl	8009226 <__retarget_lock_acquire_recursive>
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	60a3      	str	r3, [r4, #8]
 800a1b4:	da05      	bge.n	800a1c2 <_putc_r+0x42>
 800a1b6:	69a2      	ldr	r2, [r4, #24]
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	db1c      	blt.n	800a1f6 <_putc_r+0x76>
 800a1bc:	b2eb      	uxtb	r3, r5
 800a1be:	2b0a      	cmp	r3, #10
 800a1c0:	d019      	beq.n	800a1f6 <_putc_r+0x76>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	701d      	strb	r5, [r3, #0]
 800a1ca:	b2ed      	uxtb	r5, r5
 800a1cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ce:	07da      	lsls	r2, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_putc_r+0x5e>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	059b      	lsls	r3, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_putc_r+0x5e>
 800a1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1da:	f7ff f825 	bl	8009228 <__retarget_lock_release_recursive>
 800a1de:	4628      	mov	r0, r5
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <_putc_r+0x88>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	d101      	bne.n	800a1ec <_putc_r+0x6c>
 800a1e8:	68b4      	ldr	r4, [r6, #8]
 800a1ea:	e7d6      	b.n	800a19a <_putc_r+0x1a>
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <_putc_r+0x8c>)
 800a1ee:	429c      	cmp	r4, r3
 800a1f0:	bf08      	it	eq
 800a1f2:	68f4      	ldreq	r4, [r6, #12]
 800a1f4:	e7d1      	b.n	800a19a <_putc_r+0x1a>
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7fd ff1a 	bl	8008034 <__swbuf_r>
 800a200:	4605      	mov	r5, r0
 800a202:	e7e3      	b.n	800a1cc <_putc_r+0x4c>
 800a204:	0800ab54 	.word	0x0800ab54
 800a208:	0800ab74 	.word	0x0800ab74
 800a20c:	0800ab34 	.word	0x0800ab34

0800a210 <_sbrk_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d06      	ldr	r5, [pc, #24]	; (800a22c <_sbrk_r+0x1c>)
 800a214:	2300      	movs	r3, #0
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	f7f9 fdd2 	bl	8003dc4 <_sbrk>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_sbrk_r+0x1a>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_sbrk_r+0x1a>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000418 	.word	0x20000418

0800a230 <__sread>:
 800a230:	b510      	push	{r4, lr}
 800a232:	460c      	mov	r4, r1
 800a234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a238:	f000 f92c 	bl	800a494 <_read_r>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	bfab      	itete	ge
 800a240:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a242:	89a3      	ldrhlt	r3, [r4, #12]
 800a244:	181b      	addge	r3, r3, r0
 800a246:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a24a:	bfac      	ite	ge
 800a24c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a24e:	81a3      	strhlt	r3, [r4, #12]
 800a250:	bd10      	pop	{r4, pc}

0800a252 <__swrite>:
 800a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	461f      	mov	r7, r3
 800a258:	898b      	ldrh	r3, [r1, #12]
 800a25a:	05db      	lsls	r3, r3, #23
 800a25c:	4605      	mov	r5, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	4616      	mov	r6, r2
 800a262:	d505      	bpl.n	800a270 <__swrite+0x1e>
 800a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a268:	2302      	movs	r3, #2
 800a26a:	2200      	movs	r2, #0
 800a26c:	f000 f898 	bl	800a3a0 <_lseek_r>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	4632      	mov	r2, r6
 800a27e:	463b      	mov	r3, r7
 800a280:	4628      	mov	r0, r5
 800a282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a286:	f000 b817 	b.w	800a2b8 <_write_r>

0800a28a <__sseek>:
 800a28a:	b510      	push	{r4, lr}
 800a28c:	460c      	mov	r4, r1
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	f000 f885 	bl	800a3a0 <_lseek_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	bf15      	itete	ne
 800a29c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a29e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2a6:	81a3      	strheq	r3, [r4, #12]
 800a2a8:	bf18      	it	ne
 800a2aa:	81a3      	strhne	r3, [r4, #12]
 800a2ac:	bd10      	pop	{r4, pc}

0800a2ae <__sclose>:
 800a2ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b2:	f000 b831 	b.w	800a318 <_close_r>
	...

0800a2b8 <_write_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d07      	ldr	r5, [pc, #28]	; (800a2d8 <_write_r+0x20>)
 800a2bc:	4604      	mov	r4, r0
 800a2be:	4608      	mov	r0, r1
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	602a      	str	r2, [r5, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f7f9 fd2b 	bl	8003d22 <_write>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_write_r+0x1e>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_write_r+0x1e>
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20000418 	.word	0x20000418

0800a2dc <__assert_func>:
 800a2dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2de:	4614      	mov	r4, r2
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <__assert_func+0x2c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	68d8      	ldr	r0, [r3, #12]
 800a2ea:	b14c      	cbz	r4, 800a300 <__assert_func+0x24>
 800a2ec:	4b07      	ldr	r3, [pc, #28]	; (800a30c <__assert_func+0x30>)
 800a2ee:	9100      	str	r1, [sp, #0]
 800a2f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2f4:	4906      	ldr	r1, [pc, #24]	; (800a310 <__assert_func+0x34>)
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f000 f81e 	bl	800a338 <fiprintf>
 800a2fc:	f000 f8e9 	bl	800a4d2 <abort>
 800a300:	4b04      	ldr	r3, [pc, #16]	; (800a314 <__assert_func+0x38>)
 800a302:	461c      	mov	r4, r3
 800a304:	e7f3      	b.n	800a2ee <__assert_func+0x12>
 800a306:	bf00      	nop
 800a308:	20000020 	.word	0x20000020
 800a30c:	0800acfd 	.word	0x0800acfd
 800a310:	0800ad0a 	.word	0x0800ad0a
 800a314:	0800ad38 	.word	0x0800ad38

0800a318 <_close_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	; (800a334 <_close_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f9 fd19 	bl	8003d5a <_close>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_close_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_close_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20000418 	.word	0x20000418

0800a338 <fiprintf>:
 800a338:	b40e      	push	{r1, r2, r3}
 800a33a:	b503      	push	{r0, r1, lr}
 800a33c:	4601      	mov	r1, r0
 800a33e:	ab03      	add	r3, sp, #12
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <fiprintf+0x20>)
 800a342:	f853 2b04 	ldr.w	r2, [r3], #4
 800a346:	6800      	ldr	r0, [r0, #0]
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	f7ff fde9 	bl	8009f20 <_vfiprintf_r>
 800a34e:	b002      	add	sp, #8
 800a350:	f85d eb04 	ldr.w	lr, [sp], #4
 800a354:	b003      	add	sp, #12
 800a356:	4770      	bx	lr
 800a358:	20000020 	.word	0x20000020

0800a35c <_fstat_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_fstat_r+0x20>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	4611      	mov	r1, r2
 800a368:	602b      	str	r3, [r5, #0]
 800a36a:	f7f9 fd02 	bl	8003d72 <_fstat>
 800a36e:	1c43      	adds	r3, r0, #1
 800a370:	d102      	bne.n	800a378 <_fstat_r+0x1c>
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	b103      	cbz	r3, 800a378 <_fstat_r+0x1c>
 800a376:	6023      	str	r3, [r4, #0]
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	bf00      	nop
 800a37c:	20000418 	.word	0x20000418

0800a380 <_isatty_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d06      	ldr	r5, [pc, #24]	; (800a39c <_isatty_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	f7f9 fd01 	bl	8003d92 <_isatty>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_isatty_r+0x1a>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_isatty_r+0x1a>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	20000418 	.word	0x20000418

0800a3a0 <_lseek_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d07      	ldr	r5, [pc, #28]	; (800a3c0 <_lseek_r+0x20>)
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	602a      	str	r2, [r5, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f7f9 fcfa 	bl	8003da8 <_lseek>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_lseek_r+0x1e>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_lseek_r+0x1e>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	20000418 	.word	0x20000418

0800a3c4 <__ascii_mbtowc>:
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	b901      	cbnz	r1, 800a3ca <__ascii_mbtowc+0x6>
 800a3c8:	a901      	add	r1, sp, #4
 800a3ca:	b142      	cbz	r2, 800a3de <__ascii_mbtowc+0x1a>
 800a3cc:	b14b      	cbz	r3, 800a3e2 <__ascii_mbtowc+0x1e>
 800a3ce:	7813      	ldrb	r3, [r2, #0]
 800a3d0:	600b      	str	r3, [r1, #0]
 800a3d2:	7812      	ldrb	r2, [r2, #0]
 800a3d4:	1e10      	subs	r0, r2, #0
 800a3d6:	bf18      	it	ne
 800a3d8:	2001      	movne	r0, #1
 800a3da:	b002      	add	sp, #8
 800a3dc:	4770      	bx	lr
 800a3de:	4610      	mov	r0, r2
 800a3e0:	e7fb      	b.n	800a3da <__ascii_mbtowc+0x16>
 800a3e2:	f06f 0001 	mvn.w	r0, #1
 800a3e6:	e7f8      	b.n	800a3da <__ascii_mbtowc+0x16>

0800a3e8 <memmove>:
 800a3e8:	4288      	cmp	r0, r1
 800a3ea:	b510      	push	{r4, lr}
 800a3ec:	eb01 0402 	add.w	r4, r1, r2
 800a3f0:	d902      	bls.n	800a3f8 <memmove+0x10>
 800a3f2:	4284      	cmp	r4, r0
 800a3f4:	4623      	mov	r3, r4
 800a3f6:	d807      	bhi.n	800a408 <memmove+0x20>
 800a3f8:	1e43      	subs	r3, r0, #1
 800a3fa:	42a1      	cmp	r1, r4
 800a3fc:	d008      	beq.n	800a410 <memmove+0x28>
 800a3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a406:	e7f8      	b.n	800a3fa <memmove+0x12>
 800a408:	4402      	add	r2, r0
 800a40a:	4601      	mov	r1, r0
 800a40c:	428a      	cmp	r2, r1
 800a40e:	d100      	bne.n	800a412 <memmove+0x2a>
 800a410:	bd10      	pop	{r4, pc}
 800a412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a41a:	e7f7      	b.n	800a40c <memmove+0x24>

0800a41c <__malloc_lock>:
 800a41c:	4801      	ldr	r0, [pc, #4]	; (800a424 <__malloc_lock+0x8>)
 800a41e:	f7fe bf02 	b.w	8009226 <__retarget_lock_acquire_recursive>
 800a422:	bf00      	nop
 800a424:	2000040c 	.word	0x2000040c

0800a428 <__malloc_unlock>:
 800a428:	4801      	ldr	r0, [pc, #4]	; (800a430 <__malloc_unlock+0x8>)
 800a42a:	f7fe befd 	b.w	8009228 <__retarget_lock_release_recursive>
 800a42e:	bf00      	nop
 800a430:	2000040c 	.word	0x2000040c

0800a434 <_realloc_r>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	4680      	mov	r8, r0
 800a43a:	4614      	mov	r4, r2
 800a43c:	460e      	mov	r6, r1
 800a43e:	b921      	cbnz	r1, 800a44a <_realloc_r+0x16>
 800a440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a444:	4611      	mov	r1, r2
 800a446:	f7ff bb71 	b.w	8009b2c <_malloc_r>
 800a44a:	b92a      	cbnz	r2, 800a458 <_realloc_r+0x24>
 800a44c:	f7ff fb02 	bl	8009a54 <_free_r>
 800a450:	4625      	mov	r5, r4
 800a452:	4628      	mov	r0, r5
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a458:	f000 f842 	bl	800a4e0 <_malloc_usable_size_r>
 800a45c:	4284      	cmp	r4, r0
 800a45e:	4607      	mov	r7, r0
 800a460:	d802      	bhi.n	800a468 <_realloc_r+0x34>
 800a462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a466:	d812      	bhi.n	800a48e <_realloc_r+0x5a>
 800a468:	4621      	mov	r1, r4
 800a46a:	4640      	mov	r0, r8
 800a46c:	f7ff fb5e 	bl	8009b2c <_malloc_r>
 800a470:	4605      	mov	r5, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d0ed      	beq.n	800a452 <_realloc_r+0x1e>
 800a476:	42bc      	cmp	r4, r7
 800a478:	4622      	mov	r2, r4
 800a47a:	4631      	mov	r1, r6
 800a47c:	bf28      	it	cs
 800a47e:	463a      	movcs	r2, r7
 800a480:	f7fe ff40 	bl	8009304 <memcpy>
 800a484:	4631      	mov	r1, r6
 800a486:	4640      	mov	r0, r8
 800a488:	f7ff fae4 	bl	8009a54 <_free_r>
 800a48c:	e7e1      	b.n	800a452 <_realloc_r+0x1e>
 800a48e:	4635      	mov	r5, r6
 800a490:	e7df      	b.n	800a452 <_realloc_r+0x1e>
	...

0800a494 <_read_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d07      	ldr	r5, [pc, #28]	; (800a4b4 <_read_r+0x20>)
 800a498:	4604      	mov	r4, r0
 800a49a:	4608      	mov	r0, r1
 800a49c:	4611      	mov	r1, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f7f9 fc20 	bl	8003ce8 <_read>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_read_r+0x1e>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_read_r+0x1e>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	20000418 	.word	0x20000418

0800a4b8 <__ascii_wctomb>:
 800a4b8:	b149      	cbz	r1, 800a4ce <__ascii_wctomb+0x16>
 800a4ba:	2aff      	cmp	r2, #255	; 0xff
 800a4bc:	bf85      	ittet	hi
 800a4be:	238a      	movhi	r3, #138	; 0x8a
 800a4c0:	6003      	strhi	r3, [r0, #0]
 800a4c2:	700a      	strbls	r2, [r1, #0]
 800a4c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4c8:	bf98      	it	ls
 800a4ca:	2001      	movls	r0, #1
 800a4cc:	4770      	bx	lr
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4770      	bx	lr

0800a4d2 <abort>:
 800a4d2:	b508      	push	{r3, lr}
 800a4d4:	2006      	movs	r0, #6
 800a4d6:	f000 f833 	bl	800a540 <raise>
 800a4da:	2001      	movs	r0, #1
 800a4dc:	f7f9 fbfa 	bl	8003cd4 <_exit>

0800a4e0 <_malloc_usable_size_r>:
 800a4e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4e4:	1f18      	subs	r0, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	bfbc      	itt	lt
 800a4ea:	580b      	ldrlt	r3, [r1, r0]
 800a4ec:	18c0      	addlt	r0, r0, r3
 800a4ee:	4770      	bx	lr

0800a4f0 <_raise_r>:
 800a4f0:	291f      	cmp	r1, #31
 800a4f2:	b538      	push	{r3, r4, r5, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	d904      	bls.n	800a504 <_raise_r+0x14>
 800a4fa:	2316      	movs	r3, #22
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a506:	b112      	cbz	r2, 800a50e <_raise_r+0x1e>
 800a508:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a50c:	b94b      	cbnz	r3, 800a522 <_raise_r+0x32>
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 f830 	bl	800a574 <_getpid_r>
 800a514:	462a      	mov	r2, r5
 800a516:	4601      	mov	r1, r0
 800a518:	4620      	mov	r0, r4
 800a51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a51e:	f000 b817 	b.w	800a550 <_kill_r>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d00a      	beq.n	800a53c <_raise_r+0x4c>
 800a526:	1c59      	adds	r1, r3, #1
 800a528:	d103      	bne.n	800a532 <_raise_r+0x42>
 800a52a:	2316      	movs	r3, #22
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	2001      	movs	r0, #1
 800a530:	e7e7      	b.n	800a502 <_raise_r+0x12>
 800a532:	2400      	movs	r4, #0
 800a534:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a538:	4628      	mov	r0, r5
 800a53a:	4798      	blx	r3
 800a53c:	2000      	movs	r0, #0
 800a53e:	e7e0      	b.n	800a502 <_raise_r+0x12>

0800a540 <raise>:
 800a540:	4b02      	ldr	r3, [pc, #8]	; (800a54c <raise+0xc>)
 800a542:	4601      	mov	r1, r0
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	f7ff bfd3 	b.w	800a4f0 <_raise_r>
 800a54a:	bf00      	nop
 800a54c:	20000020 	.word	0x20000020

0800a550 <_kill_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d07      	ldr	r5, [pc, #28]	; (800a570 <_kill_r+0x20>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	4611      	mov	r1, r2
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	f7f9 fba9 	bl	8003cb4 <_kill>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	d102      	bne.n	800a56c <_kill_r+0x1c>
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	b103      	cbz	r3, 800a56c <_kill_r+0x1c>
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	20000418 	.word	0x20000418

0800a574 <_getpid_r>:
 800a574:	f7f9 bb96 	b.w	8003ca4 <_getpid>

0800a578 <_init>:
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	bf00      	nop
 800a57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a57e:	bc08      	pop	{r3}
 800a580:	469e      	mov	lr, r3
 800a582:	4770      	bx	lr

0800a584 <_fini>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	bf00      	nop
 800a588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58a:	bc08      	pop	{r3}
 800a58c:	469e      	mov	lr, r3
 800a58e:	4770      	bx	lr
