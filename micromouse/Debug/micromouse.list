
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800a268  0800a268  0001a268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9cc  0800a9cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9cc  0800a9cc  0001a9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9d4  0800a9d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a9dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  200001e4  0800abc0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  0800abc0  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011364  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd5  00000000  00000000  00031578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00034350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  000352f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e4  00000000  00000000  00036118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015714  00000000  00000000  0004fafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090032  00000000  00000000  00065210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000f5294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a250 	.word	0x0800a250

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800a250 	.word	0x0800a250

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e009      	b.n	8000f88 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f80c 	bl	8000f9a <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	3301      	adds	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	7abb      	ldrb	r3, [r7, #10]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	ddf1      	ble.n	8000f74 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turn_LED+0x1c>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <turn_LED+0x26>
 8000fb4:	e008      	b.n	8000fc8 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f809 	bl	8000fd0 <turn_off_LED_color>
		return;
 8000fbe:	e003      	b.n	8000fc8 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f824 	bl	8001010 <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d811      	bhi.n	8001004 <turn_off_LED_color+0x34>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <turn_off_LED_color+0x18>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001005 	.word	0x08001005
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	08001005 	.word	0x08001005
 8000ff4:	08000ff9 	.word	0x08000ff9
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2120      	movs	r1, #32
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <turn_off_LED_color+0x3c>)
 8000ffe:	f003 fab7 	bl	8004570 <HAL_GPIO_WritePin>
		return;
 8001002:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020000 	.word	0x40020000

08001010 <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d811      	bhi.n	8001044 <turn_on_LED_color+0x34>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <turn_on_LED_color+0x18>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001045 	.word	0x08001045
 800102c:	08001045 	.word	0x08001045
 8001030:	08001045 	.word	0x08001045
 8001034:	08001039 	.word	0x08001039
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	2120      	movs	r1, #32
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <turn_on_LED_color+0x3c>)
 800103e:	f003 fa97 	bl	8004570 <HAL_GPIO_WritePin>
		return;
 8001042:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020000 	.word	0x40020000

08001050 <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8001056:	f002 fca1 	bl	800399c <is_switch_on>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Flood_Fill_Algo;  // TODO - Flood_Fill_Algo when not testing, Test_Algo when testing
 800105e:	2301      	movs	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b02      	cmp	r3, #2
 8001066:	d00a      	beq.n	800107e <determine_algorithm+0x2e>
 8001068:	2b02      	cmp	r3, #2
 800106a:	dc0a      	bgt.n	8001082 <determine_algorithm+0x32>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <determine_algorithm+0x26>
 8001070:	2b01      	cmp	r3, #1
 8001072:	d002      	beq.n	800107a <determine_algorithm+0x2a>
 8001074:	e005      	b.n	8001082 <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8001076:	2300      	movs	r3, #0
 8001078:	e004      	b.n	8001084 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 800107a:	2301      	movs	r3, #1
 800107c:	e002      	b.n	8001084 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 800107e:	2302      	movs	r3, #2
 8001080:	e000      	b.n	8001084 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8001082:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <do_search_algorithm>:

uint8_t do_search_algorithm(algorithm_type algo)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff60 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 800109c:	2101      	movs	r1, #1
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7b 	bl	8000f9a <turn_LED>
	turn_LED(Blue, On);
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff77 	bl	8000f9a <turn_LED>

	switch(algo)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d00e      	beq.n	80010d0 <do_search_algorithm+0x44>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	dc10      	bgt.n	80010d8 <do_search_algorithm+0x4c>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <do_search_algorithm+0x34>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d004      	beq.n	80010c8 <do_search_algorithm+0x3c>
 80010be:	e00b      	b.n	80010d8 <do_search_algorithm+0x4c>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 80010c0:	f001 fb14 	bl	80026ec <do_hug_left_algorithm>
		return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e007      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Flood_Fill_Algo:
		return do_flood_fill_algorithm();
 80010c8:	f000 f81a 	bl	8001100 <do_flood_fill_algorithm>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e003      	b.n	80010d8 <do_search_algorithm+0x4c>
	case Test_Algo:
		do_test_algorithm();
 80010d0:	f002 fd50 	bl	8003b74 <do_test_algorithm>
		return 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	e7ff      	b.n	80010d8 <do_search_algorithm+0x4c>
	}  // switch(algo)
}  // uint8_t do_search_algorithm(algorithm_type algo)
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <complete_search_algorithm>:

void complete_search_algorithm()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff39 	bl	8000f5c <turn_LEDs_all>
	turn_LED(Red, On);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff ff54 	bl	8000f9a <turn_LED>
	turn_LED(Green, On);
 80010f2:	2101      	movs	r1, #1
 80010f4:	2002      	movs	r0, #2
 80010f6:	f7ff ff50 	bl	8000f9a <turn_LED>
}  // complete_search_algorithm()
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <do_flood_fill_algorithm>:
#include "flood_fill.h"

uint8_t do_flood_fill_algorithm()
{
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	f6ad 0d88 	subw	sp, sp, #2184	; 0x888
 8001106:	af02      	add	r7, sp, #8
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	*/

	// TEMPORARY - WE'RE USING A 4 BY 4 MAZE FOR THE DEMO
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8001108:	2300      	movs	r3, #0
 800110a:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
 800110e:	e0eb      	b.n	80012e8 <do_flood_fill_algorithm+0x1e8>
		{
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8001110:	2300      	movs	r3, #0
 8001112:	f887 387e 	strb.w	r3, [r7, #2174]	; 0x87e
 8001116:	e0dd      	b.n	80012d4 <do_flood_fill_algorithm+0x1d4>
			{
				// Initialize distance grid
				maze.distance_grid[i][j] = 200;
 8001118:	f897 287f 	ldrb.w	r2, [r7, #2175]	; 0x87f
 800111c:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 8001120:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 8001124:	f2a1 610c 	subw	r1, r1, #1548	; 0x60c
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	440a      	add	r2, r1
 800112c:	4413      	add	r3, r2
 800112e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001132:	22c8      	movs	r2, #200	; 0xc8
 8001134:	701a      	strb	r2, [r3, #0]

				// Initialize cell grid - assume no walls unless border by default
				maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 8001136:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 800113a:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 800113e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001142:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 8001146:	461a      	mov	r2, r3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	441a      	add	r2, r3
 800114c:	460b      	mov	r3, r1
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	4403      	add	r3, r0
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 800115c:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 8001160:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 8001164:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001168:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 800116c:	461a      	mov	r2, r3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	441a      	add	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	4403      	add	r3, r0
 800117e:	3301      	adds	r3, #1
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 8001184:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 8001188:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 800118c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001190:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 8001194:	461a      	mov	r2, r3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	441a      	add	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	4403      	add	r3, r0
 80011a6:	3302      	adds	r3, #2
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 80011ac:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 80011b0:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 80011b4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80011b8:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 80011bc:	461a      	mov	r2, r3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	441a      	add	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	4403      	add	r3, r0
 80011ce:	3303      	adds	r3, #3
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
				maze.cell_grid[i][j].visited = Is_Not_Visited;
 80011d4:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 80011d8:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 80011dc:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80011e0:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 80011e4:	461a      	mov	r2, r3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	441a      	add	r2, r3
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	4403      	add	r3, r0
 80011f6:	3304      	adds	r3, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

				if(i == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80011fc:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001200:	2b00      	cmp	r3, #0
 8001202:	d113      	bne.n	800122c <do_flood_fill_algorithm+0x12c>
 8001204:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 8001208:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 800120c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001210:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 8001214:	461a      	mov	r2, r3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	441a      	add	r2, r3
 800121a:	460b      	mov	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	4403      	add	r3, r0
 8001226:	3302      	adds	r3, #2
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
				if(j == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 800122c:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 8001230:	2b00      	cmp	r3, #0
 8001232:	d113      	bne.n	800125c <do_flood_fill_algorithm+0x15c>
 8001234:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 8001238:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 800123c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001240:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	441a      	add	r2, r3
 800124a:	460b      	mov	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	4403      	add	r3, r0
 8001256:	3303      	adds	r3, #3
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
				if(i == MAP_SIZE - 1 || i == 3) maze.cell_grid[i][j].walls[North] = Wall_Here;
 800125c:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d003      	beq.n	800126c <do_flood_fill_algorithm+0x16c>
 8001264:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 8001268:	2b03      	cmp	r3, #3
 800126a:	d112      	bne.n	8001292 <do_flood_fill_algorithm+0x192>
 800126c:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 8001270:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 8001274:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001278:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 800127c:	461a      	mov	r2, r3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	441a      	add	r2, r3
 8001282:	460b      	mov	r3, r1
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	4403      	add	r3, r0
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
				if(j == MAP_SIZE - 1 || j == 3) maze.cell_grid[i][j].walls[East] = Wall_Here;
 8001292:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d003      	beq.n	80012a2 <do_flood_fill_algorithm+0x1a2>
 800129a:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d113      	bne.n	80012ca <do_flood_fill_algorithm+0x1ca>
 80012a2:	f897 187f 	ldrb.w	r1, [r7, #2175]	; 0x87f
 80012a6:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 80012aa:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80012ae:	f2a2 600c 	subw	r0, r2, #1548	; 0x60c
 80012b2:	461a      	mov	r2, r3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	441a      	add	r2, r3
 80012b8:	460b      	mov	r3, r1
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	4403      	add	r3, r0
 80012c4:	3301      	adds	r3, #1
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80012ca:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 80012ce:	3301      	adds	r3, #1
 80012d0:	f887 387e 	strb.w	r3, [r7, #2174]	; 0x87e
 80012d4:	f897 387e 	ldrb.w	r3, [r7, #2174]	; 0x87e
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	f67f af1d 	bls.w	8001118 <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 80012de:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80012e2:	3301      	adds	r3, #1
 80012e4:	f887 387f 	strb.w	r3, [r7, #2175]	; 0x87f
 80012e8:	f897 387f 	ldrb.w	r3, [r7, #2175]	; 0x87f
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	f67f af0f 	bls.w	8001110 <do_flood_fill_algorithm+0x10>

			}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
		}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)
	maze.distance_grid[0][0] = 6;
 80012f2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80012f6:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80012fa:	2206      	movs	r2, #6
 80012fc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
	maze.distance_grid[0][1] = 5;
 8001300:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001304:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001308:	2205      	movs	r2, #5
 800130a:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
	maze.distance_grid[0][2] = 4;
 800130e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001312:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001316:	2204      	movs	r2, #4
 8001318:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
	maze.distance_grid[0][3] = 3;
 800131c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001320:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
	maze.distance_grid[1][0] = 5;
 800132a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800132e:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001332:	2205      	movs	r2, #5
 8001334:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	maze.distance_grid[1][1] = 4;
 8001338:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800133c:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001340:	2204      	movs	r2, #4
 8001342:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
	maze.distance_grid[1][2] = 3;
 8001346:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800134a:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800134e:	2203      	movs	r2, #3
 8001350:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
	maze.distance_grid[1][3] = 2;
 8001354:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001358:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800135c:	2202      	movs	r2, #2
 800135e:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
	maze.distance_grid[2][0] = 4;
 8001362:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001366:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 800136a:	2204      	movs	r2, #4
 800136c:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
	maze.distance_grid[2][1] = 3;
 8001370:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001374:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
	maze.distance_grid[2][2] = 2;
 800137e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001382:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	maze.distance_grid[2][3] = 1;
 800138c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001390:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
	maze.distance_grid[3][0] = 3;
 800139a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800139e:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80013a2:	2203      	movs	r2, #3
 80013a4:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
	maze.distance_grid[3][1] = 2;
 80013a8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013ac:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80013b0:	2202      	movs	r2, #2
 80013b2:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
	maze.distance_grid[3][2] = 1;
 80013b6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013ba:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
	maze.distance_grid[3][3] = 0;
 80013c4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013c8:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 80013d2:	2300      	movs	r3, #0
 80013d4:	f887 387d 	strb.w	r3, [r7, #2173]	; 0x87d
	maze_direction direction = desired_direction;  // the direction we're currently facing
 80013d8:	f897 387d 	ldrb.w	r3, [r7, #2173]	; 0x87d
 80013dc:	f887 387c 	strb.w	r3, [r7, #2172]	; 0x87c
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);  // Always start in South, West corner facing North.
 80013e0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f001 f81b 	bl	8002424 <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we are currently in
 80013ee:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013f2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80013f6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80013fa:	f5a2 62c2 	sub.w	r2, r2, #1552	; 0x610
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	801a      	strh	r2, [r3, #0]

	stack stack;

	// TODO - BASICALLY COPY PASTING CODE

	print_maze(&maze, c, direction);
 8001402:	f897 287c 	ldrb.w	r2, [r7, #2172]	; 0x87c
 8001406:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800140a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800140e:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	f001 f81a 	bl	800244c <print_maze>

	if (requested_manual_command != AUTON_CHAR)
 8001418:	4bbd      	ldr	r3, [pc, #756]	; (8001710 <do_flood_fill_algorithm+0x610>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b41      	cmp	r3, #65	; 0x41
 800141e:	d002      	beq.n	8001426 <do_flood_fill_algorithm+0x326>
	{
		return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	f000 be18 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Front))
 8001426:	2001      	movs	r0, #1
 8001428:	f002 fbce 	bl	8003bc8 <is_there_wall_on_direction>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d040      	beq.n	80014b4 <do_flood_fill_algorithm+0x3b4>
	{
		maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 8001432:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001436:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	461c      	mov	r4, r3
 800143e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001442:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461d      	mov	r5, r3
 800144a:	f897 187c 	ldrb.w	r1, [r7, #2172]	; 0x87c
 800144e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001452:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001456:	462a      	mov	r2, r5
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	442a      	add	r2, r5
 800145c:	4623      	mov	r3, r4
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4423      	add	r3, r4
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4413      	add	r3, r2
 8001466:	4403      	add	r3, r0
 8001468:	440b      	add	r3, r1
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
		if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 800146e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001472:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	2b0e      	cmp	r3, #14
 800147a:	d81b      	bhi.n	80014b4 <do_flood_fill_algorithm+0x3b4>
 800147c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001480:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	1c59      	adds	r1, r3, #1
 8001488:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800148c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461c      	mov	r4, r3
 8001494:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001498:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 800149c:	4622      	mov	r2, r4
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4422      	add	r2, r4
 80014a2:	460b      	mov	r3, r1
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	4403      	add	r3, r0
 80014ae:	3302      	adds	r3, #2
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Front))

	if (requested_manual_command != AUTON_CHAR)
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <do_flood_fill_algorithm+0x610>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b41      	cmp	r3, #65	; 0x41
 80014ba:	d002      	beq.n	80014c2 <do_flood_fill_algorithm+0x3c2>
	{
		return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f000 bdca 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
	}  // if (requested_manual_command != AUTON_CHAR)

	if(is_there_wall_on_direction(Right))
 80014c2:	2002      	movs	r0, #2
 80014c4:	f002 fb80 	bl	8003bc8 <is_there_wall_on_direction>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d048      	beq.n	8001560 <do_flood_fill_algorithm+0x460>
	{
		maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 80014ce:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80014d2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	461c      	mov	r4, r3
 80014da:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80014de:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461d      	mov	r5, r3
 80014e6:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 80014ea:	3301      	adds	r3, #1
 80014ec:	425a      	negs	r2, r3
 80014ee:	f003 0103 	and.w	r1, r3, #3
 80014f2:	f002 0303 	and.w	r3, r2, #3
 80014f6:	bf58      	it	pl
 80014f8:	4259      	negpl	r1, r3
 80014fa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80014fe:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001502:	462a      	mov	r2, r5
 8001504:	0092      	lsls	r2, r2, #2
 8001506:	442a      	add	r2, r5
 8001508:	4623      	mov	r3, r4
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4423      	add	r3, r4
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	4403      	add	r3, r0
 8001514:	440b      	add	r3, r1
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
		if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 800151a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800151e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01b      	beq.n	8001560 <do_flood_fill_algorithm+0x460>
 8001528:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800152c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	4618      	mov	r0, r3
 8001534:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001538:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b01      	subs	r3, #1
 8001540:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001544:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	441a      	add	r2, r3
 800154e:	4603      	mov	r3, r0
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4403      	add	r3, r0
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	440b      	add	r3, r1
 800155a:	3301      	adds	r3, #1
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]

	}  // if(is_there_wall_on_direction(Right))

	if (requested_manual_command != AUTON_CHAR)
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <do_flood_fill_algorithm+0x610>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b41      	cmp	r3, #65	; 0x41
 8001566:	d002      	beq.n	800156e <do_flood_fill_algorithm+0x46e>
	{
		return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f000 bd74 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
	}  // if (requested_manual_command != AUTON_CHAR)

	maze.cell_grid[c.y][c.x].visited = 1;
 800156e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001572:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	4618      	mov	r0, r3
 800157a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800157e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461c      	mov	r4, r3
 8001586:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800158a:	f2a3 610c 	subw	r1, r3, #1548	; 0x60c
 800158e:	4622      	mov	r2, r4
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4422      	add	r2, r4
 8001594:	4603      	mov	r3, r0
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4403      	add	r3, r0
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	3304      	adds	r3, #4
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]


	// need to figure next direction to go to and also update rest of distance grid.
	desired_direction = minus_one_neighbor(&maze, c, &stack);
 80015a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015aa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80015ae:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80015b2:	f507 701d 	add.w	r0, r7, #628	; 0x274
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	f000 fdc2 	bl	8002140 <minus_one_neighbor>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 387d 	strb.w	r3, [r7, #2173]	; 0x87d

	if(desired_direction == Unknown)
 80015c2:	f897 387d 	ldrb.w	r3, [r7, #2173]	; 0x87d
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d14c      	bne.n	8001664 <do_flood_fill_algorithm+0x564>
	{
		while(!stack_is_empty(&stack))
 80015ca:	e035      	b.n	8001638 <do_flood_fill_algorithm+0x538>
		{
			if (requested_manual_command != AUTON_CHAR)
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <do_flood_fill_algorithm+0x610>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b41      	cmp	r3, #65	; 0x41
 80015d2:	d002      	beq.n	80015da <do_flood_fill_algorithm+0x4da>
			{
				return 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f000 bd3e 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
			}  // if (requested_manual_command != AUTON_CHAR)
			if (stack.index >= 20)
 80015da:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80015de:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80015e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80015e6:	2b13      	cmp	r3, #19
 80015e8:	d910      	bls.n	800160c <do_flood_fill_algorithm+0x50c>
			{
				char buf2[20];
				sprintf((char *)buf2, "FAILED,,,,,,,,,,,,,");
 80015ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ee:	4949      	ldr	r1, [pc, #292]	; (8001714 <do_flood_fill_algorithm+0x614>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fb6d 	bl	8007cd0 <siprintf>
				HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 80015f6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	2214      	movs	r2, #20
 8001600:	4845      	ldr	r0, [pc, #276]	; (8001718 <do_flood_fill_algorithm+0x618>)
 8001602:	f004 fc7c 	bl	8005efe <HAL_UART_Transmit>
				return 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f000 bd25 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
			}  // if (stack.index >= 100)
			// get the cell to test from the stack
			next_coordinate = pop_stack(&stack);
 800160c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fd3b 	bl	800208c <pop_stack>
 8001616:	4602      	mov	r2, r0
 8001618:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800161c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001620:	801a      	strh	r2, [r3, #0]
			// find a neighbor cell with distance one less than current
			minus_one_neighbor(&maze, next_coordinate, &stack);
 8001622:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001626:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800162a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800162e:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	f000 fd84 	bl	8002140 <minus_one_neighbor>
		while(!stack_is_empty(&stack))
 8001638:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fd13 	bl	8002068 <stack_is_empty>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0c1      	beq.n	80015cc <do_flood_fill_algorithm+0x4cc>
		}  // while(stack.index != 0)
		// next_direction is the direction to go to next
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001648:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800164c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001650:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001654:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	f000 fd71 	bl	8002140 <minus_one_neighbor>
 800165e:	4603      	mov	r3, r0
 8001660:	f887 387d 	strb.w	r3, [r7, #2173]	; 0x87d
	}  // if(next_direction == Unknown)
	int difference = desired_direction - direction + 4;
 8001664:	f897 287d 	ldrb.w	r2, [r7, #2173]	; 0x87d
 8001668:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	3304      	adds	r3, #4
 8001670:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
	char buf2[20];
	sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 8001674:	f897 187c 	ldrb.w	r1, [r7, #2172]	; 0x87c
 8001678:	f897 487d 	ldrb.w	r4, [r7, #2173]	; 0x87d
 800167c:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001680:	425a      	negs	r2, r3
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	f002 0203 	and.w	r2, r2, #3
 800168a:	bf58      	it	pl
 800168c:	4253      	negpl	r3, r2
 800168e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4623      	mov	r3, r4
 8001696:	460a      	mov	r2, r1
 8001698:	4920      	ldr	r1, [pc, #128]	; (800171c <do_flood_fill_algorithm+0x61c>)
 800169a:	f006 fb19 	bl	8007cd0 <siprintf>
	HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 800169e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	2214      	movs	r2, #20
 80016a8:	481b      	ldr	r0, [pc, #108]	; (8001718 <do_flood_fill_algorithm+0x618>)
 80016aa:	f004 fc28 	bl	8005efe <HAL_UART_Transmit>
	switch(difference % 4)
 80016ae:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 80016b2:	425a      	negs	r2, r3
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	f002 0203 	and.w	r2, r2, #3
 80016bc:	bf58      	it	pl
 80016be:	4253      	negpl	r3, r2
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d816      	bhi.n	80016f2 <do_flood_fill_algorithm+0x5f2>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <do_flood_fill_algorithm+0x5cc>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016f3 	.word	0x080016f3
 80016d0:	080016dd 	.word	0x080016dd
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	080016eb 	.word	0x080016eb
	{
	case 0:
		break;
	case 1:
		rotate_direction_90(Right);
 80016dc:	2002      	movs	r0, #2
 80016de:	f001 fdf9 	bl	80032d4 <rotate_direction_90>
		break;
 80016e2:	e006      	b.n	80016f2 <do_flood_fill_algorithm+0x5f2>
	case 2:
		rotate_180_degrees();
 80016e4:	f001 fe3b 	bl	800335e <rotate_180_degrees>
		break;
 80016e8:	e003      	b.n	80016f2 <do_flood_fill_algorithm+0x5f2>
	case 3:
		rotate_direction_90(Left);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f001 fdf2 	bl	80032d4 <rotate_direction_90>
		break;
 80016f0:	bf00      	nop
	}

	direction = desired_direction;
 80016f2:	f897 387d 	ldrb.w	r3, [r7, #2173]	; 0x87d
 80016f6:	f887 387c 	strb.w	r3, [r7, #2172]	; 0x87c

	set_servo_angle(Front);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f001 fe4a 	bl	8003394 <set_servo_angle>
	while(1)
	{
		if (requested_manual_command != AUTON_CHAR)
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <do_flood_fill_algorithm+0x610>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b41      	cmp	r3, #65	; 0x41
 8001706:	d00b      	beq.n	8001720 <do_flood_fill_algorithm+0x620>
		{
			return 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f000 bca4 	b.w	8002056 <do_flood_fill_algorithm+0xf56>
 800170e:	bf00      	nop
 8001710:	20000001 	.word	0x20000001
 8001714:	0800a268 	.word	0x0800a268
 8001718:	200003ac 	.word	0x200003ac
 800171c:	0800a27c 	.word	0x0800a27c
		}  // if (requested_manual_command != AUTON_CHAR)

		printf("Currently at x=%i, y=%i facing direction=%i.\r\n", c.x, c.y, direction);
 8001720:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001724:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001730:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	461a      	mov	r2, r3
 8001738:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 800173c:	48cb      	ldr	r0, [pc, #812]	; (8001a6c <do_flood_fill_algorithm+0x96c>)
 800173e:	f006 fa23 	bl	8007b88 <iprintf>
		char buf[20];
		sprintf((char *)buf, "@%i,%i,%i,,,,,,,,,,,,,", c.x, c.y, (uint8_t)direction);
 8001742:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001746:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
 800174e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001752:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	4619      	mov	r1, r3
 800175a:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 800175e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	460b      	mov	r3, r1
 8001766:	49c2      	ldr	r1, [pc, #776]	; (8001a70 <do_flood_fill_algorithm+0x970>)
 8001768:	f006 fab2 	bl	8007cd0 <siprintf>
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800176c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001774:	2214      	movs	r2, #20
 8001776:	48bf      	ldr	r0, [pc, #764]	; (8001a74 <do_flood_fill_algorithm+0x974>)
 8001778:	f004 fbc1 	bl	8005efe <HAL_UART_Transmit>

		switch(direction)
 800177c:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001780:	2b04      	cmp	r3, #4
 8001782:	d841      	bhi.n	8001808 <do_flood_fill_algorithm+0x708>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <do_flood_fill_algorithm+0x68c>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	080017a1 	.word	0x080017a1
 8001790:	080017bb 	.word	0x080017bb
 8001794:	080017d5 	.word	0x080017d5
 8001798:	080017ef 	.word	0x080017ef
 800179c:	08001809 	.word	0x08001809
		{
		case North:
			c.y += 1;
 80017a0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017a4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017b2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017b6:	705a      	strb	r2, [r3, #1]
			break;
 80017b8:	e026      	b.n	8001808 <do_flood_fill_algorithm+0x708>
		case East:
			c.x += 1;
 80017ba:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017be:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017cc:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017d0:	701a      	strb	r2, [r3, #0]
			break;
 80017d2:	e019      	b.n	8001808 <do_flood_fill_algorithm+0x708>
		case South:
			c.y -= 1;
 80017d4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017d8:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	3b01      	subs	r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017e6:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017ea:	705a      	strb	r2, [r3, #1]
			break;
 80017ec:	e00c      	b.n	8001808 <do_flood_fill_algorithm+0x708>
		case West:
			c.x -= 1;
 80017ee:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80017f2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001800:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001804:	701a      	strb	r2, [r3, #0]
			break;
 8001806:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)

		if(!maze.cell_grid[c.y][c.x].visited)
 8001808:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800180c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	4618      	mov	r0, r3
 8001814:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001818:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461c      	mov	r4, r3
 8001820:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001824:	f2a3 610c 	subw	r1, r3, #1548	; 0x60c
 8001828:	4622      	mov	r2, r4
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	4422      	add	r2, r4
 800182e:	4603      	mov	r3, r0
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4403      	add	r3, r0
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	440b      	add	r3, r1
 800183a:	3304      	adds	r3, #4
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 8338 	bne.w	8001eb4 <do_flood_fill_algorithm+0xdb4>
		{
			// Move in direction for unvisited cell
			go_forward_one_unit();
 8001844:	f001 fd98 	bl	8003378 <go_forward_one_unit>

			print_maze(&maze, c, direction);
 8001848:	f897 287c 	ldrb.w	r2, [r7, #2172]	; 0x87c
 800184c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001850:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001854:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001858:	6819      	ldr	r1, [r3, #0]
 800185a:	f000 fdf7 	bl	800244c <print_maze>

			if(maze.cell_grid[c.y][c.x].walls[(direction + 3) % 4] == No_Wall_Here && is_there_wall_on_direction(Left))
 800185e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001862:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	461c      	mov	r4, r3
 800186a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800186e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461d      	mov	r5, r3
 8001876:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 800187a:	3303      	adds	r3, #3
 800187c:	425a      	negs	r2, r3
 800187e:	f003 0103 	and.w	r1, r3, #3
 8001882:	f002 0303 	and.w	r3, r2, #3
 8001886:	bf58      	it	pl
 8001888:	4259      	negpl	r1, r3
 800188a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800188e:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001892:	462a      	mov	r2, r5
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	442a      	add	r2, r5
 8001898:	4623      	mov	r3, r4
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4423      	add	r3, r4
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	4413      	add	r3, r2
 80018a2:	4403      	add	r3, r0
 80018a4:	440b      	add	r3, r1
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 80cf 	bne.w	8001a4c <do_flood_fill_algorithm+0x94c>
 80018ae:	2000      	movs	r0, #0
 80018b0:	f002 f98a 	bl	8003bc8 <is_there_wall_on_direction>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80c8 	beq.w	8001a4c <do_flood_fill_algorithm+0x94c>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 3) % 4] = Wall_Here;
 80018bc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80018c0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	461c      	mov	r4, r3
 80018c8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80018cc:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461d      	mov	r5, r3
 80018d4:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 80018d8:	3303      	adds	r3, #3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0103 	and.w	r1, r3, #3
 80018e0:	f002 0303 	and.w	r3, r2, #3
 80018e4:	bf58      	it	pl
 80018e6:	4259      	negpl	r1, r3
 80018e8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80018ec:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 80018f0:	462a      	mov	r2, r5
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	442a      	add	r2, r5
 80018f6:	4623      	mov	r3, r4
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4423      	add	r3, r4
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	4413      	add	r3, r2
 8001900:	4403      	add	r3, r0
 8001902:	440b      	add	r3, r1
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001908:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 800190c:	2b04      	cmp	r3, #4
 800190e:	f200 80a6 	bhi.w	8001a5e <do_flood_fill_algorithm+0x95e>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <do_flood_fill_algorithm+0x818>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	0800192d 	.word	0x0800192d
 800191c:	08001977 	.word	0x08001977
 8001920:	080019bd 	.word	0x080019bd
 8001924:	08001a05 	.word	0x08001a05
 8001928:	08001a5f 	.word	0x08001a5f
				{
				case North:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 800192c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001930:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b0e      	cmp	r3, #14
 8001938:	f200 808a 	bhi.w	8001a50 <do_flood_fill_algorithm+0x950>
 800193c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001940:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001944:	785b      	ldrb	r3, [r3, #1]
 8001946:	4618      	mov	r0, r3
 8001948:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800194c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001958:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	441a      	add	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4403      	add	r3, r0
 8001968:	011b      	lsls	r3, r3, #4
 800196a:	4413      	add	r3, r2
 800196c:	440b      	add	r3, r1
 800196e:	3303      	adds	r3, #3
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
					break;
 8001974:	e06c      	b.n	8001a50 <do_flood_fill_algorithm+0x950>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001976:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800197a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d067      	beq.n	8001a54 <do_flood_fill_algorithm+0x954>
 8001984:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001988:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 800198c:	785b      	ldrb	r3, [r3, #1]
 800198e:	1e59      	subs	r1, r3, #1
 8001990:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001994:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461c      	mov	r4, r3
 800199c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80019a0:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 80019a4:	4622      	mov	r2, r4
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4422      	add	r2, r4
 80019aa:	460b      	mov	r3, r1
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	4403      	add	r3, r0
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
					break;
 80019ba:	e04b      	b.n	8001a54 <do_flood_fill_algorithm+0x954>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 80019bc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80019c0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d046      	beq.n	8001a58 <do_flood_fill_algorithm+0x958>
 80019ca:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80019ce:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80019da:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80019e6:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 80019ea:	461a      	mov	r2, r3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	441a      	add	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4403      	add	r3, r0
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	3301      	adds	r3, #1
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
					break;
 8001a02:	e029      	b.n	8001a58 <do_flood_fill_algorithm+0x958>
				case West:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001a04:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a08:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001a0c:	785b      	ldrb	r3, [r3, #1]
 8001a0e:	2b0e      	cmp	r3, #14
 8001a10:	d824      	bhi.n	8001a5c <do_flood_fill_algorithm+0x95c>
 8001a12:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a16:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	1c59      	adds	r1, r3, #1
 8001a1e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a22:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461c      	mov	r4, r3
 8001a2a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a2e:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001a32:	4622      	mov	r2, r4
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4422      	add	r2, r4
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	4403      	add	r3, r0
 8001a44:	3302      	adds	r3, #2
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
					break;
 8001a4a:	e007      	b.n	8001a5c <do_flood_fill_algorithm+0x95c>
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))
 8001a4c:	bf00      	nop
 8001a4e:	e006      	b.n	8001a5e <do_flood_fill_algorithm+0x95e>
					break;
 8001a50:	bf00      	nop
 8001a52:	e004      	b.n	8001a5e <do_flood_fill_algorithm+0x95e>
					break;
 8001a54:	bf00      	nop
 8001a56:	e002      	b.n	8001a5e <do_flood_fill_algorithm+0x95e>
					break;
 8001a58:	bf00      	nop
 8001a5a:	e000      	b.n	8001a5e <do_flood_fill_algorithm+0x95e>
					break;
 8001a5c:	bf00      	nop

			if (requested_manual_command != AUTON_CHAR)
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <do_flood_fill_algorithm+0x978>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b41      	cmp	r3, #65	; 0x41
 8001a64:	d00a      	beq.n	8001a7c <do_flood_fill_algorithm+0x97c>
			{
				return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e2f5      	b.n	8002056 <do_flood_fill_algorithm+0xf56>
 8001a6a:	bf00      	nop
 8001a6c:	0800a294 	.word	0x0800a294
 8001a70:	0800a2c4 	.word	0x0800a2c4
 8001a74:	200003ac 	.word	0x200003ac
 8001a78:	20000001 	.word	0x20000001
			}  // if (requested_manual_command != AUTON_CHAR)

			if(maze.cell_grid[c.y][c.x].walls[(direction) % 4] == No_Wall_Here && is_there_wall_on_direction(Front))
 8001a7c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a80:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	461c      	mov	r4, r3
 8001a88:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001a8c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461d      	mov	r5, r3
 8001a94:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001a98:	f003 0103 	and.w	r1, r3, #3
 8001a9c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001aa0:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001aa4:	462a      	mov	r2, r5
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	442a      	add	r2, r5
 8001aaa:	4623      	mov	r3, r4
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4423      	add	r3, r4
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4403      	add	r3, r0
 8001ab6:	440b      	add	r3, r1
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80c8 	bne.w	8001c50 <do_flood_fill_algorithm+0xb50>
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f002 f881 	bl	8003bc8 <is_there_wall_on_direction>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80c1 	beq.w	8001c50 <do_flood_fill_algorithm+0xb50>
			{
				maze.cell_grid[c.y][c.x].walls[direction] = Wall_Here;
 8001ace:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001ad2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001ad6:	785b      	ldrb	r3, [r3, #1]
 8001ad8:	461c      	mov	r4, r3
 8001ada:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001ade:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461d      	mov	r5, r3
 8001ae6:	f897 187c 	ldrb.w	r1, [r7, #2172]	; 0x87c
 8001aea:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001aee:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001af2:	462a      	mov	r2, r5
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	442a      	add	r2, r5
 8001af8:	4623      	mov	r3, r4
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4423      	add	r3, r4
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	4413      	add	r3, r2
 8001b02:	4403      	add	r3, r0
 8001b04:	440b      	add	r3, r1
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001b0a:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	f200 80a7 	bhi.w	8001c62 <do_flood_fill_algorithm+0xb62>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <do_flood_fill_algorithm+0xa1c>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b31 	.word	0x08001b31
 8001b20:	08001b7b 	.word	0x08001b7b
 8001b24:	08001bc3 	.word	0x08001bc3
 8001b28:	08001c09 	.word	0x08001c09
 8001b2c:	08001c63 	.word	0x08001c63
				{
				case North:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001b30:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b34:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b38:	785b      	ldrb	r3, [r3, #1]
 8001b3a:	2b0e      	cmp	r3, #14
 8001b3c:	f200 808a 	bhi.w	8001c54 <do_flood_fill_algorithm+0xb54>
 8001b40:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b44:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	1c59      	adds	r1, r3, #1
 8001b4c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b50:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461c      	mov	r4, r3
 8001b58:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b5c:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001b60:	4622      	mov	r2, r4
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4422      	add	r2, r4
 8001b66:	460b      	mov	r3, r1
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4413      	add	r3, r2
 8001b70:	4403      	add	r3, r0
 8001b72:	3302      	adds	r3, #2
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
					break;
 8001b78:	e06c      	b.n	8001c54 <do_flood_fill_algorithm+0xb54>
				case East:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001b7a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b7e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b0e      	cmp	r3, #14
 8001b86:	d867      	bhi.n	8001c58 <do_flood_fill_algorithm+0xb58>
 8001b88:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b8c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001b98:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001ba4:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 8001ba8:	461a      	mov	r2, r3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	441a      	add	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4403      	add	r3, r0
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	3303      	adds	r3, #3
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
					break;
 8001bc0:	e04a      	b.n	8001c58 <do_flood_fill_algorithm+0xb58>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001bc2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001bc6:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d045      	beq.n	8001c5c <do_flood_fill_algorithm+0xb5c>
 8001bd0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001bd4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001bd8:	785b      	ldrb	r3, [r3, #1]
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001be0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461c      	mov	r4, r3
 8001be8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001bec:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4422      	add	r2, r4
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	4413      	add	r3, r2
 8001c00:	4403      	add	r3, r0
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
					break;
 8001c06:	e029      	b.n	8001c5c <do_flood_fill_algorithm+0xb5c>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001c08:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c0c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d024      	beq.n	8001c60 <do_flood_fill_algorithm+0xb60>
 8001c16:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c1a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c26:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001c32:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 8001c36:	461a      	mov	r2, r3
 8001c38:	0092      	lsls	r2, r2, #2
 8001c3a:	441a      	add	r2, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4403      	add	r3, r0
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	3301      	adds	r3, #1
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	701a      	strb	r2, [r3, #0]
					break;
 8001c4e:	e007      	b.n	8001c60 <do_flood_fill_algorithm+0xb60>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Front))
 8001c50:	bf00      	nop
 8001c52:	e006      	b.n	8001c62 <do_flood_fill_algorithm+0xb62>
					break;
 8001c54:	bf00      	nop
 8001c56:	e004      	b.n	8001c62 <do_flood_fill_algorithm+0xb62>
					break;
 8001c58:	bf00      	nop
 8001c5a:	e002      	b.n	8001c62 <do_flood_fill_algorithm+0xb62>
					break;
 8001c5c:	bf00      	nop
 8001c5e:	e000      	b.n	8001c62 <do_flood_fill_algorithm+0xb62>
					break;
 8001c60:	bf00      	nop

			if (requested_manual_command != AUTON_CHAR)
 8001c62:	4bbc      	ldr	r3, [pc, #752]	; (8001f54 <do_flood_fill_algorithm+0xe54>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b41      	cmp	r3, #65	; 0x41
 8001c68:	d001      	beq.n	8001c6e <do_flood_fill_algorithm+0xb6e>
			{
				return 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e1f3      	b.n	8002056 <do_flood_fill_algorithm+0xf56>
			}  // if (requested_manual_command != AUTON_CHAR)

			if(maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] == No_Wall_Here && is_there_wall_on_direction(Right))
 8001c6e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c72:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	461c      	mov	r4, r3
 8001c7a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c7e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461d      	mov	r5, r3
 8001c86:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	425a      	negs	r2, r3
 8001c8e:	f003 0103 	and.w	r1, r3, #3
 8001c92:	f002 0303 	and.w	r3, r2, #3
 8001c96:	bf58      	it	pl
 8001c98:	4259      	negpl	r1, r3
 8001c9a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001c9e:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	442a      	add	r2, r5
 8001ca8:	4623      	mov	r3, r4
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4423      	add	r3, r4
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4403      	add	r3, r0
 8001cb4:	440b      	add	r3, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 80cf 	bne.w	8001e5c <do_flood_fill_algorithm+0xd5c>
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f001 ff82 	bl	8003bc8 <is_there_wall_on_direction>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80c8 	beq.w	8001e5c <do_flood_fill_algorithm+0xd5c>
			{
				maze.cell_grid[c.y][c.x].walls[(direction + 1) % 4] = Wall_Here;
 8001ccc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001cd0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001cdc:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001ce8:	3301      	adds	r3, #1
 8001cea:	425a      	negs	r2, r3
 8001cec:	f003 0103 	and.w	r1, r3, #3
 8001cf0:	f002 0303 	and.w	r3, r2, #3
 8001cf4:	bf58      	it	pl
 8001cf6:	4259      	negpl	r1, r3
 8001cf8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001cfc:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001d00:	462a      	mov	r2, r5
 8001d02:	0092      	lsls	r2, r2, #2
 8001d04:	442a      	add	r2, r5
 8001d06:	4623      	mov	r3, r4
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4423      	add	r3, r4
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	4413      	add	r3, r2
 8001d10:	4403      	add	r3, r0
 8001d12:	440b      	add	r3, r1
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001d18:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	f200 80a6 	bhi.w	8001e6e <do_flood_fill_algorithm+0xd6e>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <do_flood_fill_algorithm+0xc28>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d3d 	.word	0x08001d3d
 8001d2c:	08001d87 	.word	0x08001d87
 8001d30:	08001dcf 	.word	0x08001dcf
 8001d34:	08001e17 	.word	0x08001e17
 8001d38:	08001e6f 	.word	0x08001e6f
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.y][c.x - 1].walls[East] = Wall_Here;
 8001d3c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001d40:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 808a 	beq.w	8001e60 <do_flood_fill_algorithm+0xd60>
 8001d4c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001d50:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001d54:	785b      	ldrb	r3, [r3, #1]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001d5c:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001d68:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	441a      	add	r2, r3
 8001d72:	4603      	mov	r3, r0
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4403      	add	r3, r0
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3301      	adds	r3, #1
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
					break;
 8001d84:	e06c      	b.n	8001e60 <do_flood_fill_algorithm+0xd60>
				case East:
					if(c.y + 1 < MAP_SIZE) maze.cell_grid[c.y + 1][c.x].walls[South] = Wall_Here;
 8001d86:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001d8a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001d8e:	785b      	ldrb	r3, [r3, #1]
 8001d90:	2b0e      	cmp	r3, #14
 8001d92:	d867      	bhi.n	8001e64 <do_flood_fill_algorithm+0xd64>
 8001d94:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001d98:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001da4:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461c      	mov	r4, r3
 8001dac:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001db0:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001db4:	4622      	mov	r2, r4
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4422      	add	r2, r4
 8001dba:	460b      	mov	r3, r1
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4403      	add	r3, r0
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
					break;
 8001dcc:	e04a      	b.n	8001e64 <do_flood_fill_algorithm+0xd64>
				case South:
					if(c.x + 1 < MAP_SIZE) maze.cell_grid[c.y][c.x + 1].walls[West] = Wall_Here;
 8001dce:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001dd2:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b0e      	cmp	r3, #14
 8001dda:	d845      	bhi.n	8001e68 <do_flood_fill_algorithm+0xd68>
 8001ddc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001de0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001de4:	785b      	ldrb	r3, [r3, #1]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001dec:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8001df8:	f2a2 610c 	subw	r1, r2, #1548	; 0x60c
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	441a      	add	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4403      	add	r3, r0
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4413      	add	r3, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3303      	adds	r3, #3
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
					break;
 8001e14:	e028      	b.n	8001e68 <do_flood_fill_algorithm+0xd68>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.y - 1][c.x].walls[North] = Wall_Here;
 8001e16:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e1a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <do_flood_fill_algorithm+0xd6c>
 8001e24:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e28:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e34:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e40:	f2a3 600c 	subw	r0, r3, #1548	; 0x60c
 8001e44:	4622      	mov	r2, r4
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4422      	add	r2, r4
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	4403      	add	r3, r0
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
					break;
 8001e5a:	e007      	b.n	8001e6c <do_flood_fill_algorithm+0xd6c>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))
 8001e5c:	bf00      	nop
 8001e5e:	e006      	b.n	8001e6e <do_flood_fill_algorithm+0xd6e>
					break;
 8001e60:	bf00      	nop
 8001e62:	e004      	b.n	8001e6e <do_flood_fill_algorithm+0xd6e>
					break;
 8001e64:	bf00      	nop
 8001e66:	e002      	b.n	8001e6e <do_flood_fill_algorithm+0xd6e>
					break;
 8001e68:	bf00      	nop
 8001e6a:	e000      	b.n	8001e6e <do_flood_fill_algorithm+0xd6e>
					break;
 8001e6c:	bf00      	nop

			if (requested_manual_command != AUTON_CHAR)
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <do_flood_fill_algorithm+0xe54>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b41      	cmp	r3, #65	; 0x41
 8001e74:	d001      	beq.n	8001e7a <do_flood_fill_algorithm+0xd7a>
			{
				return 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e0ed      	b.n	8002056 <do_flood_fill_algorithm+0xf56>
			}  // if (requested_manual_command != AUTON_CHAR)

			maze.cell_grid[c.y][c.x].visited = 1;
 8001e7a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e7e:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001e82:	785b      	ldrb	r3, [r3, #1]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e8a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461c      	mov	r4, r3
 8001e92:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001e96:	f2a3 610c 	subw	r1, r3, #1548	; 0x60c
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	0092      	lsls	r2, r2, #2
 8001e9e:	4422      	add	r2, r4
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	011b      	lsls	r3, r3, #4
 8001ea8:	4413      	add	r3, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3304      	adds	r3, #4
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e00c      	b.n	8001ece <do_flood_fill_algorithm+0xdce>

		}  // if(!maze.cell_grid[c.y][c.x].visited)
		else
		{
			// Move in direction for visited cell
			go_forward_one_unit();
 8001eb4:	f001 fa60 	bl	8003378 <go_forward_one_unit>

			print_maze(&maze, c, direction);
 8001eb8:	f897 287c 	ldrb.w	r2, [r7, #2172]	; 0x87c
 8001ebc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001ec0:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001ec4:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001ec8:	6819      	ldr	r1, [r3, #0]
 8001eca:	f000 fabf 	bl	800244c <print_maze>
		}
		set_servo_angle(Front);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f001 fa60 	bl	8003394 <set_servo_angle>

		if(found_flood_fill_destination(c, &maze))
 8001ed4:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001ed8:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001edc:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f000 f912 	bl	800210c <found_flood_fill_destination>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d019      	beq.n	8001f22 <do_flood_fill_algorithm+0xe22>
		{
			set_servo_angle(Front);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f001 fa50 	bl	8003394 <set_servo_angle>
			printf("Completed maze!\r\n");
 8001ef4:	4818      	ldr	r0, [pc, #96]	; (8001f58 <do_flood_fill_algorithm+0xe58>)
 8001ef6:	f005 fee3 	bl	8007cc0 <puts>
			char buf[20];
			memcpy(buf, "&COMPLETED,,,,,,,,,", 20);
 8001efa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001efe:	f6a3 037c 	subw	r3, r3, #2172	; 0x87c
 8001f02:	4a16      	ldr	r2, [pc, #88]	; (8001f5c <do_flood_fill_algorithm+0xe5c>)
 8001f04:	461c      	mov	r4, r3
 8001f06:	4615      	mov	r5, r2
 8001f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8001f10:	1d39      	adds	r1, r7, #4
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	2214      	movs	r2, #20
 8001f18:	4811      	ldr	r0, [pc, #68]	; (8001f60 <do_flood_fill_algorithm+0xe60>)
 8001f1a:	f003 fff0 	bl	8005efe <HAL_UART_Transmit>
			return 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e099      	b.n	8002056 <do_flood_fill_algorithm+0xf56>
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001f22:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f26:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f2a:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001f2e:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	f000 f904 	bl	8002140 <minus_one_neighbor>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 387d 	strb.w	r3, [r7, #2173]	; 0x87d

		if(desired_direction == Unknown)
 8001f3e:	f897 387d 	ldrb.w	r3, [r7, #2173]	; 0x87d
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d13a      	bne.n	8001fbc <do_flood_fill_algorithm+0xebc>
		{
			while(!stack_is_empty(&stack))
 8001f46:	e023      	b.n	8001f90 <do_flood_fill_algorithm+0xe90>
			{
				if (requested_manual_command != AUTON_CHAR)
 8001f48:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <do_flood_fill_algorithm+0xe54>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b41      	cmp	r3, #65	; 0x41
 8001f4e:	d009      	beq.n	8001f64 <do_flood_fill_algorithm+0xe64>
				{
					return 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e080      	b.n	8002056 <do_flood_fill_algorithm+0xf56>
 8001f54:	20000001 	.word	0x20000001
 8001f58:	0800a2dc 	.word	0x0800a2dc
 8001f5c:	0800a2f0 	.word	0x0800a2f0
 8001f60:	200003ac 	.word	0x200003ac
				}  // if (requested_manual_command != AUTON_CHAR)
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 8001f64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f88f 	bl	800208c <pop_stack>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f74:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001f78:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, next_coordinate, &stack);
 8001f7a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f7e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f82:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001f86:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	f000 f8d8 	bl	8002140 <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 8001f90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f867 	bl	8002068 <stack_is_empty>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0d3      	beq.n	8001f48 <do_flood_fill_algorithm+0xe48>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, c, &stack);
 8001fa0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001fa4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001fa8:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001fac:	f507 701d 	add.w	r0, r7, #628	; 0x274
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	f000 f8c5 	bl	8002140 <minus_one_neighbor>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 387d 	strb.w	r3, [r7, #2173]	; 0x87d
		}  // if(next_direction == Unknown)
		int difference = desired_direction - direction + 4;
 8001fbc:	f897 287d 	ldrb.w	r2, [r7, #2173]	; 0x87d
 8001fc0:	f897 387c 	ldrb.w	r3, [r7, #2172]	; 0x87c
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
		char buf2[20];
		sprintf((char *)buf2, "^%i,%i,%i,,,,,,,,,,,,,", direction, desired_direction, difference % 4);
 8001fcc:	f897 187c 	ldrb.w	r1, [r7, #2172]	; 0x87c
 8001fd0:	f897 487d 	ldrb.w	r4, [r7, #2173]	; 0x87d
 8001fd4:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	f107 0018 	add.w	r0, r7, #24
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	4623      	mov	r3, r4
 8001fee:	460a      	mov	r2, r1
 8001ff0:	491b      	ldr	r1, [pc, #108]	; (8002060 <do_flood_fill_algorithm+0xf60>)
 8001ff2:	f005 fe6d 	bl	8007cd0 <siprintf>
		HAL_UART_Transmit(&huart6, buf2, sizeof(buf2), 1000);
 8001ff6:	f107 0118 	add.w	r1, r7, #24
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	2214      	movs	r2, #20
 8002000:	4818      	ldr	r0, [pc, #96]	; (8002064 <do_flood_fill_algorithm+0xf64>)
 8002002:	f003 ff7c 	bl	8005efe <HAL_UART_Transmit>
		switch(difference % 4)
 8002006:	f8d7 3874 	ldr.w	r3, [r7, #2164]	; 0x874
 800200a:	425a      	negs	r2, r3
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	bf58      	it	pl
 8002016:	4253      	negpl	r3, r2
 8002018:	2b03      	cmp	r3, #3
 800201a:	d816      	bhi.n	800204a <do_flood_fill_algorithm+0xf4a>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <do_flood_fill_algorithm+0xf24>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	0800204b 	.word	0x0800204b
 8002028:	08002035 	.word	0x08002035
 800202c:	0800203d 	.word	0x0800203d
 8002030:	08002043 	.word	0x08002043
		{
		case 0:
			break;
		case 1:
			rotate_direction_90(Right);
 8002034:	2002      	movs	r0, #2
 8002036:	f001 f94d 	bl	80032d4 <rotate_direction_90>
			break;
 800203a:	e006      	b.n	800204a <do_flood_fill_algorithm+0xf4a>
		case 2:
			rotate_180_degrees();
 800203c:	f001 f98f 	bl	800335e <rotate_180_degrees>
			break;
 8002040:	e003      	b.n	800204a <do_flood_fill_algorithm+0xf4a>
		case 3:
			rotate_direction_90(Left);
 8002042:	2000      	movs	r0, #0
 8002044:	f001 f946 	bl	80032d4 <rotate_direction_90>
			break;
 8002048:	bf00      	nop
		}


		direction = desired_direction;
 800204a:	f897 387d 	ldrb.w	r3, [r7, #2173]	; 0x87d
 800204e:	f887 387c 	strb.w	r3, [r7, #2172]	; 0x87c
	{
 8002052:	f7ff bb55 	b.w	8001700 <do_flood_fill_algorithm+0x600>

	}  // while(1)
}  // do_hug_left_algorithm()
 8002056:	4618      	mov	r0, r3
 8002058:	f507 6708 	add.w	r7, r7, #2176	; 0x880
 800205c:	46bd      	mov	sp, r7
 800205e:	bdb0      	pop	{r4, r5, r7, pc}
 8002060:	0800a27c 	.word	0x0800a27c
 8002064:	200003ac 	.word	0x200003ac

08002068 <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <pop_stack>:

coordinate pop_stack(stack *s)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800209a:	3b01      	subs	r3, #1
 800209c:	b2da      	uxtb	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80020aa:	3301      	adds	r3, #1
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	f107 020c 	add.w	r2, r7, #12
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	440b      	add	r3, r1
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	8013      	strh	r3, [r2, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	7b3a      	ldrb	r2, [r7, #12]
 80020be:	f362 0307 	bfi	r3, r2, #0, #8
 80020c2:	7b7a      	ldrb	r2, [r7, #13]
 80020c4:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <push_stack>:

void push_stack(stack* s, coordinate c)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	8039      	strh	r1, [r7, #0]
	s->index = s->index + 1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80020e4:	3301      	adds	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = c;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	463a      	mov	r2, r7
 80020fc:	8812      	ldrh	r2, [r2, #0]
 80020fe:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <found_flood_fill_destination>:

uint8_t found_flood_fill_destination(coordinate c, flood_fill_maze *maze)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	80b8      	strh	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c.y][c.x] == 0;
 8002116:	797b      	ldrb	r3, [r7, #5]
 8002118:	793a      	ldrb	r2, [r7, #4]
 800211a:	4611      	mov	r1, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	4413      	add	r3, r2
 8002122:	440b      	add	r3, r1
 8002124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(coordinate c, Flood_Fill_Maze *maze)
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate c, stack *s)
{
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	8139      	strh	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = MAP_SIZE * MAP_SIZE + 4;
 800214c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002150:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c.y][c.x] - 1;
 8002152:	7a7b      	ldrb	r3, [r7, #9]
 8002154:	7a3a      	ldrb	r2, [r7, #8]
 8002156:	4611      	mov	r1, r2
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	440b      	add	r3, r1
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 800216e:	2300      	movs	r3, #0
 8002170:	757b      	strb	r3, [r7, #21]
 8002172:	e0e8      	b.n	8002346 <minus_one_neighbor+0x206>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8002174:	7a7b      	ldrb	r3, [r7, #9]
 8002176:	461c      	mov	r4, r3
 8002178:	7a3b      	ldrb	r3, [r7, #8]
 800217a:	7d79      	ldrb	r1, [r7, #21]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	461a      	mov	r2, r3
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	441a      	add	r2, r3
 8002184:	4623      	mov	r3, r4
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4423      	add	r3, r4
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	4403      	add	r3, r0
 8002190:	440b      	add	r3, r1
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 80ca 	bne.w	800232e <minus_one_neighbor+0x1ee>
		{
			switch(i)
 800219a:	7d7b      	ldrb	r3, [r7, #21]
 800219c:	2b04      	cmp	r3, #4
 800219e:	f200 80cf 	bhi.w	8002340 <minus_one_neighbor+0x200>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <minus_one_neighbor+0x68>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	080021bd 	.word	0x080021bd
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	08002277 	.word	0x08002277
 80021b4:	080022d3 	.word	0x080022d3
 80021b8:	08002341 	.word	0x08002341
			{
			case North:
				if(maze->distance_grid[c.y+1][c.x] == target)
 80021bc:	7a7b      	ldrb	r3, [r7, #9]
 80021be:	3301      	adds	r3, #1
 80021c0:	7a3a      	ldrb	r2, [r7, #8]
 80021c2:	4611      	mov	r1, r2
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d101      	bne.n	80021e0 <minus_one_neighbor+0xa0>
				{
					return i;
 80021dc:	7d7b      	ldrb	r3, [r7, #21]
 80021de:	e11c      	b.n	800241a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y+1][c.x] == target)
				if(maze->distance_grid[c.y+1][c.x] < min_dist)
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	3301      	adds	r3, #1
 80021e4:	7a3a      	ldrb	r2, [r7, #8]
 80021e6:	4611      	mov	r1, r2
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	4413      	add	r3, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	8afa      	ldrh	r2, [r7, #22]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f240 8099 	bls.w	8002332 <minus_one_neighbor+0x1f2>
				{
					min_dist = maze->distance_grid[c.y+1][c.x];
 8002200:	7a7b      	ldrb	r3, [r7, #9]
 8002202:	3301      	adds	r3, #1
 8002204:	7a3a      	ldrb	r2, [r7, #8]
 8002206:	4611      	mov	r1, r2
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4413      	add	r3, r2
 800220e:	440b      	add	r3, r1
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y+1][c.x] < min_dist)
				break;
 8002218:	e08b      	b.n	8002332 <minus_one_neighbor+0x1f2>
			case East:
				if(maze->distance_grid[c.y][c.x+1] == target)
 800221a:	7a7b      	ldrb	r3, [r7, #9]
 800221c:	461a      	mov	r2, r3
 800221e:	7a3b      	ldrb	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	68f9      	ldr	r1, [r7, #12]
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	440a      	add	r2, r1
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002236:	429a      	cmp	r2, r3
 8002238:	d101      	bne.n	800223e <minus_one_neighbor+0xfe>
				{
					return i;
 800223a:	7d7b      	ldrb	r3, [r7, #21]
 800223c:	e0ed      	b.n	800241a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y][c.x+1] == target)
				if(maze->distance_grid[c.y][c.x+1] < min_dist)
 800223e:	7a7b      	ldrb	r3, [r7, #9]
 8002240:	461a      	mov	r2, r3
 8002242:	7a3b      	ldrb	r3, [r7, #8]
 8002244:	3301      	adds	r3, #1
 8002246:	68f9      	ldr	r1, [r7, #12]
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	440a      	add	r2, r1
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	8afa      	ldrh	r2, [r7, #22]
 8002258:	429a      	cmp	r2, r3
 800225a:	d96c      	bls.n	8002336 <minus_one_neighbor+0x1f6>
				{
					min_dist = maze->distance_grid[c.y][c.x+1];
 800225c:	7a7b      	ldrb	r3, [r7, #9]
 800225e:	461a      	mov	r2, r3
 8002260:	7a3b      	ldrb	r3, [r7, #8]
 8002262:	3301      	adds	r3, #1
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	440a      	add	r2, r1
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x+1] < min_dist)
				break;
 8002274:	e05f      	b.n	8002336 <minus_one_neighbor+0x1f6>
			case South:
				if(maze->distance_grid[c.y-1][c.x] == target)
 8002276:	7a7b      	ldrb	r3, [r7, #9]
 8002278:	3b01      	subs	r3, #1
 800227a:	7a3a      	ldrb	r2, [r7, #8]
 800227c:	4611      	mov	r1, r2
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	4413      	add	r3, r2
 8002284:	440b      	add	r3, r1
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002292:	429a      	cmp	r2, r3
 8002294:	d101      	bne.n	800229a <minus_one_neighbor+0x15a>
				{
					return i;
 8002296:	7d7b      	ldrb	r3, [r7, #21]
 8002298:	e0bf      	b.n	800241a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y-1][c.x] == target)
				if(maze->distance_grid[c.y-1][c.x] < min_dist)
 800229a:	7a7b      	ldrb	r3, [r7, #9]
 800229c:	3b01      	subs	r3, #1
 800229e:	7a3a      	ldrb	r2, [r7, #8]
 80022a0:	4611      	mov	r1, r2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	4413      	add	r3, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	8afa      	ldrh	r2, [r7, #22]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d940      	bls.n	800233a <minus_one_neighbor+0x1fa>
				{
					min_dist = maze->distance_grid[c.y-1][c.x];
 80022b8:	7a7b      	ldrb	r3, [r7, #9]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	7a3a      	ldrb	r2, [r7, #8]
 80022be:	4611      	mov	r1, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y-1][c.x] < min_dist)
				break;
 80022d0:	e033      	b.n	800233a <minus_one_neighbor+0x1fa>
			case West:
				if(maze->distance_grid[c.y][c.x-1] == target)
 80022d2:	7a7b      	ldrb	r3, [r7, #9]
 80022d4:	461a      	mov	r2, r3
 80022d6:	7a3b      	ldrb	r3, [r7, #8]
 80022d8:	3b01      	subs	r3, #1
 80022da:	68f9      	ldr	r1, [r7, #12]
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	440a      	add	r2, r1
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d101      	bne.n	80022f6 <minus_one_neighbor+0x1b6>
				{
					return i;
 80022f2:	7d7b      	ldrb	r3, [r7, #21]
 80022f4:	e091      	b.n	800241a <minus_one_neighbor+0x2da>
				}  // if(maze->distance_grid[c.y][c.x-1] == target)
				if(maze->distance_grid[c.y][c.x-1] < min_dist)
 80022f6:	7a7b      	ldrb	r3, [r7, #9]
 80022f8:	461a      	mov	r2, r3
 80022fa:	7a3b      	ldrb	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	440a      	add	r2, r1
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	8afa      	ldrh	r2, [r7, #22]
 8002310:	429a      	cmp	r2, r3
 8002312:	d914      	bls.n	800233e <minus_one_neighbor+0x1fe>
				{
					min_dist = maze->distance_grid[c.y][c.x-1];
 8002314:	7a7b      	ldrb	r3, [r7, #9]
 8002316:	461a      	mov	r2, r3
 8002318:	7a3b      	ldrb	r3, [r7, #8]
 800231a:	3b01      	subs	r3, #1
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	440a      	add	r2, r1
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c.y][c.x-1] < min_dist)
				break;
 800232c:	e007      	b.n	800233e <minus_one_neighbor+0x1fe>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 800232e:	bf00      	nop
 8002330:	e006      	b.n	8002340 <minus_one_neighbor+0x200>
				break;
 8002332:	bf00      	nop
 8002334:	e004      	b.n	8002340 <minus_one_neighbor+0x200>
				break;
 8002336:	bf00      	nop
 8002338:	e002      	b.n	8002340 <minus_one_neighbor+0x200>
				break;
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <minus_one_neighbor+0x200>
				break;
 800233e:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 8002340:	7d7b      	ldrb	r3, [r7, #21]
 8002342:	3301      	adds	r3, #1
 8002344:	757b      	strb	r3, [r7, #21]
 8002346:	7d7b      	ldrb	r3, [r7, #21]
 8002348:	2b03      	cmp	r3, #3
 800234a:	f67f af13 	bls.w	8002174 <minus_one_neighbor+0x34>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c.y][c.x] = min_dist + 1;
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	7a7a      	ldrb	r2, [r7, #9]
 8002354:	4614      	mov	r4, r2
 8002356:	7a3a      	ldrb	r2, [r7, #8]
 8002358:	4610      	mov	r0, r2
 800235a:	3301      	adds	r3, #1
 800235c:	b2d9      	uxtb	r1, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	0123      	lsls	r3, r4, #4
 8002362:	4413      	add	r3, r2
 8002364:	4403      	add	r3, r0
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	460a      	mov	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 800236e:	2300      	movs	r3, #0
 8002370:	753b      	strb	r3, [r7, #20]
 8002372:	e04e      	b.n	8002412 <minus_one_neighbor+0x2d2>
	{
		if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
 8002374:	7a7b      	ldrb	r3, [r7, #9]
 8002376:	461c      	mov	r4, r3
 8002378:	7a3b      	ldrb	r3, [r7, #8]
 800237a:	7d39      	ldrb	r1, [r7, #20]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	0092      	lsls	r2, r2, #2
 8002382:	441a      	add	r2, r3
 8002384:	4623      	mov	r3, r4
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4423      	add	r3, r4
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	4403      	add	r3, r0
 8002390:	440b      	add	r3, r1
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d139      	bne.n	800240c <minus_one_neighbor+0x2cc>
		{
			coordinate temp;
			switch(i)
 8002398:	7d3b      	ldrb	r3, [r7, #20]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d832      	bhi.n	8002404 <minus_one_neighbor+0x2c4>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <minus_one_neighbor+0x264>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023c9 	.word	0x080023c9
 80023ac:	080023dd 	.word	0x080023dd
 80023b0:	080023f1 	.word	0x080023f1
			{
			case North:
				init_coordinate(&temp, c.x, c.y + 1);
 80023b4:	7a39      	ldrb	r1, [r7, #8]
 80023b6:	7a7b      	ldrb	r3, [r7, #9]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f82f 	bl	8002424 <init_coordinate>
				break;
 80023c6:	e01d      	b.n	8002404 <minus_one_neighbor+0x2c4>
			case East:
				init_coordinate(&temp, c.x + 1, c.y);
 80023c8:	7a3b      	ldrb	r3, [r7, #8]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	7a7a      	ldrb	r2, [r7, #9]
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f825 	bl	8002424 <init_coordinate>
				break;
 80023da:	e013      	b.n	8002404 <minus_one_neighbor+0x2c4>
			case South:
				init_coordinate(&temp, c.x, c.y - 1);
 80023dc:	7a39      	ldrb	r1, [r7, #8]
 80023de:	7a7b      	ldrb	r3, [r7, #9]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f81b 	bl	8002424 <init_coordinate>
				break;
 80023ee:	e009      	b.n	8002404 <minus_one_neighbor+0x2c4>
			case West:
				init_coordinate(&temp, c.x - 1, c.y);
 80023f0:	7a3b      	ldrb	r3, [r7, #8]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b2d9      	uxtb	r1, r3
 80023f6:	7a7a      	ldrb	r2, [r7, #9]
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f811 	bl	8002424 <init_coordinate>
				break;
 8002402:	bf00      	nop
			}  // switch(i)
			push_stack(s, temp);
 8002404:	6939      	ldr	r1, [r7, #16]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fe64 	bl	80020d4 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 800240c:	7d3b      	ldrb	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	753b      	strb	r3, [r7, #20]
 8002412:	7d3b      	ldrb	r3, [r7, #20]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d9ad      	bls.n	8002374 <minus_one_neighbor+0x234>
		}  // if(maze->cell_grid[c.y][c.x].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8002418:	2304      	movs	r3, #4
}
 800241a:	4618      	mov	r0, r3
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop

08002424 <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
 8002430:	4613      	mov	r3, r2
 8002432:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	701a      	strb	r2, [r3, #0]
	c->y = y;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	78ba      	ldrb	r2, [r7, #2]
 800243e:	705a      	strb	r2, [r3, #1]
}  // void init_coor(coordinate c, uint8_t x, uint8_t y)
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <print_maze>:

void print_maze(flood_fill_maze *maze, coordinate c, maze_direction direction)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0c6      	sub	sp, #280	; 0x118
 8002450:	af00      	add	r7, sp, #0
 8002452:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002456:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800245a:	6018      	str	r0, [r3, #0]
 800245c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002464:	8019      	strh	r1, [r3, #0]
 8002466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800246a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800246e:	701a      	strb	r2, [r3, #0]
	printf("Printing maze grid. \r\n");
 8002470:	489c      	ldr	r0, [pc, #624]	; (80026e4 <print_maze+0x298>)
 8002472:	f005 fc25 	bl	8007cc0 <puts>
	char maze_map[MAP_SIZE][MAP_SIZE];

	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 8002476:	2300      	movs	r3, #0
 8002478:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800247c:	e08c      	b.n	8002598 <print_maze+0x14c>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002484:	e07e      	b.n	8002584 <print_maze+0x138>
		{
			uint8_t number = maze->cell_grid[i][j].walls[North];
 8002486:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 800248a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800248e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002492:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002496:	6810      	ldr	r0, [r2, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	441a      	add	r2, r3
 800249e:	460b      	mov	r3, r1
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	4413      	add	r3, r2
 80024a8:	4403      	add	r3, r0
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[East] << 1;
 80024b0:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 80024b4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80024b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80024bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024c0:	6810      	ldr	r0, [r2, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	460b      	mov	r3, r1
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	4413      	add	r3, r2
 80024d2:	4403      	add	r3, r0
 80024d4:	3301      	adds	r3, #1
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	b25a      	sxtb	r2, r3
 80024dc:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[South] << 2;
 80024e8:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 80024ec:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80024f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80024f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80024f8:	6810      	ldr	r0, [r2, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	441a      	add	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	4413      	add	r3, r2
 800250a:	4403      	add	r3, r0
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	b25a      	sxtb	r2, r3
 8002514:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8002518:	4313      	orrs	r3, r2
 800251a:	b25b      	sxtb	r3, r3
 800251c:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			number |= maze->cell_grid[i][j].walls[West] << 3;
 8002520:	f897 1117 	ldrb.w	r1, [r7, #279]	; 0x117
 8002524:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002528:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800252c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002530:	6810      	ldr	r0, [r2, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	441a      	add	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	4403      	add	r3, r0
 8002544:	3303      	adds	r3, #3
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	b25a      	sxtb	r2, r3
 800254c:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8002550:	4313      	orrs	r3, r2
 8002552:	b25b      	sxtb	r3, r3
 8002554:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
			maze_map[i][j] = 'a' + number;
 8002558:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800255c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002560:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 8002564:	3161      	adds	r1, #97	; 0x61
 8002566:	b2c8      	uxtb	r0, r1
 8002568:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800256c:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	440a      	add	r2, r1
 8002574:	4413      	add	r3, r2
 8002576:	4602      	mov	r2, r0
 8002578:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 800257a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800257e:	3301      	adds	r3, #1
 8002580:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002584:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002588:	2b0f      	cmp	r3, #15
 800258a:	f67f af7c 	bls.w	8002486 <print_maze+0x3a>
	for (uint8_t i = 0; i < MAP_SIZE; ++i)
 800258e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002592:	3301      	adds	r3, #1
 8002594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002598:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800259c:	2b0f      	cmp	r3, #15
 800259e:	f67f af6e 	bls.w	800247e <print_maze+0x32>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)
	}  // for (uint8_t i = 0; i < MAP_SIZE; ++i)

	switch(direction)
 80025a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025a6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d865      	bhi.n	800267c <print_maze+0x230>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <print_maze+0x16c>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025cd 	.word	0x080025cd
 80025bc:	080025f9 	.word	0x080025f9
 80025c0:	08002625 	.word	0x08002625
 80025c4:	08002651 	.word	0x08002651
 80025c8:	0800267d 	.word	0x0800267d
	{
	case North:
		maze_map[c.y][c.x] = 'N';
 80025cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025e8:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 80025ec:	0103      	lsls	r3, r0, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	224e      	movs	r2, #78	; 0x4e
 80025f4:	701a      	strb	r2, [r3, #0]
		break;
 80025f6:	e041      	b.n	800267c <print_maze+0x230>
	case East:
		maze_map[c.y][c.x] = 'E';
 80025f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	4618      	mov	r0, r3
 8002604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002608:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002614:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002618:	0103      	lsls	r3, r0, #4
 800261a:	4413      	add	r3, r2
 800261c:	440b      	add	r3, r1
 800261e:	2245      	movs	r2, #69	; 0x45
 8002620:	701a      	strb	r2, [r3, #0]
		break;
 8002622:	e02b      	b.n	800267c <print_maze+0x230>
	case South:
		maze_map[c.y][c.x] = 'S';
 8002624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002628:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	4618      	mov	r0, r3
 8002630:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002634:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002640:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002644:	0103      	lsls	r3, r0, #4
 8002646:	4413      	add	r3, r2
 8002648:	440b      	add	r3, r1
 800264a:	2253      	movs	r2, #83	; 0x53
 800264c:	701a      	strb	r2, [r3, #0]
		break;
 800264e:	e015      	b.n	800267c <print_maze+0x230>
	case West:
		maze_map[c.y][c.x] = 'W';
 8002650:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002654:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	4618      	mov	r0, r3
 800265c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002660:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800266c:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002670:	0103      	lsls	r3, r0, #4
 8002672:	4413      	add	r3, r2
 8002674:	440b      	add	r3, r1
 8002676:	2257      	movs	r2, #87	; 0x57
 8002678:	701a      	strb	r2, [r3, #0]
		break;
 800267a:	bf00      	nop
	case Unknown:
		break;
	}  // switch(i)

	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 800267c:	230f      	movs	r3, #15
 800267e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8002682:	e024      	b.n	80026ce <print_maze+0x282>
	{
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 800268a:	e013      	b.n	80026b4 <print_maze+0x268>
		{
			printf("%c", maze_map[i][j]);
 800268c:	f997 2115 	ldrsb.w	r2, [r7, #277]	; 0x115
 8002690:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002694:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002698:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	440a      	add	r2, r1
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fa87 	bl	8007bb8 <putchar>
		for (uint8_t j = 0; j < MAP_SIZE; ++j)
 80026aa:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80026ae:	3301      	adds	r3, #1
 80026b0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 80026b4:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d9e7      	bls.n	800268c <print_maze+0x240>
		}  // for (uint8_t j = 0; j < MAP_SIZE; ++j)

		printf("\r\n");
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <print_maze+0x29c>)
 80026be:	f005 faff 	bl	8007cc0 <puts>
	for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
 80026c2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80026ce:	f997 3115 	ldrsb.w	r3, [r7, #277]	; 0x115
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	dad6      	bge.n	8002684 <print_maze+0x238>
	}  // for (int8_t i = MAP_SIZE - 1; i >= 0; --i)
}  // void print_maze(flood_fill_maze *m, coordinate c)
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800a304 	.word	0x0800a304
 80026e8:	0800a31c 	.word	0x0800a31c

080026ec <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 80026f0:	2000      	movs	r0, #0
 80026f2:	f001 fa69 	bl	8003bc8 <is_there_wall_on_direction>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d105      	bne.n	8002708 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction_90(Left);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f000 fde9 	bl	80032d4 <rotate_direction_90>
		go_forward_one_unit();
 8002702:	f000 fe39 	bl	8003378 <go_forward_one_unit>
 8002706:	e018      	b.n	800273a <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8002708:	2001      	movs	r0, #1
 800270a:	f001 fa5d 	bl	8003bc8 <is_there_wall_on_direction>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d010      	beq.n	8002736 <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8002714:	2002      	movs	r0, #2
 8002716:	f001 fa57 	bl	8003bc8 <is_there_wall_on_direction>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8002720:	f000 fe1d 	bl	800335e <rotate_180_degrees>
			go_forward_one_unit();
 8002724:	f000 fe28 	bl	8003378 <go_forward_one_unit>
 8002728:	e007      	b.n	800273a <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction_90(Right);
 800272a:	2002      	movs	r0, #2
 800272c:	f000 fdd2 	bl	80032d4 <rotate_direction_90>
			go_forward_one_unit();
 8002730:	f000 fe22 	bl	8003378 <go_forward_one_unit>
 8002734:	e001      	b.n	800273a <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 8002736:	f000 fe1f 	bl	8003378 <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 800273a:	f000 f808 	bl	800274e <found_hugger_destination>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 8002744:	f7ff ffd2 	bl	80026ec <do_hug_left_algorithm>
 8002748:	e000      	b.n	800274c <do_hug_left_algorithm+0x60>
		return;
 800274a:	bf00      	nop
}  // do_hug_left_algorithm()
 800274c:	bd80      	pop	{r7, pc}

0800274e <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 8002752:	2300      	movs	r3, #0
}  // found_hugger_destination()
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(USART6_IRQn);
 8002768:	2047      	movs	r0, #71	; 0x47
 800276a:	f001 fcc2 	bl	80040f2 <HAL_NVIC_DisableIRQ>
	// Save the last command

	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800276e:	2047      	movs	r0, #71	; 0x47
 8002770:	f001 fcb1 	bl	80040d6 <HAL_NVIC_EnableIRQ>
	HAL_StatusTypeDef ret = HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 8002774:	2201      	movs	r2, #1
 8002776:	4913      	ldr	r1, [pc, #76]	; (80027c4 <HAL_UART_RxCpltCallback+0x64>)
 8002778:	4813      	ldr	r0, [pc, #76]	; (80027c8 <HAL_UART_RxCpltCallback+0x68>)
 800277a:	f003 fc52 	bl	8006022 <HAL_UART_Receive_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]

	//	__HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
	//__HAL_UART_SEND_REQ(JETSON_UART, UART_RXDATA_FLUSH_REQUEST);

	if (ret != HAL_OK) {
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d011      	beq.n	80027ac <HAL_UART_RxCpltCallback+0x4c>
		Error_Handler();
 8002788:	f000 fbb0 	bl	8002eec <Error_Handler>
		HAL_UART_Abort_IT(&huart6);
 800278c:	480e      	ldr	r0, [pc, #56]	; (80027c8 <HAL_UART_RxCpltCallback+0x68>)
 800278e:	f003 fc79 	bl	8006084 <HAL_UART_Abort_IT>
		SET_BIT(huart6.Instance->CR3, USART_CR3_EIE);
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_UART_RxCpltCallback+0x68>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_UART_RxCpltCallback+0x68>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
		HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 80027a2:	2201      	movs	r2, #1
 80027a4:	4907      	ldr	r1, [pc, #28]	; (80027c4 <HAL_UART_RxCpltCallback+0x64>)
 80027a6:	4808      	ldr	r0, [pc, #32]	; (80027c8 <HAL_UART_RxCpltCallback+0x68>)
 80027a8:	f003 fc3b 	bl	8006022 <HAL_UART_Receive_IT>
	}
	HAL_NVIC_ClearPendingIRQ(USART6_IRQn);
 80027ac:	2047      	movs	r0, #71	; 0x47
 80027ae:	f001 fcba 	bl	8004126 <HAL_NVIC_ClearPendingIRQ>
	requested_manual_command = UART6_rxBuffer[0];
 80027b2:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <HAL_UART_RxCpltCallback+0x64>)
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_UART_RxCpltCallback+0x6c>)
 80027b8:	701a      	strb	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200003f0 	.word	0x200003f0
 80027c8:	200003ac 	.word	0x200003ac
 80027cc:	20000001 	.word	0x20000001

080027d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027d6:	f001 faaf 	bl	8003d38 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027da:	f000 f8b7 	bl	800294c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027de:	f000 fb15 	bl	8002e0c <MX_GPIO_Init>
  MX_TIM3_Init();
 80027e2:	f000 f969 	bl	8002ab8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027e6:	f000 f9c1 	bl	8002b6c <MX_TIM4_Init>
  MX_TIM2_Init();
 80027ea:	f000 f90d 	bl	8002a08 <MX_TIM2_Init>
  MX_TIM5_Init();
 80027ee:	f000 fa17 	bl	8002c20 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80027f2:	f000 fae1 	bl	8002db8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 80027f6:	f000 fa67 	bl	8002cc8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80027fa:	f000 fab3 	bl	8002d64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe fbac 	bl	8000f5c <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8002804:	2101      	movs	r1, #1
 8002806:	2000      	movs	r0, #0
 8002808:	f7fe fbc7 	bl	8000f9a <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 800280c:	2001      	movs	r0, #1
 800280e:	f000 fdc1 	bl	8003394 <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8002812:	f000 fc29 	bl	8003068 <stop_all_motors>

  // Enable the timers
  __HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);	 // Sonic Echo PWM
 8002816:	4b40      	ldr	r3, [pc, #256]	; (8002918 <main+0x148>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <main+0x148>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0204 	orr.w	r2, r2, #4
 8002824:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8002826:	2100      	movs	r1, #0
 8002828:	483c      	ldr	r0, [pc, #240]	; (800291c <main+0x14c>)
 800282a:	f002 fbb1 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 800282e:	2104      	movs	r1, #4
 8002830:	483b      	ldr	r0, [pc, #236]	; (8002920 <main+0x150>)
 8002832:	f002 fbad 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 8002836:	2100      	movs	r1, #0
 8002838:	483a      	ldr	r0, [pc, #232]	; (8002924 <main+0x154>)
 800283a:	f002 fba9 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 800283e:	2104      	movs	r1, #4
 8002840:	4835      	ldr	r0, [pc, #212]	; (8002918 <main+0x148>)
 8002842:	f002 fba5 	bl	8004f90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);  // Sonic Trigger PWM
 8002846:	2100      	movs	r1, #0
 8002848:	4837      	ldr	r0, [pc, #220]	; (8002928 <main+0x158>)
 800284a:	f002 fba1 	bl	8004f90 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, UART6_rxBuffer, UART_buffer_size);
 800284e:	2201      	movs	r2, #1
 8002850:	4936      	ldr	r1, [pc, #216]	; (800292c <main+0x15c>)
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <main+0x160>)
 8002854:	f003 fbe5 	bl	8006022 <HAL_UART_Receive_IT>
  uint8_t determined_algorithm = determine_algorithm();
 8002858:	f7fe fbfa 	bl	8001050 <determine_algorithm>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  requested_manual_command = S_CHAR;  // TODO - change to S_CHAR if manual mode is supported, AUTON_CHAR if not
 8002862:	4b34      	ldr	r3, [pc, #208]	; (8002934 <main+0x164>)
 8002864:	2238      	movs	r2, #56	; 0x38
 8002866:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    set_servo_angle(Front);
 8002868:	2001      	movs	r0, #1
 800286a:	f000 fd93 	bl	8003394 <set_servo_angle>
    if (current_manual_command != COMPLETED_CHAR)
 800286e:	4b32      	ldr	r3, [pc, #200]	; (8002938 <main+0x168>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b2d      	cmp	r3, #45	; 0x2d
 8002874:	d01c      	beq.n	80028b0 <main+0xe0>
    {
		printf("Currently changing to manual mode.\r\n");
 8002876:	4831      	ldr	r0, [pc, #196]	; (800293c <main+0x16c>)
 8002878:	f005 fa22 	bl	8007cc0 <puts>
		char buf[20];
		memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <main+0x170>)
 800287e:	1d3c      	adds	r4, r7, #4
 8002880:	461d      	mov	r5, r3
 8002882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800288a:	1d39      	adds	r1, r7, #4
 800288c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002890:	2214      	movs	r2, #20
 8002892:	4827      	ldr	r0, [pc, #156]	; (8002930 <main+0x160>)
 8002894:	f003 fb33 	bl	8005efe <HAL_UART_Transmit>
    }  // if (current_manual_command != COMPLETED_CHAR && current_manual_command != S_CHAR)

	  while (current_manual_command != AUTON_CHAR)
 8002898:	e00a      	b.n	80028b0 <main+0xe0>
	  {
//			printf("Currently changing to manual mode.\r\n");
//			char buf[20];
//			memcpy(buf, "&MANUAL,,,,,,,,,,,,", 20);
//			HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		  if(requested_manual_command != current_manual_command)
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <main+0x164>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <main+0x168>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d004      	beq.n	80028b0 <main+0xe0>
		  {
			  execute_manual_command(requested_manual_command);
 80028a6:	4b23      	ldr	r3, [pc, #140]	; (8002934 <main+0x164>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fb24 	bl	8002ef8 <execute_manual_command>
	  while (current_manual_command != AUTON_CHAR)
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <main+0x168>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b41      	cmp	r3, #65	; 0x41
 80028b6:	d1f0      	bne.n	800289a <main+0xca>
		  }  // if(requested_manual_command != current_manual_command)
	  }  // while (current_manual_command != AUTON_CHAR)

    set_servo_angle(Front);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f000 fd6b 	bl	8003394 <set_servo_angle>
    printf("Changing to autonomous mode.\r\n");
 80028be:	4821      	ldr	r0, [pc, #132]	; (8002944 <main+0x174>)
 80028c0:	f005 f9fe 	bl	8007cc0 <puts>
    char buf[20];
    memcpy(buf, "&AUTONOMOUS,,,,,,,,", 20);
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <main+0x178>)
 80028c6:	f107 0418 	add.w	r4, r7, #24
 80028ca:	461d      	mov	r5, r3
 80028cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	6023      	str	r3, [r4, #0]
    HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80028d4:	f107 0118 	add.w	r1, r7, #24
 80028d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028dc:	2214      	movs	r2, #20
 80028de:	4814      	ldr	r0, [pc, #80]	; (8002930 <main+0x160>)
 80028e0:	f003 fb0d 	bl	8005efe <HAL_UART_Transmit>

	  uint8_t completed = do_search_algorithm(determined_algorithm);
 80028e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fbcf 	bl	800108c <do_search_algorithm>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  
    if (completed)
 80028f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <main+0x13e>
    {
      complete_search_algorithm();
 80028fc:	f7fe fbf0 	bl	80010e0 <complete_search_algorithm>
      requested_manual_command = COMPLETED_CHAR;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <main+0x164>)
 8002902:	222d      	movs	r2, #45	; 0x2d
 8002904:	701a      	strb	r2, [r3, #0]
      current_manual_command = COMPLETED_CHAR;
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <main+0x168>)
 8002908:	222d      	movs	r2, #45	; 0x2d
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e7ac      	b.n	8002868 <main+0x98>
    }  // if (completed)
    else
    {
	  current_manual_command = S_CHAR;
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <main+0x168>)
 8002910:	2238      	movs	r2, #56	; 0x38
 8002912:	701a      	strb	r2, [r3, #0]
  {
 8002914:	e7a8      	b.n	8002868 <main+0x98>
 8002916:	bf00      	nop
 8002918:	200002d8 	.word	0x200002d8
 800291c:	20000290 	.word	0x20000290
 8002920:	20000248 	.word	0x20000248
 8002924:	20000200 	.word	0x20000200
 8002928:	20000320 	.word	0x20000320
 800292c:	200003f0 	.word	0x200003f0
 8002930:	200003ac 	.word	0x200003ac
 8002934:	20000001 	.word	0x20000001
 8002938:	20000000 	.word	0x20000000
 800293c:	0800a33c 	.word	0x0800a33c
 8002940:	0800a360 	.word	0x0800a360
 8002944:	0800a374 	.word	0x0800a374
 8002948:	0800a394 	.word	0x0800a394

0800294c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b094      	sub	sp, #80	; 0x50
 8002950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002952:	f107 0320 	add.w	r3, r7, #32
 8002956:	2230      	movs	r2, #48	; 0x30
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fca2 	bl	80072a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	2300      	movs	r3, #0
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <SystemClock_Config+0xb4>)
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <SystemClock_Config+0xb4>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6413      	str	r3, [r2, #64]	; 0x40
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <SystemClock_Config+0xb4>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800298c:	2300      	movs	r3, #0
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <SystemClock_Config+0xb8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <SystemClock_Config+0xb8>)
 8002996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <SystemClock_Config+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ac:	2301      	movs	r3, #1
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029b0:	2310      	movs	r3, #16
 80029b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fdf1 	bl	80045a4 <HAL_RCC_OscConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80029c8:	f000 fa90 	bl	8002eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029cc:	230f      	movs	r3, #15
 80029ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f854 	bl	8004a94 <HAL_RCC_ClockConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80029f2:	f000 fa7b 	bl	8002eec <Error_Handler>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3750      	adds	r7, #80	; 0x50
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40007000 	.word	0x40007000

08002a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a34:	229f      	movs	r2, #159	; 0x9f
 8002a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a40:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a52:	4818      	ldr	r0, [pc, #96]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a54:	f002 fa4d 	bl	8004ef2 <HAL_TIM_PWM_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002a5e:	f000 fa45 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6a:	f107 0320 	add.w	r3, r7, #32
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4810      	ldr	r0, [pc, #64]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a72:	f003 f975 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002a7c:	f000 fa36 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a80:	2360      	movs	r3, #96	; 0x60
 8002a82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002a98:	f002 fd1e 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002aa2:	f000 fa23 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002aa6:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <MX_TIM2_Init+0xac>)
 8002aa8:	f000 fd7e 	bl	80035a8 <HAL_TIM_MspPostInit>

}
 8002aac:	bf00      	nop
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000200 	.word	0x20000200

08002ab8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002abe:	f107 0320 	add.w	r3, r7, #32
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	615a      	str	r2, [r3, #20]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002adc:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <MX_TIM3_Init+0xb0>)
 8002ade:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002aee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b00:	4818      	ldr	r0, [pc, #96]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002b02:	f002 f9f6 	bl	8004ef2 <HAL_TIM_PWM_Init>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002b0c:	f000 f9ee 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b18:	f107 0320 	add.w	r3, r7, #32
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4811      	ldr	r0, [pc, #68]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002b20:	f003 f91e 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002b2a:	f000 f9df 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2e:	2360      	movs	r3, #96	; 0x60
 8002b30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2204      	movs	r2, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4807      	ldr	r0, [pc, #28]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002b46:	f002 fcc7 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002b50:	f000 f9cc 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b54:	4803      	ldr	r0, [pc, #12]	; (8002b64 <MX_TIM3_Init+0xac>)
 8002b56:	f000 fd27 	bl	80035a8 <HAL_TIM_MspPostInit>

}
 8002b5a:	bf00      	nop
 8002b5c:	3728      	adds	r7, #40	; 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000248 	.word	0x20000248
 8002b68:	40000400 	.word	0x40000400

08002b6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b72:	f107 0320 	add.w	r3, r7, #32
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002b90:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <MX_TIM4_Init+0xb0>)
 8002b92:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002b96:	224f      	movs	r2, #79	; 0x4f
 8002b98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002ba2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002ba6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bb4:	4818      	ldr	r0, [pc, #96]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002bb6:	f002 f99c 	bl	8004ef2 <HAL_TIM_PWM_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002bc0:	f000 f994 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bcc:	f107 0320 	add.w	r3, r7, #32
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4811      	ldr	r0, [pc, #68]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002bd4:	f003 f8c4 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002bde:	f000 f985 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be2:	2360      	movs	r3, #96	; 0x60
 8002be4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002bfa:	f002 fc6d 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002c04:	f000 f972 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <MX_TIM4_Init+0xac>)
 8002c0a:	f000 fccd 	bl	80035a8 <HAL_TIM_MspPostInit>

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000290 	.word	0x20000290
 8002c1c:	40000800 	.word	0x40000800

08002c20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c30:	463b      	mov	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c3e:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <MX_TIM5_Init+0xa4>)
 8002c40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c44:	220f      	movs	r2, #15
 8002c46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65536;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c54:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8002c62:	4817      	ldr	r0, [pc, #92]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c64:	f002 fa44 	bl	80050f0 <HAL_TIM_IC_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002c6e:	f000 f93d 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c7a:	f107 0310 	add.w	r3, r7, #16
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480f      	ldr	r0, [pc, #60]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002c82:	f003 f86d 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002c8c:	f000 f92e 	bl	8002eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c90:	2300      	movs	r3, #0
 8002c92:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c94:	2301      	movs	r3, #1
 8002c96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <MX_TIM5_Init+0xa0>)
 8002ca8:	f002 fb79 	bl	800539e <HAL_TIM_IC_ConfigChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8002cb2:	f000 f91b 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200002d8 	.word	0x200002d8
 8002cc4:	40000c00 	.word	0x40000c00

08002cc8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
 8002cdc:	615a      	str	r2, [r3, #20]
 8002cde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	; (8002d60 <MX_TIM10_Init+0x98>)
 8002ce4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 159;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002ce8:	229f      	movs	r2, #159	; 0x9f
 8002cea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002cf4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002cf8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002d06:	4815      	ldr	r0, [pc, #84]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002d08:	f002 f8a4 	bl	8004e54 <HAL_TIM_Base_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002d12:	f000 f8eb 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002d16:	4811      	ldr	r0, [pc, #68]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002d18:	f002 f8eb 	bl	8004ef2 <HAL_TIM_PWM_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002d22:	f000 f8e3 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d26:	2360      	movs	r3, #96	; 0x60
 8002d28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4807      	ldr	r0, [pc, #28]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002d3e:	f002 fbcb 	bl	80054d8 <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002d48:	f000 f8d0 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002d4c:	4803      	ldr	r0, [pc, #12]	; (8002d5c <MX_TIM10_Init+0x94>)
 8002d4e:	f000 fc2b 	bl	80035a8 <HAL_TIM_MspPostInit>

}
 8002d52:	bf00      	nop
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000320 	.word	0x20000320
 8002d60:	40014400 	.word	0x40014400

08002d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <MX_USART2_UART_Init+0x50>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d9a:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d9c:	f003 f862 	bl	8005e64 <HAL_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002da6:	f000 f8a1 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000368 	.word	0x20000368
 8002db4:	40004400 	.word	0x40004400

08002db8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <MX_USART6_UART_Init+0x50>)
 8002dc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002dc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dde:	220c      	movs	r2, #12
 8002de0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <MX_USART6_UART_Init+0x4c>)
 8002df0:	f003 f838 	bl	8005e64 <HAL_UART_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002dfa:	f000 f877 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200003ac 	.word	0x200003ac
 8002e08:	40011400 	.word	0x40011400

08002e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <MX_GPIO_Init+0xb4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <MX_GPIO_Init+0xb8>)
 8002e7e:	f001 fb77 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 8002e82:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002e86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480a      	ldr	r0, [pc, #40]	; (8002ec4 <MX_GPIO_Init+0xb8>)
 8002e9c:	f001 f9e4 	bl	8004268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8002ea0:	2340      	movs	r3, #64	; 0x40
 8002ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <MX_GPIO_Init+0xb8>)
 8002eb4:	f001 f9d8 	bl	8004268 <HAL_GPIO_Init>

}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8002ed0:	1d39      	adds	r1, r7, #4
 8002ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <__io_putchar+0x20>)
 8002eda:	f003 f810 	bl	8005efe <HAL_UART_Transmit>
  return ch;
 8002ede:	687b      	ldr	r3, [r7, #4]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000368 	.word	0x20000368

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef0:	b672      	cpsid	i
}
 8002ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <Error_Handler+0x8>
	...

08002ef8 <execute_manual_command>:
#include "manual_control.h"

void execute_manual_command(char command)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]

	switch(command)
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	3b32      	subs	r3, #50	; 0x32
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	d837      	bhi.n	8002f7a <execute_manual_command+0x82>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <execute_manual_command+0x18>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f69 	.word	0x08002f69
 8002f14:	08002f7b 	.word	0x08002f7b
 8002f18:	08002f51 	.word	0x08002f51
 8002f1c:	08002f6f 	.word	0x08002f6f
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f7b 	.word	0x08002f7b
 8002f28:	08002f75 	.word	0x08002f75
 8002f2c:	08002f7b 	.word	0x08002f7b
 8002f30:	08002f7b 	.word	0x08002f7b
 8002f34:	08002f7b 	.word	0x08002f7b
 8002f38:	08002f7b 	.word	0x08002f7b
 8002f3c:	08002f7b 	.word	0x08002f7b
 8002f40:	08002f7b 	.word	0x08002f7b
 8002f44:	08002f7b 	.word	0x08002f7b
 8002f48:	08002f7b 	.word	0x08002f7b
 8002f4c:	08002f75 	.word	0x08002f75
	{
	case LEFT_CHAR:
		rotate_direction(Left, 0.6);
 8002f50:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002f8c <execute_manual_command+0x94>
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 f8ab 	bl	80030b0 <rotate_direction>
		break;
 8002f5a:	e00f      	b.n	8002f7c <execute_manual_command+0x84>
	case RIGHT_CHAR:
		rotate_direction(Right, 0.6);
 8002f5c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f8c <execute_manual_command+0x94>
 8002f60:	2002      	movs	r0, #2
 8002f62:	f000 f8a5 	bl	80030b0 <rotate_direction>
		break;
 8002f66:	e009      	b.n	8002f7c <execute_manual_command+0x84>
	case FORWARD_CHAR:
		manual_forward();
 8002f68:	f000 f816 	bl	8002f98 <manual_forward>
		break;
 8002f6c:	e006      	b.n	8002f7c <execute_manual_command+0x84>
	case BACKWARD_CHAR:
		manual_backward();
 8002f6e:	f000 f81b 	bl	8002fa8 <manual_backward>
		break;
 8002f72:	e003      	b.n	8002f7c <execute_manual_command+0x84>
	case AUTON_CHAR:
	case S_CHAR:
		manual_stop();
 8002f74:	f000 f820 	bl	8002fb8 <manual_stop>
		break;
 8002f78:	e000      	b.n	8002f7c <execute_manual_command+0x84>
	default:
		break;
 8002f7a:	bf00      	nop
	}  // switch(command)
	current_manual_command = requested_manual_command;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <execute_manual_command+0x98>)
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <execute_manual_command+0x9c>)
 8002f82:	701a      	strb	r2, [r3, #0]


}  // void execute_manual_command(char message[30])
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	3f19999a 	.word	0x3f19999a
 8002f90:	20000001 	.word	0x20000001
 8002f94:	20000000 	.word	0x20000000

08002f98 <manual_forward>:
{
	rotate_direction(d, 1);
}  // void manual_turn(direction d)

void manual_forward()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	motors_forward(0.5);
 8002f9c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fa0:	f000 f910 	bl	80031c4 <motors_forward>
}  // void manual_forward()
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <manual_backward>:

void manual_backward()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	motors_backward(0.5);
 8002fac:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002fb0:	f000 f94c 	bl	800324c <motors_backward>
}  // void manual_backward()
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <manual_stop>:

void manual_stop()
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	stop_all_motors();
 8002fbc:	f000 f854 	bl	8003068 <stop_all_motors>
}  // void manual_stop()
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	460a      	mov	r2, r1
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <set_motor_speed+0x1c>
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d016      	beq.n	800300c <set_motor_speed+0x48>
 8002fde:	e02b      	b.n	8003038 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002fe0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfd4      	ite	le
 8002fe8:	2301      	movle	r3, #1
 8002fea:	2300      	movgt	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ff4:	4812      	ldr	r0, [pc, #72]	; (8003040 <set_motor_speed+0x7c>)
 8002ff6:	f001 fabb 	bl	8004570 <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 8002ffa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bfb8      	it	lt
 8003002:	425b      	neglt	r3, r3
 8003004:	b29a      	uxth	r2, r3
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <set_motor_speed+0x80>)
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800300a:	e015      	b.n	8003038 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800300c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	bfd4      	ite	le
 8003014:	2301      	movle	r3, #1
 8003016:	2300      	movgt	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <set_motor_speed+0x7c>)
 8003022:	f001 faa5 	bl	8004570 <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 8003026:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	bfb8      	it	lt
 800302e:	425b      	neglt	r3, r3
 8003030:	b29a      	uxth	r2, r3
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <set_motor_speed+0x84>)
 8003034:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 8003036:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40020000 	.word	0x40020000
 8003044:	40000800 	.word	0x40000800
 8003048:	40000400 	.word	0x40000400

0800304c <stop_motor>:

void stop_motor(motor_side side)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	set_motor_speed(side, 0);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ffb2 	bl	8002fc4 <set_motor_speed>
}  // stop_motor(motor_side side)
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <stop_all_motors>:

void stop_all_motors()
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
	printf("Currently stopping the motors.\r\n");
 800306e:	480d      	ldr	r0, [pc, #52]	; (80030a4 <stop_all_motors+0x3c>)
 8003070:	f004 fe26 	bl	8007cc0 <puts>
	char buf[20];
	memcpy(buf, "$STOP,,,,,,,,,,,,,,", 20);
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <stop_all_motors+0x40>)
 8003076:	1d3c      	adds	r4, r7, #4
 8003078:	461d      	mov	r5, r3
 800307a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800307c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800307e:	682b      	ldr	r3, [r5, #0]
 8003080:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003082:	1d39      	adds	r1, r7, #4
 8003084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003088:	2214      	movs	r2, #20
 800308a:	4808      	ldr	r0, [pc, #32]	; (80030ac <stop_all_motors+0x44>)
 800308c:	f002 ff37 	bl	8005efe <HAL_UART_Transmit>
	stop_motor(Left_Motor);
 8003090:	2000      	movs	r0, #0
 8003092:	f7ff ffdb 	bl	800304c <stop_motor>
	stop_motor(Right_Motor);
 8003096:	2001      	movs	r0, #1
 8003098:	f7ff ffd8 	bl	800304c <stop_motor>
}  // stop_all_motors()
 800309c:	bf00      	nop
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bdb0      	pop	{r4, r5, r7, pc}
 80030a4:	0800a3a8 	.word	0x0800a3a8
 80030a8:	0800a3c8 	.word	0x0800a3c8
 80030ac:	200003ac 	.word	0x200003ac

080030b0 <rotate_direction>:

void rotate_direction(direction d, float speed_1)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	ed87 0a00 	vstr	s0, [r7]
 80030bc:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	char buf[20];
	switch(d)
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d037      	beq.n	8003134 <rotate_direction+0x84>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	dc67      	bgt.n	8003198 <rotate_direction+0xe8>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <rotate_direction+0x20>
 80030cc:	2b01      	cmp	r3, #1
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
		return;
	case Front:
		return;
 80030ce:	e063      	b.n	8003198 <rotate_direction+0xe8>
		printf("Currently rotating left.\r\n");
 80030d0:	4833      	ldr	r0, [pc, #204]	; (80031a0 <rotate_direction+0xf0>)
 80030d2:	f004 fdf5 	bl	8007cc0 <puts>
		memcpy(buf, "$LEFT,,,,,,,,,,,,,,", 20);
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <rotate_direction+0xf4>)
 80030d8:	f107 040c 	add.w	r4, r7, #12
 80030dc:	461d      	mov	r5, r3
 80030de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e2:	682b      	ldr	r3, [r5, #0]
 80030e4:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80030e6:	f107 010c 	add.w	r1, r7, #12
 80030ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030ee:	2214      	movs	r2, #20
 80030f0:	482d      	ldr	r0, [pc, #180]	; (80031a8 <rotate_direction+0xf8>)
 80030f2:	f002 ff04 	bl	8005efe <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 80030f6:	edd7 7a00 	vldr	s15, [r7]
 80030fa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80031ac <rotate_direction+0xfc>
 80030fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003106:	ee17 3a90 	vmov	r3, s15
 800310a:	b21b      	sxth	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	2000      	movs	r0, #0
 8003110:	f7ff ff58 	bl	8002fc4 <set_motor_speed>
		set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 8003114:	edd7 7a00 	vldr	s15, [r7]
 8003118:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80031b0 <rotate_direction+0x100>
 800311c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003124:	ee17 3a90 	vmov	r3, s15
 8003128:	b21b      	sxth	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	2001      	movs	r0, #1
 800312e:	f7ff ff49 	bl	8002fc4 <set_motor_speed>
		return;
 8003132:	e031      	b.n	8003198 <rotate_direction+0xe8>
	case Right:
		printf("Currently rotating right.\r\n");
 8003134:	481f      	ldr	r0, [pc, #124]	; (80031b4 <rotate_direction+0x104>)
 8003136:	f004 fdc3 	bl	8007cc0 <puts>
		memcpy(buf, "$RIGHT,,,,,,,,,,,,,", 20);
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <rotate_direction+0x108>)
 800313c:	f107 040c 	add.w	r4, r7, #12
 8003140:	461d      	mov	r5, r3
 8003142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003146:	682b      	ldr	r3, [r5, #0]
 8003148:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800314a:	f107 010c 	add.w	r1, r7, #12
 800314e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003152:	2214      	movs	r2, #20
 8003154:	4814      	ldr	r0, [pc, #80]	; (80031a8 <rotate_direction+0xf8>)
 8003156:	f002 fed2 	bl	8005efe <HAL_UART_Transmit>
		set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 800315a:	edd7 7a00 	vldr	s15, [r7]
 800315e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80031bc <rotate_direction+0x10c>
 8003162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800316a:	ee17 3a90 	vmov	r3, s15
 800316e:	b21b      	sxth	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	2000      	movs	r0, #0
 8003174:	f7ff ff26 	bl	8002fc4 <set_motor_speed>
		set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 8003178:	edd7 7a00 	vldr	s15, [r7]
 800317c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80031c0 <rotate_direction+0x110>
 8003180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003188:	ee17 3a90 	vmov	r3, s15
 800318c:	b21b      	sxth	r3, r3
 800318e:	4619      	mov	r1, r3
 8003190:	2001      	movs	r0, #1
 8003192:	f7ff ff17 	bl	8002fc4 <set_motor_speed>
		return;
 8003196:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d, float speed_1)
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bdb0      	pop	{r4, r5, r7, pc}
 800319e:	bf00      	nop
 80031a0:	0800a3dc 	.word	0x0800a3dc
 80031a4:	0800a3f8 	.word	0x0800a3f8
 80031a8:	200003ac 	.word	0x200003ac
 80031ac:	c31a0000 	.word	0xc31a0000
 80031b0:	43340000 	.word	0x43340000
 80031b4:	0800a40c 	.word	0x0800a40c
 80031b8:	0800a428 	.word	0x0800a428
 80031bc:	431a0000 	.word	0x431a0000
 80031c0:	c3340000 	.word	0xc3340000

080031c4 <motors_forward>:

void motors_forward(float speed_1)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors forward.\r\n");
 80031ce:	481a      	ldr	r0, [pc, #104]	; (8003238 <motors_forward+0x74>)
 80031d0:	f004 fd76 	bl	8007cc0 <puts>
	char buf[20];
	memcpy(buf, "$FORWARD,,,,,,,,,,,", 20);
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <motors_forward+0x78>)
 80031d6:	f107 040c 	add.w	r4, r7, #12
 80031da:	461d      	mov	r5, r3
 80031dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 80031e4:	f107 010c 	add.w	r1, r7, #12
 80031e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ec:	2214      	movs	r2, #20
 80031ee:	4814      	ldr	r0, [pc, #80]	; (8003240 <motors_forward+0x7c>)
 80031f0:	f002 fe85 	bl	8005efe <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, -LEFT_MOTOR_MULT * speed_1);
 80031f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003244 <motors_forward+0x80>
 80031fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003204:	ee17 3a90 	vmov	r3, s15
 8003208:	b21b      	sxth	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	2000      	movs	r0, #0
 800320e:	f7ff fed9 	bl	8002fc4 <set_motor_speed>
	set_motor_speed(Right_Motor, -RIGHT_MOTOR_MULT * speed_1);
 8003212:	edd7 7a01 	vldr	s15, [r7, #4]
 8003216:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003248 <motors_forward+0x84>
 800321a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800321e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003222:	ee17 3a90 	vmov	r3, s15
 8003226:	b21b      	sxth	r3, r3
 8003228:	4619      	mov	r1, r3
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff feca 	bl	8002fc4 <set_motor_speed>
}  // void motors_forward(float speed_1)
 8003230:	bf00      	nop
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bdb0      	pop	{r4, r5, r7, pc}
 8003238:	0800a43c 	.word	0x0800a43c
 800323c:	0800a458 	.word	0x0800a458
 8003240:	200003ac 	.word	0x200003ac
 8003244:	c31a0000 	.word	0xc31a0000
 8003248:	c3340000 	.word	0xc3340000

0800324c <motors_backward>:

void motors_backward(float speed_1)
{
 800324c:	b5b0      	push	{r4, r5, r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	ed87 0a01 	vstr	s0, [r7, #4]
	printf("Moving the motors backward.\r\n");
 8003256:	481a      	ldr	r0, [pc, #104]	; (80032c0 <motors_backward+0x74>)
 8003258:	f004 fd32 	bl	8007cc0 <puts>
	char buf[20];
	memcpy(buf, "$BACKWARD,,,,,,,,,,", 20);
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <motors_backward+0x78>)
 800325e:	f107 040c 	add.w	r4, r7, #12
 8003262:	461d      	mov	r5, r3
 8003264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 800326c:	f107 010c 	add.w	r1, r7, #12
 8003270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003274:	2214      	movs	r2, #20
 8003276:	4814      	ldr	r0, [pc, #80]	; (80032c8 <motors_backward+0x7c>)
 8003278:	f002 fe41 	bl	8005efe <HAL_UART_Transmit>
	set_motor_speed(Left_Motor, LEFT_MOTOR_MULT * speed_1);
 800327c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003280:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80032cc <motors_backward+0x80>
 8003284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328c:	ee17 3a90 	vmov	r3, s15
 8003290:	b21b      	sxth	r3, r3
 8003292:	4619      	mov	r1, r3
 8003294:	2000      	movs	r0, #0
 8003296:	f7ff fe95 	bl	8002fc4 <set_motor_speed>
	set_motor_speed(Right_Motor, RIGHT_MOTOR_MULT * speed_1);
 800329a:	edd7 7a01 	vldr	s15, [r7, #4]
 800329e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80032d0 <motors_backward+0x84>
 80032a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032aa:	ee17 3a90 	vmov	r3, s15
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	4619      	mov	r1, r3
 80032b2:	2001      	movs	r0, #1
 80032b4:	f7ff fe86 	bl	8002fc4 <set_motor_speed>
}  // void motors_backward(float speed_1)
 80032b8:	bf00      	nop
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bdb0      	pop	{r4, r5, r7, pc}
 80032c0:	0800a46c 	.word	0x0800a46c
 80032c4:	0800a48c 	.word	0x0800a48c
 80032c8:	200003ac 	.word	0x200003ac
 80032cc:	431a0000 	.word	0x431a0000
 80032d0:	43340000 	.word	0x43340000

080032d4 <rotate_direction_90>:
#include "mouse.h"

void rotate_direction_90(direction d)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	71fb      	strb	r3, [r7, #7]


	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d01f      	beq.n	8003324 <rotate_direction_90+0x50>
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	dc37      	bgt.n	8003358 <rotate_direction_90+0x84>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <rotate_direction_90+0x1c>
 80032ec:	2b01      	cmp	r3, #1
		motors_forward(1);
		HAL_Delay(79);
		stop_all_motors();
		return;
	case Front:
		return;
 80032ee:	e033      	b.n	8003358 <rotate_direction_90+0x84>
		motors_backward(1);
 80032f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80032f4:	f7ff ffaa 	bl	800324c <motors_backward>
		HAL_Delay(20);
 80032f8:	2014      	movs	r0, #20
 80032fa:	f000 fd8f 	bl	8003e1c <HAL_Delay>
		rotate_direction(Left, 1);
 80032fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003302:	2000      	movs	r0, #0
 8003304:	f7ff fed4 	bl	80030b0 <rotate_direction>
		HAL_Delay(345);
 8003308:	f240 1059 	movw	r0, #345	; 0x159
 800330c:	f000 fd86 	bl	8003e1c <HAL_Delay>
		motors_forward(1);
 8003310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003314:	f7ff ff56 	bl	80031c4 <motors_forward>
		HAL_Delay(79);
 8003318:	204f      	movs	r0, #79	; 0x4f
 800331a:	f000 fd7f 	bl	8003e1c <HAL_Delay>
		stop_all_motors();
 800331e:	f7ff fea3 	bl	8003068 <stop_all_motors>
		return;
 8003322:	e019      	b.n	8003358 <rotate_direction_90+0x84>
	case Right:
		motors_backward(1);
 8003324:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003328:	f7ff ff90 	bl	800324c <motors_backward>
		HAL_Delay(39);
 800332c:	2027      	movs	r0, #39	; 0x27
 800332e:	f000 fd75 	bl	8003e1c <HAL_Delay>
		rotate_direction(Right, 1);
 8003332:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003336:	2002      	movs	r0, #2
 8003338:	f7ff feba 	bl	80030b0 <rotate_direction>
		HAL_Delay(369);
 800333c:	f240 1071 	movw	r0, #369	; 0x171
 8003340:	f000 fd6c 	bl	8003e1c <HAL_Delay>
		motors_forward(1);
 8003344:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003348:	f7ff ff3c 	bl	80031c4 <motors_forward>
		HAL_Delay(20);
 800334c:	2014      	movs	r0, #20
 800334e:	f000 fd65 	bl	8003e1c <HAL_Delay>
		stop_all_motors();
 8003352:	f7ff fe89 	bl	8003068 <stop_all_motors>
		return;
 8003356:	bf00      	nop
	}  // switch(d)
}  // rotate_direction_90(direction d)
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <rotate_180_degrees>:

void rotate_180_degrees()
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
	rotate_direction_90(Left);
 8003362:	2000      	movs	r0, #0
 8003364:	f7ff ffb6 	bl	80032d4 <rotate_direction_90>
	HAL_Delay(200);
 8003368:	20c8      	movs	r0, #200	; 0xc8
 800336a:	f000 fd57 	bl	8003e1c <HAL_Delay>
	rotate_direction_90(Left);
 800336e:	2000      	movs	r0, #0
 8003370:	f7ff ffb0 	bl	80032d4 <rotate_direction_90>

}  // rotate_180_degrees()
 8003374:	bf00      	nop
 8003376:	bd80      	pop	{r7, pc}

08003378 <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
	motors_forward(1);
 800337c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003380:	f7ff ff20 	bl	80031c4 <motors_forward>
	HAL_Delay(709);
 8003384:	f240 20c5 	movw	r0, #709	; 0x2c5
 8003388:	f000 fd48 	bl	8003e1c <HAL_Delay>
	stop_all_motors();
 800338c:	f7ff fe6c 	bl	8003068 <stop_all_motors>
}  // go_forward()
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}

08003394 <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d010      	beq.n	80033c6 <set_servo_angle+0x32>
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	dc13      	bgt.n	80033d0 <set_servo_angle+0x3c>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <set_servo_angle+0x1e>
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d005      	beq.n	80033bc <set_servo_angle+0x28>
 80033b0:	e00e      	b.n	80033d0 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 180;
 80033b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b6:	22b4      	movs	r2, #180	; 0xb4
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80033ba:	e009      	b.n	80033d0 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 100;
 80033bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80033c4:	e004      	b.n	80033d0 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 20;
 80033c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ca:	2214      	movs	r2, #20
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80033ce:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_MspInit+0x4c>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a0f      	ldr	r2, [pc, #60]	; (8003428 <HAL_MspInit+0x4c>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_MspInit+0x4c>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	603b      	str	r3, [r7, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_MspInit+0x4c>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a08      	ldr	r2, [pc, #32]	; (8003428 <HAL_MspInit+0x4c>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_MspInit+0x4c>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d10e      	bne.n	800345c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6413      	str	r3, [r2, #64]	; 0x40
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800345a:	e026      	b.n	80034aa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_TIM_PWM_MspInit+0x90>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10e      	bne.n	8003484 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
}
 8003482:	e012      	b.n	80034aa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_TIM_PWM_MspInit+0x94>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10d      	bne.n	80034aa <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_TIM_PWM_MspInit+0x8c>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800

080034c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	; 0x28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <HAL_TIM_IC_MspInit+0x94>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d133      	bne.n	800354e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	4b1c      	ldr	r3, [pc, #112]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6313      	str	r3, [r2, #48]	; 0x30
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_TIM_IC_MspInit+0x98>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 800351e:	2302      	movs	r3, #2
 8003520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800352e:	2302      	movs	r3, #2
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4619      	mov	r1, r3
 8003538:	4809      	ldr	r0, [pc, #36]	; (8003560 <HAL_TIM_IC_MspInit+0x9c>)
 800353a:	f000 fe95 	bl	8004268 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	2032      	movs	r0, #50	; 0x32
 8003544:	f000 fdab 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003548:	2032      	movs	r0, #50	; 0x32
 800354a:	f000 fdc4 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000

08003564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_TIM_Base_MspInit+0x3c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10d      	bne.n	8003592 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_TIM_Base_MspInit+0x40>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_TIM_Base_MspInit+0x40>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003584:	6453      	str	r3, [r2, #68]	; 0x44
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_TIM_Base_MspInit+0x40>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003592:	bf00      	nop
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40014400 	.word	0x40014400
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d11f      	bne.n	800360a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a46      	ldr	r2, [pc, #280]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 80035e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ec:	2302      	movs	r3, #2
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f4:	2300      	movs	r3, #0
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035f8:	2301      	movs	r3, #1
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	4619      	mov	r1, r3
 8003602:	483b      	ldr	r0, [pc, #236]	; (80036f0 <HAL_TIM_MspPostInit+0x148>)
 8003604:	f000 fe30 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003608:	e06b      	b.n	80036e2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <HAL_TIM_MspPostInit+0x14c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d11e      	bne.n	8003652 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4a33      	ldr	r2, [pc, #204]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363c:	2300      	movs	r3, #0
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003640:	2302      	movs	r3, #2
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	482b      	ldr	r0, [pc, #172]	; (80036f8 <HAL_TIM_MspPostInit+0x150>)
 800364c:	f000 fe0c 	bl	8004268 <HAL_GPIO_Init>
}
 8003650:	e047      	b.n	80036e2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a29      	ldr	r2, [pc, #164]	; (80036fc <HAL_TIM_MspPostInit+0x154>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d11e      	bne.n	800369a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	6313      	str	r3, [r2, #48]	; 0x30
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	2300      	movs	r3, #0
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003688:	2302      	movs	r3, #2
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 800368c:	f107 031c 	add.w	r3, r7, #28
 8003690:	4619      	mov	r1, r3
 8003692:	481b      	ldr	r0, [pc, #108]	; (8003700 <HAL_TIM_MspPostInit+0x158>)
 8003694:	f000 fde8 	bl	8004268 <HAL_GPIO_Init>
}
 8003698:	e023      	b.n	80036e2 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM10)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_TIM_MspPostInit+0x15c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d11e      	bne.n	80036e2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	6313      	str	r3, [r2, #48]	; 0x30
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_TIM_MspPostInit+0x144>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 80036c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80036d2:	2303      	movs	r3, #3
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	4808      	ldr	r0, [pc, #32]	; (8003700 <HAL_TIM_MspPostInit+0x158>)
 80036de:	f000 fdc3 	bl	8004268 <HAL_GPIO_Init>
}
 80036e2:	bf00      	nop
 80036e4:	3730      	adds	r7, #48	; 0x30
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40020800 	.word	0x40020800
 80036fc:	40000800 	.word	0x40000800
 8003700:	40020400 	.word	0x40020400
 8003704:	40014400 	.word	0x40014400

08003708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08c      	sub	sp, #48	; 0x30
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 031c 	add.w	r3, r7, #28
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a45      	ldr	r2, [pc, #276]	; (800383c <HAL_UART_MspInit+0x134>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12c      	bne.n	8003784 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a43      	ldr	r2, [pc, #268]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_UART_MspInit+0x138>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_UART_MspInit+0x138>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_PRINT_USB_Pin|GPIO_PIN_3;
 8003762:	230c      	movs	r3, #12
 8003764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003766:	2302      	movs	r3, #2
 8003768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376e:	2303      	movs	r3, #3
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003772:	2307      	movs	r3, #7
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003776:	f107 031c 	add.w	r3, r7, #28
 800377a:	4619      	mov	r1, r3
 800377c:	4831      	ldr	r0, [pc, #196]	; (8003844 <HAL_UART_MspInit+0x13c>)
 800377e:	f000 fd73 	bl	8004268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003782:	e057      	b.n	8003834 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <HAL_UART_MspInit+0x140>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d152      	bne.n	8003834 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4a2a      	ldr	r2, [pc, #168]	; (8003840 <HAL_UART_MspInit+0x138>)
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	6453      	str	r3, [r2, #68]	; 0x44
 800379e:	4b28      	ldr	r3, [pc, #160]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ba:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <HAL_UART_MspInit+0x138>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037e2:	2340      	movs	r3, #64	; 0x40
 80037e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2303      	movs	r3, #3
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80037f2:	2308      	movs	r3, #8
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f6:	f107 031c 	add.w	r3, r7, #28
 80037fa:	4619      	mov	r1, r3
 80037fc:	4813      	ldr	r0, [pc, #76]	; (800384c <HAL_UART_MspInit+0x144>)
 80037fe:	f000 fd33 	bl	8004268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003814:	2308      	movs	r3, #8
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	4619      	mov	r1, r3
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <HAL_UART_MspInit+0x13c>)
 8003820:	f000 fd22 	bl	8004268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003824:	2200      	movs	r2, #0
 8003826:	2100      	movs	r1, #0
 8003828:	2047      	movs	r0, #71	; 0x47
 800382a:	f000 fc38 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800382e:	2047      	movs	r0, #71	; 0x47
 8003830:	f000 fc51 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 8003834:	bf00      	nop
 8003836:	3730      	adds	r7, #48	; 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40004400 	.word	0x40004400
 8003840:	40023800 	.word	0x40023800
 8003844:	40020000 	.word	0x40020000
 8003848:	40011400 	.word	0x40011400
 800384c:	40020800 	.word	0x40020800

08003850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003854:	e7fe      	b.n	8003854 <NMI_Handler+0x4>

08003856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800385a:	e7fe      	b.n	800385a <HardFault_Handler+0x4>

0800385c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <MemManage_Handler+0x4>

08003862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <BusFault_Handler+0x4>

08003868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <UsageFault_Handler+0x4>

0800386e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800388a:	b480      	push	{r7}
 800388c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800389c:	f000 fa9e 	bl	8003ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038a0:	bf00      	nop
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0000      	movs	r0, r0
	...

080038a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80038ae:	4830      	ldr	r0, [pc, #192]	; (8003970 <TIM5_IRQHandler+0xc8>)
 80038b0:	f001 fc6d 	bl	800518e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  if (risingEdgeInterrupt == 1)
 80038b4:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <TIM5_IRQHandler+0xcc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d118      	bne.n	80038ee <TIM5_IRQHandler+0x46>
  {
	TIM5->CCER &= ~(1 << 7);
 80038bc:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c6:	6213      	str	r3, [r2, #32]
	TIM5->CCER &= ~(1 << 5);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038ce:	f023 0320 	bic.w	r3, r3, #32
 80038d2:	6213      	str	r3, [r2, #32]
	TIM5->CCER |= (1 << 5);
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4a27      	ldr	r2, [pc, #156]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	6213      	str	r3, [r2, #32]
	TIM5->CNT = 0;
 80038e0:	4b25      	ldr	r3, [pc, #148]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24
	risingEdgeInterrupt = 0;
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <TIM5_IRQHandler+0xcc>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
//	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 80038ec:	e036      	b.n	800395c <TIM5_IRQHandler+0xb4>
	  counter = TIM5->CNT;
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <TIM5_IRQHandler+0xd4>)
 80038f6:	601a      	str	r2, [r3, #0]
	  TIM5->CCER &= ~(1 << 7);
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <TIM5_IRQHandler+0xd0>)
 80038fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003902:	6213      	str	r3, [r2, #32]
	  TIM5->CCER &= ~(1 << 5);
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <TIM5_IRQHandler+0xd0>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a1b      	ldr	r2, [pc, #108]	; (8003978 <TIM5_IRQHandler+0xd0>)
 800390a:	f023 0320 	bic.w	r3, r3, #32
 800390e:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <TIM5_IRQHandler+0xd4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe0d 	bl	8000534 <__aeabi_i2d>
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <TIM5_IRQHandler+0xd8>)
 8003920:	f7fc ff9c 	bl	800085c <__aeabi_ddiv>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f7fd f944 	bl	8000bb8 <__aeabi_d2f>
 8003930:	4603      	mov	r3, r0
 8003932:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fc fe0f 	bl	8000558 <__aeabi_f2d>
 800393a:	a30b      	add	r3, pc, #44	; (adr r3, 8003968 <TIM5_IRQHandler+0xc0>)
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f7fc fe62 	bl	8000608 <__aeabi_dmul>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f934 	bl	8000bb8 <__aeabi_d2f>
 8003950:	4603      	mov	r3, r0
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM5_IRQHandler+0xdc>)
 8003954:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <TIM5_IRQHandler+0xcc>)
 8003958:	2201      	movs	r2, #1
 800395a:	601a      	str	r2, [r3, #0]
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	f3af 8000 	nop.w
 8003968:	851eb852 	.word	0x851eb852
 800396c:	400451eb 	.word	0x400451eb
 8003970:	200002d8 	.word	0x200002d8
 8003974:	20000008 	.word	0x20000008
 8003978:	40000c00 	.word	0x40000c00
 800397c:	200003f8 	.word	0x200003f8
 8003980:	40620000 	.word	0x40620000
 8003984:	200003fc 	.word	0x200003fc

08003988 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <USART6_IRQHandler+0x10>)
 800398e:	f002 fc8d 	bl	80062ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200003ac 	.word	0x200003ac

0800399c <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 80039a0:	2300      	movs	r3, #0
}   // is_switch_on()
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	return 1;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_kill>:

int _kill(int pid, int sig)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039c6:	f003 fc43 	bl	8007250 <__errno>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2216      	movs	r2, #22
 80039ce:	601a      	str	r2, [r3, #0]
	return -1;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <_exit>:

void _exit (int status)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffe7 	bl	80039bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80039ee:	e7fe      	b.n	80039ee <_exit+0x12>

080039f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e00a      	b.n	8003a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a02:	f3af 8000 	nop.w
 8003a06:	4601      	mov	r1, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	b2ca      	uxtb	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3301      	adds	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbf0      	blt.n	8003a02 <_read+0x12>
	}

return len;
 8003a20:	687b      	ldr	r3, [r7, #4]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e009      	b.n	8003a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	60ba      	str	r2, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fa3f 	bl	8002ec8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dbf1      	blt.n	8003a3c <_write+0x12>
	}
	return len;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_close>:

int _close(int file)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
	return -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_isatty>:

int _isatty(int file)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8003aa2:	2301      	movs	r3, #1
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	return 0;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <_sbrk+0x5c>)
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <_sbrk+0x60>)
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <_sbrk+0x64>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <_sbrk+0x68>)
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d207      	bcs.n	8003b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003afc:	f003 fba8 	bl	8007250 <__errno>
 8003b00:	4603      	mov	r3, r0
 8003b02:	220c      	movs	r2, #12
 8003b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e009      	b.n	8003b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <_sbrk+0x64>)
 8003b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20020000 	.word	0x20020000
 8003b2c:	00000400 	.word	0x00000400
 8003b30:	200003f4 	.word	0x200003f4
 8003b34:	20000418 	.word	0x20000418

08003b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <SystemInit+0x20>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <SystemInit+0x20>)
 8003b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <test_turn_left>:
#include "test.h"

void test_turn_left()
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
	rotate_direction_90(Right);
 8003b60:	2002      	movs	r0, #2
 8003b62:	f7ff fbb7 	bl	80032d4 <rotate_direction_90>
	HAL_Delay(1000);
 8003b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b6a:	f000 f957 	bl	8003e1c <HAL_Delay>
}  // void test_turn_left()
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
	if (requested_manual_command != AUTON_CHAR)
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <do_test_algorithm+0x1c>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b41      	cmp	r3, #65	; 0x41
 8003b7e:	d104      	bne.n	8003b8a <do_test_algorithm+0x16>
	}


//	test_alternate_left_right();
//	test_zig_zag();
	test_turn_left();
 8003b80:	f7ff ffec 	bl	8003b5c <test_turn_left>
//	go_forward_one_unit();
//	HAL_Delay(2000);

//	distance_of_object_in_cm();

	return do_test_algorithm();
 8003b84:	f7ff fff6 	bl	8003b74 <do_test_algorithm>
 8003b88:	e000      	b.n	8003b8c <do_test_algorithm+0x18>
		return;
 8003b8a:	bf00      	nop
}  // do_test_algorithm()
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000001 	.word	0x20000001

08003b94 <distance_of_object_in_cm>:
int risingEdgeInterrupt = 1;
int counter;
float centimeters;

int16_t distance_of_object_in_cm()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	printf("Distance is %f cm\r\n", centimeters);
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <distance_of_object_in_cm+0x2c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fcdb 	bl	8000558 <__aeabi_f2d>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <distance_of_object_in_cm+0x30>)
 8003ba8:	f003 ffee 	bl	8007b88 <iprintf>
	return centimeters;
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <distance_of_object_in_cm+0x2c>)
 8003bae:	edd3 7a00 	vldr	s15, [r3]
 8003bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb6:	ee17 3a90 	vmov	r3, s15
 8003bba:	b21b      	sxth	r3, r3
}  // int16_t distance_of_object_in_cm()
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	200003fc 	.word	0x200003fc
 8003bc4:	0800a4a0 	.word	0x0800a4a0

08003bc8 <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fbdd 	bl	8003394 <set_servo_angle>
	HAL_Delay(500);
 8003bda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bde:	f000 f91d 	bl	8003e1c <HAL_Delay>
	int16_t distance_cm = distance_of_object_in_cm();
 8003be2:	f7ff ffd7 	bl	8003b94 <distance_of_object_in_cm>
 8003be6:	4603      	mov	r3, r0
 8003be8:	83fb      	strh	r3, [r7, #30]
	uint8_t wall_detected = distance_cm < 16 ;
 8003bea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	bfd4      	ite	le
 8003bf2:	2301      	movle	r3, #1
 8003bf4:	2300      	movgt	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	777b      	strb	r3, [r7, #29]
	char buf[20];
	switch(d)
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d032      	beq.n	8003c66 <is_there_wall_on_direction+0x9e>
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	dc4a      	bgt.n	8003c9a <is_there_wall_on_direction+0xd2>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <is_there_wall_on_direction+0x46>
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d012      	beq.n	8003c32 <is_there_wall_on_direction+0x6a>
 8003c0c:	e045      	b.n	8003c9a <is_there_wall_on_direction+0xd2>
	{
	case Left:
		printf(wall_detected ? "There is a wall on the left.\r\n" : "There is no wall on the left.\r\n");
 8003c0e:	7f7b      	ldrb	r3, [r7, #29]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <is_there_wall_on_direction+0x50>
 8003c14:	4b27      	ldr	r3, [pc, #156]	; (8003cb4 <is_there_wall_on_direction+0xec>)
 8003c16:	e000      	b.n	8003c1a <is_there_wall_on_direction+0x52>
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <is_there_wall_on_direction+0xf0>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f003 ffb4 	bl	8007b88 <iprintf>
		memcpy(buf, wall_detected ? "\%LEFT,0,,,,,,,,,,,," : "\%LEFT,0,,,,,,,,,,,,", 20);
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <is_there_wall_on_direction+0xf4>)
 8003c22:	f107 0408 	add.w	r4, r7, #8
 8003c26:	461d      	mov	r5, r3
 8003c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	6023      	str	r3, [r4, #0]
		break;
 8003c30:	e033      	b.n	8003c9a <is_there_wall_on_direction+0xd2>
	case Front:
		printf(wall_detected ? "There is a wall in front.\r\n" : "There is no wall in front.\r\n");
 8003c32:	7f7b      	ldrb	r3, [r7, #29]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <is_there_wall_on_direction+0x74>
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <is_there_wall_on_direction+0xf8>)
 8003c3a:	e000      	b.n	8003c3e <is_there_wall_on_direction+0x76>
 8003c3c:	4b21      	ldr	r3, [pc, #132]	; (8003cc4 <is_there_wall_on_direction+0xfc>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 ffa2 	bl	8007b88 <iprintf>
		memcpy(buf, wall_detected ? "%FRONT,1,,,,,,,,,,," : "%FRONT,0,,,,,,,,,,,", 20);
 8003c44:	7f7b      	ldrb	r3, [r7, #29]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <is_there_wall_on_direction+0x86>
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <is_there_wall_on_direction+0x100>)
 8003c4c:	e000      	b.n	8003c50 <is_there_wall_on_direction+0x88>
 8003c4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ccc <is_there_wall_on_direction+0x104>)
 8003c50:	f107 0408 	add.w	r4, r7, #8
 8003c54:	461d      	mov	r5, r3
 8003c56:	6828      	ldr	r0, [r5, #0]
 8003c58:	6869      	ldr	r1, [r5, #4]
 8003c5a:	68aa      	ldr	r2, [r5, #8]
 8003c5c:	68eb      	ldr	r3, [r5, #12]
 8003c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c60:	6928      	ldr	r0, [r5, #16]
 8003c62:	6020      	str	r0, [r4, #0]
		break;
 8003c64:	e019      	b.n	8003c9a <is_there_wall_on_direction+0xd2>
	case Right:
		printf(wall_detected ? "There is a wall on the right.\r\n" : "There is no wall on the right.\r\n");
 8003c66:	7f7b      	ldrb	r3, [r7, #29]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <is_there_wall_on_direction+0xa8>
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <is_there_wall_on_direction+0x108>)
 8003c6e:	e000      	b.n	8003c72 <is_there_wall_on_direction+0xaa>
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <is_there_wall_on_direction+0x10c>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 ff88 	bl	8007b88 <iprintf>
		memcpy(buf, wall_detected ? "%RIGHT,1,,,,,,,,,,," : "%RIGHT,0,,,,,,,,,,,", 20);
 8003c78:	7f7b      	ldrb	r3, [r7, #29]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <is_there_wall_on_direction+0xba>
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <is_there_wall_on_direction+0x110>)
 8003c80:	e000      	b.n	8003c84 <is_there_wall_on_direction+0xbc>
 8003c82:	4b16      	ldr	r3, [pc, #88]	; (8003cdc <is_there_wall_on_direction+0x114>)
 8003c84:	f107 0408 	add.w	r4, r7, #8
 8003c88:	461d      	mov	r5, r3
 8003c8a:	6828      	ldr	r0, [r5, #0]
 8003c8c:	6869      	ldr	r1, [r5, #4]
 8003c8e:	68aa      	ldr	r2, [r5, #8]
 8003c90:	68eb      	ldr	r3, [r5, #12]
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	6928      	ldr	r0, [r5, #16]
 8003c96:	6020      	str	r0, [r4, #0]
		break;
 8003c98:	bf00      	nop
	}  // switch(d)
	HAL_UART_Transmit(&huart6, buf, sizeof(buf), 1000);
 8003c9a:	f107 0108 	add.w	r1, r7, #8
 8003c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca2:	2214      	movs	r2, #20
 8003ca4:	480e      	ldr	r0, [pc, #56]	; (8003ce0 <is_there_wall_on_direction+0x118>)
 8003ca6:	f002 f92a 	bl	8005efe <HAL_UART_Transmit>
	return wall_detected;
 8003caa:	7f7b      	ldrb	r3, [r7, #29]
}  // is_there_wall_on_direction(direction d)
 8003cac:	4618      	mov	r0, r3
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb4:	0800a4b4 	.word	0x0800a4b4
 8003cb8:	0800a4d4 	.word	0x0800a4d4
 8003cbc:	0800a4f4 	.word	0x0800a4f4
 8003cc0:	0800a508 	.word	0x0800a508
 8003cc4:	0800a524 	.word	0x0800a524
 8003cc8:	0800a544 	.word	0x0800a544
 8003ccc:	0800a558 	.word	0x0800a558
 8003cd0:	0800a56c 	.word	0x0800a56c
 8003cd4:	0800a58c 	.word	0x0800a58c
 8003cd8:	0800a5b0 	.word	0x0800a5b0
 8003cdc:	0800a5c4 	.word	0x0800a5c4
 8003ce0:	200003ac 	.word	0x200003ac

08003ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ce8:	480d      	ldr	r0, [pc, #52]	; (8003d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cea:	490e      	ldr	r1, [pc, #56]	; (8003d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf0:	e002      	b.n	8003cf8 <LoopCopyDataInit>

08003cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf6:	3304      	adds	r3, #4

08003cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cfc:	d3f9      	bcc.n	8003cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d00:	4c0b      	ldr	r4, [pc, #44]	; (8003d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d04:	e001      	b.n	8003d0a <LoopFillZerobss>

08003d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d08:	3204      	adds	r2, #4

08003d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d0c:	d3fb      	bcc.n	8003d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d0e:	f7ff ff13 	bl	8003b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d12:	f003 faa3 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d16:	f7fe fd5b 	bl	80027d0 <main>
  bx  lr    
 8003d1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d24:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003d28:	0800a9dc 	.word	0x0800a9dc
  ldr r2, =_sbss
 8003d2c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003d30:	20000414 	.word	0x20000414

08003d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d34:	e7fe      	b.n	8003d34 <ADC_IRQHandler>
	...

08003d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_Init+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <HAL_Init+0x40>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_Init+0x40>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_Init+0x40>)
 8003d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_Init+0x40>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d60:	2003      	movs	r0, #3
 8003d62:	f000 f991 	bl	8004088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d66:	200f      	movs	r0, #15
 8003d68:	f000 f808 	bl	8003d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d6c:	f7ff fb36 	bl	80033dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00

08003d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_InitTick+0x54>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_InitTick+0x58>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f9b7 	bl	800410e <HAL_SYSTICK_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00e      	b.n	8003dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0f      	cmp	r3, #15
 8003dae:	d80a      	bhi.n	8003dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db0:	2200      	movs	r2, #0
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	f000 f971 	bl	800409e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <HAL_InitTick+0x5c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000004 	.word	0x20000004
 8003dd4:	20000010 	.word	0x20000010
 8003dd8:	2000000c 	.word	0x2000000c

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000010 	.word	0x20000010
 8003e00:	20000400 	.word	0x20000400

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000400 	.word	0x20000400

08003e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7ff ffee 	bl	8003e04 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d005      	beq.n	8003e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_Delay+0x44>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e42:	bf00      	nop
 8003e44:	f7ff ffde 	bl	8003e04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8f7      	bhi.n	8003e44 <HAL_Delay+0x28>
  {
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000010 	.word	0x20000010

08003e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e80:	4013      	ands	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e96:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	60d3      	str	r3, [r2, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb0:	4b04      	ldr	r3, [pc, #16]	; (8003ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	0a1b      	lsrs	r3, r3, #8
 8003eb6:	f003 0307 	and.w	r3, r3, #7
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db0b      	blt.n	8003ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	4907      	ldr	r1, [pc, #28]	; (8003f00 <__NVIC_EnableIRQ+0x38>)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2001      	movs	r0, #1
 8003eea:	fa00 f202 	lsl.w	r2, r0, r2
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	e000e100 	.word	0xe000e100

08003f04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db12      	blt.n	8003f3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	490a      	ldr	r1, [pc, #40]	; (8003f48 <__NVIC_DisableIRQ+0x44>)
 8003f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	3320      	adds	r3, #32
 8003f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f30:	f3bf 8f4f 	dsb	sy
}
 8003f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f36:	f3bf 8f6f 	isb	sy
}
 8003f3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	e000e100 	.word	0xe000e100

08003f4c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	db0c      	blt.n	8003f78 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	f003 021f 	and.w	r2, r3, #31
 8003f64:	4907      	ldr	r1, [pc, #28]	; (8003f84 <__NVIC_ClearPendingIRQ+0x38>)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f72:	3360      	adds	r3, #96	; 0x60
 8003f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100

08003f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	6039      	str	r1, [r7, #0]
 8003f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	db0a      	blt.n	8003fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	490c      	ldr	r1, [pc, #48]	; (8003fd4 <__NVIC_SetPriority+0x4c>)
 8003fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa6:	0112      	lsls	r2, r2, #4
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	440b      	add	r3, r1
 8003fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fb0:	e00a      	b.n	8003fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4908      	ldr	r1, [pc, #32]	; (8003fd8 <__NVIC_SetPriority+0x50>)
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	3b04      	subs	r3, #4
 8003fc0:	0112      	lsls	r2, r2, #4
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	761a      	strb	r2, [r3, #24]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000e100 	.word	0xe000e100
 8003fd8:	e000ed00 	.word	0xe000ed00

08003fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f1c3 0307 	rsb	r3, r3, #7
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	bf28      	it	cs
 8003ffa:	2304      	movcs	r3, #4
 8003ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3304      	adds	r3, #4
 8004002:	2b06      	cmp	r3, #6
 8004004:	d902      	bls.n	800400c <NVIC_EncodePriority+0x30>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3b03      	subs	r3, #3
 800400a:	e000      	b.n	800400e <NVIC_EncodePriority+0x32>
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	f04f 32ff 	mov.w	r2, #4294967295
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	401a      	ands	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004024:	f04f 31ff 	mov.w	r1, #4294967295
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	43d9      	mvns	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004034:	4313      	orrs	r3, r2
         );
}
 8004036:	4618      	mov	r0, r3
 8004038:	3724      	adds	r7, #36	; 0x24
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004054:	d301      	bcc.n	800405a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004056:	2301      	movs	r3, #1
 8004058:	e00f      	b.n	800407a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <SysTick_Config+0x40>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004062:	210f      	movs	r1, #15
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	f7ff ff8e 	bl	8003f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <SysTick_Config+0x40>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <SysTick_Config+0x40>)
 8004074:	2207      	movs	r2, #7
 8004076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fee7 	bl	8003e64 <__NVIC_SetPriorityGrouping>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040b0:	f7ff fefc 	bl	8003eac <__NVIC_GetPriorityGrouping>
 80040b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff8e 	bl	8003fdc <NVIC_EncodePriority>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff5d 	bl	8003f88 <__NVIC_SetPriority>
}
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff feef 	bl	8003ec8 <__NVIC_EnableIRQ>
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	4603      	mov	r3, r0
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff feff 	bl	8003f04 <__NVIC_DisableIRQ>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ff94 	bl	8004044 <SysTick_Config>
 800411c:	4603      	mov	r3, r0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff ff09 	bl	8003f4c <__NVIC_ClearPendingIRQ>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7ff fe58 	bl	8003e04 <HAL_GetTick>
 8004154:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d008      	beq.n	8004174 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e052      	b.n	800421a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0216 	bic.w	r2, r2, #22
 8004182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004192:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d103      	bne.n	80041a4 <HAL_DMA_Abort+0x62>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0208 	bic.w	r2, r2, #8
 80041b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041c4:	e013      	b.n	80041ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041c6:	f7ff fe1d 	bl	8003e04 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d90c      	bls.n	80041ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2203      	movs	r2, #3
 80041de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e015      	b.n	800421a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e4      	bne.n	80041c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	223f      	movs	r2, #63	; 0x3f
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00c      	b.n	800425a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2205      	movs	r2, #5
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004268:	b480      	push	{r7}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e159      	b.n	8004538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004284:	2201      	movs	r2, #1
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 8148 	bne.w	8004532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d130      	bne.n	800431c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2203      	movs	r2, #3
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 0201 	and.w	r2, r3, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d017      	beq.n	8004358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	2203      	movs	r2, #3
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4313      	orrs	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d123      	bne.n	80043ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	220f      	movs	r2, #15
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	08da      	lsrs	r2, r3, #3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3208      	adds	r2, #8
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0203 	and.w	r2, r3, #3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a2 	beq.w	8004532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b57      	ldr	r3, [pc, #348]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	4a56      	ldr	r2, [pc, #344]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 80043f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043fc:	6453      	str	r3, [r2, #68]	; 0x44
 80043fe:	4b54      	ldr	r3, [pc, #336]	; (8004550 <HAL_GPIO_Init+0x2e8>)
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800440a:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	089b      	lsrs	r3, r3, #2
 8004410:	3302      	adds	r3, #2
 8004412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	220f      	movs	r2, #15
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a49      	ldr	r2, [pc, #292]	; (8004558 <HAL_GPIO_Init+0x2f0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d019      	beq.n	800446a <HAL_GPIO_Init+0x202>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a48      	ldr	r2, [pc, #288]	; (800455c <HAL_GPIO_Init+0x2f4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_GPIO_Init+0x1fe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_GPIO_Init+0x2f8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00d      	beq.n	8004462 <HAL_GPIO_Init+0x1fa>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a46      	ldr	r2, [pc, #280]	; (8004564 <HAL_GPIO_Init+0x2fc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d007      	beq.n	800445e <HAL_GPIO_Init+0x1f6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a45      	ldr	r2, [pc, #276]	; (8004568 <HAL_GPIO_Init+0x300>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_GPIO_Init+0x1f2>
 8004456:	2304      	movs	r3, #4
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445a:	2307      	movs	r3, #7
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x204>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x204>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x204>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	; (8004554 <HAL_GPIO_Init+0x2ec>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b38      	ldr	r3, [pc, #224]	; (800456c <HAL_GPIO_Init+0x304>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_GPIO_Init+0x304>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a24      	ldr	r2, [pc, #144]	; (800456c <HAL_GPIO_Init+0x304>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_GPIO_Init+0x304>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <HAL_GPIO_Init+0x304>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_GPIO_Init+0x304>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a0f      	ldr	r2, [pc, #60]	; (800456c <HAL_GPIO_Init+0x304>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f aea2 	bls.w	8004284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40013c00 	.word	0x40013c00

08004570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800458c:	e003      	b.n	8004596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800458e:	887b      	ldrh	r3, [r7, #2]
 8004590:	041a      	lsls	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	619a      	str	r2, [r3, #24]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e267      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d075      	beq.n	80046ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045c2:	4b88      	ldr	r3, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d00c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b85      	ldr	r3, [pc, #532]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d112      	bne.n	8004600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e6:	d10b      	bne.n	8004600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	4b7e      	ldr	r3, [pc, #504]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d05b      	beq.n	80046ac <HAL_RCC_OscConfig+0x108>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d157      	bne.n	80046ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e242      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004608:	d106      	bne.n	8004618 <HAL_RCC_OscConfig+0x74>
 800460a:	4b76      	ldr	r3, [pc, #472]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a75      	ldr	r2, [pc, #468]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xb0>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x98>
 8004622:	4b70      	ldr	r3, [pc, #448]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6f      	ldr	r2, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b6d      	ldr	r3, [pc, #436]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a6c      	ldr	r2, [pc, #432]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xb0>
 800463c:	4b69      	ldr	r3, [pc, #420]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a68      	ldr	r2, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a65      	ldr	r2, [pc, #404]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7ff fbd2 	bl	8003e04 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004664:	f7ff fbce 	bl	8003e04 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e207      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004676:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xc0>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7ff fbbe 	bl	8003e04 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800468c:	f7ff fbba 	bl	8003e04 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e1f3      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469e:	4b51      	ldr	r3, [pc, #324]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0xe8>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d063      	beq.n	8004782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11c      	bne.n	800470c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d2:	4b44      	ldr	r3, [pc, #272]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d116      	bne.n	800470c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_RCC_OscConfig+0x152>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e1c7      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4937      	ldr	r1, [pc, #220]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004706:	4313      	orrs	r3, r2
 8004708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	e03a      	b.n	8004782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d020      	beq.n	8004756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004714:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <HAL_RCC_OscConfig+0x244>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7ff fb73 	bl	8003e04 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004722:	f7ff fb6f 	bl	8003e04 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1a8      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004734:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4925      	ldr	r1, [pc, #148]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004750:	4313      	orrs	r3, r2
 8004752:	600b      	str	r3, [r1, #0]
 8004754:	e015      	b.n	8004782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCC_OscConfig+0x244>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7ff fb52 	bl	8003e04 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004764:	f7ff fb4e 	bl	8003e04 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e187      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004776:	4b1b      	ldr	r3, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d036      	beq.n	80047fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x248>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7ff fb32 	bl	8003e04 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a4:	f7ff fb2e 	bl	8003e04 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e167      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_OscConfig+0x240>)
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x200>
 80047c2:	e01b      	b.n	80047fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_OscConfig+0x248>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7ff fb1b 	bl	8003e04 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	e00e      	b.n	80047f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d2:	f7ff fb17 	bl	8003e04 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d907      	bls.n	80047f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e150      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	42470000 	.word	0x42470000
 80047ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ea      	bne.n	80047d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8097 	beq.w	8004938 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480a:	2300      	movs	r3, #0
 800480c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480e:	4b81      	ldr	r3, [pc, #516]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10f      	bne.n	800483a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	4b7d      	ldr	r3, [pc, #500]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	4a7c      	ldr	r2, [pc, #496]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004828:	6413      	str	r3, [r2, #64]	; 0x40
 800482a:	4b7a      	ldr	r3, [pc, #488]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b77      	ldr	r3, [pc, #476]	; (8004a18 <HAL_RCC_OscConfig+0x474>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d118      	bne.n	8004878 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004846:	4b74      	ldr	r3, [pc, #464]	; (8004a18 <HAL_RCC_OscConfig+0x474>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	; (8004a18 <HAL_RCC_OscConfig+0x474>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004852:	f7ff fad7 	bl	8003e04 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7ff fad3 	bl	8003e04 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e10c      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_OscConfig+0x474>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d106      	bne.n	800488e <HAL_RCC_OscConfig+0x2ea>
 8004880:	4b64      	ldr	r3, [pc, #400]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a63      	ldr	r2, [pc, #396]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	e01c      	b.n	80048c8 <HAL_RCC_OscConfig+0x324>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d10c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x30c>
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	4a5e      	ldr	r2, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 0304 	orr.w	r3, r3, #4
 80048a0:	6713      	str	r3, [r2, #112]	; 0x70
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4a5b      	ldr	r2, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6713      	str	r3, [r2, #112]	; 0x70
 80048ae:	e00b      	b.n	80048c8 <HAL_RCC_OscConfig+0x324>
 80048b0:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b4:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	6713      	str	r3, [r2, #112]	; 0x70
 80048bc:	4b55      	ldr	r3, [pc, #340]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	4a54      	ldr	r2, [pc, #336]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048c2:	f023 0304 	bic.w	r3, r3, #4
 80048c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7ff fa98 	bl	8003e04 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d6:	e00a      	b.n	80048ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7ff fa94 	bl	8003e04 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0cb      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ee:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0ee      	beq.n	80048d8 <HAL_RCC_OscConfig+0x334>
 80048fa:	e014      	b.n	8004926 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7ff fa82 	bl	8003e04 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004904:	f7ff fa7e 	bl	8003e04 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e0b5      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800491a:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1ee      	bne.n	8004904 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004926:	7dfb      	ldrb	r3, [r7, #23]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d105      	bne.n	8004938 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004936:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a1 	beq.w	8004a84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	2b08      	cmp	r3, #8
 800494c:	d05c      	beq.n	8004a08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d141      	bne.n	80049da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b31      	ldr	r3, [pc, #196]	; (8004a1c <HAL_RCC_OscConfig+0x478>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7ff fa52 	bl	8003e04 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004964:	f7ff fa4e 	bl	8003e04 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e087      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	019b      	lsls	r3, r3, #6
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	3b01      	subs	r3, #1
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	491b      	ldr	r1, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x478>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7ff fa27 	bl	8003e04 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ba:	f7ff fa23 	bl	8003e04 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e05c      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x416>
 80049d8:	e054      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x478>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7ff fa10 	bl	8003e04 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e8:	f7ff fa0c 	bl	8003e04 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e045      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x470>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x444>
 8004a06:	e03d      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e038      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_RCC_OscConfig+0x4ec>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d121      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d111      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023800 	.word	0x40023800

08004a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0cc      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d90c      	bls.n	8004ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b65      	ldr	r3, [pc, #404]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b63      	ldr	r3, [pc, #396]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0b8      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d020      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae8:	4b59      	ldr	r3, [pc, #356]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a58      	ldr	r2, [pc, #352]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b00:	4b53      	ldr	r3, [pc, #332]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a52      	ldr	r2, [pc, #328]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	494d      	ldr	r1, [pc, #308]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d044      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d119      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e07f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	4b3f      	ldr	r3, [pc, #252]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e06f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e067      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b72:	4b37      	ldr	r3, [pc, #220]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f023 0203 	bic.w	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4934      	ldr	r1, [pc, #208]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b84:	f7ff f93e 	bl	8003e04 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8c:	f7ff f93a 	bl	8003e04 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e04f      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 020c 	and.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1eb      	bne.n	8004b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d20c      	bcs.n	8004bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e032      	b.n	8004c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be8:	4b19      	ldr	r3, [pc, #100]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	4916      	ldr	r1, [pc, #88]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d009      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c06:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	490e      	ldr	r1, [pc, #56]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c1a:	f000 f821 	bl	8004c60 <HAL_RCC_GetSysClockFreq>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	490a      	ldr	r1, [pc, #40]	; (8004c54 <HAL_RCC_ClockConfig+0x1c0>)
 8004c2c:	5ccb      	ldrb	r3, [r1, r3]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c36:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1c8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f89e 	bl	8003d7c <HAL_InitTick>

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023c00 	.word	0x40023c00
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800a5d8 	.word	0x0800a5d8
 8004c58:	20000004 	.word	0x20000004
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c64:	b090      	sub	sp, #64	; 0x40
 8004c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c70:	2300      	movs	r3, #0
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c78:	4b59      	ldr	r3, [pc, #356]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d00d      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	f200 80a1 	bhi.w	8004dcc <HAL_RCC_GetSysClockFreq+0x16c>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c92:	e09b      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c94:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c98:	e09b      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c9a:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c9e:	e098      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca0:	4b4f      	ldr	r3, [pc, #316]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004caa:	4b4d      	ldr	r3, [pc, #308]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d028      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	099b      	lsrs	r3, r3, #6
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cc8:	2100      	movs	r1, #0
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ccc:	fb03 f201 	mul.w	r2, r3, r1
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	fb00 f303 	mul.w	r3, r0, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	4a43      	ldr	r2, [pc, #268]	; (8004de8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cda:	fba0 1202 	umull	r1, r2, r0, r2
 8004cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce6:	4413      	add	r3, r2
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cec:	2200      	movs	r2, #0
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	61fa      	str	r2, [r7, #28]
 8004cf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cfa:	f7fb ffad 	bl	8000c58 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d06:	e053      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	2200      	movs	r2, #0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	617a      	str	r2, [r7, #20]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d1a:	f04f 0b00 	mov.w	fp, #0
 8004d1e:	4652      	mov	r2, sl
 8004d20:	465b      	mov	r3, fp
 8004d22:	f04f 0000 	mov.w	r0, #0
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	0159      	lsls	r1, r3, #5
 8004d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d30:	0150      	lsls	r0, r2, #5
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	ebb2 080a 	subs.w	r8, r2, sl
 8004d3a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d52:	ebb2 0408 	subs.w	r4, r2, r8
 8004d56:	eb63 0509 	sbc.w	r5, r3, r9
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	00eb      	lsls	r3, r5, #3
 8004d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d68:	00e2      	lsls	r2, r4, #3
 8004d6a:	4614      	mov	r4, r2
 8004d6c:	461d      	mov	r5, r3
 8004d6e:	eb14 030a 	adds.w	r3, r4, sl
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	eb45 030b 	adc.w	r3, r5, fp
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d86:	4629      	mov	r1, r5
 8004d88:	028b      	lsls	r3, r1, #10
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d90:	4621      	mov	r1, r4
 8004d92:	028a      	lsls	r2, r1, #10
 8004d94:	4610      	mov	r0, r2
 8004d96:	4619      	mov	r1, r3
 8004d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	60fa      	str	r2, [r7, #12]
 8004da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004da4:	f7fb ff58 	bl	8000c58 <__aeabi_uldivmod>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4613      	mov	r3, r2
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0c1b      	lsrs	r3, r3, #16
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004dc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3740      	adds	r7, #64	; 0x40
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
 8004de4:	00f42400 	.word	0x00f42400
 8004de8:	017d7840 	.word	0x017d7840

08004dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000004 	.word	0x20000004

08004e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e08:	f7ff fff0 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	0a9b      	lsrs	r3, r3, #10
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	4903      	ldr	r1, [pc, #12]	; (8004e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e1a:	5ccb      	ldrb	r3, [r1, r3]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40023800 	.word	0x40023800
 8004e28:	0800a5e8 	.word	0x0800a5e8

08004e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e30:	f7ff ffdc 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0b5b      	lsrs	r3, r3, #13
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800a5e8 	.word	0x0800a5e8

08004e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e041      	b.n	8004eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fe fb72 	bl	8003564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 fc14 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e041      	b.n	8004f88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fe fa87 	bl	800342c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f000 fbc5 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_TIM_PWM_Start+0x24>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e022      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d109      	bne.n	8004fce <HAL_TIM_PWM_Start+0x3e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e015      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d109      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0x58>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e008      	b.n	8004ffa <HAL_TIM_PWM_Start+0x6a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e068      	b.n	80050d4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d104      	bne.n	8005012 <HAL_TIM_PWM_Start+0x82>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005010:	e013      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b04      	cmp	r3, #4
 8005016:	d104      	bne.n	8005022 <HAL_TIM_PWM_Start+0x92>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005020:	e00b      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d104      	bne.n	8005032 <HAL_TIM_PWM_Start+0xa2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005030:	e003      	b.n	800503a <HAL_TIM_PWM_Start+0xaa>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2201      	movs	r2, #1
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fe66 	bl	8005d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	; (80050dc <HAL_TIM_PWM_Start+0x14c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d107      	bne.n	8005062 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_TIM_PWM_Start+0x14c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_TIM_PWM_Start+0x10e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d013      	beq.n	800509e <HAL_TIM_PWM_Start+0x10e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <HAL_TIM_PWM_Start+0x150>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_TIM_PWM_Start+0x10e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a17      	ldr	r2, [pc, #92]	; (80050e4 <HAL_TIM_PWM_Start+0x154>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_TIM_PWM_Start+0x10e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_TIM_PWM_Start+0x158>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_TIM_PWM_Start+0x10e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a14      	ldr	r2, [pc, #80]	; (80050ec <HAL_TIM_PWM_Start+0x15c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d111      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0307 	and.w	r3, r3, #7
 80050a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	d010      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e007      	b.n	80050d2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40010000 	.word	0x40010000
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40014000 	.word	0x40014000

080050f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e041      	b.n	8005186 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fe f9d4 	bl	80034c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f000 fac6 	bl	80056c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d122      	bne.n	80051ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d11b      	bne.n	80051ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f06f 0202 	mvn.w	r2, #2
 80051ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fa57 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 80051d6:	e005      	b.n	80051e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa49 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa5a 	bl	8005698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d122      	bne.n	800523e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d11b      	bne.n	800523e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0204 	mvn.w	r2, #4
 800520e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fa2d 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa1f 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa30 	bl	8005698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b08      	cmp	r3, #8
 800524a:	d122      	bne.n	8005292 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d11b      	bne.n	8005292 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0208 	mvn.w	r2, #8
 8005262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2204      	movs	r2, #4
 8005268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa03 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 800527e:	e005      	b.n	800528c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9f5 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa06 	bl	8005698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0210 	mvn.w	r2, #16
 80052b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2208      	movs	r2, #8
 80052bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f9d9 	bl	8005684 <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f9cb 	bl	8005670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f9dc 	bl	8005698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0201 	mvn.w	r2, #1
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f9a5 	bl	800565c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fd89 	bl	8005e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f9a1 	bl	80056ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d10e      	bne.n	8005396 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b20      	cmp	r3, #32
 8005384:	d107      	bne.n	8005396 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0220 	mvn.w	r2, #32
 800538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fd53 	bl	8005e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b086      	sub	sp, #24
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e088      	b.n	80054ce <HAL_TIM_IC_ConfigChannel+0x130>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11b      	bne.n	8005402 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6819      	ldr	r1, [r3, #0]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f000 fb7d 	bl	8005ad8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 020c 	bic.w	r2, r2, #12
 80053ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6999      	ldr	r1, [r3, #24]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	619a      	str	r2, [r3, #24]
 8005400:	e060      	b.n	80054c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b04      	cmp	r3, #4
 8005406:	d11c      	bne.n	8005442 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f000 fbc6 	bl	8005ba8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800542a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	619a      	str	r2, [r3, #24]
 8005440:	e040      	b.n	80054c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f000 fbe3 	bl	8005c22 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 020c 	bic.w	r2, r2, #12
 800546a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69d9      	ldr	r1, [r3, #28]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	61da      	str	r2, [r3, #28]
 800547e:	e021      	b.n	80054c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b0c      	cmp	r3, #12
 8005484:	d11c      	bne.n	80054c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f000 fc00 	bl	8005c9a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	021a      	lsls	r2, r3, #8
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	61da      	str	r2, [r3, #28]
 80054be:	e001      	b.n	80054c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e0ae      	b.n	8005654 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	f200 809f 	bhi.w	8005644 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005506:	a201      	add	r2, pc, #4	; (adr r2, 800550c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005541 	.word	0x08005541
 8005510:	08005645 	.word	0x08005645
 8005514:	08005645 	.word	0x08005645
 8005518:	08005645 	.word	0x08005645
 800551c:	08005581 	.word	0x08005581
 8005520:	08005645 	.word	0x08005645
 8005524:	08005645 	.word	0x08005645
 8005528:	08005645 	.word	0x08005645
 800552c:	080055c3 	.word	0x080055c3
 8005530:	08005645 	.word	0x08005645
 8005534:	08005645 	.word	0x08005645
 8005538:	08005645 	.word	0x08005645
 800553c:	08005603 	.word	0x08005603
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f93a 	bl	80057c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0208 	orr.w	r2, r2, #8
 800555a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6999      	ldr	r1, [r3, #24]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
      break;
 800557e:	e064      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f980 	bl	800588c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	619a      	str	r2, [r3, #24]
      break;
 80055c0:	e043      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 f9cb 	bl	8005964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69da      	ldr	r2, [r3, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0208 	orr.w	r2, r2, #8
 80055dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0204 	bic.w	r2, r2, #4
 80055ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69d9      	ldr	r1, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	691a      	ldr	r2, [r3, #16]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
      break;
 8005600:	e023      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fa15 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	021a      	lsls	r2, r3, #8
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	61da      	str	r2, [r3, #28]
      break;
 8005642:	e002      	b.n	800564a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
      break;
 8005648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a34      	ldr	r2, [pc, #208]	; (80057a4 <TIM_Base_SetConfig+0xe4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00f      	beq.n	80056f8 <TIM_Base_SetConfig+0x38>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056de:	d00b      	beq.n	80056f8 <TIM_Base_SetConfig+0x38>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a31      	ldr	r2, [pc, #196]	; (80057a8 <TIM_Base_SetConfig+0xe8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_Base_SetConfig+0x38>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a30      	ldr	r2, [pc, #192]	; (80057ac <TIM_Base_SetConfig+0xec>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0x38>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <TIM_Base_SetConfig+0xf0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d108      	bne.n	800570a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <TIM_Base_SetConfig+0xe4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01b      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d017      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <TIM_Base_SetConfig+0xe8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d013      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a21      	ldr	r2, [pc, #132]	; (80057ac <TIM_Base_SetConfig+0xec>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00f      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <TIM_Base_SetConfig+0xf0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00b      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a1f      	ldr	r2, [pc, #124]	; (80057b4 <TIM_Base_SetConfig+0xf4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a1e      	ldr	r2, [pc, #120]	; (80057b8 <TIM_Base_SetConfig+0xf8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d003      	beq.n	800574a <TIM_Base_SetConfig+0x8a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <TIM_Base_SetConfig+0xfc>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <TIM_Base_SetConfig+0xe4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d103      	bne.n	8005790 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	615a      	str	r2, [r3, #20]
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <TIM_OC1_SetConfig+0xc8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d10c      	bne.n	8005836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0308 	bic.w	r3, r3, #8
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <TIM_OC1_SetConfig+0xc8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000

0800588c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0210 	bic.w	r2, r3, #16
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0320 	bic.w	r3, r3, #32
 80058d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <TIM_OC2_SetConfig+0xd4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d10d      	bne.n	8005908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <TIM_OC2_SetConfig+0xd4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d113      	bne.n	8005938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000

08005964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0303 	bic.w	r3, r3, #3
 800599a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <TIM_OC3_SetConfig+0xd0>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10d      	bne.n	80059de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <TIM_OC3_SetConfig+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d113      	bne.n	8005a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	621a      	str	r2, [r3, #32]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	40010000 	.word	0x40010000

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <TIM_OC4_SetConfig+0x9c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d109      	bne.n	8005aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	019b      	lsls	r3, r3, #6
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000

08005ad8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <TIM_TI1_SetConfig+0xbc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <TIM_TI1_SetConfig+0x56>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0c:	d00f      	beq.n	8005b2e <TIM_TI1_SetConfig+0x56>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <TIM_TI1_SetConfig+0xc0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d00b      	beq.n	8005b2e <TIM_TI1_SetConfig+0x56>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <TIM_TI1_SetConfig+0xc4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d007      	beq.n	8005b2e <TIM_TI1_SetConfig+0x56>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <TIM_TI1_SetConfig+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d003      	beq.n	8005b2e <TIM_TI1_SetConfig+0x56>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <TIM_TI1_SetConfig+0xcc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <TIM_TI1_SetConfig+0x5a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <TIM_TI1_SetConfig+0x5c>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d008      	beq.n	8005b4a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e003      	b.n	8005b52 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f023 030a 	bic.w	r3, r3, #10
 8005b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f003 030a 	and.w	r3, r3, #10
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40014000 	.word	0x40014000

08005ba8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0210 	bic.w	r2, r3, #16
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b087      	sub	sp, #28
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	60f8      	str	r0, [r7, #12]
 8005c2a:	60b9      	str	r1, [r7, #8]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005cec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2201      	movs	r2, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	401a      	ands	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e050      	b.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d013      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d10c      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000
 8005e2c:	40000400 	.word	0x40000400
 8005e30:	40000800 	.word	0x40000800
 8005e34:	40000c00 	.word	0x40000c00
 8005e38:	40014000 	.word	0x40014000

08005e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e03f      	b.n	8005ef6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fd fc3c 	bl	8003708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2224      	movs	r2, #36	; 0x24
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 ff5d 	bl	8006d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ebc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ecc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005edc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b08a      	sub	sp, #40	; 0x28
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d17c      	bne.n	8006018 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <HAL_UART_Transmit+0x2c>
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e075      	b.n	800601a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Transmit+0x3e>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e06e      	b.n	800601a <HAL_UART_Transmit+0x11c>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f52:	f7fd ff57 	bl	8003e04 <HAL_GetTick>
 8005f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	88fa      	ldrh	r2, [r7, #6]
 8005f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6c:	d108      	bne.n	8005f80 <HAL_UART_Transmit+0x82>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e003      	b.n	8005f88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f90:	e02a      	b.n	8005fe8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2180      	movs	r1, #128	; 0x80
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 fc3d 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e036      	b.n	800601a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e007      	b.n	8005fda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	781a      	ldrb	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1cf      	bne.n	8005f92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2140      	movs	r1, #64	; 0x40
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fc0d 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e006      	b.n	800601a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	e000      	b.n	800601a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b20      	cmp	r3, #32
 800603a:	d11d      	bne.n	8006078 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_UART_Receive_IT+0x26>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e016      	b.n	800607a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_UART_Receive_IT+0x38>
 8006056:	2302      	movs	r3, #2
 8006058:	e00f      	b.n	800607a <HAL_UART_Receive_IT+0x58>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	461a      	mov	r2, r3
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fc42 	bl	80068f8 <UART_Start_Receive_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	e000      	b.n	800607a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006078:	2302      	movs	r3, #2
  }
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b0a2      	sub	sp, #136	; 0x88
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800608c:	2301      	movs	r3, #1
 800608e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330c      	adds	r3, #12
 8006098:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80060a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060b8:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e3      	bne.n	8006092 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3314      	adds	r3, #20
 80060d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80060ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	2b01      	cmp	r3, #1
 8006104:	d119      	bne.n	800613a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	f023 0310 	bic.w	r3, r3, #16
 800611c:	67bb      	str	r3, [r7, #120]	; 0x78
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006126:	647a      	str	r2, [r7, #68]	; 0x44
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800612c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00f      	beq.n	8006162 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614c:	2b80      	cmp	r3, #128	; 0x80
 800614e:	d104      	bne.n	800615a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006154:	4a53      	ldr	r2, [pc, #332]	; (80062a4 <HAL_UART_Abort_IT+0x220>)
 8006156:	651a      	str	r2, [r3, #80]	; 0x50
 8006158:	e003      	b.n	8006162 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	2200      	movs	r2, #0
 8006160:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d104      	bne.n	8006182 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617c:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <HAL_UART_Abort_IT+0x224>)
 800617e:	651a      	str	r2, [r3, #80]	; 0x50
 8006180:	e003      	b.n	800618a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d12d      	bne.n	80061f4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	623b      	str	r3, [r7, #32]
   return(result);
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ae:	677b      	str	r3, [r7, #116]	; 0x74
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80061b8:	633a      	str	r2, [r7, #48]	; 0x30
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00f      	beq.n	80061f4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe f822 	bl	8004222 <HAL_DMA_Abort_IT>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e8:	2200      	movs	r2, #0
 80061ea:	651a      	str	r2, [r3, #80]	; 0x50
 80061ec:	e002      	b.n	80061f4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d130      	bne.n	8006264 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	60fb      	str	r3, [r7, #12]
   return(result);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006218:	673b      	str	r3, [r7, #112]	; 0x70
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006222:	61fa      	str	r2, [r7, #28]
 8006224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	69b9      	ldr	r1, [r7, #24]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	617b      	str	r3, [r7, #20]
   return(result);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e5      	bne.n	8006202 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623a:	2b00      	cmp	r3, #0
 800623c:	d012      	beq.n	8006264 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	4618      	mov	r0, r3
 8006244:	f7fd ffed 	bl	8004222 <HAL_DMA_Abort_IT>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d007      	beq.n	800625e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	2200      	movs	r2, #0
 8006254:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8006256:	2301      	movs	r3, #1
 8006258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800625c:	e002      	b.n	8006264 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8006264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006268:	2b01      	cmp	r3, #1
 800626a:	d116      	bne.n	800629a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 faab 	bl	80067f0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3788      	adds	r7, #136	; 0x88
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	08006a63 	.word	0x08006a63
 80062a8:	08006ac3 	.word	0x08006ac3

080062ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b0ba      	sub	sp, #232	; 0xe8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062d8:	2300      	movs	r3, #0
 80062da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10f      	bne.n	8006312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d009      	beq.n	8006312 <HAL_UART_IRQHandler+0x66>
 80062fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc71 	bl	8006bf2 <UART_Receive_IT>
      return;
 8006310:	e256      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80de 	beq.w	80064d8 <HAL_UART_IRQHandler+0x22c>
 800631c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800632c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80d1 	beq.w	80064d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HAL_UART_IRQHandler+0xae>
 8006342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f043 0201 	orr.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800635a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <HAL_UART_IRQHandler+0xd2>
 8006366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f043 0202 	orr.w	r2, r3, #2
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_UART_IRQHandler+0xf6>
 800638a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f043 0204 	orr.w	r2, r3, #4
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <HAL_UART_IRQHandler+0x126>
 80063ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f043 0208 	orr.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 81ed 	beq.w	80067b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_UART_IRQHandler+0x14e>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fbfc 	bl	8006bf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <HAL_UART_IRQHandler+0x17a>
 800641e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04f      	beq.n	80064c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 faa4 	bl	8006974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d141      	bne.n	80064be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3314      	adds	r3, #20
 8006440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800646a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800647e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1d9      	bne.n	800643a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	4a7d      	ldr	r2, [pc, #500]	; (8006688 <HAL_UART_IRQHandler+0x3dc>)
 8006494:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd fec1 	bl	8004222 <HAL_DMA_Abort_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d016      	beq.n	80064d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00e      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f990 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e00a      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f98c 	bl	80067dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	e006      	b.n	80064d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f988 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064d2:	e170      	b.n	80067b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	bf00      	nop
    return;
 80064d6:	e16e      	b.n	80067b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064dc:	2b01      	cmp	r3, #1
 80064de:	f040 814a 	bne.w	8006776 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 8143 	beq.w	8006776 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 813c 	beq.w	8006776 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	f040 80b4 	bne.w	800668c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8140 	beq.w	80067ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800653e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006542:	429a      	cmp	r2, r3
 8006544:	f080 8139 	bcs.w	80067ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800654e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655a:	f000 8088 	beq.w	800666e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	330c      	adds	r3, #12
 8006586:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800658a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800658e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006596:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1d9      	bne.n	800655e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3314      	adds	r3, #20
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e1      	bne.n	80065aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3314      	adds	r3, #20
 8006606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800660a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800663c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663e:	f023 0310 	bic.w	r3, r3, #16
 8006642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006650:	65ba      	str	r2, [r7, #88]	; 0x58
 8006652:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006658:	e841 2300 	strex	r3, r2, [r1]
 800665c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800665e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e3      	bne.n	800662c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	4618      	mov	r0, r3
 800666a:	f7fd fd6a 	bl	8004142 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006676:	b29b      	uxth	r3, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	b29b      	uxth	r3, r3
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8c0 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006684:	e099      	b.n	80067ba <HAL_UART_IRQHandler+0x50e>
 8006686:	bf00      	nop
 8006688:	08006a3b 	.word	0x08006a3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006694:	b29b      	uxth	r3, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 808b 	beq.w	80067be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8086 	beq.w	80067be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	330c      	adds	r3, #12
 80066b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066d6:	647a      	str	r2, [r7, #68]	; 0x44
 80066d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e3      	bne.n	80066b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	623b      	str	r3, [r7, #32]
   return(result);
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800670e:	633a      	str	r2, [r7, #48]	; 0x30
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	e841 2300 	strex	r3, r2, [r1]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1e3      	bne.n	80066ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0310 	bic.w	r3, r3, #16
 8006746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006754:	61fa      	str	r2, [r7, #28]
 8006756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	69b9      	ldr	r1, [r7, #24]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	617b      	str	r3, [r7, #20]
   return(result);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e3      	bne.n	8006730 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f848 	bl	8006804 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006774:	e023      	b.n	80067be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <HAL_UART_IRQHandler+0x4ea>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9c7 	bl	8006b22 <UART_Transmit_IT>
    return;
 8006794:	e014      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <HAL_UART_IRQHandler+0x514>
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d008      	beq.n	80067c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa07 	bl	8006bc2 <UART_EndTransmit_IT>
    return;
 80067b4:	e004      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
    return;
 80067b6:	bf00      	nop
 80067b8:	e002      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
      return;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_UART_IRQHandler+0x514>
      return;
 80067be:	bf00      	nop
  }
}
 80067c0:	37e8      	adds	r7, #232	; 0xe8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop

080067c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b090      	sub	sp, #64	; 0x40
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e050      	b.n	80068d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d04c      	beq.n	80068d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 800683c:	f7fd fae2 	bl	8003e04 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006848:	429a      	cmp	r2, r3
 800684a:	d241      	bcs.n	80068d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800686c:	637a      	str	r2, [r7, #52]	; 0x34
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e5      	bne.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	613b      	str	r3, [r7, #16]
   return(result);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	63bb      	str	r3, [r7, #56]	; 0x38
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3314      	adds	r3, #20
 800689e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068a0:	623a      	str	r2, [r7, #32]
 80068a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	69f9      	ldr	r1, [r7, #28]
 80068a6:	6a3a      	ldr	r2, [r7, #32]
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e5      	bne.n	8006880 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e00f      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4013      	ands	r3, r2
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	bf0c      	ite	eq
 80068e0:	2301      	moveq	r3, #1
 80068e2:	2300      	movne	r3, #0
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d09f      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3740      	adds	r7, #64	; 0x40
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	88fa      	ldrh	r2, [r7, #6]
 8006910:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	88fa      	ldrh	r2, [r7, #6]
 8006916:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2222      	movs	r2, #34	; 0x22
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006944:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0220 	orr.w	r2, r2, #32
 8006964:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b095      	sub	sp, #84	; 0x54
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	330c      	adds	r3, #12
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800699c:	643a      	str	r2, [r7, #64]	; 0x40
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e5      	bne.n	800697c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3314      	adds	r3, #20
 80069b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d119      	bne.n	8006a20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f023 0310 	bic.w	r3, r3, #16
 8006a02:	647b      	str	r3, [r7, #68]	; 0x44
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	61ba      	str	r2, [r7, #24]
 8006a0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6979      	ldr	r1, [r7, #20]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e5      	bne.n	80069ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a2e:	bf00      	nop
 8006a30:	3754      	adds	r7, #84	; 0x54
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7ff fec1 	bl	80067dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a74:	2200      	movs	r2, #0
 8006a76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d117      	bne.n	8006aba <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fe9c 	bl	80067f0 <HAL_UART_AbortCpltCallback>
 8006ab8:	e000      	b.n	8006abc <UART_DMATxAbortCallback+0x5a>
      return;
 8006aba:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d117      	bne.n	8006b1a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fe6c 	bl	80067f0 <HAL_UART_AbortCpltCallback>
 8006b18:	e000      	b.n	8006b1c <UART_DMARxAbortCallback+0x5a>
      return;
 8006b1a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b085      	sub	sp, #20
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b21      	cmp	r3, #33	; 0x21
 8006b34:	d13e      	bne.n	8006bb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3e:	d114      	bne.n	8006b6a <UART_Transmit_IT+0x48>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d110      	bne.n	8006b6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	621a      	str	r2, [r3, #32]
 8006b68:	e008      	b.n	8006b7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6211      	str	r1, [r2, #32]
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	e000      	b.n	8006bb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bb4:	2302      	movs	r3, #2
  }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff fdf0 	bl	80067c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b08c      	sub	sp, #48	; 0x30
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b22      	cmp	r3, #34	; 0x22
 8006c04:	f040 80ab 	bne.w	8006d5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d117      	bne.n	8006c42 <UART_Receive_IT+0x50>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d113      	bne.n	8006c42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	1c9a      	adds	r2, r3, #2
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c40:	e026      	b.n	8006c90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c54:	d007      	beq.n	8006c66 <UART_Receive_IT+0x74>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <UART_Receive_IT+0x82>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e008      	b.n	8006c86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d15a      	bne.n	8006d5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0220 	bic.w	r2, r2, #32
 8006cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	695a      	ldr	r2, [r3, #20]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d135      	bne.n	8006d50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0a:	623a      	str	r2, [r7, #32]
 8006d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	69f9      	ldr	r1, [r7, #28]
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e5      	bne.n	8006cea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d10a      	bne.n	8006d42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff fd5b 	bl	8006804 <HAL_UARTEx_RxEventCallback>
 8006d4e:	e002      	b.n	8006d56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fb fd05 	bl	8002760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e002      	b.n	8006d60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e000      	b.n	8006d60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
  }
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3730      	adds	r7, #48	; 0x30
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d6c:	b0c0      	sub	sp, #256	; 0x100
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	68d9      	ldr	r1, [r3, #12]
 8006d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	ea40 0301 	orr.w	r3, r0, r1
 8006d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dc0:	f021 010c 	bic.w	r1, r1, #12
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de2:	6999      	ldr	r1, [r3, #24]
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	ea40 0301 	orr.w	r3, r0, r1
 8006dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b8f      	ldr	r3, [pc, #572]	; (8007034 <UART_SetConfig+0x2cc>)
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d005      	beq.n	8006e08 <UART_SetConfig+0xa0>
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b8d      	ldr	r3, [pc, #564]	; (8007038 <UART_SetConfig+0x2d0>)
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d104      	bne.n	8006e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e08:	f7fe f810 	bl	8004e2c <HAL_RCC_GetPCLK2Freq>
 8006e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e10:	e003      	b.n	8006e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e12:	f7fd fff7 	bl	8004e04 <HAL_RCC_GetPCLK1Freq>
 8006e16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e24:	f040 810c 	bne.w	8007040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	1891      	adds	r1, r2, r2
 8006e40:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e42:	415b      	adcs	r3, r3
 8006e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	eb12 0801 	adds.w	r8, r2, r1
 8006e50:	4629      	mov	r1, r5
 8006e52:	eb43 0901 	adc.w	r9, r3, r1
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e6a:	4690      	mov	r8, r2
 8006e6c:	4699      	mov	r9, r3
 8006e6e:	4623      	mov	r3, r4
 8006e70:	eb18 0303 	adds.w	r3, r8, r3
 8006e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e78:	462b      	mov	r3, r5
 8006e7a:	eb49 0303 	adc.w	r3, r9, r3
 8006e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e96:	460b      	mov	r3, r1
 8006e98:	18db      	adds	r3, r3, r3
 8006e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006eac:	f7f9 fed4 	bl	8000c58 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4b61      	ldr	r3, [pc, #388]	; (800703c <UART_SetConfig+0x2d4>)
 8006eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	011c      	lsls	r4, r3, #4
 8006ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	1891      	adds	r1, r2, r2
 8006ed6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ed8:	415b      	adcs	r3, r3
 8006eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f00:	4692      	mov	sl, r2
 8006f02:	469b      	mov	fp, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	eb1a 0303 	adds.w	r3, sl, r3
 8006f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	eb4b 0303 	adc.w	r3, fp, r3
 8006f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	18db      	adds	r3, r3, r3
 8006f30:	643b      	str	r3, [r7, #64]	; 0x40
 8006f32:	4613      	mov	r3, r2
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f42:	f7f9 fe89 	bl	8000c58 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	; (800703c <UART_SetConfig+0x2d4>)
 8006f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	2264      	movs	r2, #100	; 0x64
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	1acb      	subs	r3, r1, r3
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f62:	4b36      	ldr	r3, [pc, #216]	; (800703c <UART_SetConfig+0x2d4>)
 8006f64:	fba3 2302 	umull	r2, r3, r3, r2
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f70:	441c      	add	r4, r3
 8006f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	1891      	adds	r1, r2, r2
 8006f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f8c:	415b      	adcs	r3, r3
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f94:	4641      	mov	r1, r8
 8006f96:	1851      	adds	r1, r2, r1
 8006f98:	6339      	str	r1, [r7, #48]	; 0x30
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fac:	4659      	mov	r1, fp
 8006fae:	00cb      	lsls	r3, r1, #3
 8006fb0:	4651      	mov	r1, sl
 8006fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	00ca      	lsls	r2, r1, #3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fc8:	464b      	mov	r3, r9
 8006fca:	460a      	mov	r2, r1
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fe8:	460b      	mov	r3, r1
 8006fea:	18db      	adds	r3, r3, r3
 8006fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fee:	4613      	mov	r3, r2
 8006ff0:	eb42 0303 	adc.w	r3, r2, r3
 8006ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ffe:	f7f9 fe2b 	bl	8000c58 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <UART_SetConfig+0x2d4>)
 8007008:	fba3 1302 	umull	r1, r3, r3, r2
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	2164      	movs	r1, #100	; 0x64
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	3332      	adds	r3, #50	; 0x32
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <UART_SetConfig+0x2d4>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	f003 0207 	and.w	r2, r3, #7
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4422      	add	r2, r4
 800702e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007030:	e105      	b.n	800723e <UART_SetConfig+0x4d6>
 8007032:	bf00      	nop
 8007034:	40011000 	.word	0x40011000
 8007038:	40011400 	.word	0x40011400
 800703c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800704a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800704e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007052:	4642      	mov	r2, r8
 8007054:	464b      	mov	r3, r9
 8007056:	1891      	adds	r1, r2, r2
 8007058:	6239      	str	r1, [r7, #32]
 800705a:	415b      	adcs	r3, r3
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
 800705e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007062:	4641      	mov	r1, r8
 8007064:	1854      	adds	r4, r2, r1
 8007066:	4649      	mov	r1, r9
 8007068:	eb43 0501 	adc.w	r5, r3, r1
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	00eb      	lsls	r3, r5, #3
 8007076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800707a:	00e2      	lsls	r2, r4, #3
 800707c:	4614      	mov	r4, r2
 800707e:	461d      	mov	r5, r3
 8007080:	4643      	mov	r3, r8
 8007082:	18e3      	adds	r3, r4, r3
 8007084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007088:	464b      	mov	r3, r9
 800708a:	eb45 0303 	adc.w	r3, r5, r3
 800708e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800709e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070ae:	4629      	mov	r1, r5
 80070b0:	008b      	lsls	r3, r1, #2
 80070b2:	4621      	mov	r1, r4
 80070b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b8:	4621      	mov	r1, r4
 80070ba:	008a      	lsls	r2, r1, #2
 80070bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070c0:	f7f9 fdca 	bl	8000c58 <__aeabi_uldivmod>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4b60      	ldr	r3, [pc, #384]	; (800724c <UART_SetConfig+0x4e4>)
 80070ca:	fba3 2302 	umull	r2, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	011c      	lsls	r4, r3, #4
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	61b9      	str	r1, [r7, #24]
 80070ec:	415b      	adcs	r3, r3
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6139      	str	r1, [r7, #16]
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	67bb      	str	r3, [r7, #120]	; 0x78
 800713e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800714c:	4649      	mov	r1, r9
 800714e:	008b      	lsls	r3, r1, #2
 8007150:	4641      	mov	r1, r8
 8007152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007156:	4641      	mov	r1, r8
 8007158:	008a      	lsls	r2, r1, #2
 800715a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800715e:	f7f9 fd7b 	bl	8000c58 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b39      	ldr	r3, [pc, #228]	; (800724c <UART_SetConfig+0x4e4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	; 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	011b      	lsls	r3, r3, #4
 8007178:	3332      	adds	r3, #50	; 0x32
 800717a:	4a34      	ldr	r2, [pc, #208]	; (800724c <UART_SetConfig+0x4e4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007186:	441c      	add	r4, r3
 8007188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800718c:	2200      	movs	r2, #0
 800718e:	673b      	str	r3, [r7, #112]	; 0x70
 8007190:	677a      	str	r2, [r7, #116]	; 0x74
 8007192:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007196:	4642      	mov	r2, r8
 8007198:	464b      	mov	r3, r9
 800719a:	1891      	adds	r1, r2, r2
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	415b      	adcs	r3, r3
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a6:	4641      	mov	r1, r8
 80071a8:	1851      	adds	r1, r2, r1
 80071aa:	6039      	str	r1, [r7, #0]
 80071ac:	4649      	mov	r1, r9
 80071ae:	414b      	adcs	r3, r1
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071be:	4659      	mov	r1, fp
 80071c0:	00cb      	lsls	r3, r1, #3
 80071c2:	4651      	mov	r1, sl
 80071c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c8:	4651      	mov	r1, sl
 80071ca:	00ca      	lsls	r2, r1, #3
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	4603      	mov	r3, r0
 80071d2:	4642      	mov	r2, r8
 80071d4:	189b      	adds	r3, r3, r2
 80071d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071d8:	464b      	mov	r3, r9
 80071da:	460a      	mov	r2, r1
 80071dc:	eb42 0303 	adc.w	r3, r2, r3
 80071e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	663b      	str	r3, [r7, #96]	; 0x60
 80071ec:	667a      	str	r2, [r7, #100]	; 0x64
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071fa:	4649      	mov	r1, r9
 80071fc:	008b      	lsls	r3, r1, #2
 80071fe:	4641      	mov	r1, r8
 8007200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007204:	4641      	mov	r1, r8
 8007206:	008a      	lsls	r2, r1, #2
 8007208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800720c:	f7f9 fd24 	bl	8000c58 <__aeabi_uldivmod>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4b0d      	ldr	r3, [pc, #52]	; (800724c <UART_SetConfig+0x4e4>)
 8007216:	fba3 1302 	umull	r1, r3, r3, r2
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	2164      	movs	r1, #100	; 0x64
 800721e:	fb01 f303 	mul.w	r3, r1, r3
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	3332      	adds	r3, #50	; 0x32
 8007228:	4a08      	ldr	r2, [pc, #32]	; (800724c <UART_SetConfig+0x4e4>)
 800722a:	fba2 2303 	umull	r2, r3, r2, r3
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	f003 020f 	and.w	r2, r3, #15
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4422      	add	r2, r4
 800723c:	609a      	str	r2, [r3, #8]
}
 800723e:	bf00      	nop
 8007240:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007244:	46bd      	mov	sp, r7
 8007246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800724a:	bf00      	nop
 800724c:	51eb851f 	.word	0x51eb851f

08007250 <__errno>:
 8007250:	4b01      	ldr	r3, [pc, #4]	; (8007258 <__errno+0x8>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000014 	.word	0x20000014

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4d0d      	ldr	r5, [pc, #52]	; (8007294 <__libc_init_array+0x38>)
 8007260:	4c0d      	ldr	r4, [pc, #52]	; (8007298 <__libc_init_array+0x3c>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	2600      	movs	r6, #0
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	4d0b      	ldr	r5, [pc, #44]	; (800729c <__libc_init_array+0x40>)
 800726e:	4c0c      	ldr	r4, [pc, #48]	; (80072a0 <__libc_init_array+0x44>)
 8007270:	f002 ffee 	bl	800a250 <_init>
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	2600      	movs	r6, #0
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	0800a9d4 	.word	0x0800a9d4
 8007298:	0800a9d4 	.word	0x0800a9d4
 800729c:	0800a9d4 	.word	0x0800a9d4
 80072a0:	0800a9d8 	.word	0x0800a9d8

080072a4 <memset>:
 80072a4:	4402      	add	r2, r0
 80072a6:	4603      	mov	r3, r0
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d100      	bne.n	80072ae <memset+0xa>
 80072ac:	4770      	bx	lr
 80072ae:	f803 1b01 	strb.w	r1, [r3], #1
 80072b2:	e7f9      	b.n	80072a8 <memset+0x4>

080072b4 <__cvt>:
 80072b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	ec55 4b10 	vmov	r4, r5, d0
 80072bc:	2d00      	cmp	r5, #0
 80072be:	460e      	mov	r6, r1
 80072c0:	4619      	mov	r1, r3
 80072c2:	462b      	mov	r3, r5
 80072c4:	bfbb      	ittet	lt
 80072c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072ca:	461d      	movlt	r5, r3
 80072cc:	2300      	movge	r3, #0
 80072ce:	232d      	movlt	r3, #45	; 0x2d
 80072d0:	700b      	strb	r3, [r1, #0]
 80072d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072d8:	4691      	mov	r9, r2
 80072da:	f023 0820 	bic.w	r8, r3, #32
 80072de:	bfbc      	itt	lt
 80072e0:	4622      	movlt	r2, r4
 80072e2:	4614      	movlt	r4, r2
 80072e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072e8:	d005      	beq.n	80072f6 <__cvt+0x42>
 80072ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ee:	d100      	bne.n	80072f2 <__cvt+0x3e>
 80072f0:	3601      	adds	r6, #1
 80072f2:	2102      	movs	r1, #2
 80072f4:	e000      	b.n	80072f8 <__cvt+0x44>
 80072f6:	2103      	movs	r1, #3
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	ab02      	add	r3, sp, #8
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	ec45 4b10 	vmov	d0, r4, r5
 8007304:	4653      	mov	r3, sl
 8007306:	4632      	mov	r2, r6
 8007308:	f000 fe4e 	bl	8007fa8 <_dtoa_r>
 800730c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007310:	4607      	mov	r7, r0
 8007312:	d102      	bne.n	800731a <__cvt+0x66>
 8007314:	f019 0f01 	tst.w	r9, #1
 8007318:	d022      	beq.n	8007360 <__cvt+0xac>
 800731a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800731e:	eb07 0906 	add.w	r9, r7, r6
 8007322:	d110      	bne.n	8007346 <__cvt+0x92>
 8007324:	783b      	ldrb	r3, [r7, #0]
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d10a      	bne.n	8007340 <__cvt+0x8c>
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f9 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007336:	b918      	cbnz	r0, 8007340 <__cvt+0x8c>
 8007338:	f1c6 0601 	rsb	r6, r6, #1
 800733c:	f8ca 6000 	str.w	r6, [sl]
 8007340:	f8da 3000 	ldr.w	r3, [sl]
 8007344:	4499      	add	r9, r3
 8007346:	2200      	movs	r2, #0
 8007348:	2300      	movs	r3, #0
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f7f9 fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007352:	b108      	cbz	r0, 8007358 <__cvt+0xa4>
 8007354:	f8cd 900c 	str.w	r9, [sp, #12]
 8007358:	2230      	movs	r2, #48	; 0x30
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	454b      	cmp	r3, r9
 800735e:	d307      	bcc.n	8007370 <__cvt+0xbc>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007364:	1bdb      	subs	r3, r3, r7
 8007366:	4638      	mov	r0, r7
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	b004      	add	sp, #16
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	1c59      	adds	r1, r3, #1
 8007372:	9103      	str	r1, [sp, #12]
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	e7f0      	b.n	800735a <__cvt+0xa6>

08007378 <__exponent>:
 8007378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737a:	4603      	mov	r3, r0
 800737c:	2900      	cmp	r1, #0
 800737e:	bfb8      	it	lt
 8007380:	4249      	neglt	r1, r1
 8007382:	f803 2b02 	strb.w	r2, [r3], #2
 8007386:	bfb4      	ite	lt
 8007388:	222d      	movlt	r2, #45	; 0x2d
 800738a:	222b      	movge	r2, #43	; 0x2b
 800738c:	2909      	cmp	r1, #9
 800738e:	7042      	strb	r2, [r0, #1]
 8007390:	dd2a      	ble.n	80073e8 <__exponent+0x70>
 8007392:	f10d 0407 	add.w	r4, sp, #7
 8007396:	46a4      	mov	ip, r4
 8007398:	270a      	movs	r7, #10
 800739a:	46a6      	mov	lr, r4
 800739c:	460a      	mov	r2, r1
 800739e:	fb91 f6f7 	sdiv	r6, r1, r7
 80073a2:	fb07 1516 	mls	r5, r7, r6, r1
 80073a6:	3530      	adds	r5, #48	; 0x30
 80073a8:	2a63      	cmp	r2, #99	; 0x63
 80073aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80073ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073b2:	4631      	mov	r1, r6
 80073b4:	dcf1      	bgt.n	800739a <__exponent+0x22>
 80073b6:	3130      	adds	r1, #48	; 0x30
 80073b8:	f1ae 0502 	sub.w	r5, lr, #2
 80073bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073c0:	1c44      	adds	r4, r0, #1
 80073c2:	4629      	mov	r1, r5
 80073c4:	4561      	cmp	r1, ip
 80073c6:	d30a      	bcc.n	80073de <__exponent+0x66>
 80073c8:	f10d 0209 	add.w	r2, sp, #9
 80073cc:	eba2 020e 	sub.w	r2, r2, lr
 80073d0:	4565      	cmp	r5, ip
 80073d2:	bf88      	it	hi
 80073d4:	2200      	movhi	r2, #0
 80073d6:	4413      	add	r3, r2
 80073d8:	1a18      	subs	r0, r3, r0
 80073da:	b003      	add	sp, #12
 80073dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073e6:	e7ed      	b.n	80073c4 <__exponent+0x4c>
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	3130      	adds	r1, #48	; 0x30
 80073ec:	7083      	strb	r3, [r0, #2]
 80073ee:	70c1      	strb	r1, [r0, #3]
 80073f0:	1d03      	adds	r3, r0, #4
 80073f2:	e7f1      	b.n	80073d8 <__exponent+0x60>

080073f4 <_printf_float>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	ed2d 8b02 	vpush	{d8}
 80073fc:	b08d      	sub	sp, #52	; 0x34
 80073fe:	460c      	mov	r4, r1
 8007400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007404:	4616      	mov	r6, r2
 8007406:	461f      	mov	r7, r3
 8007408:	4605      	mov	r5, r0
 800740a:	f001 fd73 	bl	8008ef4 <_localeconv_r>
 800740e:	f8d0 a000 	ldr.w	sl, [r0]
 8007412:	4650      	mov	r0, sl
 8007414:	f7f8 fee4 	bl	80001e0 <strlen>
 8007418:	2300      	movs	r3, #0
 800741a:	930a      	str	r3, [sp, #40]	; 0x28
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	9305      	str	r3, [sp, #20]
 8007420:	f8d8 3000 	ldr.w	r3, [r8]
 8007424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007428:	3307      	adds	r3, #7
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	f103 0208 	add.w	r2, r3, #8
 8007432:	f8c8 2000 	str.w	r2, [r8]
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800743e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	f8cd 8018 	str.w	r8, [sp, #24]
 800744c:	ee08 0a10 	vmov	s16, r0
 8007450:	4b9f      	ldr	r3, [pc, #636]	; (80076d0 <_printf_float+0x2dc>)
 8007452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	f7f9 fb6f 	bl	8000b3c <__aeabi_dcmpun>
 800745e:	bb88      	cbnz	r0, 80074c4 <_printf_float+0xd0>
 8007460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007464:	4b9a      	ldr	r3, [pc, #616]	; (80076d0 <_printf_float+0x2dc>)
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	f7f9 fb49 	bl	8000b00 <__aeabi_dcmple>
 800746e:	bb48      	cbnz	r0, 80074c4 <_printf_float+0xd0>
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f9 fb38 	bl	8000aec <__aeabi_dcmplt>
 800747c:	b110      	cbz	r0, 8007484 <_printf_float+0x90>
 800747e:	232d      	movs	r3, #45	; 0x2d
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007484:	4b93      	ldr	r3, [pc, #588]	; (80076d4 <_printf_float+0x2e0>)
 8007486:	4894      	ldr	r0, [pc, #592]	; (80076d8 <_printf_float+0x2e4>)
 8007488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800748c:	bf94      	ite	ls
 800748e:	4698      	movls	r8, r3
 8007490:	4680      	movhi	r8, r0
 8007492:	2303      	movs	r3, #3
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	f023 0204 	bic.w	r2, r3, #4
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	f04f 0900 	mov.w	r9, #0
 80074a2:	9700      	str	r7, [sp, #0]
 80074a4:	4633      	mov	r3, r6
 80074a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f9d8 	bl	8007860 <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	f040 8090 	bne.w	80075d6 <_printf_float+0x1e2>
 80074b6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ba:	b00d      	add	sp, #52	; 0x34
 80074bc:	ecbd 8b02 	vpop	{d8}
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f9 fb36 	bl	8000b3c <__aeabi_dcmpun>
 80074d0:	b140      	cbz	r0, 80074e4 <_printf_float+0xf0>
 80074d2:	464b      	mov	r3, r9
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbc      	itt	lt
 80074d8:	232d      	movlt	r3, #45	; 0x2d
 80074da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074de:	487f      	ldr	r0, [pc, #508]	; (80076dc <_printf_float+0x2e8>)
 80074e0:	4b7f      	ldr	r3, [pc, #508]	; (80076e0 <_printf_float+0x2ec>)
 80074e2:	e7d1      	b.n	8007488 <_printf_float+0x94>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074ea:	9206      	str	r2, [sp, #24]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	d13f      	bne.n	8007570 <_printf_float+0x17c>
 80074f0:	2306      	movs	r3, #6
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	6861      	ldr	r1, [r4, #4]
 80074f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074fc:	2300      	movs	r3, #0
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	ab0a      	add	r3, sp, #40	; 0x28
 8007502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007506:	ab09      	add	r3, sp, #36	; 0x24
 8007508:	ec49 8b10 	vmov	d0, r8, r9
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6022      	str	r2, [r4, #0]
 8007510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff fecd 	bl	80072b4 <__cvt>
 800751a:	9b06      	ldr	r3, [sp, #24]
 800751c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800751e:	2b47      	cmp	r3, #71	; 0x47
 8007520:	4680      	mov	r8, r0
 8007522:	d108      	bne.n	8007536 <_printf_float+0x142>
 8007524:	1cc8      	adds	r0, r1, #3
 8007526:	db02      	blt.n	800752e <_printf_float+0x13a>
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	4299      	cmp	r1, r3
 800752c:	dd41      	ble.n	80075b2 <_printf_float+0x1be>
 800752e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007532:	fa5f fb8b 	uxtb.w	fp, fp
 8007536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800753a:	d820      	bhi.n	800757e <_printf_float+0x18a>
 800753c:	3901      	subs	r1, #1
 800753e:	465a      	mov	r2, fp
 8007540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007544:	9109      	str	r1, [sp, #36]	; 0x24
 8007546:	f7ff ff17 	bl	8007378 <__exponent>
 800754a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800754c:	1813      	adds	r3, r2, r0
 800754e:	2a01      	cmp	r2, #1
 8007550:	4681      	mov	r9, r0
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	dc02      	bgt.n	800755c <_printf_float+0x168>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	07d2      	lsls	r2, r2, #31
 800755a:	d501      	bpl.n	8007560 <_printf_float+0x16c>
 800755c:	3301      	adds	r3, #1
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007564:	2b00      	cmp	r3, #0
 8007566:	d09c      	beq.n	80074a2 <_printf_float+0xae>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756e:	e798      	b.n	80074a2 <_printf_float+0xae>
 8007570:	9a06      	ldr	r2, [sp, #24]
 8007572:	2a47      	cmp	r2, #71	; 0x47
 8007574:	d1be      	bne.n	80074f4 <_printf_float+0x100>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1bc      	bne.n	80074f4 <_printf_float+0x100>
 800757a:	2301      	movs	r3, #1
 800757c:	e7b9      	b.n	80074f2 <_printf_float+0xfe>
 800757e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007582:	d118      	bne.n	80075b6 <_printf_float+0x1c2>
 8007584:	2900      	cmp	r1, #0
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	dd0b      	ble.n	80075a2 <_printf_float+0x1ae>
 800758a:	6121      	str	r1, [r4, #16]
 800758c:	b913      	cbnz	r3, 8007594 <_printf_float+0x1a0>
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	07d0      	lsls	r0, r2, #31
 8007592:	d502      	bpl.n	800759a <_printf_float+0x1a6>
 8007594:	3301      	adds	r3, #1
 8007596:	440b      	add	r3, r1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	65a1      	str	r1, [r4, #88]	; 0x58
 800759c:	f04f 0900 	mov.w	r9, #0
 80075a0:	e7de      	b.n	8007560 <_printf_float+0x16c>
 80075a2:	b913      	cbnz	r3, 80075aa <_printf_float+0x1b6>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	07d2      	lsls	r2, r2, #31
 80075a8:	d501      	bpl.n	80075ae <_printf_float+0x1ba>
 80075aa:	3302      	adds	r3, #2
 80075ac:	e7f4      	b.n	8007598 <_printf_float+0x1a4>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7f2      	b.n	8007598 <_printf_float+0x1a4>
 80075b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	4299      	cmp	r1, r3
 80075ba:	db05      	blt.n	80075c8 <_printf_float+0x1d4>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	6121      	str	r1, [r4, #16]
 80075c0:	07d8      	lsls	r0, r3, #31
 80075c2:	d5ea      	bpl.n	800759a <_printf_float+0x1a6>
 80075c4:	1c4b      	adds	r3, r1, #1
 80075c6:	e7e7      	b.n	8007598 <_printf_float+0x1a4>
 80075c8:	2900      	cmp	r1, #0
 80075ca:	bfd4      	ite	le
 80075cc:	f1c1 0202 	rsble	r2, r1, #2
 80075d0:	2201      	movgt	r2, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	e7e0      	b.n	8007598 <_printf_float+0x1a4>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	055a      	lsls	r2, r3, #21
 80075da:	d407      	bmi.n	80075ec <_printf_float+0x1f8>
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	4642      	mov	r2, r8
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	d12c      	bne.n	8007644 <_printf_float+0x250>
 80075ea:	e764      	b.n	80074b6 <_printf_float+0xc2>
 80075ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075f0:	f240 80e0 	bls.w	80077b4 <_printf_float+0x3c0>
 80075f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f8:	2200      	movs	r2, #0
 80075fa:	2300      	movs	r3, #0
 80075fc:	f7f9 fa6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d034      	beq.n	800766e <_printf_float+0x27a>
 8007604:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <_printf_float+0x2f0>)
 8007606:	2301      	movs	r3, #1
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	f43f af51 	beq.w	80074b6 <_printf_float+0xc2>
 8007614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007618:	429a      	cmp	r2, r3
 800761a:	db02      	blt.n	8007622 <_printf_float+0x22e>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07d8      	lsls	r0, r3, #31
 8007620:	d510      	bpl.n	8007644 <_printf_float+0x250>
 8007622:	ee18 3a10 	vmov	r3, s16
 8007626:	4652      	mov	r2, sl
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f af41 	beq.w	80074b6 <_printf_float+0xc2>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	f104 091a 	add.w	r9, r4, #26
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	3b01      	subs	r3, #1
 8007640:	4543      	cmp	r3, r8
 8007642:	dc09      	bgt.n	8007658 <_printf_float+0x264>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	079b      	lsls	r3, r3, #30
 8007648:	f100 8105 	bmi.w	8007856 <_printf_float+0x462>
 800764c:	68e0      	ldr	r0, [r4, #12]
 800764e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007650:	4298      	cmp	r0, r3
 8007652:	bfb8      	it	lt
 8007654:	4618      	movlt	r0, r3
 8007656:	e730      	b.n	80074ba <_printf_float+0xc6>
 8007658:	2301      	movs	r3, #1
 800765a:	464a      	mov	r2, r9
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af27 	beq.w	80074b6 <_printf_float+0xc2>
 8007668:	f108 0801 	add.w	r8, r8, #1
 800766c:	e7e6      	b.n	800763c <_printf_float+0x248>
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	dc39      	bgt.n	80076e8 <_printf_float+0x2f4>
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <_printf_float+0x2f0>)
 8007676:	2301      	movs	r3, #1
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f af19 	beq.w	80074b6 <_printf_float+0xc2>
 8007684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007688:	4313      	orrs	r3, r2
 800768a:	d102      	bne.n	8007692 <_printf_float+0x29e>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	07d9      	lsls	r1, r3, #31
 8007690:	d5d8      	bpl.n	8007644 <_printf_float+0x250>
 8007692:	ee18 3a10 	vmov	r3, s16
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af09 	beq.w	80074b6 <_printf_float+0xc2>
 80076a4:	f04f 0900 	mov.w	r9, #0
 80076a8:	f104 0a1a 	add.w	sl, r4, #26
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	425b      	negs	r3, r3
 80076b0:	454b      	cmp	r3, r9
 80076b2:	dc01      	bgt.n	80076b8 <_printf_float+0x2c4>
 80076b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b6:	e792      	b.n	80075de <_printf_float+0x1ea>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f aef7 	beq.w	80074b6 <_printf_float+0xc2>
 80076c8:	f109 0901 	add.w	r9, r9, #1
 80076cc:	e7ee      	b.n	80076ac <_printf_float+0x2b8>
 80076ce:	bf00      	nop
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	0800a5f4 	.word	0x0800a5f4
 80076d8:	0800a5f8 	.word	0x0800a5f8
 80076dc:	0800a600 	.word	0x0800a600
 80076e0:	0800a5fc 	.word	0x0800a5fc
 80076e4:	0800a604 	.word	0x0800a604
 80076e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bfa8      	it	ge
 80076f0:	461a      	movge	r2, r3
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	4691      	mov	r9, r2
 80076f6:	dc37      	bgt.n	8007768 <_printf_float+0x374>
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007700:	f104 021a 	add.w	r2, r4, #26
 8007704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	eba3 0309 	sub.w	r3, r3, r9
 800770c:	455b      	cmp	r3, fp
 800770e:	dc33      	bgt.n	8007778 <_printf_float+0x384>
 8007710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007714:	429a      	cmp	r2, r3
 8007716:	db3b      	blt.n	8007790 <_printf_float+0x39c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07da      	lsls	r2, r3, #31
 800771c:	d438      	bmi.n	8007790 <_printf_float+0x39c>
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	9a05      	ldr	r2, [sp, #20]
 8007722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007724:	1a9a      	subs	r2, r3, r2
 8007726:	eba3 0901 	sub.w	r9, r3, r1
 800772a:	4591      	cmp	r9, r2
 800772c:	bfa8      	it	ge
 800772e:	4691      	movge	r9, r2
 8007730:	f1b9 0f00 	cmp.w	r9, #0
 8007734:	dc35      	bgt.n	80077a2 <_printf_float+0x3ae>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773e:	f104 0a1a 	add.w	sl, r4, #26
 8007742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	eba3 0309 	sub.w	r3, r3, r9
 800774c:	4543      	cmp	r3, r8
 800774e:	f77f af79 	ble.w	8007644 <_printf_float+0x250>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f aeaa 	beq.w	80074b6 <_printf_float+0xc2>
 8007762:	f108 0801 	add.w	r8, r8, #1
 8007766:	e7ec      	b.n	8007742 <_printf_float+0x34e>
 8007768:	4613      	mov	r3, r2
 800776a:	4631      	mov	r1, r6
 800776c:	4642      	mov	r2, r8
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	d1c0      	bne.n	80076f8 <_printf_float+0x304>
 8007776:	e69e      	b.n	80074b6 <_printf_float+0xc2>
 8007778:	2301      	movs	r3, #1
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	9205      	str	r2, [sp, #20]
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f ae97 	beq.w	80074b6 <_printf_float+0xc2>
 8007788:	9a05      	ldr	r2, [sp, #20]
 800778a:	f10b 0b01 	add.w	fp, fp, #1
 800778e:	e7b9      	b.n	8007704 <_printf_float+0x310>
 8007790:	ee18 3a10 	vmov	r3, s16
 8007794:	4652      	mov	r2, sl
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d1be      	bne.n	800771e <_printf_float+0x32a>
 80077a0:	e689      	b.n	80074b6 <_printf_float+0xc2>
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	464b      	mov	r3, r9
 80077a6:	4442      	add	r2, r8
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	d1c1      	bne.n	8007736 <_printf_float+0x342>
 80077b2:	e680      	b.n	80074b6 <_printf_float+0xc2>
 80077b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b6:	2a01      	cmp	r2, #1
 80077b8:	dc01      	bgt.n	80077be <_printf_float+0x3ca>
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d538      	bpl.n	8007830 <_printf_float+0x43c>
 80077be:	2301      	movs	r3, #1
 80077c0:	4642      	mov	r2, r8
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae74 	beq.w	80074b6 <_printf_float+0xc2>
 80077ce:	ee18 3a10 	vmov	r3, s16
 80077d2:	4652      	mov	r2, sl
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f ae6b 	beq.w	80074b6 <_printf_float+0xc2>
 80077e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e4:	2200      	movs	r2, #0
 80077e6:	2300      	movs	r3, #0
 80077e8:	f7f9 f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ec:	b9d8      	cbnz	r0, 8007826 <_printf_float+0x432>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	f108 0201 	add.w	r2, r8, #1
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	d10e      	bne.n	800781e <_printf_float+0x42a>
 8007800:	e659      	b.n	80074b6 <_printf_float+0xc2>
 8007802:	2301      	movs	r3, #1
 8007804:	4652      	mov	r2, sl
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	f43f ae52 	beq.w	80074b6 <_printf_float+0xc2>
 8007812:	f108 0801 	add.w	r8, r8, #1
 8007816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007818:	3b01      	subs	r3, #1
 800781a:	4543      	cmp	r3, r8
 800781c:	dcf1      	bgt.n	8007802 <_printf_float+0x40e>
 800781e:	464b      	mov	r3, r9
 8007820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007824:	e6dc      	b.n	80075e0 <_printf_float+0x1ec>
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	f104 0a1a 	add.w	sl, r4, #26
 800782e:	e7f2      	b.n	8007816 <_printf_float+0x422>
 8007830:	2301      	movs	r3, #1
 8007832:	4642      	mov	r2, r8
 8007834:	e7df      	b.n	80077f6 <_printf_float+0x402>
 8007836:	2301      	movs	r3, #1
 8007838:	464a      	mov	r2, r9
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae38 	beq.w	80074b6 <_printf_float+0xc2>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800784e:	1a5b      	subs	r3, r3, r1
 8007850:	4543      	cmp	r3, r8
 8007852:	dcf0      	bgt.n	8007836 <_printf_float+0x442>
 8007854:	e6fa      	b.n	800764c <_printf_float+0x258>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	f104 0919 	add.w	r9, r4, #25
 800785e:	e7f4      	b.n	800784a <_printf_float+0x456>

08007860 <_printf_common>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	4699      	mov	r9, r3
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007870:	4293      	cmp	r3, r2
 8007872:	bfb8      	it	lt
 8007874:	4613      	movlt	r3, r2
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787c:	4607      	mov	r7, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b10a      	cbz	r2, 8007886 <_printf_common+0x26>
 8007882:	3301      	adds	r3, #1
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0699      	lsls	r1, r3, #26
 800788a:	bf42      	ittt	mi
 800788c:	6833      	ldrmi	r3, [r6, #0]
 800788e:	3302      	addmi	r3, #2
 8007890:	6033      	strmi	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d106      	bne.n	80078a8 <_printf_common+0x48>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc26      	bgt.n	80078f6 <_printf_common+0x96>
 80078a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ac:	1e13      	subs	r3, r2, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	0692      	lsls	r2, r2, #26
 80078b6:	d42b      	bmi.n	8007910 <_printf_common+0xb0>
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d01e      	beq.n	8007904 <_printf_common+0xa4>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	68e5      	ldr	r5, [r4, #12]
 80078ca:	6832      	ldr	r2, [r6, #0]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	2600      	movs	r6, #0
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xc8>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xa8>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xac>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c6      	b.n	800789e <_printf_common+0x3e>
 8007910:	18e1      	adds	r1, r4, r3
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	2030      	movs	r0, #48	; 0x30
 8007916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791a:	4422      	add	r2, r4
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007924:	3302      	adds	r3, #2
 8007926:	e7c7      	b.n	80078b8 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa4>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x8e>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4691      	mov	r9, r2
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	469a      	mov	sl, r3
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d8 	beq.w	8007b0e <_printf_i+0x1d2>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a3 	beq.w	8007aaa <_printf_i+0x16e>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad7 	.word	0x08007ad7
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007adf 	.word	0x08007adf
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a3      	b.n	8007b30 <_printf_i+0x1f4>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	4854      	ldr	r0, [pc, #336]	; (8007b80 <_printf_i+0x244>)
 8007a30:	2f6f      	cmp	r7, #111	; 0x6f
 8007a32:	bf0c      	ite	eq
 8007a34:	2308      	moveq	r3, #8
 8007a36:	230a      	movne	r3, #10
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfa2      	ittt	ge
 8007a46:	6821      	ldrge	r1, [r4, #0]
 8007a48:	f021 0104 	bicge.w	r1, r1, #4
 8007a4c:	6021      	strge	r1, [r4, #0]
 8007a4e:	b90e      	cbnz	r6, 8007a54 <_printf_i+0x118>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d04d      	beq.n	8007af0 <_printf_i+0x1b4>
 8007a54:	4615      	mov	r5, r2
 8007a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a5e:	5dc7      	ldrb	r7, [r0, r7]
 8007a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a64:	4637      	mov	r7, r6
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	460e      	mov	r6, r1
 8007a6a:	d9f4      	bls.n	8007a56 <_printf_i+0x11a>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10b      	bne.n	8007a88 <_printf_i+0x14c>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07de      	lsls	r6, r3, #31
 8007a74:	d508      	bpl.n	8007a88 <_printf_i+0x14c>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	bfde      	ittt	le
 8007a7e:	2330      	movle	r3, #48	; 0x30
 8007a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a88:	1b52      	subs	r2, r2, r5
 8007a8a:	6122      	str	r2, [r4, #16]
 8007a8c:	f8cd a000 	str.w	sl, [sp]
 8007a90:	464b      	mov	r3, r9
 8007a92:	aa03      	add	r2, sp, #12
 8007a94:	4621      	mov	r1, r4
 8007a96:	4640      	mov	r0, r8
 8007a98:	f7ff fee2 	bl	8007860 <_printf_common>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d14c      	bne.n	8007b3a <_printf_i+0x1fe>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b004      	add	sp, #16
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	4835      	ldr	r0, [pc, #212]	; (8007b80 <_printf_i+0x244>)
 8007aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	061d      	lsls	r5, r3, #24
 8007abc:	d514      	bpl.n	8007ae8 <_printf_i+0x1ac>
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b91e      	cbnz	r6, 8007ad2 <_printf_i+0x196>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f023 0320 	bic.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	e7b0      	b.n	8007a38 <_printf_i+0xfc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2378      	movs	r3, #120	; 0x78
 8007ae0:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae6:	e7e3      	b.n	8007ab0 <_printf_i+0x174>
 8007ae8:	0659      	lsls	r1, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2b6      	uxthmi	r6, r6
 8007aee:	e7e6      	b.n	8007abe <_printf_i+0x182>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bb      	b.n	8007a6c <_printf_i+0x130>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1cc>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1d2>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c8>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7ba      	b.n	8007a8c <_printf_i+0x150>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb64 	bl	80001f0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1f2>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0x150>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ab      	beq.n	8007aa0 <_printf_i+0x164>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x23a>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a4      	b.n	8007aa4 <_printf_i+0x168>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09b      	beq.n	8007aa0 <_printf_i+0x164>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x21e>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x212>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x22e>
 8007b7e:	bf00      	nop
 8007b80:	0800a606 	.word	0x0800a606
 8007b84:	0800a617 	.word	0x0800a617

08007b88 <iprintf>:
 8007b88:	b40f      	push	{r0, r1, r2, r3}
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <iprintf+0x2c>)
 8007b8c:	b513      	push	{r0, r1, r4, lr}
 8007b8e:	681c      	ldr	r4, [r3, #0]
 8007b90:	b124      	cbz	r4, 8007b9c <iprintf+0x14>
 8007b92:	69a3      	ldr	r3, [r4, #24]
 8007b94:	b913      	cbnz	r3, 8007b9c <iprintf+0x14>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f001 f90e 	bl	8008db8 <__sinit>
 8007b9c:	ab05      	add	r3, sp, #20
 8007b9e:	9a04      	ldr	r2, [sp, #16]
 8007ba0:	68a1      	ldr	r1, [r4, #8]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f002 f827 	bl	8009bf8 <_vfiprintf_r>
 8007baa:	b002      	add	sp, #8
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	b004      	add	sp, #16
 8007bb2:	4770      	bx	lr
 8007bb4:	20000014 	.word	0x20000014

08007bb8 <putchar>:
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <putchar+0x28>)
 8007bba:	b513      	push	{r0, r1, r4, lr}
 8007bbc:	681c      	ldr	r4, [r3, #0]
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	b134      	cbz	r4, 8007bd0 <putchar+0x18>
 8007bc2:	69a3      	ldr	r3, [r4, #24]
 8007bc4:	b923      	cbnz	r3, 8007bd0 <putchar+0x18>
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f001 f8f5 	bl	8008db8 <__sinit>
 8007bce:	9901      	ldr	r1, [sp, #4]
 8007bd0:	68a2      	ldr	r2, [r4, #8]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	b002      	add	sp, #8
 8007bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bda:	f002 b93d 	b.w	8009e58 <_putc_r>
 8007bde:	bf00      	nop
 8007be0:	20000014 	.word	0x20000014

08007be4 <_puts_r>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	460e      	mov	r6, r1
 8007be8:	4605      	mov	r5, r0
 8007bea:	b118      	cbz	r0, 8007bf4 <_puts_r+0x10>
 8007bec:	6983      	ldr	r3, [r0, #24]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <_puts_r+0x10>
 8007bf0:	f001 f8e2 	bl	8008db8 <__sinit>
 8007bf4:	69ab      	ldr	r3, [r5, #24]
 8007bf6:	68ac      	ldr	r4, [r5, #8]
 8007bf8:	b913      	cbnz	r3, 8007c00 <_puts_r+0x1c>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f001 f8dc 	bl	8008db8 <__sinit>
 8007c00:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <_puts_r+0xd0>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d120      	bne.n	8007c48 <_puts_r+0x64>
 8007c06:	686c      	ldr	r4, [r5, #4]
 8007c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0a:	07db      	lsls	r3, r3, #31
 8007c0c:	d405      	bmi.n	8007c1a <_puts_r+0x36>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	0598      	lsls	r0, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_puts_r+0x36>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f001 f972 	bl	8008efe <__retarget_lock_acquire_recursive>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d51d      	bpl.n	8007c5c <_puts_r+0x78>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	b1db      	cbz	r3, 8007c5c <_puts_r+0x78>
 8007c24:	3e01      	subs	r6, #1
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	bb39      	cbnz	r1, 8007c82 <_puts_r+0x9e>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da38      	bge.n	8007ca8 <_puts_r+0xc4>
 8007c36:	4622      	mov	r2, r4
 8007c38:	210a      	movs	r1, #10
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f868 	bl	8007d10 <__swbuf_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d011      	beq.n	8007c68 <_puts_r+0x84>
 8007c44:	250a      	movs	r5, #10
 8007c46:	e011      	b.n	8007c6c <_puts_r+0x88>
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <_puts_r+0xd4>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	d101      	bne.n	8007c52 <_puts_r+0x6e>
 8007c4e:	68ac      	ldr	r4, [r5, #8]
 8007c50:	e7da      	b.n	8007c08 <_puts_r+0x24>
 8007c52:	4b1a      	ldr	r3, [pc, #104]	; (8007cbc <_puts_r+0xd8>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	bf08      	it	eq
 8007c58:	68ec      	ldreq	r4, [r5, #12]
 8007c5a:	e7d5      	b.n	8007c08 <_puts_r+0x24>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 f8a8 	bl	8007db4 <__swsetup_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0dd      	beq.n	8007c24 <_puts_r+0x40>
 8007c68:	f04f 35ff 	mov.w	r5, #4294967295
 8007c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c6e:	07da      	lsls	r2, r3, #31
 8007c70:	d405      	bmi.n	8007c7e <_puts_r+0x9a>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	059b      	lsls	r3, r3, #22
 8007c76:	d402      	bmi.n	8007c7e <_puts_r+0x9a>
 8007c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7a:	f001 f941 	bl	8008f00 <__retarget_lock_release_recursive>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da04      	bge.n	8007c90 <_puts_r+0xac>
 8007c86:	69a2      	ldr	r2, [r4, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dc06      	bgt.n	8007c9a <_puts_r+0xb6>
 8007c8c:	290a      	cmp	r1, #10
 8007c8e:	d004      	beq.n	8007c9a <_puts_r+0xb6>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	7019      	strb	r1, [r3, #0]
 8007c98:	e7c5      	b.n	8007c26 <_puts_r+0x42>
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f837 	bl	8007d10 <__swbuf_r>
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d1bf      	bne.n	8007c26 <_puts_r+0x42>
 8007ca6:	e7df      	b.n	8007c68 <_puts_r+0x84>
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	250a      	movs	r5, #10
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	701d      	strb	r5, [r3, #0]
 8007cb2:	e7db      	b.n	8007c6c <_puts_r+0x88>
 8007cb4:	0800a6d8 	.word	0x0800a6d8
 8007cb8:	0800a6f8 	.word	0x0800a6f8
 8007cbc:	0800a6b8 	.word	0x0800a6b8

08007cc0 <puts>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <puts+0xc>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	f7ff bf8d 	b.w	8007be4 <_puts_r>
 8007cca:	bf00      	nop
 8007ccc:	20000014 	.word	0x20000014

08007cd0 <siprintf>:
 8007cd0:	b40e      	push	{r1, r2, r3}
 8007cd2:	b500      	push	{lr}
 8007cd4:	b09c      	sub	sp, #112	; 0x70
 8007cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8007cd8:	9002      	str	r0, [sp, #8]
 8007cda:	9006      	str	r0, [sp, #24]
 8007cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ce0:	4809      	ldr	r0, [pc, #36]	; (8007d08 <siprintf+0x38>)
 8007ce2:	9107      	str	r1, [sp, #28]
 8007ce4:	9104      	str	r1, [sp, #16]
 8007ce6:	4909      	ldr	r1, [pc, #36]	; (8007d0c <siprintf+0x3c>)
 8007ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cec:	9105      	str	r1, [sp, #20]
 8007cee:	6800      	ldr	r0, [r0, #0]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	a902      	add	r1, sp, #8
 8007cf4:	f001 fe56 	bl	80099a4 <_svfiprintf_r>
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	b01c      	add	sp, #112	; 0x70
 8007d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d04:	b003      	add	sp, #12
 8007d06:	4770      	bx	lr
 8007d08:	20000014 	.word	0x20000014
 8007d0c:	ffff0208 	.word	0xffff0208

08007d10 <__swbuf_r>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	460e      	mov	r6, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	4605      	mov	r5, r0
 8007d18:	b118      	cbz	r0, 8007d22 <__swbuf_r+0x12>
 8007d1a:	6983      	ldr	r3, [r0, #24]
 8007d1c:	b90b      	cbnz	r3, 8007d22 <__swbuf_r+0x12>
 8007d1e:	f001 f84b 	bl	8008db8 <__sinit>
 8007d22:	4b21      	ldr	r3, [pc, #132]	; (8007da8 <__swbuf_r+0x98>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	d12b      	bne.n	8007d80 <__swbuf_r+0x70>
 8007d28:	686c      	ldr	r4, [r5, #4]
 8007d2a:	69a3      	ldr	r3, [r4, #24]
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	071a      	lsls	r2, r3, #28
 8007d32:	d52f      	bpl.n	8007d94 <__swbuf_r+0x84>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b36b      	cbz	r3, 8007d94 <__swbuf_r+0x84>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6820      	ldr	r0, [r4, #0]
 8007d3c:	1ac0      	subs	r0, r0, r3
 8007d3e:	6963      	ldr	r3, [r4, #20]
 8007d40:	b2f6      	uxtb	r6, r6
 8007d42:	4283      	cmp	r3, r0
 8007d44:	4637      	mov	r7, r6
 8007d46:	dc04      	bgt.n	8007d52 <__swbuf_r+0x42>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 ffa0 	bl	8008c90 <_fflush_r>
 8007d50:	bb30      	cbnz	r0, 8007da0 <__swbuf_r+0x90>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	60a3      	str	r3, [r4, #8]
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	701e      	strb	r6, [r3, #0]
 8007d60:	6963      	ldr	r3, [r4, #20]
 8007d62:	3001      	adds	r0, #1
 8007d64:	4283      	cmp	r3, r0
 8007d66:	d004      	beq.n	8007d72 <__swbuf_r+0x62>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	07db      	lsls	r3, r3, #31
 8007d6c:	d506      	bpl.n	8007d7c <__swbuf_r+0x6c>
 8007d6e:	2e0a      	cmp	r6, #10
 8007d70:	d104      	bne.n	8007d7c <__swbuf_r+0x6c>
 8007d72:	4621      	mov	r1, r4
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 ff8b 	bl	8008c90 <_fflush_r>
 8007d7a:	b988      	cbnz	r0, 8007da0 <__swbuf_r+0x90>
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <__swbuf_r+0x9c>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d101      	bne.n	8007d8a <__swbuf_r+0x7a>
 8007d86:	68ac      	ldr	r4, [r5, #8]
 8007d88:	e7cf      	b.n	8007d2a <__swbuf_r+0x1a>
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <__swbuf_r+0xa0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	bf08      	it	eq
 8007d90:	68ec      	ldreq	r4, [r5, #12]
 8007d92:	e7ca      	b.n	8007d2a <__swbuf_r+0x1a>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4628      	mov	r0, r5
 8007d98:	f000 f80c 	bl	8007db4 <__swsetup_r>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d0cb      	beq.n	8007d38 <__swbuf_r+0x28>
 8007da0:	f04f 37ff 	mov.w	r7, #4294967295
 8007da4:	e7ea      	b.n	8007d7c <__swbuf_r+0x6c>
 8007da6:	bf00      	nop
 8007da8:	0800a6d8 	.word	0x0800a6d8
 8007dac:	0800a6f8 	.word	0x0800a6f8
 8007db0:	0800a6b8 	.word	0x0800a6b8

08007db4 <__swsetup_r>:
 8007db4:	4b32      	ldr	r3, [pc, #200]	; (8007e80 <__swsetup_r+0xcc>)
 8007db6:	b570      	push	{r4, r5, r6, lr}
 8007db8:	681d      	ldr	r5, [r3, #0]
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	b125      	cbz	r5, 8007dca <__swsetup_r+0x16>
 8007dc0:	69ab      	ldr	r3, [r5, #24]
 8007dc2:	b913      	cbnz	r3, 8007dca <__swsetup_r+0x16>
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 fff7 	bl	8008db8 <__sinit>
 8007dca:	4b2e      	ldr	r3, [pc, #184]	; (8007e84 <__swsetup_r+0xd0>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	d10f      	bne.n	8007df0 <__swsetup_r+0x3c>
 8007dd0:	686c      	ldr	r4, [r5, #4]
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd8:	0719      	lsls	r1, r3, #28
 8007dda:	d42c      	bmi.n	8007e36 <__swsetup_r+0x82>
 8007ddc:	06dd      	lsls	r5, r3, #27
 8007dde:	d411      	bmi.n	8007e04 <__swsetup_r+0x50>
 8007de0:	2309      	movs	r3, #9
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	f04f 30ff 	mov.w	r0, #4294967295
 8007dee:	e03e      	b.n	8007e6e <__swsetup_r+0xba>
 8007df0:	4b25      	ldr	r3, [pc, #148]	; (8007e88 <__swsetup_r+0xd4>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <__swsetup_r+0x46>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7eb      	b.n	8007dd2 <__swsetup_r+0x1e>
 8007dfa:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <__swsetup_r+0xd8>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7e6      	b.n	8007dd2 <__swsetup_r+0x1e>
 8007e04:	0758      	lsls	r0, r3, #29
 8007e06:	d512      	bpl.n	8007e2e <__swsetup_r+0x7a>
 8007e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e0a:	b141      	cbz	r1, 8007e1e <__swsetup_r+0x6a>
 8007e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e10:	4299      	cmp	r1, r3
 8007e12:	d002      	beq.n	8007e1a <__swsetup_r+0x66>
 8007e14:	4630      	mov	r0, r6
 8007e16:	f001 fc89 	bl	800972c <_free_r>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	2300      	movs	r3, #0
 8007e28:	6063      	str	r3, [r4, #4]
 8007e2a:	6923      	ldr	r3, [r4, #16]
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f043 0308 	orr.w	r3, r3, #8
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	6923      	ldr	r3, [r4, #16]
 8007e38:	b94b      	cbnz	r3, 8007e4e <__swsetup_r+0x9a>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e44:	d003      	beq.n	8007e4e <__swsetup_r+0x9a>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f001 f87f 	bl	8008f4c <__smakebuf_r>
 8007e4e:	89a0      	ldrh	r0, [r4, #12]
 8007e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e54:	f010 0301 	ands.w	r3, r0, #1
 8007e58:	d00a      	beq.n	8007e70 <__swsetup_r+0xbc>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	6963      	ldr	r3, [r4, #20]
 8007e60:	425b      	negs	r3, r3
 8007e62:	61a3      	str	r3, [r4, #24]
 8007e64:	6923      	ldr	r3, [r4, #16]
 8007e66:	b943      	cbnz	r3, 8007e7a <__swsetup_r+0xc6>
 8007e68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e6c:	d1ba      	bne.n	8007de4 <__swsetup_r+0x30>
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	0781      	lsls	r1, r0, #30
 8007e72:	bf58      	it	pl
 8007e74:	6963      	ldrpl	r3, [r4, #20]
 8007e76:	60a3      	str	r3, [r4, #8]
 8007e78:	e7f4      	b.n	8007e64 <__swsetup_r+0xb0>
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	e7f7      	b.n	8007e6e <__swsetup_r+0xba>
 8007e7e:	bf00      	nop
 8007e80:	20000014 	.word	0x20000014
 8007e84:	0800a6d8 	.word	0x0800a6d8
 8007e88:	0800a6f8 	.word	0x0800a6f8
 8007e8c:	0800a6b8 	.word	0x0800a6b8

08007e90 <quorem>:
 8007e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	6903      	ldr	r3, [r0, #16]
 8007e96:	690c      	ldr	r4, [r1, #16]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	4607      	mov	r7, r0
 8007e9c:	f2c0 8081 	blt.w	8007fa2 <quorem+0x112>
 8007ea0:	3c01      	subs	r4, #1
 8007ea2:	f101 0814 	add.w	r8, r1, #20
 8007ea6:	f100 0514 	add.w	r5, r0, #20
 8007eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ec0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ec4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec8:	d331      	bcc.n	8007f2e <quorem+0x9e>
 8007eca:	f04f 0e00 	mov.w	lr, #0
 8007ece:	4640      	mov	r0, r8
 8007ed0:	46ac      	mov	ip, r5
 8007ed2:	46f2      	mov	sl, lr
 8007ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed8:	b293      	uxth	r3, r2
 8007eda:	fb06 e303 	mla	r3, r6, r3, lr
 8007ede:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ee8:	f8dc a000 	ldr.w	sl, [ip]
 8007eec:	0c12      	lsrs	r2, r2, #16
 8007eee:	fa13 f38a 	uxtah	r3, r3, sl
 8007ef2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007efe:	b292      	uxth	r2, r2
 8007f00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f08:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f0c:	4581      	cmp	r9, r0
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	f84c 3b04 	str.w	r3, [ip], #4
 8007f16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f1a:	d2db      	bcs.n	8007ed4 <quorem+0x44>
 8007f1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f20:	b92b      	cbnz	r3, 8007f2e <quorem+0x9e>
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	429d      	cmp	r5, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	d32e      	bcc.n	8007f8a <quorem+0xfa>
 8007f2c:	613c      	str	r4, [r7, #16]
 8007f2e:	4638      	mov	r0, r7
 8007f30:	f001 fae4 	bl	80094fc <__mcmp>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	db24      	blt.n	8007f82 <quorem+0xf2>
 8007f38:	3601      	adds	r6, #1
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f04f 0c00 	mov.w	ip, #0
 8007f40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f44:	f8d0 e000 	ldr.w	lr, [r0]
 8007f48:	b293      	uxth	r3, r2
 8007f4a:	ebac 0303 	sub.w	r3, ip, r3
 8007f4e:	0c12      	lsrs	r2, r2, #16
 8007f50:	fa13 f38e 	uxtah	r3, r3, lr
 8007f54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f62:	45c1      	cmp	r9, r8
 8007f64:	f840 3b04 	str.w	r3, [r0], #4
 8007f68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f6c:	d2e8      	bcs.n	8007f40 <quorem+0xb0>
 8007f6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f76:	b922      	cbnz	r2, 8007f82 <quorem+0xf2>
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	429d      	cmp	r5, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	d30a      	bcc.n	8007f96 <quorem+0x106>
 8007f80:	613c      	str	r4, [r7, #16]
 8007f82:	4630      	mov	r0, r6
 8007f84:	b003      	add	sp, #12
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	d1cc      	bne.n	8007f2c <quorem+0x9c>
 8007f92:	3c01      	subs	r4, #1
 8007f94:	e7c7      	b.n	8007f26 <quorem+0x96>
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	3b04      	subs	r3, #4
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	d1f0      	bne.n	8007f80 <quorem+0xf0>
 8007f9e:	3c01      	subs	r4, #1
 8007fa0:	e7eb      	b.n	8007f7a <quorem+0xea>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7ee      	b.n	8007f84 <quorem+0xf4>
	...

08007fa8 <_dtoa_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ed2d 8b04 	vpush	{d8-d9}
 8007fb0:	ec57 6b10 	vmov	r6, r7, d0
 8007fb4:	b093      	sub	sp, #76	; 0x4c
 8007fb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fbc:	9106      	str	r1, [sp, #24]
 8007fbe:	ee10 aa10 	vmov	sl, s0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fc8:	46bb      	mov	fp, r7
 8007fca:	b975      	cbnz	r5, 8007fea <_dtoa_r+0x42>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f000 fffd 	bl	8008fcc <malloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fd6:	b920      	cbnz	r0, 8007fe2 <_dtoa_r+0x3a>
 8007fd8:	4ba7      	ldr	r3, [pc, #668]	; (8008278 <_dtoa_r+0x2d0>)
 8007fda:	21ea      	movs	r1, #234	; 0xea
 8007fdc:	48a7      	ldr	r0, [pc, #668]	; (800827c <_dtoa_r+0x2d4>)
 8007fde:	f001 ffe9 	bl	8009fb4 <__assert_func>
 8007fe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fe6:	6005      	str	r5, [r0, #0]
 8007fe8:	60c5      	str	r5, [r0, #12]
 8007fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fec:	6819      	ldr	r1, [r3, #0]
 8007fee:	b151      	cbz	r1, 8008006 <_dtoa_r+0x5e>
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	604a      	str	r2, [r1, #4]
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4093      	lsls	r3, r2
 8007ff8:	608b      	str	r3, [r1, #8]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f001 f83c 	bl	8009078 <_Bfree>
 8008000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	1e3b      	subs	r3, r7, #0
 8008008:	bfaa      	itet	ge
 800800a:	2300      	movge	r3, #0
 800800c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008010:	f8c8 3000 	strge.w	r3, [r8]
 8008014:	4b9a      	ldr	r3, [pc, #616]	; (8008280 <_dtoa_r+0x2d8>)
 8008016:	bfbc      	itt	lt
 8008018:	2201      	movlt	r2, #1
 800801a:	f8c8 2000 	strlt.w	r2, [r8]
 800801e:	ea33 030b 	bics.w	r3, r3, fp
 8008022:	d11b      	bne.n	800805c <_dtoa_r+0xb4>
 8008024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008026:	f242 730f 	movw	r3, #9999	; 0x270f
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008030:	4333      	orrs	r3, r6
 8008032:	f000 8592 	beq.w	8008b5a <_dtoa_r+0xbb2>
 8008036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008038:	b963      	cbnz	r3, 8008054 <_dtoa_r+0xac>
 800803a:	4b92      	ldr	r3, [pc, #584]	; (8008284 <_dtoa_r+0x2dc>)
 800803c:	e022      	b.n	8008084 <_dtoa_r+0xdc>
 800803e:	4b92      	ldr	r3, [pc, #584]	; (8008288 <_dtoa_r+0x2e0>)
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	3308      	adds	r3, #8
 8008044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	9801      	ldr	r0, [sp, #4]
 800804a:	b013      	add	sp, #76	; 0x4c
 800804c:	ecbd 8b04 	vpop	{d8-d9}
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	4b8b      	ldr	r3, [pc, #556]	; (8008284 <_dtoa_r+0x2dc>)
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	3303      	adds	r3, #3
 800805a:	e7f3      	b.n	8008044 <_dtoa_r+0x9c>
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	4650      	mov	r0, sl
 8008062:	4659      	mov	r1, fp
 8008064:	f7f8 fd38 	bl	8000ad8 <__aeabi_dcmpeq>
 8008068:	ec4b ab19 	vmov	d9, sl, fp
 800806c:	4680      	mov	r8, r0
 800806e:	b158      	cbz	r0, 8008088 <_dtoa_r+0xe0>
 8008070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008072:	2301      	movs	r3, #1
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 856b 	beq.w	8008b54 <_dtoa_r+0xbac>
 800807e:	4883      	ldr	r0, [pc, #524]	; (800828c <_dtoa_r+0x2e4>)
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	1e43      	subs	r3, r0, #1
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	e7df      	b.n	8008048 <_dtoa_r+0xa0>
 8008088:	ec4b ab10 	vmov	d0, sl, fp
 800808c:	aa10      	add	r2, sp, #64	; 0x40
 800808e:	a911      	add	r1, sp, #68	; 0x44
 8008090:	4620      	mov	r0, r4
 8008092:	f001 fad9 	bl	8009648 <__d2b>
 8008096:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800809a:	ee08 0a10 	vmov	s16, r0
 800809e:	2d00      	cmp	r5, #0
 80080a0:	f000 8084 	beq.w	80081ac <_dtoa_r+0x204>
 80080a4:	ee19 3a90 	vmov	r3, s19
 80080a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080b0:	4656      	mov	r6, sl
 80080b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080be:	4b74      	ldr	r3, [pc, #464]	; (8008290 <_dtoa_r+0x2e8>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 f8e7 	bl	8000298 <__aeabi_dsub>
 80080ca:	a365      	add	r3, pc, #404	; (adr r3, 8008260 <_dtoa_r+0x2b8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 fa9a 	bl	8000608 <__aeabi_dmul>
 80080d4:	a364      	add	r3, pc, #400	; (adr r3, 8008268 <_dtoa_r+0x2c0>)
 80080d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080da:	f7f8 f8df 	bl	800029c <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	4628      	mov	r0, r5
 80080e2:	460f      	mov	r7, r1
 80080e4:	f7f8 fa26 	bl	8000534 <__aeabi_i2d>
 80080e8:	a361      	add	r3, pc, #388	; (adr r3, 8008270 <_dtoa_r+0x2c8>)
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	f7f8 fa8b 	bl	8000608 <__aeabi_dmul>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4630      	mov	r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	f7f8 f8cf 	bl	800029c <__adddf3>
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	f7f8 fd31 	bl	8000b68 <__aeabi_d2iz>
 8008106:	2200      	movs	r2, #0
 8008108:	9000      	str	r0, [sp, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	4630      	mov	r0, r6
 800810e:	4639      	mov	r1, r7
 8008110:	f7f8 fcec 	bl	8000aec <__aeabi_dcmplt>
 8008114:	b150      	cbz	r0, 800812c <_dtoa_r+0x184>
 8008116:	9800      	ldr	r0, [sp, #0]
 8008118:	f7f8 fa0c 	bl	8000534 <__aeabi_i2d>
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	f7f8 fcda 	bl	8000ad8 <__aeabi_dcmpeq>
 8008124:	b910      	cbnz	r0, 800812c <_dtoa_r+0x184>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	3b01      	subs	r3, #1
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	9b00      	ldr	r3, [sp, #0]
 800812e:	2b16      	cmp	r3, #22
 8008130:	d85a      	bhi.n	80081e8 <_dtoa_r+0x240>
 8008132:	9a00      	ldr	r2, [sp, #0]
 8008134:	4b57      	ldr	r3, [pc, #348]	; (8008294 <_dtoa_r+0x2ec>)
 8008136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	ec51 0b19 	vmov	r0, r1, d9
 8008142:	f7f8 fcd3 	bl	8000aec <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d050      	beq.n	80081ec <_dtoa_r+0x244>
 800814a:	9b00      	ldr	r3, [sp, #0]
 800814c:	3b01      	subs	r3, #1
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	930b      	str	r3, [sp, #44]	; 0x2c
 8008154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008156:	1b5d      	subs	r5, r3, r5
 8008158:	1e6b      	subs	r3, r5, #1
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	bf45      	ittet	mi
 800815e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008162:	9304      	strmi	r3, [sp, #16]
 8008164:	2300      	movpl	r3, #0
 8008166:	2300      	movmi	r3, #0
 8008168:	bf4c      	ite	mi
 800816a:	9305      	strmi	r3, [sp, #20]
 800816c:	9304      	strpl	r3, [sp, #16]
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	db3d      	blt.n	80081f0 <_dtoa_r+0x248>
 8008174:	9b05      	ldr	r3, [sp, #20]
 8008176:	9a00      	ldr	r2, [sp, #0]
 8008178:	920a      	str	r2, [sp, #40]	; 0x28
 800817a:	4413      	add	r3, r2
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	2300      	movs	r3, #0
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	9b06      	ldr	r3, [sp, #24]
 8008184:	2b09      	cmp	r3, #9
 8008186:	f200 8089 	bhi.w	800829c <_dtoa_r+0x2f4>
 800818a:	2b05      	cmp	r3, #5
 800818c:	bfc4      	itt	gt
 800818e:	3b04      	subgt	r3, #4
 8008190:	9306      	strgt	r3, [sp, #24]
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	f1a3 0302 	sub.w	r3, r3, #2
 8008198:	bfcc      	ite	gt
 800819a:	2500      	movgt	r5, #0
 800819c:	2501      	movle	r5, #1
 800819e:	2b03      	cmp	r3, #3
 80081a0:	f200 8087 	bhi.w	80082b2 <_dtoa_r+0x30a>
 80081a4:	e8df f003 	tbb	[pc, r3]
 80081a8:	59383a2d 	.word	0x59383a2d
 80081ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081b0:	441d      	add	r5, r3
 80081b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	bfc1      	itttt	gt
 80081ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081ca:	bfda      	itte	le
 80081cc:	f1c3 0320 	rsble	r3, r3, #32
 80081d0:	fa06 f003 	lslle.w	r0, r6, r3
 80081d4:	4318      	orrgt	r0, r3
 80081d6:	f7f8 f99d 	bl	8000514 <__aeabi_ui2d>
 80081da:	2301      	movs	r3, #1
 80081dc:	4606      	mov	r6, r0
 80081de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081e2:	3d01      	subs	r5, #1
 80081e4:	930e      	str	r3, [sp, #56]	; 0x38
 80081e6:	e76a      	b.n	80080be <_dtoa_r+0x116>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7b2      	b.n	8008152 <_dtoa_r+0x1aa>
 80081ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ee:	e7b1      	b.n	8008154 <_dtoa_r+0x1ac>
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	9a00      	ldr	r2, [sp, #0]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	4253      	negs	r3, r2
 80081fa:	9307      	str	r3, [sp, #28]
 80081fc:	2300      	movs	r3, #0
 80081fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008200:	e7bf      	b.n	8008182 <_dtoa_r+0x1da>
 8008202:	2300      	movs	r3, #0
 8008204:	9308      	str	r3, [sp, #32]
 8008206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc55      	bgt.n	80082b8 <_dtoa_r+0x310>
 800820c:	2301      	movs	r3, #1
 800820e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008212:	461a      	mov	r2, r3
 8008214:	9209      	str	r2, [sp, #36]	; 0x24
 8008216:	e00c      	b.n	8008232 <_dtoa_r+0x28a>
 8008218:	2301      	movs	r3, #1
 800821a:	e7f3      	b.n	8008204 <_dtoa_r+0x25c>
 800821c:	2300      	movs	r3, #0
 800821e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	9b00      	ldr	r3, [sp, #0]
 8008224:	4413      	add	r3, r2
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	3301      	adds	r3, #1
 800822a:	2b01      	cmp	r3, #1
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	bfb8      	it	lt
 8008230:	2301      	movlt	r3, #1
 8008232:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008234:	2200      	movs	r2, #0
 8008236:	6042      	str	r2, [r0, #4]
 8008238:	2204      	movs	r2, #4
 800823a:	f102 0614 	add.w	r6, r2, #20
 800823e:	429e      	cmp	r6, r3
 8008240:	6841      	ldr	r1, [r0, #4]
 8008242:	d93d      	bls.n	80082c0 <_dtoa_r+0x318>
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fed7 	bl	8008ff8 <_Balloc>
 800824a:	9001      	str	r0, [sp, #4]
 800824c:	2800      	cmp	r0, #0
 800824e:	d13b      	bne.n	80082c8 <_dtoa_r+0x320>
 8008250:	4b11      	ldr	r3, [pc, #68]	; (8008298 <_dtoa_r+0x2f0>)
 8008252:	4602      	mov	r2, r0
 8008254:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008258:	e6c0      	b.n	8007fdc <_dtoa_r+0x34>
 800825a:	2301      	movs	r3, #1
 800825c:	e7df      	b.n	800821e <_dtoa_r+0x276>
 800825e:	bf00      	nop
 8008260:	636f4361 	.word	0x636f4361
 8008264:	3fd287a7 	.word	0x3fd287a7
 8008268:	8b60c8b3 	.word	0x8b60c8b3
 800826c:	3fc68a28 	.word	0x3fc68a28
 8008270:	509f79fb 	.word	0x509f79fb
 8008274:	3fd34413 	.word	0x3fd34413
 8008278:	0800a635 	.word	0x0800a635
 800827c:	0800a64c 	.word	0x0800a64c
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	0800a631 	.word	0x0800a631
 8008288:	0800a628 	.word	0x0800a628
 800828c:	0800a605 	.word	0x0800a605
 8008290:	3ff80000 	.word	0x3ff80000
 8008294:	0800a7a0 	.word	0x0800a7a0
 8008298:	0800a6a7 	.word	0x0800a6a7
 800829c:	2501      	movs	r5, #1
 800829e:	2300      	movs	r3, #0
 80082a0:	9306      	str	r3, [sp, #24]
 80082a2:	9508      	str	r5, [sp, #32]
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295
 80082a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	2312      	movs	r3, #18
 80082b0:	e7b0      	b.n	8008214 <_dtoa_r+0x26c>
 80082b2:	2301      	movs	r3, #1
 80082b4:	9308      	str	r3, [sp, #32]
 80082b6:	e7f5      	b.n	80082a4 <_dtoa_r+0x2fc>
 80082b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082be:	e7b8      	b.n	8008232 <_dtoa_r+0x28a>
 80082c0:	3101      	adds	r1, #1
 80082c2:	6041      	str	r1, [r0, #4]
 80082c4:	0052      	lsls	r2, r2, #1
 80082c6:	e7b8      	b.n	800823a <_dtoa_r+0x292>
 80082c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082ca:	9a01      	ldr	r2, [sp, #4]
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	2b0e      	cmp	r3, #14
 80082d2:	f200 809d 	bhi.w	8008410 <_dtoa_r+0x468>
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	f000 809a 	beq.w	8008410 <_dtoa_r+0x468>
 80082dc:	9b00      	ldr	r3, [sp, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	dd32      	ble.n	8008348 <_dtoa_r+0x3a0>
 80082e2:	4ab7      	ldr	r2, [pc, #732]	; (80085c0 <_dtoa_r+0x618>)
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082f0:	9b00      	ldr	r3, [sp, #0]
 80082f2:	05d8      	lsls	r0, r3, #23
 80082f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082f8:	d516      	bpl.n	8008328 <_dtoa_r+0x380>
 80082fa:	4bb2      	ldr	r3, [pc, #712]	; (80085c4 <_dtoa_r+0x61c>)
 80082fc:	ec51 0b19 	vmov	r0, r1, d9
 8008300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008304:	f7f8 faaa 	bl	800085c <__aeabi_ddiv>
 8008308:	f007 070f 	and.w	r7, r7, #15
 800830c:	4682      	mov	sl, r0
 800830e:	468b      	mov	fp, r1
 8008310:	2503      	movs	r5, #3
 8008312:	4eac      	ldr	r6, [pc, #688]	; (80085c4 <_dtoa_r+0x61c>)
 8008314:	b957      	cbnz	r7, 800832c <_dtoa_r+0x384>
 8008316:	4642      	mov	r2, r8
 8008318:	464b      	mov	r3, r9
 800831a:	4650      	mov	r0, sl
 800831c:	4659      	mov	r1, fp
 800831e:	f7f8 fa9d 	bl	800085c <__aeabi_ddiv>
 8008322:	4682      	mov	sl, r0
 8008324:	468b      	mov	fp, r1
 8008326:	e028      	b.n	800837a <_dtoa_r+0x3d2>
 8008328:	2502      	movs	r5, #2
 800832a:	e7f2      	b.n	8008312 <_dtoa_r+0x36a>
 800832c:	07f9      	lsls	r1, r7, #31
 800832e:	d508      	bpl.n	8008342 <_dtoa_r+0x39a>
 8008330:	4640      	mov	r0, r8
 8008332:	4649      	mov	r1, r9
 8008334:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008338:	f7f8 f966 	bl	8000608 <__aeabi_dmul>
 800833c:	3501      	adds	r5, #1
 800833e:	4680      	mov	r8, r0
 8008340:	4689      	mov	r9, r1
 8008342:	107f      	asrs	r7, r7, #1
 8008344:	3608      	adds	r6, #8
 8008346:	e7e5      	b.n	8008314 <_dtoa_r+0x36c>
 8008348:	f000 809b 	beq.w	8008482 <_dtoa_r+0x4da>
 800834c:	9b00      	ldr	r3, [sp, #0]
 800834e:	4f9d      	ldr	r7, [pc, #628]	; (80085c4 <_dtoa_r+0x61c>)
 8008350:	425e      	negs	r6, r3
 8008352:	4b9b      	ldr	r3, [pc, #620]	; (80085c0 <_dtoa_r+0x618>)
 8008354:	f006 020f 	and.w	r2, r6, #15
 8008358:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	ec51 0b19 	vmov	r0, r1, d9
 8008364:	f7f8 f950 	bl	8000608 <__aeabi_dmul>
 8008368:	1136      	asrs	r6, r6, #4
 800836a:	4682      	mov	sl, r0
 800836c:	468b      	mov	fp, r1
 800836e:	2300      	movs	r3, #0
 8008370:	2502      	movs	r5, #2
 8008372:	2e00      	cmp	r6, #0
 8008374:	d17a      	bne.n	800846c <_dtoa_r+0x4c4>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1d3      	bne.n	8008322 <_dtoa_r+0x37a>
 800837a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8082 	beq.w	8008486 <_dtoa_r+0x4de>
 8008382:	4b91      	ldr	r3, [pc, #580]	; (80085c8 <_dtoa_r+0x620>)
 8008384:	2200      	movs	r2, #0
 8008386:	4650      	mov	r0, sl
 8008388:	4659      	mov	r1, fp
 800838a:	f7f8 fbaf 	bl	8000aec <__aeabi_dcmplt>
 800838e:	2800      	cmp	r0, #0
 8008390:	d079      	beq.n	8008486 <_dtoa_r+0x4de>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d076      	beq.n	8008486 <_dtoa_r+0x4de>
 8008398:	9b02      	ldr	r3, [sp, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd36      	ble.n	800840c <_dtoa_r+0x464>
 800839e:	9b00      	ldr	r3, [sp, #0]
 80083a0:	4650      	mov	r0, sl
 80083a2:	4659      	mov	r1, fp
 80083a4:	1e5f      	subs	r7, r3, #1
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b88      	ldr	r3, [pc, #544]	; (80085cc <_dtoa_r+0x624>)
 80083aa:	f7f8 f92d 	bl	8000608 <__aeabi_dmul>
 80083ae:	9e02      	ldr	r6, [sp, #8]
 80083b0:	4682      	mov	sl, r0
 80083b2:	468b      	mov	fp, r1
 80083b4:	3501      	adds	r5, #1
 80083b6:	4628      	mov	r0, r5
 80083b8:	f7f8 f8bc 	bl	8000534 <__aeabi_i2d>
 80083bc:	4652      	mov	r2, sl
 80083be:	465b      	mov	r3, fp
 80083c0:	f7f8 f922 	bl	8000608 <__aeabi_dmul>
 80083c4:	4b82      	ldr	r3, [pc, #520]	; (80085d0 <_dtoa_r+0x628>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	f7f7 ff68 	bl	800029c <__adddf3>
 80083cc:	46d0      	mov	r8, sl
 80083ce:	46d9      	mov	r9, fp
 80083d0:	4682      	mov	sl, r0
 80083d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083d6:	2e00      	cmp	r6, #0
 80083d8:	d158      	bne.n	800848c <_dtoa_r+0x4e4>
 80083da:	4b7e      	ldr	r3, [pc, #504]	; (80085d4 <_dtoa_r+0x62c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f7 ff59 	bl	8000298 <__aeabi_dsub>
 80083e6:	4652      	mov	r2, sl
 80083e8:	465b      	mov	r3, fp
 80083ea:	4680      	mov	r8, r0
 80083ec:	4689      	mov	r9, r1
 80083ee:	f7f8 fb9b 	bl	8000b28 <__aeabi_dcmpgt>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f040 8295 	bne.w	8008922 <_dtoa_r+0x97a>
 80083f8:	4652      	mov	r2, sl
 80083fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 fb73 	bl	8000aec <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f040 8289 	bne.w	800891e <_dtoa_r+0x976>
 800840c:	ec5b ab19 	vmov	sl, fp, d9
 8008410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008412:	2b00      	cmp	r3, #0
 8008414:	f2c0 8148 	blt.w	80086a8 <_dtoa_r+0x700>
 8008418:	9a00      	ldr	r2, [sp, #0]
 800841a:	2a0e      	cmp	r2, #14
 800841c:	f300 8144 	bgt.w	80086a8 <_dtoa_r+0x700>
 8008420:	4b67      	ldr	r3, [pc, #412]	; (80085c0 <_dtoa_r+0x618>)
 8008422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008426:	e9d3 8900 	ldrd	r8, r9, [r3]
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	f280 80d5 	bge.w	80085dc <_dtoa_r+0x634>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f300 80d1 	bgt.w	80085dc <_dtoa_r+0x634>
 800843a:	f040 826f 	bne.w	800891c <_dtoa_r+0x974>
 800843e:	4b65      	ldr	r3, [pc, #404]	; (80085d4 <_dtoa_r+0x62c>)
 8008440:	2200      	movs	r2, #0
 8008442:	4640      	mov	r0, r8
 8008444:	4649      	mov	r1, r9
 8008446:	f7f8 f8df 	bl	8000608 <__aeabi_dmul>
 800844a:	4652      	mov	r2, sl
 800844c:	465b      	mov	r3, fp
 800844e:	f7f8 fb61 	bl	8000b14 <__aeabi_dcmpge>
 8008452:	9e03      	ldr	r6, [sp, #12]
 8008454:	4637      	mov	r7, r6
 8008456:	2800      	cmp	r0, #0
 8008458:	f040 8245 	bne.w	80088e6 <_dtoa_r+0x93e>
 800845c:	9d01      	ldr	r5, [sp, #4]
 800845e:	2331      	movs	r3, #49	; 0x31
 8008460:	f805 3b01 	strb.w	r3, [r5], #1
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	e240      	b.n	80088ee <_dtoa_r+0x946>
 800846c:	07f2      	lsls	r2, r6, #31
 800846e:	d505      	bpl.n	800847c <_dtoa_r+0x4d4>
 8008470:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008474:	f7f8 f8c8 	bl	8000608 <__aeabi_dmul>
 8008478:	3501      	adds	r5, #1
 800847a:	2301      	movs	r3, #1
 800847c:	1076      	asrs	r6, r6, #1
 800847e:	3708      	adds	r7, #8
 8008480:	e777      	b.n	8008372 <_dtoa_r+0x3ca>
 8008482:	2502      	movs	r5, #2
 8008484:	e779      	b.n	800837a <_dtoa_r+0x3d2>
 8008486:	9f00      	ldr	r7, [sp, #0]
 8008488:	9e03      	ldr	r6, [sp, #12]
 800848a:	e794      	b.n	80083b6 <_dtoa_r+0x40e>
 800848c:	9901      	ldr	r1, [sp, #4]
 800848e:	4b4c      	ldr	r3, [pc, #304]	; (80085c0 <_dtoa_r+0x618>)
 8008490:	4431      	add	r1, r6
 8008492:	910d      	str	r1, [sp, #52]	; 0x34
 8008494:	9908      	ldr	r1, [sp, #32]
 8008496:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800849a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800849e:	2900      	cmp	r1, #0
 80084a0:	d043      	beq.n	800852a <_dtoa_r+0x582>
 80084a2:	494d      	ldr	r1, [pc, #308]	; (80085d8 <_dtoa_r+0x630>)
 80084a4:	2000      	movs	r0, #0
 80084a6:	f7f8 f9d9 	bl	800085c <__aeabi_ddiv>
 80084aa:	4652      	mov	r2, sl
 80084ac:	465b      	mov	r3, fp
 80084ae:	f7f7 fef3 	bl	8000298 <__aeabi_dsub>
 80084b2:	9d01      	ldr	r5, [sp, #4]
 80084b4:	4682      	mov	sl, r0
 80084b6:	468b      	mov	fp, r1
 80084b8:	4649      	mov	r1, r9
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7f8 fb54 	bl	8000b68 <__aeabi_d2iz>
 80084c0:	4606      	mov	r6, r0
 80084c2:	f7f8 f837 	bl	8000534 <__aeabi_i2d>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4640      	mov	r0, r8
 80084cc:	4649      	mov	r1, r9
 80084ce:	f7f7 fee3 	bl	8000298 <__aeabi_dsub>
 80084d2:	3630      	adds	r6, #48	; 0x30
 80084d4:	f805 6b01 	strb.w	r6, [r5], #1
 80084d8:	4652      	mov	r2, sl
 80084da:	465b      	mov	r3, fp
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	f7f8 fb04 	bl	8000aec <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d163      	bne.n	80085b0 <_dtoa_r+0x608>
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	4936      	ldr	r1, [pc, #216]	; (80085c8 <_dtoa_r+0x620>)
 80084ee:	2000      	movs	r0, #0
 80084f0:	f7f7 fed2 	bl	8000298 <__aeabi_dsub>
 80084f4:	4652      	mov	r2, sl
 80084f6:	465b      	mov	r3, fp
 80084f8:	f7f8 faf8 	bl	8000aec <__aeabi_dcmplt>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f040 80b5 	bne.w	800866c <_dtoa_r+0x6c4>
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	429d      	cmp	r5, r3
 8008506:	d081      	beq.n	800840c <_dtoa_r+0x464>
 8008508:	4b30      	ldr	r3, [pc, #192]	; (80085cc <_dtoa_r+0x624>)
 800850a:	2200      	movs	r2, #0
 800850c:	4650      	mov	r0, sl
 800850e:	4659      	mov	r1, fp
 8008510:	f7f8 f87a 	bl	8000608 <__aeabi_dmul>
 8008514:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <_dtoa_r+0x624>)
 8008516:	4682      	mov	sl, r0
 8008518:	468b      	mov	fp, r1
 800851a:	4640      	mov	r0, r8
 800851c:	4649      	mov	r1, r9
 800851e:	2200      	movs	r2, #0
 8008520:	f7f8 f872 	bl	8000608 <__aeabi_dmul>
 8008524:	4680      	mov	r8, r0
 8008526:	4689      	mov	r9, r1
 8008528:	e7c6      	b.n	80084b8 <_dtoa_r+0x510>
 800852a:	4650      	mov	r0, sl
 800852c:	4659      	mov	r1, fp
 800852e:	f7f8 f86b 	bl	8000608 <__aeabi_dmul>
 8008532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008534:	9d01      	ldr	r5, [sp, #4]
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	4649      	mov	r1, r9
 800853e:	4640      	mov	r0, r8
 8008540:	f7f8 fb12 	bl	8000b68 <__aeabi_d2iz>
 8008544:	4606      	mov	r6, r0
 8008546:	f7f7 fff5 	bl	8000534 <__aeabi_i2d>
 800854a:	3630      	adds	r6, #48	; 0x30
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f7 fea0 	bl	8000298 <__aeabi_dsub>
 8008558:	f805 6b01 	strb.w	r6, [r5], #1
 800855c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800855e:	429d      	cmp	r5, r3
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	d124      	bne.n	80085b4 <_dtoa_r+0x60c>
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <_dtoa_r+0x630>)
 800856c:	4650      	mov	r0, sl
 800856e:	4659      	mov	r1, fp
 8008570:	f7f7 fe94 	bl	800029c <__adddf3>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4640      	mov	r0, r8
 800857a:	4649      	mov	r1, r9
 800857c:	f7f8 fad4 	bl	8000b28 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	d173      	bne.n	800866c <_dtoa_r+0x6c4>
 8008584:	4652      	mov	r2, sl
 8008586:	465b      	mov	r3, fp
 8008588:	4913      	ldr	r1, [pc, #76]	; (80085d8 <_dtoa_r+0x630>)
 800858a:	2000      	movs	r0, #0
 800858c:	f7f7 fe84 	bl	8000298 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4640      	mov	r0, r8
 8008596:	4649      	mov	r1, r9
 8008598:	f7f8 faa8 	bl	8000aec <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f af35 	beq.w	800840c <_dtoa_r+0x464>
 80085a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085a4:	1e6b      	subs	r3, r5, #1
 80085a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ac:	2b30      	cmp	r3, #48	; 0x30
 80085ae:	d0f8      	beq.n	80085a2 <_dtoa_r+0x5fa>
 80085b0:	9700      	str	r7, [sp, #0]
 80085b2:	e049      	b.n	8008648 <_dtoa_r+0x6a0>
 80085b4:	4b05      	ldr	r3, [pc, #20]	; (80085cc <_dtoa_r+0x624>)
 80085b6:	f7f8 f827 	bl	8000608 <__aeabi_dmul>
 80085ba:	4680      	mov	r8, r0
 80085bc:	4689      	mov	r9, r1
 80085be:	e7bd      	b.n	800853c <_dtoa_r+0x594>
 80085c0:	0800a7a0 	.word	0x0800a7a0
 80085c4:	0800a778 	.word	0x0800a778
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	40240000 	.word	0x40240000
 80085d0:	401c0000 	.word	0x401c0000
 80085d4:	40140000 	.word	0x40140000
 80085d8:	3fe00000 	.word	0x3fe00000
 80085dc:	9d01      	ldr	r5, [sp, #4]
 80085de:	4656      	mov	r6, sl
 80085e0:	465f      	mov	r7, fp
 80085e2:	4642      	mov	r2, r8
 80085e4:	464b      	mov	r3, r9
 80085e6:	4630      	mov	r0, r6
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 f937 	bl	800085c <__aeabi_ddiv>
 80085ee:	f7f8 fabb 	bl	8000b68 <__aeabi_d2iz>
 80085f2:	4682      	mov	sl, r0
 80085f4:	f7f7 ff9e 	bl	8000534 <__aeabi_i2d>
 80085f8:	4642      	mov	r2, r8
 80085fa:	464b      	mov	r3, r9
 80085fc:	f7f8 f804 	bl	8000608 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800860c:	f7f7 fe44 	bl	8000298 <__aeabi_dsub>
 8008610:	f805 6b01 	strb.w	r6, [r5], #1
 8008614:	9e01      	ldr	r6, [sp, #4]
 8008616:	9f03      	ldr	r7, [sp, #12]
 8008618:	1bae      	subs	r6, r5, r6
 800861a:	42b7      	cmp	r7, r6
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	d135      	bne.n	800868e <_dtoa_r+0x6e6>
 8008622:	f7f7 fe3b 	bl	800029c <__adddf3>
 8008626:	4642      	mov	r2, r8
 8008628:	464b      	mov	r3, r9
 800862a:	4606      	mov	r6, r0
 800862c:	460f      	mov	r7, r1
 800862e:	f7f8 fa7b 	bl	8000b28 <__aeabi_dcmpgt>
 8008632:	b9d0      	cbnz	r0, 800866a <_dtoa_r+0x6c2>
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f8 fa4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008640:	b110      	cbz	r0, 8008648 <_dtoa_r+0x6a0>
 8008642:	f01a 0f01 	tst.w	sl, #1
 8008646:	d110      	bne.n	800866a <_dtoa_r+0x6c2>
 8008648:	4620      	mov	r0, r4
 800864a:	ee18 1a10 	vmov	r1, s16
 800864e:	f000 fd13 	bl	8009078 <_Bfree>
 8008652:	2300      	movs	r3, #0
 8008654:	9800      	ldr	r0, [sp, #0]
 8008656:	702b      	strb	r3, [r5, #0]
 8008658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800865a:	3001      	adds	r0, #1
 800865c:	6018      	str	r0, [r3, #0]
 800865e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008660:	2b00      	cmp	r3, #0
 8008662:	f43f acf1 	beq.w	8008048 <_dtoa_r+0xa0>
 8008666:	601d      	str	r5, [r3, #0]
 8008668:	e4ee      	b.n	8008048 <_dtoa_r+0xa0>
 800866a:	9f00      	ldr	r7, [sp, #0]
 800866c:	462b      	mov	r3, r5
 800866e:	461d      	mov	r5, r3
 8008670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008674:	2a39      	cmp	r2, #57	; 0x39
 8008676:	d106      	bne.n	8008686 <_dtoa_r+0x6de>
 8008678:	9a01      	ldr	r2, [sp, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d1f7      	bne.n	800866e <_dtoa_r+0x6c6>
 800867e:	9901      	ldr	r1, [sp, #4]
 8008680:	2230      	movs	r2, #48	; 0x30
 8008682:	3701      	adds	r7, #1
 8008684:	700a      	strb	r2, [r1, #0]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	3201      	adds	r2, #1
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	e790      	b.n	80085b0 <_dtoa_r+0x608>
 800868e:	4ba6      	ldr	r3, [pc, #664]	; (8008928 <_dtoa_r+0x980>)
 8008690:	2200      	movs	r2, #0
 8008692:	f7f7 ffb9 	bl	8000608 <__aeabi_dmul>
 8008696:	2200      	movs	r2, #0
 8008698:	2300      	movs	r3, #0
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	f7f8 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d09d      	beq.n	80085e2 <_dtoa_r+0x63a>
 80086a6:	e7cf      	b.n	8008648 <_dtoa_r+0x6a0>
 80086a8:	9a08      	ldr	r2, [sp, #32]
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	f000 80d7 	beq.w	800885e <_dtoa_r+0x8b6>
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	2a01      	cmp	r2, #1
 80086b4:	f300 80ba 	bgt.w	800882c <_dtoa_r+0x884>
 80086b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086ba:	2a00      	cmp	r2, #0
 80086bc:	f000 80b2 	beq.w	8008824 <_dtoa_r+0x87c>
 80086c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086c4:	9e07      	ldr	r6, [sp, #28]
 80086c6:	9d04      	ldr	r5, [sp, #16]
 80086c8:	9a04      	ldr	r2, [sp, #16]
 80086ca:	441a      	add	r2, r3
 80086cc:	9204      	str	r2, [sp, #16]
 80086ce:	9a05      	ldr	r2, [sp, #20]
 80086d0:	2101      	movs	r1, #1
 80086d2:	441a      	add	r2, r3
 80086d4:	4620      	mov	r0, r4
 80086d6:	9205      	str	r2, [sp, #20]
 80086d8:	f000 fd86 	bl	80091e8 <__i2b>
 80086dc:	4607      	mov	r7, r0
 80086de:	2d00      	cmp	r5, #0
 80086e0:	dd0c      	ble.n	80086fc <_dtoa_r+0x754>
 80086e2:	9b05      	ldr	r3, [sp, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd09      	ble.n	80086fc <_dtoa_r+0x754>
 80086e8:	42ab      	cmp	r3, r5
 80086ea:	9a04      	ldr	r2, [sp, #16]
 80086ec:	bfa8      	it	ge
 80086ee:	462b      	movge	r3, r5
 80086f0:	1ad2      	subs	r2, r2, r3
 80086f2:	9204      	str	r2, [sp, #16]
 80086f4:	9a05      	ldr	r2, [sp, #20]
 80086f6:	1aed      	subs	r5, r5, r3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	9b07      	ldr	r3, [sp, #28]
 80086fe:	b31b      	cbz	r3, 8008748 <_dtoa_r+0x7a0>
 8008700:	9b08      	ldr	r3, [sp, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80af 	beq.w	8008866 <_dtoa_r+0x8be>
 8008708:	2e00      	cmp	r6, #0
 800870a:	dd13      	ble.n	8008734 <_dtoa_r+0x78c>
 800870c:	4639      	mov	r1, r7
 800870e:	4632      	mov	r2, r6
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fe29 	bl	8009368 <__pow5mult>
 8008716:	ee18 2a10 	vmov	r2, s16
 800871a:	4601      	mov	r1, r0
 800871c:	4607      	mov	r7, r0
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fd78 	bl	8009214 <__multiply>
 8008724:	ee18 1a10 	vmov	r1, s16
 8008728:	4680      	mov	r8, r0
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fca4 	bl	8009078 <_Bfree>
 8008730:	ee08 8a10 	vmov	s16, r8
 8008734:	9b07      	ldr	r3, [sp, #28]
 8008736:	1b9a      	subs	r2, r3, r6
 8008738:	d006      	beq.n	8008748 <_dtoa_r+0x7a0>
 800873a:	ee18 1a10 	vmov	r1, s16
 800873e:	4620      	mov	r0, r4
 8008740:	f000 fe12 	bl	8009368 <__pow5mult>
 8008744:	ee08 0a10 	vmov	s16, r0
 8008748:	2101      	movs	r1, #1
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fd4c 	bl	80091e8 <__i2b>
 8008750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	4606      	mov	r6, r0
 8008756:	f340 8088 	ble.w	800886a <_dtoa_r+0x8c2>
 800875a:	461a      	mov	r2, r3
 800875c:	4601      	mov	r1, r0
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fe02 	bl	8009368 <__pow5mult>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	2b01      	cmp	r3, #1
 8008768:	4606      	mov	r6, r0
 800876a:	f340 8081 	ble.w	8008870 <_dtoa_r+0x8c8>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	6933      	ldr	r3, [r6, #16]
 8008774:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008778:	6918      	ldr	r0, [r3, #16]
 800877a:	f000 fce5 	bl	8009148 <__hi0bits>
 800877e:	f1c0 0020 	rsb	r0, r0, #32
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4418      	add	r0, r3
 8008786:	f010 001f 	ands.w	r0, r0, #31
 800878a:	f000 8092 	beq.w	80088b2 <_dtoa_r+0x90a>
 800878e:	f1c0 0320 	rsb	r3, r0, #32
 8008792:	2b04      	cmp	r3, #4
 8008794:	f340 808a 	ble.w	80088ac <_dtoa_r+0x904>
 8008798:	f1c0 001c 	rsb	r0, r0, #28
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	4403      	add	r3, r0
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9b05      	ldr	r3, [sp, #20]
 80087a4:	4403      	add	r3, r0
 80087a6:	4405      	add	r5, r0
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd07      	ble.n	80087c0 <_dtoa_r+0x818>
 80087b0:	ee18 1a10 	vmov	r1, s16
 80087b4:	461a      	mov	r2, r3
 80087b6:	4620      	mov	r0, r4
 80087b8:	f000 fe30 	bl	800941c <__lshift>
 80087bc:	ee08 0a10 	vmov	s16, r0
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd05      	ble.n	80087d2 <_dtoa_r+0x82a>
 80087c6:	4631      	mov	r1, r6
 80087c8:	461a      	mov	r2, r3
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fe26 	bl	800941c <__lshift>
 80087d0:	4606      	mov	r6, r0
 80087d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d06e      	beq.n	80088b6 <_dtoa_r+0x90e>
 80087d8:	ee18 0a10 	vmov	r0, s16
 80087dc:	4631      	mov	r1, r6
 80087de:	f000 fe8d 	bl	80094fc <__mcmp>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	da67      	bge.n	80088b6 <_dtoa_r+0x90e>
 80087e6:	9b00      	ldr	r3, [sp, #0]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	220a      	movs	r2, #10
 80087f2:	2300      	movs	r3, #0
 80087f4:	4620      	mov	r0, r4
 80087f6:	f000 fc61 	bl	80090bc <__multadd>
 80087fa:	9b08      	ldr	r3, [sp, #32]
 80087fc:	ee08 0a10 	vmov	s16, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 81b1 	beq.w	8008b68 <_dtoa_r+0xbc0>
 8008806:	2300      	movs	r3, #0
 8008808:	4639      	mov	r1, r7
 800880a:	220a      	movs	r2, #10
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fc55 	bl	80090bc <__multadd>
 8008812:	9b02      	ldr	r3, [sp, #8]
 8008814:	2b00      	cmp	r3, #0
 8008816:	4607      	mov	r7, r0
 8008818:	f300 808e 	bgt.w	8008938 <_dtoa_r+0x990>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	2b02      	cmp	r3, #2
 8008820:	dc51      	bgt.n	80088c6 <_dtoa_r+0x91e>
 8008822:	e089      	b.n	8008938 <_dtoa_r+0x990>
 8008824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800882a:	e74b      	b.n	80086c4 <_dtoa_r+0x71c>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	1e5e      	subs	r6, r3, #1
 8008830:	9b07      	ldr	r3, [sp, #28]
 8008832:	42b3      	cmp	r3, r6
 8008834:	bfbf      	itttt	lt
 8008836:	9b07      	ldrlt	r3, [sp, #28]
 8008838:	9607      	strlt	r6, [sp, #28]
 800883a:	1af2      	sublt	r2, r6, r3
 800883c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800883e:	bfb6      	itet	lt
 8008840:	189b      	addlt	r3, r3, r2
 8008842:	1b9e      	subge	r6, r3, r6
 8008844:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	bfb8      	it	lt
 800884a:	2600      	movlt	r6, #0
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfb7      	itett	lt
 8008850:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008854:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008858:	1a9d      	sublt	r5, r3, r2
 800885a:	2300      	movlt	r3, #0
 800885c:	e734      	b.n	80086c8 <_dtoa_r+0x720>
 800885e:	9e07      	ldr	r6, [sp, #28]
 8008860:	9d04      	ldr	r5, [sp, #16]
 8008862:	9f08      	ldr	r7, [sp, #32]
 8008864:	e73b      	b.n	80086de <_dtoa_r+0x736>
 8008866:	9a07      	ldr	r2, [sp, #28]
 8008868:	e767      	b.n	800873a <_dtoa_r+0x792>
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b01      	cmp	r3, #1
 800886e:	dc18      	bgt.n	80088a2 <_dtoa_r+0x8fa>
 8008870:	f1ba 0f00 	cmp.w	sl, #0
 8008874:	d115      	bne.n	80088a2 <_dtoa_r+0x8fa>
 8008876:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800887a:	b993      	cbnz	r3, 80088a2 <_dtoa_r+0x8fa>
 800887c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	051b      	lsls	r3, r3, #20
 8008884:	b183      	cbz	r3, 80088a8 <_dtoa_r+0x900>
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	3301      	adds	r3, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	9b05      	ldr	r3, [sp, #20]
 800888e:	3301      	adds	r3, #1
 8008890:	9305      	str	r3, [sp, #20]
 8008892:	f04f 0801 	mov.w	r8, #1
 8008896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	f47f af6a 	bne.w	8008772 <_dtoa_r+0x7ca>
 800889e:	2001      	movs	r0, #1
 80088a0:	e76f      	b.n	8008782 <_dtoa_r+0x7da>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	e7f6      	b.n	8008896 <_dtoa_r+0x8ee>
 80088a8:	4698      	mov	r8, r3
 80088aa:	e7f4      	b.n	8008896 <_dtoa_r+0x8ee>
 80088ac:	f43f af7d 	beq.w	80087aa <_dtoa_r+0x802>
 80088b0:	4618      	mov	r0, r3
 80088b2:	301c      	adds	r0, #28
 80088b4:	e772      	b.n	800879c <_dtoa_r+0x7f4>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc37      	bgt.n	800892c <_dtoa_r+0x984>
 80088bc:	9b06      	ldr	r3, [sp, #24]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dd34      	ble.n	800892c <_dtoa_r+0x984>
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	b96b      	cbnz	r3, 80088e6 <_dtoa_r+0x93e>
 80088ca:	4631      	mov	r1, r6
 80088cc:	2205      	movs	r2, #5
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fbf4 	bl	80090bc <__multadd>
 80088d4:	4601      	mov	r1, r0
 80088d6:	4606      	mov	r6, r0
 80088d8:	ee18 0a10 	vmov	r0, s16
 80088dc:	f000 fe0e 	bl	80094fc <__mcmp>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	f73f adbb 	bgt.w	800845c <_dtoa_r+0x4b4>
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	9d01      	ldr	r5, [sp, #4]
 80088ea:	43db      	mvns	r3, r3
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	4631      	mov	r1, r6
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fbbf 	bl	8009078 <_Bfree>
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	f43f aea4 	beq.w	8008648 <_dtoa_r+0x6a0>
 8008900:	f1b8 0f00 	cmp.w	r8, #0
 8008904:	d005      	beq.n	8008912 <_dtoa_r+0x96a>
 8008906:	45b8      	cmp	r8, r7
 8008908:	d003      	beq.n	8008912 <_dtoa_r+0x96a>
 800890a:	4641      	mov	r1, r8
 800890c:	4620      	mov	r0, r4
 800890e:	f000 fbb3 	bl	8009078 <_Bfree>
 8008912:	4639      	mov	r1, r7
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fbaf 	bl	8009078 <_Bfree>
 800891a:	e695      	b.n	8008648 <_dtoa_r+0x6a0>
 800891c:	2600      	movs	r6, #0
 800891e:	4637      	mov	r7, r6
 8008920:	e7e1      	b.n	80088e6 <_dtoa_r+0x93e>
 8008922:	9700      	str	r7, [sp, #0]
 8008924:	4637      	mov	r7, r6
 8008926:	e599      	b.n	800845c <_dtoa_r+0x4b4>
 8008928:	40240000 	.word	0x40240000
 800892c:	9b08      	ldr	r3, [sp, #32]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80ca 	beq.w	8008ac8 <_dtoa_r+0xb20>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	2d00      	cmp	r5, #0
 800893a:	dd05      	ble.n	8008948 <_dtoa_r+0x9a0>
 800893c:	4639      	mov	r1, r7
 800893e:	462a      	mov	r2, r5
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fd6b 	bl	800941c <__lshift>
 8008946:	4607      	mov	r7, r0
 8008948:	f1b8 0f00 	cmp.w	r8, #0
 800894c:	d05b      	beq.n	8008a06 <_dtoa_r+0xa5e>
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4620      	mov	r0, r4
 8008952:	f000 fb51 	bl	8008ff8 <_Balloc>
 8008956:	4605      	mov	r5, r0
 8008958:	b928      	cbnz	r0, 8008966 <_dtoa_r+0x9be>
 800895a:	4b87      	ldr	r3, [pc, #540]	; (8008b78 <_dtoa_r+0xbd0>)
 800895c:	4602      	mov	r2, r0
 800895e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008962:	f7ff bb3b 	b.w	8007fdc <_dtoa_r+0x34>
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	3202      	adds	r2, #2
 800896a:	0092      	lsls	r2, r2, #2
 800896c:	f107 010c 	add.w	r1, r7, #12
 8008970:	300c      	adds	r0, #12
 8008972:	f000 fb33 	bl	8008fdc <memcpy>
 8008976:	2201      	movs	r2, #1
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fd4e 	bl	800941c <__lshift>
 8008980:	9b01      	ldr	r3, [sp, #4]
 8008982:	f103 0901 	add.w	r9, r3, #1
 8008986:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800898a:	4413      	add	r3, r2
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	f00a 0301 	and.w	r3, sl, #1
 8008992:	46b8      	mov	r8, r7
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4607      	mov	r7, r0
 8008998:	4631      	mov	r1, r6
 800899a:	ee18 0a10 	vmov	r0, s16
 800899e:	f7ff fa77 	bl	8007e90 <quorem>
 80089a2:	4641      	mov	r1, r8
 80089a4:	9002      	str	r0, [sp, #8]
 80089a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089aa:	ee18 0a10 	vmov	r0, s16
 80089ae:	f000 fda5 	bl	80094fc <__mcmp>
 80089b2:	463a      	mov	r2, r7
 80089b4:	9003      	str	r0, [sp, #12]
 80089b6:	4631      	mov	r1, r6
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fdbb 	bl	8009534 <__mdiff>
 80089be:	68c2      	ldr	r2, [r0, #12]
 80089c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80089c4:	4605      	mov	r5, r0
 80089c6:	bb02      	cbnz	r2, 8008a0a <_dtoa_r+0xa62>
 80089c8:	4601      	mov	r1, r0
 80089ca:	ee18 0a10 	vmov	r0, s16
 80089ce:	f000 fd95 	bl	80094fc <__mcmp>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4629      	mov	r1, r5
 80089d6:	4620      	mov	r0, r4
 80089d8:	9207      	str	r2, [sp, #28]
 80089da:	f000 fb4d 	bl	8009078 <_Bfree>
 80089de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089e2:	ea43 0102 	orr.w	r1, r3, r2
 80089e6:	9b04      	ldr	r3, [sp, #16]
 80089e8:	430b      	orrs	r3, r1
 80089ea:	464d      	mov	r5, r9
 80089ec:	d10f      	bne.n	8008a0e <_dtoa_r+0xa66>
 80089ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089f2:	d02a      	beq.n	8008a4a <_dtoa_r+0xaa2>
 80089f4:	9b03      	ldr	r3, [sp, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dd02      	ble.n	8008a00 <_dtoa_r+0xa58>
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a00:	f88b a000 	strb.w	sl, [fp]
 8008a04:	e775      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a06:	4638      	mov	r0, r7
 8008a08:	e7ba      	b.n	8008980 <_dtoa_r+0x9d8>
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	e7e2      	b.n	80089d4 <_dtoa_r+0xa2c>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	db04      	blt.n	8008a1e <_dtoa_r+0xa76>
 8008a14:	9906      	ldr	r1, [sp, #24]
 8008a16:	430b      	orrs	r3, r1
 8008a18:	9904      	ldr	r1, [sp, #16]
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	d122      	bne.n	8008a64 <_dtoa_r+0xabc>
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	ddee      	ble.n	8008a00 <_dtoa_r+0xa58>
 8008a22:	ee18 1a10 	vmov	r1, s16
 8008a26:	2201      	movs	r2, #1
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fcf7 	bl	800941c <__lshift>
 8008a2e:	4631      	mov	r1, r6
 8008a30:	ee08 0a10 	vmov	s16, r0
 8008a34:	f000 fd62 	bl	80094fc <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dc03      	bgt.n	8008a44 <_dtoa_r+0xa9c>
 8008a3c:	d1e0      	bne.n	8008a00 <_dtoa_r+0xa58>
 8008a3e:	f01a 0f01 	tst.w	sl, #1
 8008a42:	d0dd      	beq.n	8008a00 <_dtoa_r+0xa58>
 8008a44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a48:	d1d7      	bne.n	80089fa <_dtoa_r+0xa52>
 8008a4a:	2339      	movs	r3, #57	; 0x39
 8008a4c:	f88b 3000 	strb.w	r3, [fp]
 8008a50:	462b      	mov	r3, r5
 8008a52:	461d      	mov	r5, r3
 8008a54:	3b01      	subs	r3, #1
 8008a56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a5a:	2a39      	cmp	r2, #57	; 0x39
 8008a5c:	d071      	beq.n	8008b42 <_dtoa_r+0xb9a>
 8008a5e:	3201      	adds	r2, #1
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	e746      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a64:	2a00      	cmp	r2, #0
 8008a66:	dd07      	ble.n	8008a78 <_dtoa_r+0xad0>
 8008a68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a6c:	d0ed      	beq.n	8008a4a <_dtoa_r+0xaa2>
 8008a6e:	f10a 0301 	add.w	r3, sl, #1
 8008a72:	f88b 3000 	strb.w	r3, [fp]
 8008a76:	e73c      	b.n	80088f2 <_dtoa_r+0x94a>
 8008a78:	9b05      	ldr	r3, [sp, #20]
 8008a7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a7e:	4599      	cmp	r9, r3
 8008a80:	d047      	beq.n	8008b12 <_dtoa_r+0xb6a>
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	2300      	movs	r3, #0
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fb16 	bl	80090bc <__multadd>
 8008a90:	45b8      	cmp	r8, r7
 8008a92:	ee08 0a10 	vmov	s16, r0
 8008a96:	f04f 0300 	mov.w	r3, #0
 8008a9a:	f04f 020a 	mov.w	r2, #10
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	d106      	bne.n	8008ab2 <_dtoa_r+0xb0a>
 8008aa4:	f000 fb0a 	bl	80090bc <__multadd>
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4607      	mov	r7, r0
 8008aac:	f109 0901 	add.w	r9, r9, #1
 8008ab0:	e772      	b.n	8008998 <_dtoa_r+0x9f0>
 8008ab2:	f000 fb03 	bl	80090bc <__multadd>
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	4680      	mov	r8, r0
 8008aba:	2300      	movs	r3, #0
 8008abc:	220a      	movs	r2, #10
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 fafc 	bl	80090bc <__multadd>
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	e7f1      	b.n	8008aac <_dtoa_r+0xb04>
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	9d01      	ldr	r5, [sp, #4]
 8008ace:	ee18 0a10 	vmov	r0, s16
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	f7ff f9dc 	bl	8007e90 <quorem>
 8008ad8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	f805 ab01 	strb.w	sl, [r5], #1
 8008ae2:	1aea      	subs	r2, r5, r3
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	dd09      	ble.n	8008afe <_dtoa_r+0xb56>
 8008aea:	ee18 1a10 	vmov	r1, s16
 8008aee:	2300      	movs	r3, #0
 8008af0:	220a      	movs	r2, #10
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 fae2 	bl	80090bc <__multadd>
 8008af8:	ee08 0a10 	vmov	s16, r0
 8008afc:	e7e7      	b.n	8008ace <_dtoa_r+0xb26>
 8008afe:	9b02      	ldr	r3, [sp, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfc8      	it	gt
 8008b04:	461d      	movgt	r5, r3
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	bfd8      	it	le
 8008b0a:	2501      	movle	r5, #1
 8008b0c:	441d      	add	r5, r3
 8008b0e:	f04f 0800 	mov.w	r8, #0
 8008b12:	ee18 1a10 	vmov	r1, s16
 8008b16:	2201      	movs	r2, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fc7f 	bl	800941c <__lshift>
 8008b1e:	4631      	mov	r1, r6
 8008b20:	ee08 0a10 	vmov	s16, r0
 8008b24:	f000 fcea 	bl	80094fc <__mcmp>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	dc91      	bgt.n	8008a50 <_dtoa_r+0xaa8>
 8008b2c:	d102      	bne.n	8008b34 <_dtoa_r+0xb8c>
 8008b2e:	f01a 0f01 	tst.w	sl, #1
 8008b32:	d18d      	bne.n	8008a50 <_dtoa_r+0xaa8>
 8008b34:	462b      	mov	r3, r5
 8008b36:	461d      	mov	r5, r3
 8008b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b3c:	2a30      	cmp	r2, #48	; 0x30
 8008b3e:	d0fa      	beq.n	8008b36 <_dtoa_r+0xb8e>
 8008b40:	e6d7      	b.n	80088f2 <_dtoa_r+0x94a>
 8008b42:	9a01      	ldr	r2, [sp, #4]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d184      	bne.n	8008a52 <_dtoa_r+0xaaa>
 8008b48:	9b00      	ldr	r3, [sp, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2331      	movs	r3, #49	; 0x31
 8008b50:	7013      	strb	r3, [r2, #0]
 8008b52:	e6ce      	b.n	80088f2 <_dtoa_r+0x94a>
 8008b54:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <_dtoa_r+0xbd4>)
 8008b56:	f7ff ba95 	b.w	8008084 <_dtoa_r+0xdc>
 8008b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f47f aa6e 	bne.w	800803e <_dtoa_r+0x96>
 8008b62:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <_dtoa_r+0xbd8>)
 8008b64:	f7ff ba8e 	b.w	8008084 <_dtoa_r+0xdc>
 8008b68:	9b02      	ldr	r3, [sp, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dcae      	bgt.n	8008acc <_dtoa_r+0xb24>
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	f73f aea8 	bgt.w	80088c6 <_dtoa_r+0x91e>
 8008b76:	e7a9      	b.n	8008acc <_dtoa_r+0xb24>
 8008b78:	0800a6a7 	.word	0x0800a6a7
 8008b7c:	0800a604 	.word	0x0800a604
 8008b80:	0800a628 	.word	0x0800a628

08008b84 <__sflush_r>:
 8008b84:	898a      	ldrh	r2, [r1, #12]
 8008b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	0710      	lsls	r0, r2, #28
 8008b8e:	460c      	mov	r4, r1
 8008b90:	d458      	bmi.n	8008c44 <__sflush_r+0xc0>
 8008b92:	684b      	ldr	r3, [r1, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	dc05      	bgt.n	8008ba4 <__sflush_r+0x20>
 8008b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	dc02      	bgt.n	8008ba4 <__sflush_r+0x20>
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	d0f9      	beq.n	8008b9e <__sflush_r+0x1a>
 8008baa:	2300      	movs	r3, #0
 8008bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bb0:	682f      	ldr	r7, [r5, #0]
 8008bb2:	602b      	str	r3, [r5, #0]
 8008bb4:	d032      	beq.n	8008c1c <__sflush_r+0x98>
 8008bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	075a      	lsls	r2, r3, #29
 8008bbc:	d505      	bpl.n	8008bca <__sflush_r+0x46>
 8008bbe:	6863      	ldr	r3, [r4, #4]
 8008bc0:	1ac0      	subs	r0, r0, r3
 8008bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bc4:	b10b      	cbz	r3, 8008bca <__sflush_r+0x46>
 8008bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc8:	1ac0      	subs	r0, r0, r3
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bd0:	6a21      	ldr	r1, [r4, #32]
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b0      	blx	r6
 8008bd6:	1c43      	adds	r3, r0, #1
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	d106      	bne.n	8008bea <__sflush_r+0x66>
 8008bdc:	6829      	ldr	r1, [r5, #0]
 8008bde:	291d      	cmp	r1, #29
 8008be0:	d82c      	bhi.n	8008c3c <__sflush_r+0xb8>
 8008be2:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <__sflush_r+0x108>)
 8008be4:	40ca      	lsrs	r2, r1
 8008be6:	07d6      	lsls	r6, r2, #31
 8008be8:	d528      	bpl.n	8008c3c <__sflush_r+0xb8>
 8008bea:	2200      	movs	r2, #0
 8008bec:	6062      	str	r2, [r4, #4]
 8008bee:	04d9      	lsls	r1, r3, #19
 8008bf0:	6922      	ldr	r2, [r4, #16]
 8008bf2:	6022      	str	r2, [r4, #0]
 8008bf4:	d504      	bpl.n	8008c00 <__sflush_r+0x7c>
 8008bf6:	1c42      	adds	r2, r0, #1
 8008bf8:	d101      	bne.n	8008bfe <__sflush_r+0x7a>
 8008bfa:	682b      	ldr	r3, [r5, #0]
 8008bfc:	b903      	cbnz	r3, 8008c00 <__sflush_r+0x7c>
 8008bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8008c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c02:	602f      	str	r7, [r5, #0]
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d0ca      	beq.n	8008b9e <__sflush_r+0x1a>
 8008c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c0c:	4299      	cmp	r1, r3
 8008c0e:	d002      	beq.n	8008c16 <__sflush_r+0x92>
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 fd8b 	bl	800972c <_free_r>
 8008c16:	2000      	movs	r0, #0
 8008c18:	6360      	str	r0, [r4, #52]	; 0x34
 8008c1a:	e7c1      	b.n	8008ba0 <__sflush_r+0x1c>
 8008c1c:	6a21      	ldr	r1, [r4, #32]
 8008c1e:	2301      	movs	r3, #1
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b0      	blx	r6
 8008c24:	1c41      	adds	r1, r0, #1
 8008c26:	d1c7      	bne.n	8008bb8 <__sflush_r+0x34>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0c4      	beq.n	8008bb8 <__sflush_r+0x34>
 8008c2e:	2b1d      	cmp	r3, #29
 8008c30:	d001      	beq.n	8008c36 <__sflush_r+0xb2>
 8008c32:	2b16      	cmp	r3, #22
 8008c34:	d101      	bne.n	8008c3a <__sflush_r+0xb6>
 8008c36:	602f      	str	r7, [r5, #0]
 8008c38:	e7b1      	b.n	8008b9e <__sflush_r+0x1a>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	e7ad      	b.n	8008ba0 <__sflush_r+0x1c>
 8008c44:	690f      	ldr	r7, [r1, #16]
 8008c46:	2f00      	cmp	r7, #0
 8008c48:	d0a9      	beq.n	8008b9e <__sflush_r+0x1a>
 8008c4a:	0793      	lsls	r3, r2, #30
 8008c4c:	680e      	ldr	r6, [r1, #0]
 8008c4e:	bf08      	it	eq
 8008c50:	694b      	ldreq	r3, [r1, #20]
 8008c52:	600f      	str	r7, [r1, #0]
 8008c54:	bf18      	it	ne
 8008c56:	2300      	movne	r3, #0
 8008c58:	eba6 0807 	sub.w	r8, r6, r7
 8008c5c:	608b      	str	r3, [r1, #8]
 8008c5e:	f1b8 0f00 	cmp.w	r8, #0
 8008c62:	dd9c      	ble.n	8008b9e <__sflush_r+0x1a>
 8008c64:	6a21      	ldr	r1, [r4, #32]
 8008c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c68:	4643      	mov	r3, r8
 8008c6a:	463a      	mov	r2, r7
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b0      	blx	r6
 8008c70:	2800      	cmp	r0, #0
 8008c72:	dc06      	bgt.n	8008c82 <__sflush_r+0xfe>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7a:	81a3      	strh	r3, [r4, #12]
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e78e      	b.n	8008ba0 <__sflush_r+0x1c>
 8008c82:	4407      	add	r7, r0
 8008c84:	eba8 0800 	sub.w	r8, r8, r0
 8008c88:	e7e9      	b.n	8008c5e <__sflush_r+0xda>
 8008c8a:	bf00      	nop
 8008c8c:	20400001 	.word	0x20400001

08008c90 <_fflush_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	690b      	ldr	r3, [r1, #16]
 8008c94:	4605      	mov	r5, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	b913      	cbnz	r3, 8008ca0 <_fflush_r+0x10>
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	b118      	cbz	r0, 8008caa <_fflush_r+0x1a>
 8008ca2:	6983      	ldr	r3, [r0, #24]
 8008ca4:	b90b      	cbnz	r3, 8008caa <_fflush_r+0x1a>
 8008ca6:	f000 f887 	bl	8008db8 <__sinit>
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <_fflush_r+0x6c>)
 8008cac:	429c      	cmp	r4, r3
 8008cae:	d11b      	bne.n	8008ce8 <_fflush_r+0x58>
 8008cb0:	686c      	ldr	r4, [r5, #4]
 8008cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0ef      	beq.n	8008c9a <_fflush_r+0xa>
 8008cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cbc:	07d0      	lsls	r0, r2, #31
 8008cbe:	d404      	bmi.n	8008cca <_fflush_r+0x3a>
 8008cc0:	0599      	lsls	r1, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_fflush_r+0x3a>
 8008cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc6:	f000 f91a 	bl	8008efe <__retarget_lock_acquire_recursive>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7ff ff59 	bl	8008b84 <__sflush_r>
 8008cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd4:	07da      	lsls	r2, r3, #31
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	d4e0      	bmi.n	8008c9c <_fflush_r+0xc>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	059b      	lsls	r3, r3, #22
 8008cde:	d4dd      	bmi.n	8008c9c <_fflush_r+0xc>
 8008ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce2:	f000 f90d 	bl	8008f00 <__retarget_lock_release_recursive>
 8008ce6:	e7d9      	b.n	8008c9c <_fflush_r+0xc>
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <_fflush_r+0x70>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d101      	bne.n	8008cf2 <_fflush_r+0x62>
 8008cee:	68ac      	ldr	r4, [r5, #8]
 8008cf0:	e7df      	b.n	8008cb2 <_fflush_r+0x22>
 8008cf2:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <_fflush_r+0x74>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	bf08      	it	eq
 8008cf8:	68ec      	ldreq	r4, [r5, #12]
 8008cfa:	e7da      	b.n	8008cb2 <_fflush_r+0x22>
 8008cfc:	0800a6d8 	.word	0x0800a6d8
 8008d00:	0800a6f8 	.word	0x0800a6f8
 8008d04:	0800a6b8 	.word	0x0800a6b8

08008d08 <std>:
 8008d08:	2300      	movs	r3, #0
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d16:	6083      	str	r3, [r0, #8]
 8008d18:	8181      	strh	r1, [r0, #12]
 8008d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d1c:	81c2      	strh	r2, [r0, #14]
 8008d1e:	6183      	str	r3, [r0, #24]
 8008d20:	4619      	mov	r1, r3
 8008d22:	2208      	movs	r2, #8
 8008d24:	305c      	adds	r0, #92	; 0x5c
 8008d26:	f7fe fabd 	bl	80072a4 <memset>
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x38>)
 8008d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <std+0x3c>)
 8008d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d32:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <std+0x40>)
 8008d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d36:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <std+0x44>)
 8008d38:	6224      	str	r4, [r4, #32]
 8008d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	bf00      	nop
 8008d40:	08009f09 	.word	0x08009f09
 8008d44:	08009f2b 	.word	0x08009f2b
 8008d48:	08009f63 	.word	0x08009f63
 8008d4c:	08009f87 	.word	0x08009f87

08008d50 <_cleanup_r>:
 8008d50:	4901      	ldr	r1, [pc, #4]	; (8008d58 <_cleanup_r+0x8>)
 8008d52:	f000 b8af 	b.w	8008eb4 <_fwalk_reent>
 8008d56:	bf00      	nop
 8008d58:	08008c91 	.word	0x08008c91

08008d5c <__sfmoreglue>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	2268      	movs	r2, #104	; 0x68
 8008d60:	1e4d      	subs	r5, r1, #1
 8008d62:	4355      	muls	r5, r2
 8008d64:	460e      	mov	r6, r1
 8008d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d6a:	f000 fd4b 	bl	8009804 <_malloc_r>
 8008d6e:	4604      	mov	r4, r0
 8008d70:	b140      	cbz	r0, 8008d84 <__sfmoreglue+0x28>
 8008d72:	2100      	movs	r1, #0
 8008d74:	e9c0 1600 	strd	r1, r6, [r0]
 8008d78:	300c      	adds	r0, #12
 8008d7a:	60a0      	str	r0, [r4, #8]
 8008d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d80:	f7fe fa90 	bl	80072a4 <memset>
 8008d84:	4620      	mov	r0, r4
 8008d86:	bd70      	pop	{r4, r5, r6, pc}

08008d88 <__sfp_lock_acquire>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sfp_lock_acquire+0x8>)
 8008d8a:	f000 b8b8 	b.w	8008efe <__retarget_lock_acquire_recursive>
 8008d8e:	bf00      	nop
 8008d90:	20000405 	.word	0x20000405

08008d94 <__sfp_lock_release>:
 8008d94:	4801      	ldr	r0, [pc, #4]	; (8008d9c <__sfp_lock_release+0x8>)
 8008d96:	f000 b8b3 	b.w	8008f00 <__retarget_lock_release_recursive>
 8008d9a:	bf00      	nop
 8008d9c:	20000405 	.word	0x20000405

08008da0 <__sinit_lock_acquire>:
 8008da0:	4801      	ldr	r0, [pc, #4]	; (8008da8 <__sinit_lock_acquire+0x8>)
 8008da2:	f000 b8ac 	b.w	8008efe <__retarget_lock_acquire_recursive>
 8008da6:	bf00      	nop
 8008da8:	20000406 	.word	0x20000406

08008dac <__sinit_lock_release>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sinit_lock_release+0x8>)
 8008dae:	f000 b8a7 	b.w	8008f00 <__retarget_lock_release_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000406 	.word	0x20000406

08008db8 <__sinit>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	4604      	mov	r4, r0
 8008dbc:	f7ff fff0 	bl	8008da0 <__sinit_lock_acquire>
 8008dc0:	69a3      	ldr	r3, [r4, #24]
 8008dc2:	b11b      	cbz	r3, 8008dcc <__sinit+0x14>
 8008dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc8:	f7ff bff0 	b.w	8008dac <__sinit_lock_release>
 8008dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008dd2:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <__sinit+0x68>)
 8008dd4:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <__sinit+0x6c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	bf04      	itt	eq
 8008dde:	2301      	moveq	r3, #1
 8008de0:	61a3      	streq	r3, [r4, #24]
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f820 	bl	8008e28 <__sfp>
 8008de8:	6060      	str	r0, [r4, #4]
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f81c 	bl	8008e28 <__sfp>
 8008df0:	60a0      	str	r0, [r4, #8]
 8008df2:	4620      	mov	r0, r4
 8008df4:	f000 f818 	bl	8008e28 <__sfp>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	60e0      	str	r0, [r4, #12]
 8008dfc:	2104      	movs	r1, #4
 8008dfe:	6860      	ldr	r0, [r4, #4]
 8008e00:	f7ff ff82 	bl	8008d08 <std>
 8008e04:	68a0      	ldr	r0, [r4, #8]
 8008e06:	2201      	movs	r2, #1
 8008e08:	2109      	movs	r1, #9
 8008e0a:	f7ff ff7d 	bl	8008d08 <std>
 8008e0e:	68e0      	ldr	r0, [r4, #12]
 8008e10:	2202      	movs	r2, #2
 8008e12:	2112      	movs	r1, #18
 8008e14:	f7ff ff78 	bl	8008d08 <std>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	61a3      	str	r3, [r4, #24]
 8008e1c:	e7d2      	b.n	8008dc4 <__sinit+0xc>
 8008e1e:	bf00      	nop
 8008e20:	0800a5f0 	.word	0x0800a5f0
 8008e24:	08008d51 	.word	0x08008d51

08008e28 <__sfp>:
 8008e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	f7ff ffac 	bl	8008d88 <__sfp_lock_acquire>
 8008e30:	4b1e      	ldr	r3, [pc, #120]	; (8008eac <__sfp+0x84>)
 8008e32:	681e      	ldr	r6, [r3, #0]
 8008e34:	69b3      	ldr	r3, [r6, #24]
 8008e36:	b913      	cbnz	r3, 8008e3e <__sfp+0x16>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7ff ffbd 	bl	8008db8 <__sinit>
 8008e3e:	3648      	adds	r6, #72	; 0x48
 8008e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	d503      	bpl.n	8008e50 <__sfp+0x28>
 8008e48:	6833      	ldr	r3, [r6, #0]
 8008e4a:	b30b      	cbz	r3, 8008e90 <__sfp+0x68>
 8008e4c:	6836      	ldr	r6, [r6, #0]
 8008e4e:	e7f7      	b.n	8008e40 <__sfp+0x18>
 8008e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e54:	b9d5      	cbnz	r5, 8008e8c <__sfp+0x64>
 8008e56:	4b16      	ldr	r3, [pc, #88]	; (8008eb0 <__sfp+0x88>)
 8008e58:	60e3      	str	r3, [r4, #12]
 8008e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8008e60:	f000 f84c 	bl	8008efc <__retarget_lock_init_recursive>
 8008e64:	f7ff ff96 	bl	8008d94 <__sfp_lock_release>
 8008e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e70:	6025      	str	r5, [r4, #0]
 8008e72:	61a5      	str	r5, [r4, #24]
 8008e74:	2208      	movs	r2, #8
 8008e76:	4629      	mov	r1, r5
 8008e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e7c:	f7fe fa12 	bl	80072a4 <memset>
 8008e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e88:	4620      	mov	r0, r4
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e8c:	3468      	adds	r4, #104	; 0x68
 8008e8e:	e7d9      	b.n	8008e44 <__sfp+0x1c>
 8008e90:	2104      	movs	r1, #4
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7ff ff62 	bl	8008d5c <__sfmoreglue>
 8008e98:	4604      	mov	r4, r0
 8008e9a:	6030      	str	r0, [r6, #0]
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d1d5      	bne.n	8008e4c <__sfp+0x24>
 8008ea0:	f7ff ff78 	bl	8008d94 <__sfp_lock_release>
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	e7ee      	b.n	8008e88 <__sfp+0x60>
 8008eaa:	bf00      	nop
 8008eac:	0800a5f0 	.word	0x0800a5f0
 8008eb0:	ffff0001 	.word	0xffff0001

08008eb4 <_fwalk_reent>:
 8008eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb8:	4606      	mov	r6, r0
 8008eba:	4688      	mov	r8, r1
 8008ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ec0:	2700      	movs	r7, #0
 8008ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8008eca:	d505      	bpl.n	8008ed8 <_fwalk_reent+0x24>
 8008ecc:	6824      	ldr	r4, [r4, #0]
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	d1f7      	bne.n	8008ec2 <_fwalk_reent+0xe>
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed8:	89ab      	ldrh	r3, [r5, #12]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d907      	bls.n	8008eee <_fwalk_reent+0x3a>
 8008ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	d003      	beq.n	8008eee <_fwalk_reent+0x3a>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	47c0      	blx	r8
 8008eec:	4307      	orrs	r7, r0
 8008eee:	3568      	adds	r5, #104	; 0x68
 8008ef0:	e7e9      	b.n	8008ec6 <_fwalk_reent+0x12>
	...

08008ef4 <_localeconv_r>:
 8008ef4:	4800      	ldr	r0, [pc, #0]	; (8008ef8 <_localeconv_r+0x4>)
 8008ef6:	4770      	bx	lr
 8008ef8:	20000168 	.word	0x20000168

08008efc <__retarget_lock_init_recursive>:
 8008efc:	4770      	bx	lr

08008efe <__retarget_lock_acquire_recursive>:
 8008efe:	4770      	bx	lr

08008f00 <__retarget_lock_release_recursive>:
 8008f00:	4770      	bx	lr

08008f02 <__swhatbuf_r>:
 8008f02:	b570      	push	{r4, r5, r6, lr}
 8008f04:	460e      	mov	r6, r1
 8008f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f0a:	2900      	cmp	r1, #0
 8008f0c:	b096      	sub	sp, #88	; 0x58
 8008f0e:	4614      	mov	r4, r2
 8008f10:	461d      	mov	r5, r3
 8008f12:	da08      	bge.n	8008f26 <__swhatbuf_r+0x24>
 8008f14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	602a      	str	r2, [r5, #0]
 8008f1c:	061a      	lsls	r2, r3, #24
 8008f1e:	d410      	bmi.n	8008f42 <__swhatbuf_r+0x40>
 8008f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f24:	e00e      	b.n	8008f44 <__swhatbuf_r+0x42>
 8008f26:	466a      	mov	r2, sp
 8008f28:	f001 f884 	bl	800a034 <_fstat_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	dbf1      	blt.n	8008f14 <__swhatbuf_r+0x12>
 8008f30:	9a01      	ldr	r2, [sp, #4]
 8008f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f3a:	425a      	negs	r2, r3
 8008f3c:	415a      	adcs	r2, r3
 8008f3e:	602a      	str	r2, [r5, #0]
 8008f40:	e7ee      	b.n	8008f20 <__swhatbuf_r+0x1e>
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	2000      	movs	r0, #0
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	b016      	add	sp, #88	; 0x58
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}

08008f4c <__smakebuf_r>:
 8008f4c:	898b      	ldrh	r3, [r1, #12]
 8008f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f50:	079d      	lsls	r5, r3, #30
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	d507      	bpl.n	8008f68 <__smakebuf_r+0x1c>
 8008f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2301      	movs	r3, #1
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	b002      	add	sp, #8
 8008f66:	bd70      	pop	{r4, r5, r6, pc}
 8008f68:	ab01      	add	r3, sp, #4
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f7ff ffc9 	bl	8008f02 <__swhatbuf_r>
 8008f70:	9900      	ldr	r1, [sp, #0]
 8008f72:	4605      	mov	r5, r0
 8008f74:	4630      	mov	r0, r6
 8008f76:	f000 fc45 	bl	8009804 <_malloc_r>
 8008f7a:	b948      	cbnz	r0, 8008f90 <__smakebuf_r+0x44>
 8008f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f80:	059a      	lsls	r2, r3, #22
 8008f82:	d4ef      	bmi.n	8008f64 <__smakebuf_r+0x18>
 8008f84:	f023 0303 	bic.w	r3, r3, #3
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	81a3      	strh	r3, [r4, #12]
 8008f8e:	e7e3      	b.n	8008f58 <__smakebuf_r+0xc>
 8008f90:	4b0d      	ldr	r3, [pc, #52]	; (8008fc8 <__smakebuf_r+0x7c>)
 8008f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	6020      	str	r0, [r4, #0]
 8008f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9c:	81a3      	strh	r3, [r4, #12]
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	6163      	str	r3, [r4, #20]
 8008fa2:	9b01      	ldr	r3, [sp, #4]
 8008fa4:	6120      	str	r0, [r4, #16]
 8008fa6:	b15b      	cbz	r3, 8008fc0 <__smakebuf_r+0x74>
 8008fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fac:	4630      	mov	r0, r6
 8008fae:	f001 f853 	bl	800a058 <_isatty_r>
 8008fb2:	b128      	cbz	r0, 8008fc0 <__smakebuf_r+0x74>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	f043 0301 	orr.w	r3, r3, #1
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	89a0      	ldrh	r0, [r4, #12]
 8008fc2:	4305      	orrs	r5, r0
 8008fc4:	81a5      	strh	r5, [r4, #12]
 8008fc6:	e7cd      	b.n	8008f64 <__smakebuf_r+0x18>
 8008fc8:	08008d51 	.word	0x08008d51

08008fcc <malloc>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <malloc+0xc>)
 8008fce:	4601      	mov	r1, r0
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	f000 bc17 	b.w	8009804 <_malloc_r>
 8008fd6:	bf00      	nop
 8008fd8:	20000014 	.word	0x20000014

08008fdc <memcpy>:
 8008fdc:	440a      	add	r2, r1
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fe4:	d100      	bne.n	8008fe8 <memcpy+0xc>
 8008fe6:	4770      	bx	lr
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	d1f9      	bne.n	8008fea <memcpy+0xe>
 8008ff6:	bd10      	pop	{r4, pc}

08008ff8 <_Balloc>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	b976      	cbnz	r6, 8009020 <_Balloc+0x28>
 8009002:	2010      	movs	r0, #16
 8009004:	f7ff ffe2 	bl	8008fcc <malloc>
 8009008:	4602      	mov	r2, r0
 800900a:	6260      	str	r0, [r4, #36]	; 0x24
 800900c:	b920      	cbnz	r0, 8009018 <_Balloc+0x20>
 800900e:	4b18      	ldr	r3, [pc, #96]	; (8009070 <_Balloc+0x78>)
 8009010:	4818      	ldr	r0, [pc, #96]	; (8009074 <_Balloc+0x7c>)
 8009012:	2166      	movs	r1, #102	; 0x66
 8009014:	f000 ffce 	bl	8009fb4 <__assert_func>
 8009018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800901c:	6006      	str	r6, [r0, #0]
 800901e:	60c6      	str	r6, [r0, #12]
 8009020:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009022:	68f3      	ldr	r3, [r6, #12]
 8009024:	b183      	cbz	r3, 8009048 <_Balloc+0x50>
 8009026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800902e:	b9b8      	cbnz	r0, 8009060 <_Balloc+0x68>
 8009030:	2101      	movs	r1, #1
 8009032:	fa01 f605 	lsl.w	r6, r1, r5
 8009036:	1d72      	adds	r2, r6, #5
 8009038:	0092      	lsls	r2, r2, #2
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fb60 	bl	8009700 <_calloc_r>
 8009040:	b160      	cbz	r0, 800905c <_Balloc+0x64>
 8009042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009046:	e00e      	b.n	8009066 <_Balloc+0x6e>
 8009048:	2221      	movs	r2, #33	; 0x21
 800904a:	2104      	movs	r1, #4
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fb57 	bl	8009700 <_calloc_r>
 8009052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009054:	60f0      	str	r0, [r6, #12]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1e4      	bne.n	8009026 <_Balloc+0x2e>
 800905c:	2000      	movs	r0, #0
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	6802      	ldr	r2, [r0, #0]
 8009062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009066:	2300      	movs	r3, #0
 8009068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800906c:	e7f7      	b.n	800905e <_Balloc+0x66>
 800906e:	bf00      	nop
 8009070:	0800a635 	.word	0x0800a635
 8009074:	0800a718 	.word	0x0800a718

08009078 <_Bfree>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800907c:	4605      	mov	r5, r0
 800907e:	460c      	mov	r4, r1
 8009080:	b976      	cbnz	r6, 80090a0 <_Bfree+0x28>
 8009082:	2010      	movs	r0, #16
 8009084:	f7ff ffa2 	bl	8008fcc <malloc>
 8009088:	4602      	mov	r2, r0
 800908a:	6268      	str	r0, [r5, #36]	; 0x24
 800908c:	b920      	cbnz	r0, 8009098 <_Bfree+0x20>
 800908e:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <_Bfree+0x3c>)
 8009090:	4809      	ldr	r0, [pc, #36]	; (80090b8 <_Bfree+0x40>)
 8009092:	218a      	movs	r1, #138	; 0x8a
 8009094:	f000 ff8e 	bl	8009fb4 <__assert_func>
 8009098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800909c:	6006      	str	r6, [r0, #0]
 800909e:	60c6      	str	r6, [r0, #12]
 80090a0:	b13c      	cbz	r4, 80090b2 <_Bfree+0x3a>
 80090a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090a4:	6862      	ldr	r2, [r4, #4]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090ac:	6021      	str	r1, [r4, #0]
 80090ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	0800a635 	.word	0x0800a635
 80090b8:	0800a718 	.word	0x0800a718

080090bc <__multadd>:
 80090bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c0:	690d      	ldr	r5, [r1, #16]
 80090c2:	4607      	mov	r7, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	461e      	mov	r6, r3
 80090c8:	f101 0c14 	add.w	ip, r1, #20
 80090cc:	2000      	movs	r0, #0
 80090ce:	f8dc 3000 	ldr.w	r3, [ip]
 80090d2:	b299      	uxth	r1, r3
 80090d4:	fb02 6101 	mla	r1, r2, r1, r6
 80090d8:	0c1e      	lsrs	r6, r3, #16
 80090da:	0c0b      	lsrs	r3, r1, #16
 80090dc:	fb02 3306 	mla	r3, r2, r6, r3
 80090e0:	b289      	uxth	r1, r1
 80090e2:	3001      	adds	r0, #1
 80090e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090e8:	4285      	cmp	r5, r0
 80090ea:	f84c 1b04 	str.w	r1, [ip], #4
 80090ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090f2:	dcec      	bgt.n	80090ce <__multadd+0x12>
 80090f4:	b30e      	cbz	r6, 800913a <__multadd+0x7e>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	42ab      	cmp	r3, r5
 80090fa:	dc19      	bgt.n	8009130 <__multadd+0x74>
 80090fc:	6861      	ldr	r1, [r4, #4]
 80090fe:	4638      	mov	r0, r7
 8009100:	3101      	adds	r1, #1
 8009102:	f7ff ff79 	bl	8008ff8 <_Balloc>
 8009106:	4680      	mov	r8, r0
 8009108:	b928      	cbnz	r0, 8009116 <__multadd+0x5a>
 800910a:	4602      	mov	r2, r0
 800910c:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <__multadd+0x84>)
 800910e:	480d      	ldr	r0, [pc, #52]	; (8009144 <__multadd+0x88>)
 8009110:	21b5      	movs	r1, #181	; 0xb5
 8009112:	f000 ff4f 	bl	8009fb4 <__assert_func>
 8009116:	6922      	ldr	r2, [r4, #16]
 8009118:	3202      	adds	r2, #2
 800911a:	f104 010c 	add.w	r1, r4, #12
 800911e:	0092      	lsls	r2, r2, #2
 8009120:	300c      	adds	r0, #12
 8009122:	f7ff ff5b 	bl	8008fdc <memcpy>
 8009126:	4621      	mov	r1, r4
 8009128:	4638      	mov	r0, r7
 800912a:	f7ff ffa5 	bl	8009078 <_Bfree>
 800912e:	4644      	mov	r4, r8
 8009130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009134:	3501      	adds	r5, #1
 8009136:	615e      	str	r6, [r3, #20]
 8009138:	6125      	str	r5, [r4, #16]
 800913a:	4620      	mov	r0, r4
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	0800a6a7 	.word	0x0800a6a7
 8009144:	0800a718 	.word	0x0800a718

08009148 <__hi0bits>:
 8009148:	0c03      	lsrs	r3, r0, #16
 800914a:	041b      	lsls	r3, r3, #16
 800914c:	b9d3      	cbnz	r3, 8009184 <__hi0bits+0x3c>
 800914e:	0400      	lsls	r0, r0, #16
 8009150:	2310      	movs	r3, #16
 8009152:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009156:	bf04      	itt	eq
 8009158:	0200      	lsleq	r0, r0, #8
 800915a:	3308      	addeq	r3, #8
 800915c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009160:	bf04      	itt	eq
 8009162:	0100      	lsleq	r0, r0, #4
 8009164:	3304      	addeq	r3, #4
 8009166:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800916a:	bf04      	itt	eq
 800916c:	0080      	lsleq	r0, r0, #2
 800916e:	3302      	addeq	r3, #2
 8009170:	2800      	cmp	r0, #0
 8009172:	db05      	blt.n	8009180 <__hi0bits+0x38>
 8009174:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009178:	f103 0301 	add.w	r3, r3, #1
 800917c:	bf08      	it	eq
 800917e:	2320      	moveq	r3, #32
 8009180:	4618      	mov	r0, r3
 8009182:	4770      	bx	lr
 8009184:	2300      	movs	r3, #0
 8009186:	e7e4      	b.n	8009152 <__hi0bits+0xa>

08009188 <__lo0bits>:
 8009188:	6803      	ldr	r3, [r0, #0]
 800918a:	f013 0207 	ands.w	r2, r3, #7
 800918e:	4601      	mov	r1, r0
 8009190:	d00b      	beq.n	80091aa <__lo0bits+0x22>
 8009192:	07da      	lsls	r2, r3, #31
 8009194:	d423      	bmi.n	80091de <__lo0bits+0x56>
 8009196:	0798      	lsls	r0, r3, #30
 8009198:	bf49      	itett	mi
 800919a:	085b      	lsrmi	r3, r3, #1
 800919c:	089b      	lsrpl	r3, r3, #2
 800919e:	2001      	movmi	r0, #1
 80091a0:	600b      	strmi	r3, [r1, #0]
 80091a2:	bf5c      	itt	pl
 80091a4:	600b      	strpl	r3, [r1, #0]
 80091a6:	2002      	movpl	r0, #2
 80091a8:	4770      	bx	lr
 80091aa:	b298      	uxth	r0, r3
 80091ac:	b9a8      	cbnz	r0, 80091da <__lo0bits+0x52>
 80091ae:	0c1b      	lsrs	r3, r3, #16
 80091b0:	2010      	movs	r0, #16
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	b90a      	cbnz	r2, 80091ba <__lo0bits+0x32>
 80091b6:	3008      	adds	r0, #8
 80091b8:	0a1b      	lsrs	r3, r3, #8
 80091ba:	071a      	lsls	r2, r3, #28
 80091bc:	bf04      	itt	eq
 80091be:	091b      	lsreq	r3, r3, #4
 80091c0:	3004      	addeq	r0, #4
 80091c2:	079a      	lsls	r2, r3, #30
 80091c4:	bf04      	itt	eq
 80091c6:	089b      	lsreq	r3, r3, #2
 80091c8:	3002      	addeq	r0, #2
 80091ca:	07da      	lsls	r2, r3, #31
 80091cc:	d403      	bmi.n	80091d6 <__lo0bits+0x4e>
 80091ce:	085b      	lsrs	r3, r3, #1
 80091d0:	f100 0001 	add.w	r0, r0, #1
 80091d4:	d005      	beq.n	80091e2 <__lo0bits+0x5a>
 80091d6:	600b      	str	r3, [r1, #0]
 80091d8:	4770      	bx	lr
 80091da:	4610      	mov	r0, r2
 80091dc:	e7e9      	b.n	80091b2 <__lo0bits+0x2a>
 80091de:	2000      	movs	r0, #0
 80091e0:	4770      	bx	lr
 80091e2:	2020      	movs	r0, #32
 80091e4:	4770      	bx	lr
	...

080091e8 <__i2b>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	460c      	mov	r4, r1
 80091ec:	2101      	movs	r1, #1
 80091ee:	f7ff ff03 	bl	8008ff8 <_Balloc>
 80091f2:	4602      	mov	r2, r0
 80091f4:	b928      	cbnz	r0, 8009202 <__i2b+0x1a>
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <__i2b+0x24>)
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <__i2b+0x28>)
 80091fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091fe:	f000 fed9 	bl	8009fb4 <__assert_func>
 8009202:	2301      	movs	r3, #1
 8009204:	6144      	str	r4, [r0, #20]
 8009206:	6103      	str	r3, [r0, #16]
 8009208:	bd10      	pop	{r4, pc}
 800920a:	bf00      	nop
 800920c:	0800a6a7 	.word	0x0800a6a7
 8009210:	0800a718 	.word	0x0800a718

08009214 <__multiply>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	4691      	mov	r9, r2
 800921a:	690a      	ldr	r2, [r1, #16]
 800921c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009220:	429a      	cmp	r2, r3
 8009222:	bfb8      	it	lt
 8009224:	460b      	movlt	r3, r1
 8009226:	460c      	mov	r4, r1
 8009228:	bfbc      	itt	lt
 800922a:	464c      	movlt	r4, r9
 800922c:	4699      	movlt	r9, r3
 800922e:	6927      	ldr	r7, [r4, #16]
 8009230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	6861      	ldr	r1, [r4, #4]
 8009238:	eb07 060a 	add.w	r6, r7, sl
 800923c:	42b3      	cmp	r3, r6
 800923e:	b085      	sub	sp, #20
 8009240:	bfb8      	it	lt
 8009242:	3101      	addlt	r1, #1
 8009244:	f7ff fed8 	bl	8008ff8 <_Balloc>
 8009248:	b930      	cbnz	r0, 8009258 <__multiply+0x44>
 800924a:	4602      	mov	r2, r0
 800924c:	4b44      	ldr	r3, [pc, #272]	; (8009360 <__multiply+0x14c>)
 800924e:	4845      	ldr	r0, [pc, #276]	; (8009364 <__multiply+0x150>)
 8009250:	f240 115d 	movw	r1, #349	; 0x15d
 8009254:	f000 feae 	bl	8009fb4 <__assert_func>
 8009258:	f100 0514 	add.w	r5, r0, #20
 800925c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009260:	462b      	mov	r3, r5
 8009262:	2200      	movs	r2, #0
 8009264:	4543      	cmp	r3, r8
 8009266:	d321      	bcc.n	80092ac <__multiply+0x98>
 8009268:	f104 0314 	add.w	r3, r4, #20
 800926c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009270:	f109 0314 	add.w	r3, r9, #20
 8009274:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009278:	9202      	str	r2, [sp, #8]
 800927a:	1b3a      	subs	r2, r7, r4
 800927c:	3a15      	subs	r2, #21
 800927e:	f022 0203 	bic.w	r2, r2, #3
 8009282:	3204      	adds	r2, #4
 8009284:	f104 0115 	add.w	r1, r4, #21
 8009288:	428f      	cmp	r7, r1
 800928a:	bf38      	it	cc
 800928c:	2204      	movcc	r2, #4
 800928e:	9201      	str	r2, [sp, #4]
 8009290:	9a02      	ldr	r2, [sp, #8]
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	429a      	cmp	r2, r3
 8009296:	d80c      	bhi.n	80092b2 <__multiply+0x9e>
 8009298:	2e00      	cmp	r6, #0
 800929a:	dd03      	ble.n	80092a4 <__multiply+0x90>
 800929c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d05a      	beq.n	800935a <__multiply+0x146>
 80092a4:	6106      	str	r6, [r0, #16]
 80092a6:	b005      	add	sp, #20
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	f843 2b04 	str.w	r2, [r3], #4
 80092b0:	e7d8      	b.n	8009264 <__multiply+0x50>
 80092b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80092b6:	f1ba 0f00 	cmp.w	sl, #0
 80092ba:	d024      	beq.n	8009306 <__multiply+0xf2>
 80092bc:	f104 0e14 	add.w	lr, r4, #20
 80092c0:	46a9      	mov	r9, r5
 80092c2:	f04f 0c00 	mov.w	ip, #0
 80092c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092ca:	f8d9 1000 	ldr.w	r1, [r9]
 80092ce:	fa1f fb82 	uxth.w	fp, r2
 80092d2:	b289      	uxth	r1, r1
 80092d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80092d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80092dc:	f8d9 2000 	ldr.w	r2, [r9]
 80092e0:	4461      	add	r1, ip
 80092e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80092ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ee:	b289      	uxth	r1, r1
 80092f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092f4:	4577      	cmp	r7, lr
 80092f6:	f849 1b04 	str.w	r1, [r9], #4
 80092fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092fe:	d8e2      	bhi.n	80092c6 <__multiply+0xb2>
 8009300:	9a01      	ldr	r2, [sp, #4]
 8009302:	f845 c002 	str.w	ip, [r5, r2]
 8009306:	9a03      	ldr	r2, [sp, #12]
 8009308:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800930c:	3304      	adds	r3, #4
 800930e:	f1b9 0f00 	cmp.w	r9, #0
 8009312:	d020      	beq.n	8009356 <__multiply+0x142>
 8009314:	6829      	ldr	r1, [r5, #0]
 8009316:	f104 0c14 	add.w	ip, r4, #20
 800931a:	46ae      	mov	lr, r5
 800931c:	f04f 0a00 	mov.w	sl, #0
 8009320:	f8bc b000 	ldrh.w	fp, [ip]
 8009324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009328:	fb09 220b 	mla	r2, r9, fp, r2
 800932c:	4492      	add	sl, r2
 800932e:	b289      	uxth	r1, r1
 8009330:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009334:	f84e 1b04 	str.w	r1, [lr], #4
 8009338:	f85c 2b04 	ldr.w	r2, [ip], #4
 800933c:	f8be 1000 	ldrh.w	r1, [lr]
 8009340:	0c12      	lsrs	r2, r2, #16
 8009342:	fb09 1102 	mla	r1, r9, r2, r1
 8009346:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800934a:	4567      	cmp	r7, ip
 800934c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009350:	d8e6      	bhi.n	8009320 <__multiply+0x10c>
 8009352:	9a01      	ldr	r2, [sp, #4]
 8009354:	50a9      	str	r1, [r5, r2]
 8009356:	3504      	adds	r5, #4
 8009358:	e79a      	b.n	8009290 <__multiply+0x7c>
 800935a:	3e01      	subs	r6, #1
 800935c:	e79c      	b.n	8009298 <__multiply+0x84>
 800935e:	bf00      	nop
 8009360:	0800a6a7 	.word	0x0800a6a7
 8009364:	0800a718 	.word	0x0800a718

08009368 <__pow5mult>:
 8009368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800936c:	4615      	mov	r5, r2
 800936e:	f012 0203 	ands.w	r2, r2, #3
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	d007      	beq.n	8009388 <__pow5mult+0x20>
 8009378:	4c25      	ldr	r4, [pc, #148]	; (8009410 <__pow5mult+0xa8>)
 800937a:	3a01      	subs	r2, #1
 800937c:	2300      	movs	r3, #0
 800937e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009382:	f7ff fe9b 	bl	80090bc <__multadd>
 8009386:	4607      	mov	r7, r0
 8009388:	10ad      	asrs	r5, r5, #2
 800938a:	d03d      	beq.n	8009408 <__pow5mult+0xa0>
 800938c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800938e:	b97c      	cbnz	r4, 80093b0 <__pow5mult+0x48>
 8009390:	2010      	movs	r0, #16
 8009392:	f7ff fe1b 	bl	8008fcc <malloc>
 8009396:	4602      	mov	r2, r0
 8009398:	6270      	str	r0, [r6, #36]	; 0x24
 800939a:	b928      	cbnz	r0, 80093a8 <__pow5mult+0x40>
 800939c:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <__pow5mult+0xac>)
 800939e:	481e      	ldr	r0, [pc, #120]	; (8009418 <__pow5mult+0xb0>)
 80093a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093a4:	f000 fe06 	bl	8009fb4 <__assert_func>
 80093a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ac:	6004      	str	r4, [r0, #0]
 80093ae:	60c4      	str	r4, [r0, #12]
 80093b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093b8:	b94c      	cbnz	r4, 80093ce <__pow5mult+0x66>
 80093ba:	f240 2171 	movw	r1, #625	; 0x271
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff12 	bl	80091e8 <__i2b>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093ca:	4604      	mov	r4, r0
 80093cc:	6003      	str	r3, [r0, #0]
 80093ce:	f04f 0900 	mov.w	r9, #0
 80093d2:	07eb      	lsls	r3, r5, #31
 80093d4:	d50a      	bpl.n	80093ec <__pow5mult+0x84>
 80093d6:	4639      	mov	r1, r7
 80093d8:	4622      	mov	r2, r4
 80093da:	4630      	mov	r0, r6
 80093dc:	f7ff ff1a 	bl	8009214 <__multiply>
 80093e0:	4639      	mov	r1, r7
 80093e2:	4680      	mov	r8, r0
 80093e4:	4630      	mov	r0, r6
 80093e6:	f7ff fe47 	bl	8009078 <_Bfree>
 80093ea:	4647      	mov	r7, r8
 80093ec:	106d      	asrs	r5, r5, #1
 80093ee:	d00b      	beq.n	8009408 <__pow5mult+0xa0>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	b938      	cbnz	r0, 8009404 <__pow5mult+0x9c>
 80093f4:	4622      	mov	r2, r4
 80093f6:	4621      	mov	r1, r4
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ff0b 	bl	8009214 <__multiply>
 80093fe:	6020      	str	r0, [r4, #0]
 8009400:	f8c0 9000 	str.w	r9, [r0]
 8009404:	4604      	mov	r4, r0
 8009406:	e7e4      	b.n	80093d2 <__pow5mult+0x6a>
 8009408:	4638      	mov	r0, r7
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	bf00      	nop
 8009410:	0800a868 	.word	0x0800a868
 8009414:	0800a635 	.word	0x0800a635
 8009418:	0800a718 	.word	0x0800a718

0800941c <__lshift>:
 800941c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	6849      	ldr	r1, [r1, #4]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	4607      	mov	r7, r0
 800942e:	4691      	mov	r9, r2
 8009430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009434:	f108 0601 	add.w	r6, r8, #1
 8009438:	42b3      	cmp	r3, r6
 800943a:	db0b      	blt.n	8009454 <__lshift+0x38>
 800943c:	4638      	mov	r0, r7
 800943e:	f7ff fddb 	bl	8008ff8 <_Balloc>
 8009442:	4605      	mov	r5, r0
 8009444:	b948      	cbnz	r0, 800945a <__lshift+0x3e>
 8009446:	4602      	mov	r2, r0
 8009448:	4b2a      	ldr	r3, [pc, #168]	; (80094f4 <__lshift+0xd8>)
 800944a:	482b      	ldr	r0, [pc, #172]	; (80094f8 <__lshift+0xdc>)
 800944c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009450:	f000 fdb0 	bl	8009fb4 <__assert_func>
 8009454:	3101      	adds	r1, #1
 8009456:	005b      	lsls	r3, r3, #1
 8009458:	e7ee      	b.n	8009438 <__lshift+0x1c>
 800945a:	2300      	movs	r3, #0
 800945c:	f100 0114 	add.w	r1, r0, #20
 8009460:	f100 0210 	add.w	r2, r0, #16
 8009464:	4618      	mov	r0, r3
 8009466:	4553      	cmp	r3, sl
 8009468:	db37      	blt.n	80094da <__lshift+0xbe>
 800946a:	6920      	ldr	r0, [r4, #16]
 800946c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009470:	f104 0314 	add.w	r3, r4, #20
 8009474:	f019 091f 	ands.w	r9, r9, #31
 8009478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800947c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009480:	d02f      	beq.n	80094e2 <__lshift+0xc6>
 8009482:	f1c9 0e20 	rsb	lr, r9, #32
 8009486:	468a      	mov	sl, r1
 8009488:	f04f 0c00 	mov.w	ip, #0
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	fa02 f209 	lsl.w	r2, r2, r9
 8009492:	ea42 020c 	orr.w	r2, r2, ip
 8009496:	f84a 2b04 	str.w	r2, [sl], #4
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	4298      	cmp	r0, r3
 80094a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094a4:	d8f2      	bhi.n	800948c <__lshift+0x70>
 80094a6:	1b03      	subs	r3, r0, r4
 80094a8:	3b15      	subs	r3, #21
 80094aa:	f023 0303 	bic.w	r3, r3, #3
 80094ae:	3304      	adds	r3, #4
 80094b0:	f104 0215 	add.w	r2, r4, #21
 80094b4:	4290      	cmp	r0, r2
 80094b6:	bf38      	it	cc
 80094b8:	2304      	movcc	r3, #4
 80094ba:	f841 c003 	str.w	ip, [r1, r3]
 80094be:	f1bc 0f00 	cmp.w	ip, #0
 80094c2:	d001      	beq.n	80094c8 <__lshift+0xac>
 80094c4:	f108 0602 	add.w	r6, r8, #2
 80094c8:	3e01      	subs	r6, #1
 80094ca:	4638      	mov	r0, r7
 80094cc:	612e      	str	r6, [r5, #16]
 80094ce:	4621      	mov	r1, r4
 80094d0:	f7ff fdd2 	bl	8009078 <_Bfree>
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094da:	f842 0f04 	str.w	r0, [r2, #4]!
 80094de:	3301      	adds	r3, #1
 80094e0:	e7c1      	b.n	8009466 <__lshift+0x4a>
 80094e2:	3904      	subs	r1, #4
 80094e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80094ec:	4298      	cmp	r0, r3
 80094ee:	d8f9      	bhi.n	80094e4 <__lshift+0xc8>
 80094f0:	e7ea      	b.n	80094c8 <__lshift+0xac>
 80094f2:	bf00      	nop
 80094f4:	0800a6a7 	.word	0x0800a6a7
 80094f8:	0800a718 	.word	0x0800a718

080094fc <__mcmp>:
 80094fc:	b530      	push	{r4, r5, lr}
 80094fe:	6902      	ldr	r2, [r0, #16]
 8009500:	690c      	ldr	r4, [r1, #16]
 8009502:	1b12      	subs	r2, r2, r4
 8009504:	d10e      	bne.n	8009524 <__mcmp+0x28>
 8009506:	f100 0314 	add.w	r3, r0, #20
 800950a:	3114      	adds	r1, #20
 800950c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009510:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009514:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009518:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800951c:	42a5      	cmp	r5, r4
 800951e:	d003      	beq.n	8009528 <__mcmp+0x2c>
 8009520:	d305      	bcc.n	800952e <__mcmp+0x32>
 8009522:	2201      	movs	r2, #1
 8009524:	4610      	mov	r0, r2
 8009526:	bd30      	pop	{r4, r5, pc}
 8009528:	4283      	cmp	r3, r0
 800952a:	d3f3      	bcc.n	8009514 <__mcmp+0x18>
 800952c:	e7fa      	b.n	8009524 <__mcmp+0x28>
 800952e:	f04f 32ff 	mov.w	r2, #4294967295
 8009532:	e7f7      	b.n	8009524 <__mcmp+0x28>

08009534 <__mdiff>:
 8009534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	460c      	mov	r4, r1
 800953a:	4606      	mov	r6, r0
 800953c:	4611      	mov	r1, r2
 800953e:	4620      	mov	r0, r4
 8009540:	4690      	mov	r8, r2
 8009542:	f7ff ffdb 	bl	80094fc <__mcmp>
 8009546:	1e05      	subs	r5, r0, #0
 8009548:	d110      	bne.n	800956c <__mdiff+0x38>
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fd53 	bl	8008ff8 <_Balloc>
 8009552:	b930      	cbnz	r0, 8009562 <__mdiff+0x2e>
 8009554:	4b3a      	ldr	r3, [pc, #232]	; (8009640 <__mdiff+0x10c>)
 8009556:	4602      	mov	r2, r0
 8009558:	f240 2132 	movw	r1, #562	; 0x232
 800955c:	4839      	ldr	r0, [pc, #228]	; (8009644 <__mdiff+0x110>)
 800955e:	f000 fd29 	bl	8009fb4 <__assert_func>
 8009562:	2301      	movs	r3, #1
 8009564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956c:	bfa4      	itt	ge
 800956e:	4643      	movge	r3, r8
 8009570:	46a0      	movge	r8, r4
 8009572:	4630      	mov	r0, r6
 8009574:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009578:	bfa6      	itte	ge
 800957a:	461c      	movge	r4, r3
 800957c:	2500      	movge	r5, #0
 800957e:	2501      	movlt	r5, #1
 8009580:	f7ff fd3a 	bl	8008ff8 <_Balloc>
 8009584:	b920      	cbnz	r0, 8009590 <__mdiff+0x5c>
 8009586:	4b2e      	ldr	r3, [pc, #184]	; (8009640 <__mdiff+0x10c>)
 8009588:	4602      	mov	r2, r0
 800958a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800958e:	e7e5      	b.n	800955c <__mdiff+0x28>
 8009590:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009594:	6926      	ldr	r6, [r4, #16]
 8009596:	60c5      	str	r5, [r0, #12]
 8009598:	f104 0914 	add.w	r9, r4, #20
 800959c:	f108 0514 	add.w	r5, r8, #20
 80095a0:	f100 0e14 	add.w	lr, r0, #20
 80095a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095ac:	f108 0210 	add.w	r2, r8, #16
 80095b0:	46f2      	mov	sl, lr
 80095b2:	2100      	movs	r1, #0
 80095b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095bc:	fa1f f883 	uxth.w	r8, r3
 80095c0:	fa11 f18b 	uxtah	r1, r1, fp
 80095c4:	0c1b      	lsrs	r3, r3, #16
 80095c6:	eba1 0808 	sub.w	r8, r1, r8
 80095ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80095d2:	fa1f f888 	uxth.w	r8, r8
 80095d6:	1419      	asrs	r1, r3, #16
 80095d8:	454e      	cmp	r6, r9
 80095da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80095de:	f84a 3b04 	str.w	r3, [sl], #4
 80095e2:	d8e7      	bhi.n	80095b4 <__mdiff+0x80>
 80095e4:	1b33      	subs	r3, r6, r4
 80095e6:	3b15      	subs	r3, #21
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	3304      	adds	r3, #4
 80095ee:	3415      	adds	r4, #21
 80095f0:	42a6      	cmp	r6, r4
 80095f2:	bf38      	it	cc
 80095f4:	2304      	movcc	r3, #4
 80095f6:	441d      	add	r5, r3
 80095f8:	4473      	add	r3, lr
 80095fa:	469e      	mov	lr, r3
 80095fc:	462e      	mov	r6, r5
 80095fe:	4566      	cmp	r6, ip
 8009600:	d30e      	bcc.n	8009620 <__mdiff+0xec>
 8009602:	f10c 0203 	add.w	r2, ip, #3
 8009606:	1b52      	subs	r2, r2, r5
 8009608:	f022 0203 	bic.w	r2, r2, #3
 800960c:	3d03      	subs	r5, #3
 800960e:	45ac      	cmp	ip, r5
 8009610:	bf38      	it	cc
 8009612:	2200      	movcc	r2, #0
 8009614:	441a      	add	r2, r3
 8009616:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800961a:	b17b      	cbz	r3, 800963c <__mdiff+0x108>
 800961c:	6107      	str	r7, [r0, #16]
 800961e:	e7a3      	b.n	8009568 <__mdiff+0x34>
 8009620:	f856 8b04 	ldr.w	r8, [r6], #4
 8009624:	fa11 f288 	uxtah	r2, r1, r8
 8009628:	1414      	asrs	r4, r2, #16
 800962a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800962e:	b292      	uxth	r2, r2
 8009630:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009634:	f84e 2b04 	str.w	r2, [lr], #4
 8009638:	1421      	asrs	r1, r4, #16
 800963a:	e7e0      	b.n	80095fe <__mdiff+0xca>
 800963c:	3f01      	subs	r7, #1
 800963e:	e7ea      	b.n	8009616 <__mdiff+0xe2>
 8009640:	0800a6a7 	.word	0x0800a6a7
 8009644:	0800a718 	.word	0x0800a718

08009648 <__d2b>:
 8009648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4689      	mov	r9, r1
 800964e:	2101      	movs	r1, #1
 8009650:	ec57 6b10 	vmov	r6, r7, d0
 8009654:	4690      	mov	r8, r2
 8009656:	f7ff fccf 	bl	8008ff8 <_Balloc>
 800965a:	4604      	mov	r4, r0
 800965c:	b930      	cbnz	r0, 800966c <__d2b+0x24>
 800965e:	4602      	mov	r2, r0
 8009660:	4b25      	ldr	r3, [pc, #148]	; (80096f8 <__d2b+0xb0>)
 8009662:	4826      	ldr	r0, [pc, #152]	; (80096fc <__d2b+0xb4>)
 8009664:	f240 310a 	movw	r1, #778	; 0x30a
 8009668:	f000 fca4 	bl	8009fb4 <__assert_func>
 800966c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009674:	bb35      	cbnz	r5, 80096c4 <__d2b+0x7c>
 8009676:	2e00      	cmp	r6, #0
 8009678:	9301      	str	r3, [sp, #4]
 800967a:	d028      	beq.n	80096ce <__d2b+0x86>
 800967c:	4668      	mov	r0, sp
 800967e:	9600      	str	r6, [sp, #0]
 8009680:	f7ff fd82 	bl	8009188 <__lo0bits>
 8009684:	9900      	ldr	r1, [sp, #0]
 8009686:	b300      	cbz	r0, 80096ca <__d2b+0x82>
 8009688:	9a01      	ldr	r2, [sp, #4]
 800968a:	f1c0 0320 	rsb	r3, r0, #32
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	430b      	orrs	r3, r1
 8009694:	40c2      	lsrs	r2, r0
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	9201      	str	r2, [sp, #4]
 800969a:	9b01      	ldr	r3, [sp, #4]
 800969c:	61a3      	str	r3, [r4, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bf14      	ite	ne
 80096a2:	2202      	movne	r2, #2
 80096a4:	2201      	moveq	r2, #1
 80096a6:	6122      	str	r2, [r4, #16]
 80096a8:	b1d5      	cbz	r5, 80096e0 <__d2b+0x98>
 80096aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096ae:	4405      	add	r5, r0
 80096b0:	f8c9 5000 	str.w	r5, [r9]
 80096b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096b8:	f8c8 0000 	str.w	r0, [r8]
 80096bc:	4620      	mov	r0, r4
 80096be:	b003      	add	sp, #12
 80096c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096c8:	e7d5      	b.n	8009676 <__d2b+0x2e>
 80096ca:	6161      	str	r1, [r4, #20]
 80096cc:	e7e5      	b.n	800969a <__d2b+0x52>
 80096ce:	a801      	add	r0, sp, #4
 80096d0:	f7ff fd5a 	bl	8009188 <__lo0bits>
 80096d4:	9b01      	ldr	r3, [sp, #4]
 80096d6:	6163      	str	r3, [r4, #20]
 80096d8:	2201      	movs	r2, #1
 80096da:	6122      	str	r2, [r4, #16]
 80096dc:	3020      	adds	r0, #32
 80096de:	e7e3      	b.n	80096a8 <__d2b+0x60>
 80096e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096e8:	f8c9 0000 	str.w	r0, [r9]
 80096ec:	6918      	ldr	r0, [r3, #16]
 80096ee:	f7ff fd2b 	bl	8009148 <__hi0bits>
 80096f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096f6:	e7df      	b.n	80096b8 <__d2b+0x70>
 80096f8:	0800a6a7 	.word	0x0800a6a7
 80096fc:	0800a718 	.word	0x0800a718

08009700 <_calloc_r>:
 8009700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009702:	fba1 2402 	umull	r2, r4, r1, r2
 8009706:	b94c      	cbnz	r4, 800971c <_calloc_r+0x1c>
 8009708:	4611      	mov	r1, r2
 800970a:	9201      	str	r2, [sp, #4]
 800970c:	f000 f87a 	bl	8009804 <_malloc_r>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	4605      	mov	r5, r0
 8009714:	b930      	cbnz	r0, 8009724 <_calloc_r+0x24>
 8009716:	4628      	mov	r0, r5
 8009718:	b003      	add	sp, #12
 800971a:	bd30      	pop	{r4, r5, pc}
 800971c:	220c      	movs	r2, #12
 800971e:	6002      	str	r2, [r0, #0]
 8009720:	2500      	movs	r5, #0
 8009722:	e7f8      	b.n	8009716 <_calloc_r+0x16>
 8009724:	4621      	mov	r1, r4
 8009726:	f7fd fdbd 	bl	80072a4 <memset>
 800972a:	e7f4      	b.n	8009716 <_calloc_r+0x16>

0800972c <_free_r>:
 800972c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800972e:	2900      	cmp	r1, #0
 8009730:	d044      	beq.n	80097bc <_free_r+0x90>
 8009732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009736:	9001      	str	r0, [sp, #4]
 8009738:	2b00      	cmp	r3, #0
 800973a:	f1a1 0404 	sub.w	r4, r1, #4
 800973e:	bfb8      	it	lt
 8009740:	18e4      	addlt	r4, r4, r3
 8009742:	f000 fcd7 	bl	800a0f4 <__malloc_lock>
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <_free_r+0x94>)
 8009748:	9801      	ldr	r0, [sp, #4]
 800974a:	6813      	ldr	r3, [r2, #0]
 800974c:	b933      	cbnz	r3, 800975c <_free_r+0x30>
 800974e:	6063      	str	r3, [r4, #4]
 8009750:	6014      	str	r4, [r2, #0]
 8009752:	b003      	add	sp, #12
 8009754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009758:	f000 bcd2 	b.w	800a100 <__malloc_unlock>
 800975c:	42a3      	cmp	r3, r4
 800975e:	d908      	bls.n	8009772 <_free_r+0x46>
 8009760:	6825      	ldr	r5, [r4, #0]
 8009762:	1961      	adds	r1, r4, r5
 8009764:	428b      	cmp	r3, r1
 8009766:	bf01      	itttt	eq
 8009768:	6819      	ldreq	r1, [r3, #0]
 800976a:	685b      	ldreq	r3, [r3, #4]
 800976c:	1949      	addeq	r1, r1, r5
 800976e:	6021      	streq	r1, [r4, #0]
 8009770:	e7ed      	b.n	800974e <_free_r+0x22>
 8009772:	461a      	mov	r2, r3
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	b10b      	cbz	r3, 800977c <_free_r+0x50>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d9fa      	bls.n	8009772 <_free_r+0x46>
 800977c:	6811      	ldr	r1, [r2, #0]
 800977e:	1855      	adds	r5, r2, r1
 8009780:	42a5      	cmp	r5, r4
 8009782:	d10b      	bne.n	800979c <_free_r+0x70>
 8009784:	6824      	ldr	r4, [r4, #0]
 8009786:	4421      	add	r1, r4
 8009788:	1854      	adds	r4, r2, r1
 800978a:	42a3      	cmp	r3, r4
 800978c:	6011      	str	r1, [r2, #0]
 800978e:	d1e0      	bne.n	8009752 <_free_r+0x26>
 8009790:	681c      	ldr	r4, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	6053      	str	r3, [r2, #4]
 8009796:	4421      	add	r1, r4
 8009798:	6011      	str	r1, [r2, #0]
 800979a:	e7da      	b.n	8009752 <_free_r+0x26>
 800979c:	d902      	bls.n	80097a4 <_free_r+0x78>
 800979e:	230c      	movs	r3, #12
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	e7d6      	b.n	8009752 <_free_r+0x26>
 80097a4:	6825      	ldr	r5, [r4, #0]
 80097a6:	1961      	adds	r1, r4, r5
 80097a8:	428b      	cmp	r3, r1
 80097aa:	bf04      	itt	eq
 80097ac:	6819      	ldreq	r1, [r3, #0]
 80097ae:	685b      	ldreq	r3, [r3, #4]
 80097b0:	6063      	str	r3, [r4, #4]
 80097b2:	bf04      	itt	eq
 80097b4:	1949      	addeq	r1, r1, r5
 80097b6:	6021      	streq	r1, [r4, #0]
 80097b8:	6054      	str	r4, [r2, #4]
 80097ba:	e7ca      	b.n	8009752 <_free_r+0x26>
 80097bc:	b003      	add	sp, #12
 80097be:	bd30      	pop	{r4, r5, pc}
 80097c0:	20000408 	.word	0x20000408

080097c4 <sbrk_aligned>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	4e0e      	ldr	r6, [pc, #56]	; (8009800 <sbrk_aligned+0x3c>)
 80097c8:	460c      	mov	r4, r1
 80097ca:	6831      	ldr	r1, [r6, #0]
 80097cc:	4605      	mov	r5, r0
 80097ce:	b911      	cbnz	r1, 80097d6 <sbrk_aligned+0x12>
 80097d0:	f000 fb8a 	bl	8009ee8 <_sbrk_r>
 80097d4:	6030      	str	r0, [r6, #0]
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 fb85 	bl	8009ee8 <_sbrk_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d00a      	beq.n	80097f8 <sbrk_aligned+0x34>
 80097e2:	1cc4      	adds	r4, r0, #3
 80097e4:	f024 0403 	bic.w	r4, r4, #3
 80097e8:	42a0      	cmp	r0, r4
 80097ea:	d007      	beq.n	80097fc <sbrk_aligned+0x38>
 80097ec:	1a21      	subs	r1, r4, r0
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 fb7a 	bl	8009ee8 <_sbrk_r>
 80097f4:	3001      	adds	r0, #1
 80097f6:	d101      	bne.n	80097fc <sbrk_aligned+0x38>
 80097f8:	f04f 34ff 	mov.w	r4, #4294967295
 80097fc:	4620      	mov	r0, r4
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	2000040c 	.word	0x2000040c

08009804 <_malloc_r>:
 8009804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009808:	1ccd      	adds	r5, r1, #3
 800980a:	f025 0503 	bic.w	r5, r5, #3
 800980e:	3508      	adds	r5, #8
 8009810:	2d0c      	cmp	r5, #12
 8009812:	bf38      	it	cc
 8009814:	250c      	movcc	r5, #12
 8009816:	2d00      	cmp	r5, #0
 8009818:	4607      	mov	r7, r0
 800981a:	db01      	blt.n	8009820 <_malloc_r+0x1c>
 800981c:	42a9      	cmp	r1, r5
 800981e:	d905      	bls.n	800982c <_malloc_r+0x28>
 8009820:	230c      	movs	r3, #12
 8009822:	603b      	str	r3, [r7, #0]
 8009824:	2600      	movs	r6, #0
 8009826:	4630      	mov	r0, r6
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	4e2e      	ldr	r6, [pc, #184]	; (80098e8 <_malloc_r+0xe4>)
 800982e:	f000 fc61 	bl	800a0f4 <__malloc_lock>
 8009832:	6833      	ldr	r3, [r6, #0]
 8009834:	461c      	mov	r4, r3
 8009836:	bb34      	cbnz	r4, 8009886 <_malloc_r+0x82>
 8009838:	4629      	mov	r1, r5
 800983a:	4638      	mov	r0, r7
 800983c:	f7ff ffc2 	bl	80097c4 <sbrk_aligned>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	4604      	mov	r4, r0
 8009844:	d14d      	bne.n	80098e2 <_malloc_r+0xde>
 8009846:	6834      	ldr	r4, [r6, #0]
 8009848:	4626      	mov	r6, r4
 800984a:	2e00      	cmp	r6, #0
 800984c:	d140      	bne.n	80098d0 <_malloc_r+0xcc>
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	4631      	mov	r1, r6
 8009852:	4638      	mov	r0, r7
 8009854:	eb04 0803 	add.w	r8, r4, r3
 8009858:	f000 fb46 	bl	8009ee8 <_sbrk_r>
 800985c:	4580      	cmp	r8, r0
 800985e:	d13a      	bne.n	80098d6 <_malloc_r+0xd2>
 8009860:	6821      	ldr	r1, [r4, #0]
 8009862:	3503      	adds	r5, #3
 8009864:	1a6d      	subs	r5, r5, r1
 8009866:	f025 0503 	bic.w	r5, r5, #3
 800986a:	3508      	adds	r5, #8
 800986c:	2d0c      	cmp	r5, #12
 800986e:	bf38      	it	cc
 8009870:	250c      	movcc	r5, #12
 8009872:	4629      	mov	r1, r5
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ffa5 	bl	80097c4 <sbrk_aligned>
 800987a:	3001      	adds	r0, #1
 800987c:	d02b      	beq.n	80098d6 <_malloc_r+0xd2>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	442b      	add	r3, r5
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	e00e      	b.n	80098a4 <_malloc_r+0xa0>
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	1b52      	subs	r2, r2, r5
 800988a:	d41e      	bmi.n	80098ca <_malloc_r+0xc6>
 800988c:	2a0b      	cmp	r2, #11
 800988e:	d916      	bls.n	80098be <_malloc_r+0xba>
 8009890:	1961      	adds	r1, r4, r5
 8009892:	42a3      	cmp	r3, r4
 8009894:	6025      	str	r5, [r4, #0]
 8009896:	bf18      	it	ne
 8009898:	6059      	strne	r1, [r3, #4]
 800989a:	6863      	ldr	r3, [r4, #4]
 800989c:	bf08      	it	eq
 800989e:	6031      	streq	r1, [r6, #0]
 80098a0:	5162      	str	r2, [r4, r5]
 80098a2:	604b      	str	r3, [r1, #4]
 80098a4:	4638      	mov	r0, r7
 80098a6:	f104 060b 	add.w	r6, r4, #11
 80098aa:	f000 fc29 	bl	800a100 <__malloc_unlock>
 80098ae:	f026 0607 	bic.w	r6, r6, #7
 80098b2:	1d23      	adds	r3, r4, #4
 80098b4:	1af2      	subs	r2, r6, r3
 80098b6:	d0b6      	beq.n	8009826 <_malloc_r+0x22>
 80098b8:	1b9b      	subs	r3, r3, r6
 80098ba:	50a3      	str	r3, [r4, r2]
 80098bc:	e7b3      	b.n	8009826 <_malloc_r+0x22>
 80098be:	6862      	ldr	r2, [r4, #4]
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	bf0c      	ite	eq
 80098c4:	6032      	streq	r2, [r6, #0]
 80098c6:	605a      	strne	r2, [r3, #4]
 80098c8:	e7ec      	b.n	80098a4 <_malloc_r+0xa0>
 80098ca:	4623      	mov	r3, r4
 80098cc:	6864      	ldr	r4, [r4, #4]
 80098ce:	e7b2      	b.n	8009836 <_malloc_r+0x32>
 80098d0:	4634      	mov	r4, r6
 80098d2:	6876      	ldr	r6, [r6, #4]
 80098d4:	e7b9      	b.n	800984a <_malloc_r+0x46>
 80098d6:	230c      	movs	r3, #12
 80098d8:	603b      	str	r3, [r7, #0]
 80098da:	4638      	mov	r0, r7
 80098dc:	f000 fc10 	bl	800a100 <__malloc_unlock>
 80098e0:	e7a1      	b.n	8009826 <_malloc_r+0x22>
 80098e2:	6025      	str	r5, [r4, #0]
 80098e4:	e7de      	b.n	80098a4 <_malloc_r+0xa0>
 80098e6:	bf00      	nop
 80098e8:	20000408 	.word	0x20000408

080098ec <__ssputs_r>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	688e      	ldr	r6, [r1, #8]
 80098f2:	429e      	cmp	r6, r3
 80098f4:	4682      	mov	sl, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4690      	mov	r8, r2
 80098fa:	461f      	mov	r7, r3
 80098fc:	d838      	bhi.n	8009970 <__ssputs_r+0x84>
 80098fe:	898a      	ldrh	r2, [r1, #12]
 8009900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009904:	d032      	beq.n	800996c <__ssputs_r+0x80>
 8009906:	6825      	ldr	r5, [r4, #0]
 8009908:	6909      	ldr	r1, [r1, #16]
 800990a:	eba5 0901 	sub.w	r9, r5, r1
 800990e:	6965      	ldr	r5, [r4, #20]
 8009910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009918:	3301      	adds	r3, #1
 800991a:	444b      	add	r3, r9
 800991c:	106d      	asrs	r5, r5, #1
 800991e:	429d      	cmp	r5, r3
 8009920:	bf38      	it	cc
 8009922:	461d      	movcc	r5, r3
 8009924:	0553      	lsls	r3, r2, #21
 8009926:	d531      	bpl.n	800998c <__ssputs_r+0xa0>
 8009928:	4629      	mov	r1, r5
 800992a:	f7ff ff6b 	bl	8009804 <_malloc_r>
 800992e:	4606      	mov	r6, r0
 8009930:	b950      	cbnz	r0, 8009948 <__ssputs_r+0x5c>
 8009932:	230c      	movs	r3, #12
 8009934:	f8ca 3000 	str.w	r3, [sl]
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993e:	81a3      	strh	r3, [r4, #12]
 8009940:	f04f 30ff 	mov.w	r0, #4294967295
 8009944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009948:	6921      	ldr	r1, [r4, #16]
 800994a:	464a      	mov	r2, r9
 800994c:	f7ff fb46 	bl	8008fdc <memcpy>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	6126      	str	r6, [r4, #16]
 800995e:	6165      	str	r5, [r4, #20]
 8009960:	444e      	add	r6, r9
 8009962:	eba5 0509 	sub.w	r5, r5, r9
 8009966:	6026      	str	r6, [r4, #0]
 8009968:	60a5      	str	r5, [r4, #8]
 800996a:	463e      	mov	r6, r7
 800996c:	42be      	cmp	r6, r7
 800996e:	d900      	bls.n	8009972 <__ssputs_r+0x86>
 8009970:	463e      	mov	r6, r7
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	4632      	mov	r2, r6
 8009976:	4641      	mov	r1, r8
 8009978:	f000 fba2 	bl	800a0c0 <memmove>
 800997c:	68a3      	ldr	r3, [r4, #8]
 800997e:	1b9b      	subs	r3, r3, r6
 8009980:	60a3      	str	r3, [r4, #8]
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	4433      	add	r3, r6
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e7db      	b.n	8009944 <__ssputs_r+0x58>
 800998c:	462a      	mov	r2, r5
 800998e:	f000 fbbd 	bl	800a10c <_realloc_r>
 8009992:	4606      	mov	r6, r0
 8009994:	2800      	cmp	r0, #0
 8009996:	d1e1      	bne.n	800995c <__ssputs_r+0x70>
 8009998:	6921      	ldr	r1, [r4, #16]
 800999a:	4650      	mov	r0, sl
 800999c:	f7ff fec6 	bl	800972c <_free_r>
 80099a0:	e7c7      	b.n	8009932 <__ssputs_r+0x46>
	...

080099a4 <_svfiprintf_r>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	4698      	mov	r8, r3
 80099aa:	898b      	ldrh	r3, [r1, #12]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	b09d      	sub	sp, #116	; 0x74
 80099b0:	4607      	mov	r7, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	4614      	mov	r4, r2
 80099b6:	d50e      	bpl.n	80099d6 <_svfiprintf_r+0x32>
 80099b8:	690b      	ldr	r3, [r1, #16]
 80099ba:	b963      	cbnz	r3, 80099d6 <_svfiprintf_r+0x32>
 80099bc:	2140      	movs	r1, #64	; 0x40
 80099be:	f7ff ff21 	bl	8009804 <_malloc_r>
 80099c2:	6028      	str	r0, [r5, #0]
 80099c4:	6128      	str	r0, [r5, #16]
 80099c6:	b920      	cbnz	r0, 80099d2 <_svfiprintf_r+0x2e>
 80099c8:	230c      	movs	r3, #12
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	e0d1      	b.n	8009b76 <_svfiprintf_r+0x1d2>
 80099d2:	2340      	movs	r3, #64	; 0x40
 80099d4:	616b      	str	r3, [r5, #20]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9309      	str	r3, [sp, #36]	; 0x24
 80099da:	2320      	movs	r3, #32
 80099dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e4:	2330      	movs	r3, #48	; 0x30
 80099e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b90 <_svfiprintf_r+0x1ec>
 80099ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ee:	f04f 0901 	mov.w	r9, #1
 80099f2:	4623      	mov	r3, r4
 80099f4:	469a      	mov	sl, r3
 80099f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fa:	b10a      	cbz	r2, 8009a00 <_svfiprintf_r+0x5c>
 80099fc:	2a25      	cmp	r2, #37	; 0x25
 80099fe:	d1f9      	bne.n	80099f4 <_svfiprintf_r+0x50>
 8009a00:	ebba 0b04 	subs.w	fp, sl, r4
 8009a04:	d00b      	beq.n	8009a1e <_svfiprintf_r+0x7a>
 8009a06:	465b      	mov	r3, fp
 8009a08:	4622      	mov	r2, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff ff6d 	bl	80098ec <__ssputs_r>
 8009a12:	3001      	adds	r0, #1
 8009a14:	f000 80aa 	beq.w	8009b6c <_svfiprintf_r+0x1c8>
 8009a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1a:	445a      	add	r2, fp
 8009a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80a2 	beq.w	8009b6c <_svfiprintf_r+0x1c8>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a32:	f10a 0a01 	add.w	sl, sl, #1
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	9307      	str	r3, [sp, #28]
 8009a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a40:	4654      	mov	r4, sl
 8009a42:	2205      	movs	r2, #5
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	4851      	ldr	r0, [pc, #324]	; (8009b90 <_svfiprintf_r+0x1ec>)
 8009a4a:	f7f6 fbd1 	bl	80001f0 <memchr>
 8009a4e:	9a04      	ldr	r2, [sp, #16]
 8009a50:	b9d8      	cbnz	r0, 8009a8a <_svfiprintf_r+0xe6>
 8009a52:	06d0      	lsls	r0, r2, #27
 8009a54:	bf44      	itt	mi
 8009a56:	2320      	movmi	r3, #32
 8009a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a5c:	0711      	lsls	r1, r2, #28
 8009a5e:	bf44      	itt	mi
 8009a60:	232b      	movmi	r3, #43	; 0x2b
 8009a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a66:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6c:	d015      	beq.n	8009a9a <_svfiprintf_r+0xf6>
 8009a6e:	9a07      	ldr	r2, [sp, #28]
 8009a70:	4654      	mov	r4, sl
 8009a72:	2000      	movs	r0, #0
 8009a74:	f04f 0c0a 	mov.w	ip, #10
 8009a78:	4621      	mov	r1, r4
 8009a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a7e:	3b30      	subs	r3, #48	; 0x30
 8009a80:	2b09      	cmp	r3, #9
 8009a82:	d94e      	bls.n	8009b22 <_svfiprintf_r+0x17e>
 8009a84:	b1b0      	cbz	r0, 8009ab4 <_svfiprintf_r+0x110>
 8009a86:	9207      	str	r2, [sp, #28]
 8009a88:	e014      	b.n	8009ab4 <_svfiprintf_r+0x110>
 8009a8a:	eba0 0308 	sub.w	r3, r0, r8
 8009a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a92:	4313      	orrs	r3, r2
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	46a2      	mov	sl, r4
 8009a98:	e7d2      	b.n	8009a40 <_svfiprintf_r+0x9c>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	1d19      	adds	r1, r3, #4
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	9103      	str	r1, [sp, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bfbb      	ittet	lt
 8009aa6:	425b      	neglt	r3, r3
 8009aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8009aac:	9307      	strge	r3, [sp, #28]
 8009aae:	9307      	strlt	r3, [sp, #28]
 8009ab0:	bfb8      	it	lt
 8009ab2:	9204      	strlt	r2, [sp, #16]
 8009ab4:	7823      	ldrb	r3, [r4, #0]
 8009ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8009ab8:	d10c      	bne.n	8009ad4 <_svfiprintf_r+0x130>
 8009aba:	7863      	ldrb	r3, [r4, #1]
 8009abc:	2b2a      	cmp	r3, #42	; 0x2a
 8009abe:	d135      	bne.n	8009b2c <_svfiprintf_r+0x188>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	9203      	str	r2, [sp, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfb8      	it	lt
 8009acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ad0:	3402      	adds	r4, #2
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ba0 <_svfiprintf_r+0x1fc>
 8009ad8:	7821      	ldrb	r1, [r4, #0]
 8009ada:	2203      	movs	r2, #3
 8009adc:	4650      	mov	r0, sl
 8009ade:	f7f6 fb87 	bl	80001f0 <memchr>
 8009ae2:	b140      	cbz	r0, 8009af6 <_svfiprintf_r+0x152>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	eba0 000a 	sub.w	r0, r0, sl
 8009aea:	fa03 f000 	lsl.w	r0, r3, r0
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	4303      	orrs	r3, r0
 8009af2:	3401      	adds	r4, #1
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afa:	4826      	ldr	r0, [pc, #152]	; (8009b94 <_svfiprintf_r+0x1f0>)
 8009afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b00:	2206      	movs	r2, #6
 8009b02:	f7f6 fb75 	bl	80001f0 <memchr>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d038      	beq.n	8009b7c <_svfiprintf_r+0x1d8>
 8009b0a:	4b23      	ldr	r3, [pc, #140]	; (8009b98 <_svfiprintf_r+0x1f4>)
 8009b0c:	bb1b      	cbnz	r3, 8009b56 <_svfiprintf_r+0x1b2>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	3307      	adds	r3, #7
 8009b12:	f023 0307 	bic.w	r3, r3, #7
 8009b16:	3308      	adds	r3, #8
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1c:	4433      	add	r3, r6
 8009b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b20:	e767      	b.n	80099f2 <_svfiprintf_r+0x4e>
 8009b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b26:	460c      	mov	r4, r1
 8009b28:	2001      	movs	r0, #1
 8009b2a:	e7a5      	b.n	8009a78 <_svfiprintf_r+0xd4>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	3401      	adds	r4, #1
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	4619      	mov	r1, r3
 8009b34:	f04f 0c0a 	mov.w	ip, #10
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b3e:	3a30      	subs	r2, #48	; 0x30
 8009b40:	2a09      	cmp	r2, #9
 8009b42:	d903      	bls.n	8009b4c <_svfiprintf_r+0x1a8>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0c5      	beq.n	8009ad4 <_svfiprintf_r+0x130>
 8009b48:	9105      	str	r1, [sp, #20]
 8009b4a:	e7c3      	b.n	8009ad4 <_svfiprintf_r+0x130>
 8009b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b50:	4604      	mov	r4, r0
 8009b52:	2301      	movs	r3, #1
 8009b54:	e7f0      	b.n	8009b38 <_svfiprintf_r+0x194>
 8009b56:	ab03      	add	r3, sp, #12
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <_svfiprintf_r+0x1f8>)
 8009b5e:	a904      	add	r1, sp, #16
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7fd fc47 	bl	80073f4 <_printf_float>
 8009b66:	1c42      	adds	r2, r0, #1
 8009b68:	4606      	mov	r6, r0
 8009b6a:	d1d6      	bne.n	8009b1a <_svfiprintf_r+0x176>
 8009b6c:	89ab      	ldrh	r3, [r5, #12]
 8009b6e:	065b      	lsls	r3, r3, #25
 8009b70:	f53f af2c 	bmi.w	80099cc <_svfiprintf_r+0x28>
 8009b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b76:	b01d      	add	sp, #116	; 0x74
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b7c:	ab03      	add	r3, sp, #12
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	462a      	mov	r2, r5
 8009b82:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <_svfiprintf_r+0x1f8>)
 8009b84:	a904      	add	r1, sp, #16
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7fd fed8 	bl	800793c <_printf_i>
 8009b8c:	e7eb      	b.n	8009b66 <_svfiprintf_r+0x1c2>
 8009b8e:	bf00      	nop
 8009b90:	0800a874 	.word	0x0800a874
 8009b94:	0800a87e 	.word	0x0800a87e
 8009b98:	080073f5 	.word	0x080073f5
 8009b9c:	080098ed 	.word	0x080098ed
 8009ba0:	0800a87a 	.word	0x0800a87a

08009ba4 <__sfputc_r>:
 8009ba4:	6893      	ldr	r3, [r2, #8]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	b410      	push	{r4}
 8009bac:	6093      	str	r3, [r2, #8]
 8009bae:	da08      	bge.n	8009bc2 <__sfputc_r+0x1e>
 8009bb0:	6994      	ldr	r4, [r2, #24]
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	db01      	blt.n	8009bba <__sfputc_r+0x16>
 8009bb6:	290a      	cmp	r1, #10
 8009bb8:	d103      	bne.n	8009bc2 <__sfputc_r+0x1e>
 8009bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbe:	f7fe b8a7 	b.w	8007d10 <__swbuf_r>
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	1c58      	adds	r0, r3, #1
 8009bc6:	6010      	str	r0, [r2, #0]
 8009bc8:	7019      	strb	r1, [r3, #0]
 8009bca:	4608      	mov	r0, r1
 8009bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <__sfputs_r>:
 8009bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	18d5      	adds	r5, r2, r3
 8009bdc:	42ac      	cmp	r4, r5
 8009bde:	d101      	bne.n	8009be4 <__sfputs_r+0x12>
 8009be0:	2000      	movs	r0, #0
 8009be2:	e007      	b.n	8009bf4 <__sfputs_r+0x22>
 8009be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be8:	463a      	mov	r2, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffda 	bl	8009ba4 <__sfputc_r>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d1f3      	bne.n	8009bdc <__sfputs_r+0xa>
 8009bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bf8 <_vfiprintf_r>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	b09d      	sub	sp, #116	; 0x74
 8009c00:	4614      	mov	r4, r2
 8009c02:	4698      	mov	r8, r3
 8009c04:	4606      	mov	r6, r0
 8009c06:	b118      	cbz	r0, 8009c10 <_vfiprintf_r+0x18>
 8009c08:	6983      	ldr	r3, [r0, #24]
 8009c0a:	b90b      	cbnz	r3, 8009c10 <_vfiprintf_r+0x18>
 8009c0c:	f7ff f8d4 	bl	8008db8 <__sinit>
 8009c10:	4b89      	ldr	r3, [pc, #548]	; (8009e38 <_vfiprintf_r+0x240>)
 8009c12:	429d      	cmp	r5, r3
 8009c14:	d11b      	bne.n	8009c4e <_vfiprintf_r+0x56>
 8009c16:	6875      	ldr	r5, [r6, #4]
 8009c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c1a:	07d9      	lsls	r1, r3, #31
 8009c1c:	d405      	bmi.n	8009c2a <_vfiprintf_r+0x32>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	059a      	lsls	r2, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_vfiprintf_r+0x32>
 8009c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c26:	f7ff f96a 	bl	8008efe <__retarget_lock_acquire_recursive>
 8009c2a:	89ab      	ldrh	r3, [r5, #12]
 8009c2c:	071b      	lsls	r3, r3, #28
 8009c2e:	d501      	bpl.n	8009c34 <_vfiprintf_r+0x3c>
 8009c30:	692b      	ldr	r3, [r5, #16]
 8009c32:	b9eb      	cbnz	r3, 8009c70 <_vfiprintf_r+0x78>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4630      	mov	r0, r6
 8009c38:	f7fe f8bc 	bl	8007db4 <__swsetup_r>
 8009c3c:	b1c0      	cbz	r0, 8009c70 <_vfiprintf_r+0x78>
 8009c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c40:	07dc      	lsls	r4, r3, #31
 8009c42:	d50e      	bpl.n	8009c62 <_vfiprintf_r+0x6a>
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	b01d      	add	sp, #116	; 0x74
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <_vfiprintf_r+0x244>)
 8009c50:	429d      	cmp	r5, r3
 8009c52:	d101      	bne.n	8009c58 <_vfiprintf_r+0x60>
 8009c54:	68b5      	ldr	r5, [r6, #8]
 8009c56:	e7df      	b.n	8009c18 <_vfiprintf_r+0x20>
 8009c58:	4b79      	ldr	r3, [pc, #484]	; (8009e40 <_vfiprintf_r+0x248>)
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	bf08      	it	eq
 8009c5e:	68f5      	ldreq	r5, [r6, #12]
 8009c60:	e7da      	b.n	8009c18 <_vfiprintf_r+0x20>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	0598      	lsls	r0, r3, #22
 8009c66:	d4ed      	bmi.n	8009c44 <_vfiprintf_r+0x4c>
 8009c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c6a:	f7ff f949 	bl	8008f00 <__retarget_lock_release_recursive>
 8009c6e:	e7e9      	b.n	8009c44 <_vfiprintf_r+0x4c>
 8009c70:	2300      	movs	r3, #0
 8009c72:	9309      	str	r3, [sp, #36]	; 0x24
 8009c74:	2320      	movs	r3, #32
 8009c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c7e:	2330      	movs	r3, #48	; 0x30
 8009c80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e44 <_vfiprintf_r+0x24c>
 8009c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c88:	f04f 0901 	mov.w	r9, #1
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	469a      	mov	sl, r3
 8009c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c94:	b10a      	cbz	r2, 8009c9a <_vfiprintf_r+0xa2>
 8009c96:	2a25      	cmp	r2, #37	; 0x25
 8009c98:	d1f9      	bne.n	8009c8e <_vfiprintf_r+0x96>
 8009c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c9e:	d00b      	beq.n	8009cb8 <_vfiprintf_r+0xc0>
 8009ca0:	465b      	mov	r3, fp
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7ff ff93 	bl	8009bd2 <__sfputs_r>
 8009cac:	3001      	adds	r0, #1
 8009cae:	f000 80aa 	beq.w	8009e06 <_vfiprintf_r+0x20e>
 8009cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb4:	445a      	add	r2, fp
 8009cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80a2 	beq.w	8009e06 <_vfiprintf_r+0x20e>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ccc:	f10a 0a01 	add.w	sl, sl, #1
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	9307      	str	r3, [sp, #28]
 8009cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8009cda:	4654      	mov	r4, sl
 8009cdc:	2205      	movs	r2, #5
 8009cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce2:	4858      	ldr	r0, [pc, #352]	; (8009e44 <_vfiprintf_r+0x24c>)
 8009ce4:	f7f6 fa84 	bl	80001f0 <memchr>
 8009ce8:	9a04      	ldr	r2, [sp, #16]
 8009cea:	b9d8      	cbnz	r0, 8009d24 <_vfiprintf_r+0x12c>
 8009cec:	06d1      	lsls	r1, r2, #27
 8009cee:	bf44      	itt	mi
 8009cf0:	2320      	movmi	r3, #32
 8009cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf6:	0713      	lsls	r3, r2, #28
 8009cf8:	bf44      	itt	mi
 8009cfa:	232b      	movmi	r3, #43	; 0x2b
 8009cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d00:	f89a 3000 	ldrb.w	r3, [sl]
 8009d04:	2b2a      	cmp	r3, #42	; 0x2a
 8009d06:	d015      	beq.n	8009d34 <_vfiprintf_r+0x13c>
 8009d08:	9a07      	ldr	r2, [sp, #28]
 8009d0a:	4654      	mov	r4, sl
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f04f 0c0a 	mov.w	ip, #10
 8009d12:	4621      	mov	r1, r4
 8009d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d18:	3b30      	subs	r3, #48	; 0x30
 8009d1a:	2b09      	cmp	r3, #9
 8009d1c:	d94e      	bls.n	8009dbc <_vfiprintf_r+0x1c4>
 8009d1e:	b1b0      	cbz	r0, 8009d4e <_vfiprintf_r+0x156>
 8009d20:	9207      	str	r2, [sp, #28]
 8009d22:	e014      	b.n	8009d4e <_vfiprintf_r+0x156>
 8009d24:	eba0 0308 	sub.w	r3, r0, r8
 8009d28:	fa09 f303 	lsl.w	r3, r9, r3
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	9304      	str	r3, [sp, #16]
 8009d30:	46a2      	mov	sl, r4
 8009d32:	e7d2      	b.n	8009cda <_vfiprintf_r+0xe2>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	1d19      	adds	r1, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	9103      	str	r1, [sp, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfbb      	ittet	lt
 8009d40:	425b      	neglt	r3, r3
 8009d42:	f042 0202 	orrlt.w	r2, r2, #2
 8009d46:	9307      	strge	r3, [sp, #28]
 8009d48:	9307      	strlt	r3, [sp, #28]
 8009d4a:	bfb8      	it	lt
 8009d4c:	9204      	strlt	r2, [sp, #16]
 8009d4e:	7823      	ldrb	r3, [r4, #0]
 8009d50:	2b2e      	cmp	r3, #46	; 0x2e
 8009d52:	d10c      	bne.n	8009d6e <_vfiprintf_r+0x176>
 8009d54:	7863      	ldrb	r3, [r4, #1]
 8009d56:	2b2a      	cmp	r3, #42	; 0x2a
 8009d58:	d135      	bne.n	8009dc6 <_vfiprintf_r+0x1ce>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	1d1a      	adds	r2, r3, #4
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	9203      	str	r2, [sp, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bfb8      	it	lt
 8009d66:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d6a:	3402      	adds	r4, #2
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e54 <_vfiprintf_r+0x25c>
 8009d72:	7821      	ldrb	r1, [r4, #0]
 8009d74:	2203      	movs	r2, #3
 8009d76:	4650      	mov	r0, sl
 8009d78:	f7f6 fa3a 	bl	80001f0 <memchr>
 8009d7c:	b140      	cbz	r0, 8009d90 <_vfiprintf_r+0x198>
 8009d7e:	2340      	movs	r3, #64	; 0x40
 8009d80:	eba0 000a 	sub.w	r0, r0, sl
 8009d84:	fa03 f000 	lsl.w	r0, r3, r0
 8009d88:	9b04      	ldr	r3, [sp, #16]
 8009d8a:	4303      	orrs	r3, r0
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d94:	482c      	ldr	r0, [pc, #176]	; (8009e48 <_vfiprintf_r+0x250>)
 8009d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d9a:	2206      	movs	r2, #6
 8009d9c:	f7f6 fa28 	bl	80001f0 <memchr>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d03f      	beq.n	8009e24 <_vfiprintf_r+0x22c>
 8009da4:	4b29      	ldr	r3, [pc, #164]	; (8009e4c <_vfiprintf_r+0x254>)
 8009da6:	bb1b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x1f8>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	3307      	adds	r3, #7
 8009dac:	f023 0307 	bic.w	r3, r3, #7
 8009db0:	3308      	adds	r3, #8
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db6:	443b      	add	r3, r7
 8009db8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dba:	e767      	b.n	8009c8c <_vfiprintf_r+0x94>
 8009dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7a5      	b.n	8009d12 <_vfiprintf_r+0x11a>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	3401      	adds	r4, #1
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f04f 0c0a 	mov.w	ip, #10
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd8:	3a30      	subs	r2, #48	; 0x30
 8009dda:	2a09      	cmp	r2, #9
 8009ddc:	d903      	bls.n	8009de6 <_vfiprintf_r+0x1ee>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0c5      	beq.n	8009d6e <_vfiprintf_r+0x176>
 8009de2:	9105      	str	r1, [sp, #20]
 8009de4:	e7c3      	b.n	8009d6e <_vfiprintf_r+0x176>
 8009de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dea:	4604      	mov	r4, r0
 8009dec:	2301      	movs	r3, #1
 8009dee:	e7f0      	b.n	8009dd2 <_vfiprintf_r+0x1da>
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4b16      	ldr	r3, [pc, #88]	; (8009e50 <_vfiprintf_r+0x258>)
 8009df8:	a904      	add	r1, sp, #16
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7fd fafa 	bl	80073f4 <_printf_float>
 8009e00:	4607      	mov	r7, r0
 8009e02:	1c78      	adds	r0, r7, #1
 8009e04:	d1d6      	bne.n	8009db4 <_vfiprintf_r+0x1bc>
 8009e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e08:	07d9      	lsls	r1, r3, #31
 8009e0a:	d405      	bmi.n	8009e18 <_vfiprintf_r+0x220>
 8009e0c:	89ab      	ldrh	r3, [r5, #12]
 8009e0e:	059a      	lsls	r2, r3, #22
 8009e10:	d402      	bmi.n	8009e18 <_vfiprintf_r+0x220>
 8009e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e14:	f7ff f874 	bl	8008f00 <__retarget_lock_release_recursive>
 8009e18:	89ab      	ldrh	r3, [r5, #12]
 8009e1a:	065b      	lsls	r3, r3, #25
 8009e1c:	f53f af12 	bmi.w	8009c44 <_vfiprintf_r+0x4c>
 8009e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e22:	e711      	b.n	8009c48 <_vfiprintf_r+0x50>
 8009e24:	ab03      	add	r3, sp, #12
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <_vfiprintf_r+0x258>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7fd fd84 	bl	800793c <_printf_i>
 8009e34:	e7e4      	b.n	8009e00 <_vfiprintf_r+0x208>
 8009e36:	bf00      	nop
 8009e38:	0800a6d8 	.word	0x0800a6d8
 8009e3c:	0800a6f8 	.word	0x0800a6f8
 8009e40:	0800a6b8 	.word	0x0800a6b8
 8009e44:	0800a874 	.word	0x0800a874
 8009e48:	0800a87e 	.word	0x0800a87e
 8009e4c:	080073f5 	.word	0x080073f5
 8009e50:	08009bd3 	.word	0x08009bd3
 8009e54:	0800a87a 	.word	0x0800a87a

08009e58 <_putc_r>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	4606      	mov	r6, r0
 8009e60:	b118      	cbz	r0, 8009e6a <_putc_r+0x12>
 8009e62:	6983      	ldr	r3, [r0, #24]
 8009e64:	b90b      	cbnz	r3, 8009e6a <_putc_r+0x12>
 8009e66:	f7fe ffa7 	bl	8008db8 <__sinit>
 8009e6a:	4b1c      	ldr	r3, [pc, #112]	; (8009edc <_putc_r+0x84>)
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	d124      	bne.n	8009eba <_putc_r+0x62>
 8009e70:	6874      	ldr	r4, [r6, #4]
 8009e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e74:	07d8      	lsls	r0, r3, #31
 8009e76:	d405      	bmi.n	8009e84 <_putc_r+0x2c>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	0599      	lsls	r1, r3, #22
 8009e7c:	d402      	bmi.n	8009e84 <_putc_r+0x2c>
 8009e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e80:	f7ff f83d 	bl	8008efe <__retarget_lock_acquire_recursive>
 8009e84:	68a3      	ldr	r3, [r4, #8]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	da05      	bge.n	8009e9a <_putc_r+0x42>
 8009e8e:	69a2      	ldr	r2, [r4, #24]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	db1c      	blt.n	8009ece <_putc_r+0x76>
 8009e94:	b2eb      	uxtb	r3, r5
 8009e96:	2b0a      	cmp	r3, #10
 8009e98:	d019      	beq.n	8009ece <_putc_r+0x76>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	6022      	str	r2, [r4, #0]
 8009ea0:	701d      	strb	r5, [r3, #0]
 8009ea2:	b2ed      	uxtb	r5, r5
 8009ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ea6:	07da      	lsls	r2, r3, #31
 8009ea8:	d405      	bmi.n	8009eb6 <_putc_r+0x5e>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	059b      	lsls	r3, r3, #22
 8009eae:	d402      	bmi.n	8009eb6 <_putc_r+0x5e>
 8009eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb2:	f7ff f825 	bl	8008f00 <__retarget_lock_release_recursive>
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	bd70      	pop	{r4, r5, r6, pc}
 8009eba:	4b09      	ldr	r3, [pc, #36]	; (8009ee0 <_putc_r+0x88>)
 8009ebc:	429c      	cmp	r4, r3
 8009ebe:	d101      	bne.n	8009ec4 <_putc_r+0x6c>
 8009ec0:	68b4      	ldr	r4, [r6, #8]
 8009ec2:	e7d6      	b.n	8009e72 <_putc_r+0x1a>
 8009ec4:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <_putc_r+0x8c>)
 8009ec6:	429c      	cmp	r4, r3
 8009ec8:	bf08      	it	eq
 8009eca:	68f4      	ldreq	r4, [r6, #12]
 8009ecc:	e7d1      	b.n	8009e72 <_putc_r+0x1a>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7fd ff1c 	bl	8007d10 <__swbuf_r>
 8009ed8:	4605      	mov	r5, r0
 8009eda:	e7e3      	b.n	8009ea4 <_putc_r+0x4c>
 8009edc:	0800a6d8 	.word	0x0800a6d8
 8009ee0:	0800a6f8 	.word	0x0800a6f8
 8009ee4:	0800a6b8 	.word	0x0800a6b8

08009ee8 <_sbrk_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_sbrk_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f9 fdea 	bl	8003acc <_sbrk>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_sbrk_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_sbrk_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000410 	.word	0x20000410

08009f08 <__sread>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f10:	f000 f92c 	bl	800a16c <_read_r>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	bfab      	itete	ge
 8009f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f1c:	181b      	addge	r3, r3, r0
 8009f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f22:	bfac      	ite	ge
 8009f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f26:	81a3      	strhlt	r3, [r4, #12]
 8009f28:	bd10      	pop	{r4, pc}

08009f2a <__swrite>:
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	461f      	mov	r7, r3
 8009f30:	898b      	ldrh	r3, [r1, #12]
 8009f32:	05db      	lsls	r3, r3, #23
 8009f34:	4605      	mov	r5, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4616      	mov	r6, r2
 8009f3a:	d505      	bpl.n	8009f48 <__swrite+0x1e>
 8009f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f40:	2302      	movs	r3, #2
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 f898 	bl	800a078 <_lseek_r>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	4632      	mov	r2, r6
 8009f56:	463b      	mov	r3, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5e:	f000 b817 	b.w	8009f90 <_write_r>

08009f62 <__sseek>:
 8009f62:	b510      	push	{r4, lr}
 8009f64:	460c      	mov	r4, r1
 8009f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6a:	f000 f885 	bl	800a078 <_lseek_r>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	bf15      	itete	ne
 8009f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strheq	r3, [r4, #12]
 8009f80:	bf18      	it	ne
 8009f82:	81a3      	strhne	r3, [r4, #12]
 8009f84:	bd10      	pop	{r4, pc}

08009f86 <__sclose>:
 8009f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f8a:	f000 b831 	b.w	8009ff0 <_close_r>
	...

08009f90 <_write_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4d07      	ldr	r5, [pc, #28]	; (8009fb0 <_write_r+0x20>)
 8009f94:	4604      	mov	r4, r0
 8009f96:	4608      	mov	r0, r1
 8009f98:	4611      	mov	r1, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	602a      	str	r2, [r5, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f7f9 fd43 	bl	8003a2a <_write>
 8009fa4:	1c43      	adds	r3, r0, #1
 8009fa6:	d102      	bne.n	8009fae <_write_r+0x1e>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	b103      	cbz	r3, 8009fae <_write_r+0x1e>
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	bd38      	pop	{r3, r4, r5, pc}
 8009fb0:	20000410 	.word	0x20000410

08009fb4 <__assert_func>:
 8009fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <__assert_func+0x2c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	68d8      	ldr	r0, [r3, #12]
 8009fc2:	b14c      	cbz	r4, 8009fd8 <__assert_func+0x24>
 8009fc4:	4b07      	ldr	r3, [pc, #28]	; (8009fe4 <__assert_func+0x30>)
 8009fc6:	9100      	str	r1, [sp, #0]
 8009fc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fcc:	4906      	ldr	r1, [pc, #24]	; (8009fe8 <__assert_func+0x34>)
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f000 f81e 	bl	800a010 <fiprintf>
 8009fd4:	f000 f8e9 	bl	800a1aa <abort>
 8009fd8:	4b04      	ldr	r3, [pc, #16]	; (8009fec <__assert_func+0x38>)
 8009fda:	461c      	mov	r4, r3
 8009fdc:	e7f3      	b.n	8009fc6 <__assert_func+0x12>
 8009fde:	bf00      	nop
 8009fe0:	20000014 	.word	0x20000014
 8009fe4:	0800a885 	.word	0x0800a885
 8009fe8:	0800a892 	.word	0x0800a892
 8009fec:	0800a8c0 	.word	0x0800a8c0

08009ff0 <_close_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	; (800a00c <_close_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f9 fd31 	bl	8003a62 <_close>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_close_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_close_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20000410 	.word	0x20000410

0800a010 <fiprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	b503      	push	{r0, r1, lr}
 800a014:	4601      	mov	r1, r0
 800a016:	ab03      	add	r3, sp, #12
 800a018:	4805      	ldr	r0, [pc, #20]	; (800a030 <fiprintf+0x20>)
 800a01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f7ff fde9 	bl	8009bf8 <_vfiprintf_r>
 800a026:	b002      	add	sp, #8
 800a028:	f85d eb04 	ldr.w	lr, [sp], #4
 800a02c:	b003      	add	sp, #12
 800a02e:	4770      	bx	lr
 800a030:	20000014 	.word	0x20000014

0800a034 <_fstat_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4d07      	ldr	r5, [pc, #28]	; (800a054 <_fstat_r+0x20>)
 800a038:	2300      	movs	r3, #0
 800a03a:	4604      	mov	r4, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	4611      	mov	r1, r2
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	f7f9 fd1a 	bl	8003a7a <_fstat>
 800a046:	1c43      	adds	r3, r0, #1
 800a048:	d102      	bne.n	800a050 <_fstat_r+0x1c>
 800a04a:	682b      	ldr	r3, [r5, #0]
 800a04c:	b103      	cbz	r3, 800a050 <_fstat_r+0x1c>
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	bd38      	pop	{r3, r4, r5, pc}
 800a052:	bf00      	nop
 800a054:	20000410 	.word	0x20000410

0800a058 <_isatty_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4d06      	ldr	r5, [pc, #24]	; (800a074 <_isatty_r+0x1c>)
 800a05c:	2300      	movs	r3, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	4608      	mov	r0, r1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	f7f9 fd19 	bl	8003a9a <_isatty>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	d102      	bne.n	800a072 <_isatty_r+0x1a>
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	b103      	cbz	r3, 800a072 <_isatty_r+0x1a>
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	bd38      	pop	{r3, r4, r5, pc}
 800a074:	20000410 	.word	0x20000410

0800a078 <_lseek_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	4d07      	ldr	r5, [pc, #28]	; (800a098 <_lseek_r+0x20>)
 800a07c:	4604      	mov	r4, r0
 800a07e:	4608      	mov	r0, r1
 800a080:	4611      	mov	r1, r2
 800a082:	2200      	movs	r2, #0
 800a084:	602a      	str	r2, [r5, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	f7f9 fd12 	bl	8003ab0 <_lseek>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_lseek_r+0x1e>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_lseek_r+0x1e>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20000410 	.word	0x20000410

0800a09c <__ascii_mbtowc>:
 800a09c:	b082      	sub	sp, #8
 800a09e:	b901      	cbnz	r1, 800a0a2 <__ascii_mbtowc+0x6>
 800a0a0:	a901      	add	r1, sp, #4
 800a0a2:	b142      	cbz	r2, 800a0b6 <__ascii_mbtowc+0x1a>
 800a0a4:	b14b      	cbz	r3, 800a0ba <__ascii_mbtowc+0x1e>
 800a0a6:	7813      	ldrb	r3, [r2, #0]
 800a0a8:	600b      	str	r3, [r1, #0]
 800a0aa:	7812      	ldrb	r2, [r2, #0]
 800a0ac:	1e10      	subs	r0, r2, #0
 800a0ae:	bf18      	it	ne
 800a0b0:	2001      	movne	r0, #1
 800a0b2:	b002      	add	sp, #8
 800a0b4:	4770      	bx	lr
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	e7fb      	b.n	800a0b2 <__ascii_mbtowc+0x16>
 800a0ba:	f06f 0001 	mvn.w	r0, #1
 800a0be:	e7f8      	b.n	800a0b2 <__ascii_mbtowc+0x16>

0800a0c0 <memmove>:
 800a0c0:	4288      	cmp	r0, r1
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	eb01 0402 	add.w	r4, r1, r2
 800a0c8:	d902      	bls.n	800a0d0 <memmove+0x10>
 800a0ca:	4284      	cmp	r4, r0
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	d807      	bhi.n	800a0e0 <memmove+0x20>
 800a0d0:	1e43      	subs	r3, r0, #1
 800a0d2:	42a1      	cmp	r1, r4
 800a0d4:	d008      	beq.n	800a0e8 <memmove+0x28>
 800a0d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0de:	e7f8      	b.n	800a0d2 <memmove+0x12>
 800a0e0:	4402      	add	r2, r0
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	428a      	cmp	r2, r1
 800a0e6:	d100      	bne.n	800a0ea <memmove+0x2a>
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0f2:	e7f7      	b.n	800a0e4 <memmove+0x24>

0800a0f4 <__malloc_lock>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__malloc_lock+0x8>)
 800a0f6:	f7fe bf02 	b.w	8008efe <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20000404 	.word	0x20000404

0800a100 <__malloc_unlock>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__malloc_unlock+0x8>)
 800a102:	f7fe befd 	b.w	8008f00 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20000404 	.word	0x20000404

0800a10c <_realloc_r>:
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	4680      	mov	r8, r0
 800a112:	4614      	mov	r4, r2
 800a114:	460e      	mov	r6, r1
 800a116:	b921      	cbnz	r1, 800a122 <_realloc_r+0x16>
 800a118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11c:	4611      	mov	r1, r2
 800a11e:	f7ff bb71 	b.w	8009804 <_malloc_r>
 800a122:	b92a      	cbnz	r2, 800a130 <_realloc_r+0x24>
 800a124:	f7ff fb02 	bl	800972c <_free_r>
 800a128:	4625      	mov	r5, r4
 800a12a:	4628      	mov	r0, r5
 800a12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a130:	f000 f842 	bl	800a1b8 <_malloc_usable_size_r>
 800a134:	4284      	cmp	r4, r0
 800a136:	4607      	mov	r7, r0
 800a138:	d802      	bhi.n	800a140 <_realloc_r+0x34>
 800a13a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a13e:	d812      	bhi.n	800a166 <_realloc_r+0x5a>
 800a140:	4621      	mov	r1, r4
 800a142:	4640      	mov	r0, r8
 800a144:	f7ff fb5e 	bl	8009804 <_malloc_r>
 800a148:	4605      	mov	r5, r0
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d0ed      	beq.n	800a12a <_realloc_r+0x1e>
 800a14e:	42bc      	cmp	r4, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4631      	mov	r1, r6
 800a154:	bf28      	it	cs
 800a156:	463a      	movcs	r2, r7
 800a158:	f7fe ff40 	bl	8008fdc <memcpy>
 800a15c:	4631      	mov	r1, r6
 800a15e:	4640      	mov	r0, r8
 800a160:	f7ff fae4 	bl	800972c <_free_r>
 800a164:	e7e1      	b.n	800a12a <_realloc_r+0x1e>
 800a166:	4635      	mov	r5, r6
 800a168:	e7df      	b.n	800a12a <_realloc_r+0x1e>
	...

0800a16c <_read_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	; (800a18c <_read_r+0x20>)
 800a170:	4604      	mov	r4, r0
 800a172:	4608      	mov	r0, r1
 800a174:	4611      	mov	r1, r2
 800a176:	2200      	movs	r2, #0
 800a178:	602a      	str	r2, [r5, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7f9 fc38 	bl	80039f0 <_read>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_read_r+0x1e>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_read_r+0x1e>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20000410 	.word	0x20000410

0800a190 <__ascii_wctomb>:
 800a190:	b149      	cbz	r1, 800a1a6 <__ascii_wctomb+0x16>
 800a192:	2aff      	cmp	r2, #255	; 0xff
 800a194:	bf85      	ittet	hi
 800a196:	238a      	movhi	r3, #138	; 0x8a
 800a198:	6003      	strhi	r3, [r0, #0]
 800a19a:	700a      	strbls	r2, [r1, #0]
 800a19c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1a0:	bf98      	it	ls
 800a1a2:	2001      	movls	r0, #1
 800a1a4:	4770      	bx	lr
 800a1a6:	4608      	mov	r0, r1
 800a1a8:	4770      	bx	lr

0800a1aa <abort>:
 800a1aa:	b508      	push	{r3, lr}
 800a1ac:	2006      	movs	r0, #6
 800a1ae:	f000 f833 	bl	800a218 <raise>
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	f7f9 fc12 	bl	80039dc <_exit>

0800a1b8 <_malloc_usable_size_r>:
 800a1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1bc:	1f18      	subs	r0, r3, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfbc      	itt	lt
 800a1c2:	580b      	ldrlt	r3, [r1, r0]
 800a1c4:	18c0      	addlt	r0, r0, r3
 800a1c6:	4770      	bx	lr

0800a1c8 <_raise_r>:
 800a1c8:	291f      	cmp	r1, #31
 800a1ca:	b538      	push	{r3, r4, r5, lr}
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	d904      	bls.n	800a1dc <_raise_r+0x14>
 800a1d2:	2316      	movs	r3, #22
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1de:	b112      	cbz	r2, 800a1e6 <_raise_r+0x1e>
 800a1e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1e4:	b94b      	cbnz	r3, 800a1fa <_raise_r+0x32>
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f000 f830 	bl	800a24c <_getpid_r>
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f6:	f000 b817 	b.w	800a228 <_kill_r>
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d00a      	beq.n	800a214 <_raise_r+0x4c>
 800a1fe:	1c59      	adds	r1, r3, #1
 800a200:	d103      	bne.n	800a20a <_raise_r+0x42>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	2001      	movs	r0, #1
 800a208:	e7e7      	b.n	800a1da <_raise_r+0x12>
 800a20a:	2400      	movs	r4, #0
 800a20c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a210:	4628      	mov	r0, r5
 800a212:	4798      	blx	r3
 800a214:	2000      	movs	r0, #0
 800a216:	e7e0      	b.n	800a1da <_raise_r+0x12>

0800a218 <raise>:
 800a218:	4b02      	ldr	r3, [pc, #8]	; (800a224 <raise+0xc>)
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f7ff bfd3 	b.w	800a1c8 <_raise_r>
 800a222:	bf00      	nop
 800a224:	20000014 	.word	0x20000014

0800a228 <_kill_r>:
 800a228:	b538      	push	{r3, r4, r5, lr}
 800a22a:	4d07      	ldr	r5, [pc, #28]	; (800a248 <_kill_r+0x20>)
 800a22c:	2300      	movs	r3, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	4608      	mov	r0, r1
 800a232:	4611      	mov	r1, r2
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	f7f9 fbc1 	bl	80039bc <_kill>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	d102      	bne.n	800a244 <_kill_r+0x1c>
 800a23e:	682b      	ldr	r3, [r5, #0]
 800a240:	b103      	cbz	r3, 800a244 <_kill_r+0x1c>
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	20000410 	.word	0x20000410

0800a24c <_getpid_r>:
 800a24c:	f7f9 bbae 	b.w	80039ac <_getpid>

0800a250 <_init>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr

0800a25c <_fini>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr
