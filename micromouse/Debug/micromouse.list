
micromouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b0  080047b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047b4  080047b4  000147b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080047c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080047c4  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b479  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227f  00000000  00000000  0002b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165e4  00000000  00000000  0002ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edd4  00000000  00000000  0004530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f7c  00000000  00000000  000540e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e00  00000000  00000000  000dc0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004780 	.word	0x08004780

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004780 	.word	0x08004780

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <turn_LEDs_all>:
#include "LED.h"

void turn_LEDs_all(LED_state state)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
	LED_color color_first = Red;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
	LED_color color_last = Yellow;
 8000d26:	2303      	movs	r3, #3
 8000d28:	72bb      	strb	r3, [r7, #10]

	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000d2a:	7afb      	ldrb	r3, [r7, #11]
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e009      	b.n	8000d44 <turn_LEDs_all+0x2c>
	{
		turn_LED(led_col, state);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f80c 	bl	8000d56 <turn_LED>
	for(int led_col = color_first; led_col <= color_last; ++led_col)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	7abb      	ldrb	r3, [r7, #10]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	ddf1      	ble.n	8000d30 <turn_LEDs_all+0x18>
	}  // for()
}  // turn_LEDs_all(LED_state state)
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <turn_LED>:

void turn_LED(LED_color col, LED_state state)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	460a      	mov	r2, r1
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	4613      	mov	r3, r2
 8000d64:	71bb      	strb	r3, [r7, #6]
	switch(state)
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <turn_LED+0x1c>
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <turn_LED+0x26>
 8000d70:	e008      	b.n	8000d84 <turn_LED+0x2e>
	{
	case Off:
		turn_off_LED_color(col);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f809 	bl	8000d8c <turn_off_LED_color>
		return;
 8000d7a:	e003      	b.n	8000d84 <turn_LED+0x2e>
	case On:
		turn_on_LED_color(col);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f824 	bl	8000dcc <turn_on_LED_color>
	}
}  // turn_LED(LED_color col, LED_state state)
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <turn_off_LED_color>:

void turn_off_LED_color(LED_color col)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d811      	bhi.n	8000dc0 <turn_off_LED_color+0x34>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <turn_off_LED_color+0x18>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000dc1 	.word	0x08000dc1
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000dc1 	.word	0x08000dc1
 8000db0:	08000db5 	.word	0x08000db5
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2120      	movs	r1, #32
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <turn_off_LED_color+0x3c>)
 8000dba:	f002 f8bd 	bl	8002f38 <HAL_GPIO_WritePin>
		return;
 8000dbe:	bf00      	nop
	}  // switch(col)
}  // turn_off_LED_color(LED_color col)
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020000 	.word	0x40020000

08000dcc <turn_on_LED_color>:

void turn_on_LED_color(LED_color col)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	// TODO - turn off LED_color
	switch(col)
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d811      	bhi.n	8000e00 <turn_on_LED_color+0x34>
 8000ddc:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <turn_on_LED_color+0x18>)
 8000dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de2:	bf00      	nop
 8000de4:	08000e01 	.word	0x08000e01
 8000de8:	08000e01 	.word	0x08000e01
 8000dec:	08000e01 	.word	0x08000e01
 8000df0:	08000df5 	.word	0x08000df5
	case Blue:
		return;
	case Green:
		return;
	case Yellow:
		HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <turn_on_LED_color+0x3c>)
 8000dfa:	f002 f89d 	bl	8002f38 <HAL_GPIO_WritePin>
		return;
 8000dfe:	bf00      	nop
	}  // switch(col)
}  // turn_on_LED_color(LED_color col)
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40020000 	.word	0x40020000

08000e0c <determine_algorithm>:
#include "algorithm.h"

uint8_t determine_algorithm()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	// TODO - fix once begin implementing different algorithms

	uint8_t determined_algorithm = is_switch_on();
 8000e12:	f001 fcb1 	bl	8002778 <is_switch_on>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	determined_algorithm = Test_Algo;  // TODO - Remove when not testing
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	71fb      	strb	r3, [r7, #7]

	switch(determined_algorithm)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d00a      	beq.n	8000e3a <determine_algorithm+0x2e>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc0a      	bgt.n	8000e3e <determine_algorithm+0x32>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d002      	beq.n	8000e32 <determine_algorithm+0x26>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d002      	beq.n	8000e36 <determine_algorithm+0x2a>
 8000e30:	e005      	b.n	8000e3e <determine_algorithm+0x32>
	{
	case 0:
		return Hug_Left_Algo;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e004      	b.n	8000e40 <determine_algorithm+0x34>
	case 1:
		return Flood_Fill_Algo;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e002      	b.n	8000e40 <determine_algorithm+0x34>
	case 2:
		return Test_Algo;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e000      	b.n	8000e40 <determine_algorithm+0x34>
	}  // switch()

	return -1;
 8000e3e:	23ff      	movs	r3, #255	; 0xff
}  // determine_algorithm()
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <do_search_algorithm>:

void do_search_algorithm(algorithm_type algo)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	//  Turn Blue LED on to indicate searching for a path.
	turn_LEDs_all(Off);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff ff60 	bl	8000d18 <turn_LEDs_all>
	turn_LED(Red, On);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ff7b 	bl	8000d56 <turn_LED>
	turn_LED(Blue, On);
 8000e60:	2101      	movs	r1, #1
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff ff77 	bl	8000d56 <turn_LED>

	switch(algo)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d00c      	beq.n	8000e88 <do_search_algorithm+0x40>
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	dc0c      	bgt.n	8000e8c <do_search_algorithm+0x44>
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <do_search_algorithm+0x34>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d003      	beq.n	8000e82 <do_search_algorithm+0x3a>
 8000e7a:	e007      	b.n	8000e8c <do_search_algorithm+0x44>
	{
	case Hug_Left_Algo:
		do_hug_left_algorithm();
 8000e7c:	f000 ff2e 	bl	8001cdc <do_hug_left_algorithm>
		return;
 8000e80:	e004      	b.n	8000e8c <do_search_algorithm+0x44>
	case Flood_Fill_Algo:
		do_flood_fill_algorithm();
 8000e82:	f000 f815 	bl	8000eb0 <do_flood_fill_algorithm>
		return; // TODO
 8000e86:	e001      	b.n	8000e8c <do_search_algorithm+0x44>
	case Test_Algo:
		do_test_algorithm();
 8000e88:	f001 fca6 	bl	80027d8 <do_test_algorithm>
	}  // switch(algo)
}  // do_search_algorithm(algorithm_type algo)
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <complete_search_algorithm>:

void complete_search_algorithm()
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
	//  Turn Green LED to indicate when done searching for a path or solving a maze
	turn_LEDs_all(Off);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff ff3e 	bl	8000d18 <turn_LEDs_all>
	turn_LED(Red, On);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff ff59 	bl	8000d56 <turn_LED>
	turn_LED(Green, On);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff ff55 	bl	8000d56 <turn_LED>
}  // complete_search_algorithm()
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <do_flood_fill_algorithm>:
#include "flood_fill.h"

void do_flood_fill_algorithm()
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000eb6:	af00      	add	r7, sp, #0
	// Initialize the maze
	flood_fill_maze maze;

	for (uint8_t i = 0; i < 16; ++i)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 8000ebe:	e154      	b.n	800116a <do_flood_fill_algorithm+0x2ba>
	{
		for (uint8_t j = 0; j < 16; ++j)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 8000ec6:	e146      	b.n	8001156 <do_flood_fill_algorithm+0x2a6>
		{
			// Initialize distance grid
			if(i <= 7 && j <= 7) maze.distance_grid[i][j] = ((7 - i) + (7 - j));
 8000ec8:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000ecc:	2b07      	cmp	r3, #7
 8000ece:	d81c      	bhi.n	8000f0a <do_flood_fill_algorithm+0x5a>
 8000ed0:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d818      	bhi.n	8000f0a <do_flood_fill_algorithm+0x5a>
 8000ed8:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000edc:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b2d9      	uxtb	r1, r3
 8000ee4:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000ee8:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000eec:	f1c1 010e 	rsb	r1, r1, #14
 8000ef0:	b2c8      	uxtb	r0, r1
 8000ef2:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000ef6:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	440a      	add	r2, r1
 8000efe:	4413      	add	r3, r2
 8000f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f04:	4602      	mov	r2, r0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e05e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i <= 7 && j > 7) maze.distance_grid[i][j] = ((7 - i) + (j - 8));
 8000f0a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	d81b      	bhi.n	8000f4a <do_flood_fill_algorithm+0x9a>
 8000f12:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d917      	bls.n	8000f4a <do_flood_fill_algorithm+0x9a>
 8000f1a:	f897 2816 	ldrb.w	r2, [r7, #2070]	; 0x816
 8000f1e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f2a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f2e:	3901      	subs	r1, #1
 8000f30:	b2c8      	uxtb	r0, r1
 8000f32:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000f36:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	440a      	add	r2, r1
 8000f3e:	4413      	add	r3, r2
 8000f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f44:	4602      	mov	r2, r0
 8000f46:	701a      	strb	r2, [r3, #0]
 8000f48:	e03e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j <= 7) maze.distance_grid[i][j] = ((i - 8) + (7 - j));
 8000f4a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d91b      	bls.n	8000f8a <do_flood_fill_algorithm+0xda>
 8000f52:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	d817      	bhi.n	8000f8a <do_flood_fill_algorithm+0xda>
 8000f5a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f5e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	b2d9      	uxtb	r1, r3
 8000f66:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f6a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f6e:	3901      	subs	r1, #1
 8000f70:	b2c8      	uxtb	r0, r1
 8000f72:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000f76:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	440a      	add	r2, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f84:	4602      	mov	r2, r0
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e01e      	b.n	8000fc8 <do_flood_fill_algorithm+0x118>
			else if(i > 7 && j > 7) maze.distance_grid[i][j] = ((i - 8) + (j - 8));
 8000f8a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d91a      	bls.n	8000fc8 <do_flood_fill_algorithm+0x118>
 8000f92:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d916      	bls.n	8000fc8 <do_flood_fill_algorithm+0x118>
 8000f9a:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000f9e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b2d9      	uxtb	r1, r3
 8000fa6:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000faa:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fae:	3910      	subs	r1, #16
 8000fb0:	b2c8      	uxtb	r0, r1
 8000fb2:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8000fb6:	f5a1 61c1 	sub.w	r1, r1, #1544	; 0x608
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	440a      	add	r2, r1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	701a      	strb	r2, [r3, #0]

			// Initialize cell grid - assume no walls unless border by default
			maze.cell_grid[i][j].walls[North] = No_Wall_Here;
 8000fc8:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8000fcc:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000fd0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8000fd4:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8000fd8:	461a      	mov	r2, r3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	441a      	add	r2, r3
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4403      	add	r3, r0
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[East] = No_Wall_Here;
 8000fee:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8000ff2:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8000ff6:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8000ffa:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8000ffe:	461a      	mov	r2, r3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	441a      	add	r2, r3
 8001004:	460b      	mov	r3, r1
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	4403      	add	r3, r0
 8001010:	3301      	adds	r3, #1
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[South] = No_Wall_Here;
 8001016:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800101a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800101e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001022:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001026:	461a      	mov	r2, r3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	441a      	add	r2, r3
 800102c:	460b      	mov	r3, r1
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	4413      	add	r3, r2
 8001036:	4403      	add	r3, r0
 8001038:	3302      	adds	r3, #2
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].walls[West] = No_Wall_Here;
 800103e:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 8001042:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001046:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800104a:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 800104e:	461a      	mov	r2, r3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	441a      	add	r2, r3
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	4403      	add	r3, r0
 8001060:	3303      	adds	r3, #3
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
			maze.cell_grid[i][j].visited = Is_Not_Visited;
 8001066:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800106a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800106e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001072:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001076:	461a      	mov	r2, r3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	441a      	add	r2, r3
 800107c:	460b      	mov	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	4413      	add	r3, r2
 8001086:	4403      	add	r3, r0
 8001088:	3304      	adds	r3, #4
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

			if(i == 0) maze.cell_grid[i][j].walls[West] = Wall_Here;
 800108e:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001092:	2b00      	cmp	r3, #0
 8001094:	d113      	bne.n	80010be <do_flood_fill_algorithm+0x20e>
 8001096:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800109a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800109e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80010a2:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80010a6:	461a      	mov	r2, r3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	441a      	add	r2, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4413      	add	r3, r2
 80010b6:	4403      	add	r3, r0
 80010b8:	3303      	adds	r3, #3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
			if(j == 0) maze.cell_grid[i][j].walls[South] = Wall_Here;
 80010be:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d113      	bne.n	80010ee <do_flood_fill_algorithm+0x23e>
 80010c6:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80010ca:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010ce:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80010d2:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 80010d6:	461a      	mov	r2, r3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	441a      	add	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	011b      	lsls	r3, r3, #4
 80010e4:	4413      	add	r3, r2
 80010e6:	4403      	add	r3, r0
 80010e8:	3302      	adds	r3, #2
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
			if(i == 15) maze.cell_grid[i][j].walls[East] = Wall_Here;
 80010ee:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d113      	bne.n	800111e <do_flood_fill_algorithm+0x26e>
 80010f6:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 80010fa:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 80010fe:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001102:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001106:	461a      	mov	r2, r3
 8001108:	0092      	lsls	r2, r2, #2
 800110a:	441a      	add	r2, r3
 800110c:	460b      	mov	r3, r1
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	4403      	add	r3, r0
 8001118:	3301      	adds	r3, #1
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
			if(j == 15) maze.cell_grid[i][j].walls[North] = Wall_Here;
 800111e:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d112      	bne.n	800114c <do_flood_fill_algorithm+0x29c>
 8001126:	f897 1817 	ldrb.w	r1, [r7, #2071]	; 0x817
 800112a:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800112e:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001132:	f5a2 60c1 	sub.w	r0, r2, #1544	; 0x608
 8001136:	461a      	mov	r2, r3
 8001138:	0092      	lsls	r2, r2, #2
 800113a:	441a      	add	r2, r3
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	4403      	add	r3, r0
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 16; ++j)
 800114c:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 8001150:	3301      	adds	r3, #1
 8001152:	f887 3816 	strb.w	r3, [r7, #2070]	; 0x816
 8001156:	f897 3816 	ldrb.w	r3, [r7, #2070]	; 0x816
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f aeb4 	bls.w	8000ec8 <do_flood_fill_algorithm+0x18>
	for (uint8_t i = 0; i < 16; ++i)
 8001160:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 8001164:	3301      	adds	r3, #1
 8001166:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
 800116a:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea6 	bls.w	8000ec0 <do_flood_fill_algorithm+0x10>
		}  // for (uint8_t j = 0; j < 16; ++j)
	}  // for (uint8_t i = 0; i < 16; ++i)

	// Do flood fill algorithm

	maze_direction desired_direction = North;  // the direction that we want to move in next
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
	maze_direction direction = desired_direction;  // the direction we're currently facing
 800117a:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 800117e:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	coordinate next_coordinate;
	init_coordinate(&next_coordinate, 0, 0);
 8001182:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd92 	bl	8001cb4 <init_coordinate>

	coordinate c = next_coordinate;  // c is the coordinate that we want to be in
 8001190:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001194:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001198:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800119c:	f2a2 620c 	subw	r2, r2, #1548	; 0x60c
 80011a0:	8812      	ldrh	r2, [r2, #0]
 80011a2:	801a      	strh	r2, [r3, #0]

	stack stack;

	while(1)
	{
		switch(direction)
 80011a4:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d841      	bhi.n	8001230 <do_flood_fill_algorithm+0x380>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <do_flood_fill_algorithm+0x304>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c9 	.word	0x080011c9
 80011b8:	080011e3 	.word	0x080011e3
 80011bc:	080011fd 	.word	0x080011fd
 80011c0:	08001217 	.word	0x08001217
 80011c4:	08001231 	.word	0x08001231
		{
		case North:
			c.y += 1;
 80011c8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011cc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011da:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011de:	705a      	strb	r2, [r3, #1]
			break;
 80011e0:	e026      	b.n	8001230 <do_flood_fill_algorithm+0x380>
		case East:
			c.x += 1;
 80011e2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011e6:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011f4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80011f8:	701a      	strb	r2, [r3, #0]
			break;
 80011fa:	e019      	b.n	8001230 <do_flood_fill_algorithm+0x380>
		case South:
			c.y -= 1;
 80011fc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001200:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	3b01      	subs	r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800120e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001212:	705a      	strb	r2, [r3, #1]
			break;
 8001214:	e00c      	b.n	8001230 <do_flood_fill_algorithm+0x380>
		case West:
			c.x -= 1;
 8001216:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800121a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3b01      	subs	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001228:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800122c:	701a      	strb	r2, [r3, #0]
			break;
 800122e:	bf00      	nop
		case Unknown:
			break;
		}  // switch(direction)

		// Go forward one cell
		go_forward_one_unit();
 8001230:	f001 f88e 	bl	8002350 <go_forward_one_unit>
		// visiting_coord should now be the coordinate that we're on.

		if(!maze.cell_grid[c.x][c.y].visited)
 8001234:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001238:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001244:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	461c      	mov	r4, r3
 800124c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001250:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 8001254:	4622      	mov	r2, r4
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	4422      	add	r2, r4
 800125a:	4603      	mov	r3, r0
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4403      	add	r3, r0
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	440b      	add	r3, r1
 8001266:	3304      	adds	r3, #4
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 82a1 	bne.w	80017b2 <do_flood_fill_algorithm+0x902>
		{
			if(is_there_wall_on_direction(Left))
 8001270:	2000      	movs	r0, #0
 8001272:	f001 faf3 	bl	800285c <is_there_wall_on_direction>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80cc 	beq.w	8001416 <do_flood_fill_algorithm+0x566>
			{
				maze.cell_grid[c.x][c.y].walls[(direction - 1) % 4] = Wall_Here;
 800127e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001282:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461c      	mov	r4, r3
 800128a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800128e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	461d      	mov	r5, r3
 8001296:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 800129a:	3b01      	subs	r3, #1
 800129c:	425a      	negs	r2, r3
 800129e:	f003 0103 	and.w	r1, r3, #3
 80012a2:	f002 0303 	and.w	r3, r2, #3
 80012a6:	bf58      	it	pl
 80012a8:	4259      	negpl	r1, r3
 80012aa:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80012ae:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80012b2:	462a      	mov	r2, r5
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	442a      	add	r2, r5
 80012b8:	4623      	mov	r3, r4
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4423      	add	r3, r4
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4413      	add	r3, r2
 80012c2:	4403      	add	r3, r0
 80012c4:	440b      	add	r3, r1
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
				switch(direction)
 80012ca:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	f200 8253 	bhi.w	800177a <do_flood_fill_algorithm+0x8ca>
 80012d4:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <do_flood_fill_algorithm+0x42c>)
 80012d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012da:	bf00      	nop
 80012dc:	080012f1 	.word	0x080012f1
 80012e0:	0800133b 	.word	0x0800133b
 80012e4:	08001383 	.word	0x08001383
 80012e8:	080013cd 	.word	0x080013cd
 80012ec:	0800177b 	.word	0x0800177b
				{
				case North:
					if(c.x + 1 < 16) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 80012f0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80012f4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b0e      	cmp	r3, #14
 80012fc:	f200 8224 	bhi.w	8001748 <do_flood_fill_algorithm+0x898>
 8001300:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001304:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	1c59      	adds	r1, r3, #1
 800130c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001310:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	461c      	mov	r4, r3
 8001318:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800131c:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001320:	4622      	mov	r2, r4
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4422      	add	r2, r4
 8001326:	460b      	mov	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	4403      	add	r3, r0
 8001332:	3303      	adds	r3, #3
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
					break;
 8001338:	e206      	b.n	8001748 <do_flood_fill_algorithm+0x898>
				case East:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 800133a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800133e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001342:	785b      	ldrb	r3, [r3, #1]
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 8201 	beq.w	800174c <do_flood_fill_algorithm+0x89c>
 800134a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800134e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800135a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	3b01      	subs	r3, #1
 8001362:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001366:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 800136a:	461a      	mov	r2, r3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	441a      	add	r2, r3
 8001370:	4603      	mov	r3, r0
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4403      	add	r3, r0
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	440b      	add	r3, r1
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
					break;
 8001380:	e1e4      	b.n	800174c <do_flood_fill_algorithm+0x89c>
				case South:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001382:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001386:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 81df 	beq.w	8001750 <do_flood_fill_algorithm+0x8a0>
 8001392:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001396:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	1e59      	subs	r1, r3, #1
 800139e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013a2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013a6:	785b      	ldrb	r3, [r3, #1]
 80013a8:	461c      	mov	r4, r3
 80013aa:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013ae:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80013b2:	4622      	mov	r2, r4
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	4422      	add	r2, r4
 80013b8:	460b      	mov	r3, r1
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	4403      	add	r3, r0
 80013c4:	3301      	adds	r3, #1
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
					break;
 80013ca:	e1c1      	b.n	8001750 <do_flood_fill_algorithm+0x8a0>
				case West:
					if(c.y + 1 < 16) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 80013cc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013d0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013d4:	785b      	ldrb	r3, [r3, #1]
 80013d6:	2b0e      	cmp	r3, #14
 80013d8:	f200 81bc 	bhi.w	8001754 <do_flood_fill_algorithm+0x8a4>
 80013dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013e0:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80013ec:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	3301      	adds	r3, #1
 80013f4:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80013f8:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80013fc:	461a      	mov	r2, r3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	441a      	add	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4403      	add	r3, r0
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4413      	add	r3, r2
 800140c:	440b      	add	r3, r1
 800140e:	3302      	adds	r3, #2
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
					break;
 8001414:	e19e      	b.n	8001754 <do_flood_fill_algorithm+0x8a4>
				case Unknown:
					break;
				}  // switch(direction)
			}  // if(is_there_wall_on_direction(Left))
			else if(is_there_wall_on_direction(Front))
 8001416:	2001      	movs	r0, #1
 8001418:	f001 fa20 	bl	800285c <is_there_wall_on_direction>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80c3 	beq.w	80015aa <do_flood_fill_algorithm+0x6fa>
			{
				maze.cell_grid[c.x][c.y].walls[direction] = Wall_Here;
 8001424:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001428:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461c      	mov	r4, r3
 8001430:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001434:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	461d      	mov	r5, r3
 800143c:	f897 1814 	ldrb.w	r1, [r7, #2068]	; 0x814
 8001440:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001444:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001448:	462a      	mov	r2, r5
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	442a      	add	r2, r5
 800144e:	4623      	mov	r3, r4
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4423      	add	r3, r4
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	4403      	add	r3, r0
 800145a:	440b      	add	r3, r1
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001460:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001464:	2b04      	cmp	r3, #4
 8001466:	f200 8188 	bhi.w	800177a <do_flood_fill_algorithm+0x8ca>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <do_flood_fill_algorithm+0x5c0>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	08001485 	.word	0x08001485
 8001474:	080014cf 	.word	0x080014cf
 8001478:	08001519 	.word	0x08001519
 800147c:	08001561 	.word	0x08001561
 8001480:	0800177b 	.word	0x0800177b
				{
				case North:
					if(c.y + 1 < 16) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 8001484:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001488:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	2b0e      	cmp	r3, #14
 8001490:	f200 8162 	bhi.w	8001758 <do_flood_fill_algorithm+0x8a8>
 8001494:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001498:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014a4:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014a8:	785b      	ldrb	r3, [r3, #1]
 80014aa:	3301      	adds	r3, #1
 80014ac:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80014b0:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80014b4:	461a      	mov	r2, r3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	441a      	add	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4403      	add	r3, r0
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4413      	add	r3, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	3302      	adds	r3, #2
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
					break;
 80014cc:	e144      	b.n	8001758 <do_flood_fill_algorithm+0x8a8>
				case East:
					if(c.x + 1 < 16) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 80014ce:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014d2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b0e      	cmp	r3, #14
 80014da:	f200 813f 	bhi.w	800175c <do_flood_fill_algorithm+0x8ac>
 80014de:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014e2:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	1c59      	adds	r1, r3, #1
 80014ea:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014ee:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	461c      	mov	r4, r3
 80014f6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80014fa:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80014fe:	4622      	mov	r2, r4
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4422      	add	r2, r4
 8001504:	460b      	mov	r3, r1
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4413      	add	r3, r2
 800150e:	4403      	add	r3, r0
 8001510:	3303      	adds	r3, #3
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
					break;
 8001516:	e121      	b.n	800175c <do_flood_fill_algorithm+0x8ac>
				case South:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 8001518:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800151c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 811c 	beq.w	8001760 <do_flood_fill_algorithm+0x8b0>
 8001528:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800152c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001538:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	3b01      	subs	r3, #1
 8001540:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8001544:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001548:	461a      	mov	r2, r3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	441a      	add	r2, r3
 800154e:	4603      	mov	r3, r0
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4403      	add	r3, r0
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	440b      	add	r3, r1
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
					break;
 800155e:	e0ff      	b.n	8001760 <do_flood_fill_algorithm+0x8b0>
				case West:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001560:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001564:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 80fa 	beq.w	8001764 <do_flood_fill_algorithm+0x8b4>
 8001570:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001574:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	1e59      	subs	r1, r3, #1
 800157c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001580:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	461c      	mov	r4, r3
 8001588:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800158c:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001590:	4622      	mov	r2, r4
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4422      	add	r2, r4
 8001596:	460b      	mov	r3, r1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	4413      	add	r3, r2
 80015a0:	4403      	add	r3, r0
 80015a2:	3301      	adds	r3, #1
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
					break;
 80015a8:	e0dc      	b.n	8001764 <do_flood_fill_algorithm+0x8b4>
				case Unknown:
					break;
				}  // switch(direction)

			}  // else if(is_there_wall_on_direction(Front))
			else if(is_there_wall_on_direction(Right))
 80015aa:	2002      	movs	r0, #2
 80015ac:	f001 f956 	bl	800285c <is_there_wall_on_direction>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80d8 	beq.w	8001768 <do_flood_fill_algorithm+0x8b8>
			{
				maze.cell_grid[c.x][c.y].walls[(direction + 1) % 4] = Wall_Here;
 80015b8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015bc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461c      	mov	r4, r3
 80015c4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015c8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	461d      	mov	r5, r3
 80015d0:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 80015d4:	3301      	adds	r3, #1
 80015d6:	425a      	negs	r2, r3
 80015d8:	f003 0103 	and.w	r1, r3, #3
 80015dc:	f002 0303 	and.w	r3, r2, #3
 80015e0:	bf58      	it	pl
 80015e2:	4259      	negpl	r1, r3
 80015e4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80015e8:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80015ec:	462a      	mov	r2, r5
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	442a      	add	r2, r5
 80015f2:	4623      	mov	r3, r4
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4423      	add	r3, r4
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	4413      	add	r3, r2
 80015fc:	4403      	add	r3, r0
 80015fe:	440b      	add	r3, r1
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
				switch(direction)
 8001604:	f897 3814 	ldrb.w	r3, [r7, #2068]	; 0x814
 8001608:	2b04      	cmp	r3, #4
 800160a:	f200 80b6 	bhi.w	800177a <do_flood_fill_algorithm+0x8ca>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <do_flood_fill_algorithm+0x764>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001629 	.word	0x08001629
 8001618:	08001673 	.word	0x08001673
 800161c:	080016bb 	.word	0x080016bb
 8001620:	08001703 	.word	0x08001703
 8001624:	0800177b 	.word	0x0800177b
				{
				case North:
					if(c.x - 1 > -1) maze.cell_grid[c.x - 1][c.y].walls[East] = Wall_Here;
 8001628:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800162c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 809a 	beq.w	800176c <do_flood_fill_algorithm+0x8bc>
 8001638:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800163c:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	1e59      	subs	r1, r3, #1
 8001644:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001648:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800164c:	785b      	ldrb	r3, [r3, #1]
 800164e:	461c      	mov	r4, r3
 8001650:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001654:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 8001658:	4622      	mov	r2, r4
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4422      	add	r2, r4
 800165e:	460b      	mov	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	4403      	add	r3, r0
 800166a:	3301      	adds	r3, #1
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
					break;
 8001670:	e07c      	b.n	800176c <do_flood_fill_algorithm+0x8bc>
				case East:
					if(c.y + 1 < 16) maze.cell_grid[c.x][c.y + 1].walls[South] = Wall_Here;
 8001672:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001676:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	2b0e      	cmp	r3, #14
 800167e:	d877      	bhi.n	8001770 <do_flood_fill_algorithm+0x8c0>
 8001680:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001684:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001690:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	3301      	adds	r3, #1
 8001698:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800169c:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 80016a0:	461a      	mov	r2, r3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	441a      	add	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	4413      	add	r3, r2
 80016b0:	440b      	add	r3, r1
 80016b2:	3302      	adds	r3, #2
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
					break;
 80016b8:	e05a      	b.n	8001770 <do_flood_fill_algorithm+0x8c0>
				case South:
					if(c.x + 1 < 16) maze.cell_grid[c.x + 1][c.y].walls[West] = Wall_Here;
 80016ba:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016be:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b0e      	cmp	r3, #14
 80016c6:	d855      	bhi.n	8001774 <do_flood_fill_algorithm+0x8c4>
 80016c8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016cc:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	1c59      	adds	r1, r3, #1
 80016d4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016d8:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	461c      	mov	r4, r3
 80016e0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016e4:	f5a3 60c1 	sub.w	r0, r3, #1544	; 0x608
 80016e8:	4622      	mov	r2, r4
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	4422      	add	r2, r4
 80016ee:	460b      	mov	r3, r1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	440b      	add	r3, r1
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	4403      	add	r3, r0
 80016fa:	3303      	adds	r3, #3
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
					break;
 8001700:	e038      	b.n	8001774 <do_flood_fill_algorithm+0x8c4>
				case West:
					if(c.y - 1 > -1) maze.cell_grid[c.x][c.y - 1].walls[North] = Wall_Here;
 8001702:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001706:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d033      	beq.n	8001778 <do_flood_fill_algorithm+0x8c8>
 8001710:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001714:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001720:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001724:	785b      	ldrb	r3, [r3, #1]
 8001726:	3b01      	subs	r3, #1
 8001728:	f607 0218 	addw	r2, r7, #2072	; 0x818
 800172c:	f5a2 61c1 	sub.w	r1, r2, #1544	; 0x608
 8001730:	461a      	mov	r2, r3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	441a      	add	r2, r3
 8001736:	4603      	mov	r3, r0
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4403      	add	r3, r0
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	440b      	add	r3, r1
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
					break;
 8001746:	e017      	b.n	8001778 <do_flood_fill_algorithm+0x8c8>
					break;
 8001748:	bf00      	nop
 800174a:	e016      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 800174c:	bf00      	nop
 800174e:	e014      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001750:	bf00      	nop
 8001752:	e012      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001754:	bf00      	nop
 8001756:	e010      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001758:	bf00      	nop
 800175a:	e00e      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 800175c:	bf00      	nop
 800175e:	e00c      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001760:	bf00      	nop
 8001762:	e00a      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001764:	bf00      	nop
 8001766:	e008      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
				case Unknown:
					break;
				}  // switch(direction)

			}  // if(is_there_wall_on_direction(Right))
 8001768:	bf00      	nop
 800176a:	e006      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 800176c:	bf00      	nop
 800176e:	e004      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001770:	bf00      	nop
 8001772:	e002      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <do_flood_fill_algorithm+0x8ca>
					break;
 8001778:	bf00      	nop


			maze.cell_grid[c.x][c.y].visited = 1;
 800177a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800177e:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800178a:	f5a3 63c2 	sub.w	r3, r3, #1552	; 0x610
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	461c      	mov	r4, r3
 8001792:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8001796:	f5a3 61c1 	sub.w	r1, r3, #1544	; 0x608
 800179a:	4622      	mov	r2, r4
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4422      	add	r2, r4
 80017a0:	4603      	mov	r3, r0
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4403      	add	r3, r0
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	3304      	adds	r3, #4
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]

		}  // else if(!maze.cell_grid[c.x][c.y].visited)

		if(found_flood_fill_destination(&c, &maze))
 80017b2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f8be 	bl	800193e <found_flood_fill_destination>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d161      	bne.n	800188c <do_flood_fill_algorithm+0x9dc>
			return;
		}  // if(found_flood_fill_destination(&c, &maze))


		// need to figure next direction to go to and also update rest of distance grid.
		desired_direction = minus_one_neighbor(&maze, &c, &stack);
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80017ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f8d0 	bl	8001978 <minus_one_neighbor>
 80017d8:	4603      	mov	r3, r0
 80017da:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815

		if(desired_direction == Unknown)
 80017de:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d124      	bne.n	8001830 <do_flood_fill_algorithm+0x980>
		{
			while(!stack_is_empty(&stack))
 80017e6:	e011      	b.n	800180c <do_flood_fill_algorithm+0x95c>
			{
				// get the cell to test from the stack
				next_coordinate = pop_stack(&stack);
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f866 	bl	80018bc <pop_stack>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017f6:	f2a3 630c 	subw	r3, r3, #1548	; 0x60c
 80017fa:	801a      	strh	r2, [r3, #0]
				// find a neighbor cell with distance one less than current
				minus_one_neighbor(&maze, &next_coordinate, &stack);
 80017fc:	1d3a      	adds	r2, r7, #4
 80017fe:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001802:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f8b6 	bl	8001978 <minus_one_neighbor>
			while(!stack_is_empty(&stack))
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f842 	bl	8001898 <stack_is_empty>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0e6      	beq.n	80017e8 <do_flood_fill_algorithm+0x938>
			}  // while(stack.index != 0)
			// next_direction is the direction to go to next
			desired_direction = minus_one_neighbor(&maze, &c, &stack);
 800181a:	1d3a      	adds	r2, r7, #4
 800181c:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8001820:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001824:	4618      	mov	r0, r3
 8001826:	f000 f8a7 	bl	8001978 <minus_one_neighbor>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 3815 	strb.w	r3, [r7, #2069]	; 0x815
		}  // if(next_direction == Unknown)

		int difference = direction - desired_direction;
 8001830:	f897 2814 	ldrb.w	r2, [r7, #2068]	; 0x814
 8001834:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
		switch(difference % 4)
 800183e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001842:	425a      	negs	r2, r3
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	bf58      	it	pl
 800184e:	4253      	negpl	r3, r2
 8001850:	2b03      	cmp	r3, #3
 8001852:	d816      	bhi.n	8001882 <do_flood_fill_algorithm+0x9d2>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <do_flood_fill_algorithm+0x9ac>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	08001883 	.word	0x08001883
 8001860:	0800186d 	.word	0x0800186d
 8001864:	08001875 	.word	0x08001875
 8001868:	0800187b 	.word	0x0800187b
		{
		case 0:
			break;
		case 1:
			rotate_direction(Left);
 800186c:	2000      	movs	r0, #0
 800186e:	f000 fd31 	bl	80022d4 <rotate_direction>
			// TODO - might need to calibrate
			break;
 8001872:	e006      	b.n	8001882 <do_flood_fill_algorithm+0x9d2>
		case 2:
			rotate_180_degrees();
 8001874:	f000 fd5f 	bl	8002336 <rotate_180_degrees>
			// TODO - might need to calibrate
			break;
 8001878:	e003      	b.n	8001882 <do_flood_fill_algorithm+0x9d2>
		case 3:
			rotate_direction(Right);
 800187a:	2002      	movs	r0, #2
 800187c:	f000 fd2a 	bl	80022d4 <rotate_direction>
			// TODO - might need to calibrate
			break;
 8001880:	bf00      	nop
		}

		direction = desired_direction;
 8001882:	f897 3815 	ldrb.w	r3, [r7, #2069]	; 0x815
 8001886:	f887 3814 	strb.w	r3, [r7, #2068]	; 0x814
	{
 800188a:	e48b      	b.n	80011a4 <do_flood_fill_algorithm+0x2f4>
			return;
 800188c:	bf00      	nop

	}  // while(1)
}  // do_hug_left_algorithm()
 800188e:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8001892:	46bd      	mov	sp, r7
 8001894:	bdb0      	pop	{r4, r5, r7, pc}
 8001896:	bf00      	nop

08001898 <stack_is_empty>:

uint8_t stack_is_empty(stack *s)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	return s->index == 0;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <pop_stack>:

coordinate pop_stack(stack *s)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	s->index = s->index - 1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	return s->coordinates[s->index + 1];
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80018da:	3301      	adds	r3, #1
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	440b      	add	r3, r1
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	8013      	strh	r3, [r2, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	7b3a      	ldrb	r2, [r7, #12]
 80018ee:	f362 0307 	bfi	r3, r2, #0, #8
 80018f2:	7b7a      	ldrb	r2, [r7, #13]
 80018f4:	f362 230f 	bfi	r3, r2, #8, #8
}  // void pop_stack(Stack* s)
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <push_stack>:

void push_stack(stack* s, coordinate *c)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	s->index = s->index + 1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	s->coordinates[s->index] = *c;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6839      	ldr	r1, [r7, #0]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	460a      	mov	r2, r1
 800192e:	8812      	ldrh	r2, [r2, #0]
 8001930:	801a      	strh	r2, [r3, #0]
}  // void push_stack(Stack* s, uint8_t x, uint8_t y)
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <found_flood_fill_destination>:
		break;
	}  // switch(d)
}  // void move_forward_and_update(maze_direction d, Coordinate *c, Flood_Fill_Maze *m)

uint8_t found_flood_fill_destination(coordinate *c, flood_fill_maze *maze)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	return maze->distance_grid[c->x][c->y] == 0;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	4619      	mov	r1, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	0103      	lsls	r3, r0, #4
 8001958:	4413      	add	r3, r2
 800195a:	440b      	add	r3, r1
 800195c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
}  // uint8_t found_flood_fill_destination(Coordinate *c, Flood_Fill_Maze *maze)
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <minus_one_neighbor>:

maze_direction minus_one_neighbor(flood_fill_maze *maze, coordinate *c, stack *s)
{
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
	 the fastest way to get to the solution. It does this by finding the direction
	 to the neighbor tile that has a distance that is 1 less than that of the current
	 tile.
	 */

	uint16_t min_dist = 260;
 8001984:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001988:	82fb      	strh	r3, [r7, #22]

	// need to find target distance by looking through neighbors
	int16_t target = maze->distance_grid[c->x][c->y] - 1;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	4619      	mov	r1, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	0103      	lsls	r3, r0, #4
 800199a:	4413      	add	r3, r2
 800199c:	440b      	add	r3, r1
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	827b      	strh	r3, [r7, #18]
	for(uint8_t i = 0; i < 4; ++i)
 80019ac:	2300      	movs	r3, #0
 80019ae:	757b      	strb	r3, [r7, #21]
 80019b0:	e103      	b.n	8001bba <minus_one_neighbor+0x242>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461c      	mov	r4, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	785b      	ldrb	r3, [r3, #1]
 80019bc:	7d79      	ldrb	r1, [r7, #21]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	461a      	mov	r2, r3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	441a      	add	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4423      	add	r3, r4
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	4403      	add	r3, r0
 80019d2:	440b      	add	r3, r1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80e3 	bne.w	8001ba2 <minus_one_neighbor+0x22a>
		{
			switch(i)
 80019dc:	7d7b      	ldrb	r3, [r7, #21]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	f200 80e8 	bhi.w	8001bb4 <minus_one_neighbor+0x23c>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <minus_one_neighbor+0x74>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	08001a01 	.word	0x08001a01
 80019f0:	08001a6b 	.word	0x08001a6b
 80019f4:	08001ad3 	.word	0x08001ad3
 80019f8:	08001b3b 	.word	0x08001b3b
 80019fc:	08001bb5 	.word	0x08001bb5
			{
			case North:
				if(maze->distance_grid[c->x][c->y + 1] == target)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	440a      	add	r2, r1
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d101      	bne.n	8001a28 <minus_one_neighbor+0xb0>
				{
					return i;
 8001a24:	7d7b      	ldrb	r3, [r7, #21]
 8001a26:	e140      	b.n	8001caa <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y + 1] == target)
				if(maze->distance_grid[c->x][c->y + 1] < min_dist)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	3301      	adds	r3, #1
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	440a      	add	r2, r1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	8afa      	ldrh	r2, [r7, #22]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	f240 80ad 	bls.w	8001ba6 <minus_one_neighbor+0x22e>
				{
					min_dist = maze->distance_grid[c->x][c->y + 1];
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	3301      	adds	r3, #1
 8001a58:	68f9      	ldr	r1, [r7, #12]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	440a      	add	r2, r1
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y + 1] < min_dist)
				break;
 8001a68:	e09d      	b.n	8001ba6 <minus_one_neighbor+0x22e>
			case East:
				if(maze->distance_grid[c->x + 1][c->y] == target)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	7852      	ldrb	r2, [r2, #1]
 8001a74:	4611      	mov	r1, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	4413      	add	r3, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d101      	bne.n	8001a92 <minus_one_neighbor+0x11a>
				{
					return i;
 8001a8e:	7d7b      	ldrb	r3, [r7, #21]
 8001a90:	e10b      	b.n	8001caa <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x + 1][c->y] == target)
				if(maze->distance_grid[c->x + 1][c->y] < min_dist)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	7852      	ldrb	r2, [r2, #1]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	8afa      	ldrh	r2, [r7, #22]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d97a      	bls.n	8001baa <minus_one_neighbor+0x232>
				{
					min_dist = maze->distance_grid[c->x + 1][c->y];
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	7852      	ldrb	r2, [r2, #1]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	4413      	add	r3, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x + 1][c->y] < min_dist)
				break;
 8001ad0:	e06b      	b.n	8001baa <minus_one_neighbor+0x232>
			case South:
				if(maze->distance_grid[c->x][c->y-1] == target)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	440a      	add	r2, r1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d101      	bne.n	8001afa <minus_one_neighbor+0x182>
				{
					return i;
 8001af6:	7d7b      	ldrb	r3, [r7, #21]
 8001af8:	e0d7      	b.n	8001caa <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x][c->y-1] == target)
				if(maze->distance_grid[c->x][c->y-1] < min_dist)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	785b      	ldrb	r3, [r3, #1]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	440a      	add	r2, r1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	8afa      	ldrh	r2, [r7, #22]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d948      	bls.n	8001bae <minus_one_neighbor+0x236>
				{
					min_dist = maze->distance_grid[c->x][c->y-1];
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	785b      	ldrb	r3, [r3, #1]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	440a      	add	r2, r1
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x][c->y-1] < min_dist)
				break;
 8001b38:	e039      	b.n	8001bae <minus_one_neighbor+0x236>
			case West:
				if(maze->distance_grid[c->x-1][c->y] == target)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	7852      	ldrb	r2, [r2, #1]
 8001b44:	4611      	mov	r1, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d101      	bne.n	8001b62 <minus_one_neighbor+0x1ea>
				{
					return i;
 8001b5e:	7d7b      	ldrb	r3, [r7, #21]
 8001b60:	e0a3      	b.n	8001caa <minus_one_neighbor+0x332>
				}  // if(maze->distance_grid[c->x-1][c->y] == target)
				if(maze->distance_grid[c->x-1][c->y] < min_dist)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	7852      	ldrb	r2, [r2, #1]
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	8afa      	ldrh	r2, [r7, #22]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d916      	bls.n	8001bb2 <minus_one_neighbor+0x23a>
				{
					min_dist = maze->distance_grid[c->x-1][c->y];
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	7852      	ldrb	r2, [r2, #1]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	82fb      	strh	r3, [r7, #22]
				}  // if(maze->distance_grid[c->x-1][c->y] < min_dist)
				break;
 8001ba0:	e007      	b.n	8001bb2 <minus_one_neighbor+0x23a>
			case Unknown:
				break;
			}  // switch(i)
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001ba2:	bf00      	nop
 8001ba4:	e006      	b.n	8001bb4 <minus_one_neighbor+0x23c>
				break;
 8001ba6:	bf00      	nop
 8001ba8:	e004      	b.n	8001bb4 <minus_one_neighbor+0x23c>
				break;
 8001baa:	bf00      	nop
 8001bac:	e002      	b.n	8001bb4 <minus_one_neighbor+0x23c>
				break;
 8001bae:	bf00      	nop
 8001bb0:	e000      	b.n	8001bb4 <minus_one_neighbor+0x23c>
				break;
 8001bb2:	bf00      	nop
	for(uint8_t i = 0; i < 4; ++i)
 8001bb4:	7d7b      	ldrb	r3, [r7, #21]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	757b      	strb	r3, [r7, #21]
 8001bba:	7d7b      	ldrb	r3, [r7, #21]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	f67f aef8 	bls.w	80019b2 <minus_one_neighbor+0x3a>
	}  // for(uint8_t i = 0; i < 4; ++i)

	// update distance of coordinate to 1 plus minimum distance
	maze->distance_grid[c->x][c->y] = min_dist + 1;
 8001bc2:	8afb      	ldrh	r3, [r7, #22]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	4614      	mov	r4, r2
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	7852      	ldrb	r2, [r2, #1]
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2d9      	uxtb	r1, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	0123      	lsls	r3, r4, #4
 8001bda:	4413      	add	r3, r2
 8001bdc:	4403      	add	r3, r0
 8001bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be2:	460a      	mov	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]

	// Since we did not find a cell we push onto the stack
	for(uint8_t i = 0; i < 4; ++i)
 8001be6:	2300      	movs	r3, #0
 8001be8:	753b      	strb	r3, [r7, #20]
 8001bea:	e05a      	b.n	8001ca2 <minus_one_neighbor+0x32a>
	{
		if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461c      	mov	r4, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	7d39      	ldrb	r1, [r7, #20]
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	441a      	add	r2, r3
 8001c00:	4623      	mov	r3, r4
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4423      	add	r3, r4
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	4403      	add	r3, r0
 8001c0c:	440b      	add	r3, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d143      	bne.n	8001c9c <minus_one_neighbor+0x324>
		{
			coordinate temp;
			switch(i)
 8001c14:	7d3b      	ldrb	r3, [r7, #20]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d83a      	bhi.n	8001c90 <minus_one_neighbor+0x318>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <minus_one_neighbor+0x2a8>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001c49 	.word	0x08001c49
 8001c28:	08001c61 	.word	0x08001c61
 8001c2c:	08001c79 	.word	0x08001c79
			{
			case North:
				init_coordinate(&temp, c->x, c->y + 1);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	7819      	ldrb	r1, [r3, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f837 	bl	8001cb4 <init_coordinate>
				break;
 8001c46:	e023      	b.n	8001c90 <minus_one_neighbor+0x318>
			case East:
				init_coordinate(&temp, c->x + 1, c->y);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	785a      	ldrb	r2, [r3, #1]
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f82b 	bl	8001cb4 <init_coordinate>
				break;
 8001c5e:	e017      	b.n	8001c90 <minus_one_neighbor+0x318>
			case South:
				init_coordinate(&temp, c->x, c->y - 1);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	7819      	ldrb	r1, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f81f 	bl	8001cb4 <init_coordinate>
				break;
 8001c76:	e00b      	b.n	8001c90 <minus_one_neighbor+0x318>
			case West:
				init_coordinate(&temp, c->x - 1, c->y);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b2d9      	uxtb	r1, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	785a      	ldrb	r2, [r3, #1]
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f813 	bl	8001cb4 <init_coordinate>
				break;
 8001c8e:	bf00      	nop
			}  // switch(i)
			push_stack(s, &temp);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fe34 	bl	8001904 <push_stack>
	for(uint8_t i = 0; i < 4; ++i)
 8001c9c:	7d3b      	ldrb	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	753b      	strb	r3, [r7, #20]
 8001ca2:	7d3b      	ldrb	r3, [r7, #20]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d9a1      	bls.n	8001bec <minus_one_neighbor+0x274>
		}  // if(maze->cell_grid[c->x][c->y].walls[i] == No_Wall_Here)
	}  // for(uint8_t i = 0; i < 4; ++i)
	// return unknown
	return Unknown;
 8001ca8:	2304      	movs	r3, #4
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop

08001cb4 <init_coordinate>:

void init_coordinate(coordinate *c, uint8_t x, uint8_t y)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	70bb      	strb	r3, [r7, #2]
	c->x = x;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	701a      	strb	r2, [r3, #0]
	c->y = y;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	78ba      	ldrb	r2, [r7, #2]
 8001cce:	705a      	strb	r2, [r3, #1]
}  // void init_coor(Coordinate *c, uint8_t x, uint8_t y)
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <do_hug_left_algorithm>:
#include "hugger.h"

void do_hug_left_algorithm()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	// Keep to the left.
	if(!is_there_wall_on_direction(Left))
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f000 fdbb 	bl	800285c <is_there_wall_on_direction>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <do_hug_left_algorithm+0x1c>
	{
		// If there is an opening on the left, then we head there.
		rotate_direction(Left);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f000 faf1 	bl	80022d4 <rotate_direction>
		go_forward_one_unit();
 8001cf2:	f000 fb2d 	bl	8002350 <go_forward_one_unit>
 8001cf6:	e018      	b.n	8001d2a <do_hug_left_algorithm+0x4e>
	}
	else if(is_there_wall_on_direction(Front))
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f000 fdaf 	bl	800285c <is_there_wall_on_direction>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <do_hug_left_algorithm+0x4a>
	{
		// There is wall on both left and on front

		// There is also wall on right
		if(is_there_wall_on_direction(Right))
 8001d04:	2002      	movs	r0, #2
 8001d06:	f000 fda9 	bl	800285c <is_there_wall_on_direction>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d004      	beq.n	8001d1a <do_hug_left_algorithm+0x3e>
		{
			rotate_180_degrees();
 8001d10:	f000 fb11 	bl	8002336 <rotate_180_degrees>
			go_forward_one_unit();
 8001d14:	f000 fb1c 	bl	8002350 <go_forward_one_unit>
 8001d18:	e007      	b.n	8001d2a <do_hug_left_algorithm+0x4e>
		}
		else
		{
			// There is no wall on right
			rotate_direction(Right);
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f000 fada 	bl	80022d4 <rotate_direction>
			go_forward_one_unit();
 8001d20:	f000 fb16 	bl	8002350 <go_forward_one_unit>
 8001d24:	e001      	b.n	8001d2a <do_hug_left_algorithm+0x4e>
		}  // if(is_there_wall_on_direction(RIGHT))
	}
	else
	{
		// Just go forward if there is no wall in front but a wall on left
		go_forward_one_unit();
 8001d26:	f000 fb13 	bl	8002350 <go_forward_one_unit>
	}  // if()

	if(found_hugger_destination())
 8001d2a:	f000 f808 	bl	8001d3e <found_hugger_destination>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <do_hug_left_algorithm+0x5e>
	{
		return;
	}  // if(found_hugger_destination())

	return do_hug_left_algorithm();
 8001d34:	f7ff ffd2 	bl	8001cdc <do_hug_left_algorithm>
 8001d38:	e000      	b.n	8001d3c <do_hug_left_algorithm+0x60>
		return;
 8001d3a:	bf00      	nop
}  // do_hug_left_algorithm()
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <found_hugger_destination>:

uint8_t found_hugger_destination()
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
	// TODO - but there might not be a real way to know if you found a destination
	return 0;
 8001d42:	2300      	movs	r3, #0
}  // found_hugger_destination()
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d56:	f000 fdc3 	bl	80028e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d5a:	f000 f839 	bl	8001dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5e:	f000 f9f5 	bl	800214c <MX_GPIO_Init>
  MX_TIM3_Init();
 8001d62:	f000 f8eb 	bl	8001f3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d66:	f000 f943 	bl	8001ff0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001d6a:	f000 f88f 	bl	8001e8c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001d6e:	f000 f999 	bl	80020a4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  turn_LEDs_all(Off);  // Turn all colors off
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe ffd0 	bl	8000d18 <turn_LEDs_all>
  turn_LED(Red, On);  // Turn Red on to indicate state is on
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7fe ffeb 	bl	8000d56 <turn_LED>
  set_servo_angle(Front);  // Make sure the servo is facing forward
 8001d80:	2001      	movs	r0, #1
 8001d82:	f000 faf7 	bl	8002374 <set_servo_angle>
  stop_all_motors();  // Make sure the car is stopped
 8001d86:	f000 fa99 	bl	80022bc <stop_all_motors>

  // Enable the timers
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // Left Motor PWM
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <main+0x70>)
 8001d8e:	f001 fd61 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // Right Motor PWM
 8001d92:	2104      	movs	r1, #4
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <main+0x74>)
 8001d96:	f001 fd5d 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Servo Motor PWM
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <main+0x78>)
 8001d9e:	f001 fd59 	bl	8003854 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);  // Sonic Echo PWM
 8001da2:	2104      	movs	r1, #4
 8001da4:	4809      	ldr	r0, [pc, #36]	; (8001dcc <main+0x7c>)
 8001da6:	f001 fd55 	bl	8003854 <HAL_TIM_PWM_Start>


  uint8_t determined_algorithm = determine_algorithm();
 8001daa:	f7ff f82f 	bl	8000e0c <determine_algorithm>
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  do_search_algorithm(determined_algorithm);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f847 	bl	8000e48 <do_search_algorithm>
  complete_search_algorithm();
 8001dba:	f7ff f86a 	bl	8000e92 <complete_search_algorithm>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <main+0x6e>
 8001dc0:	200000b8 	.word	0x200000b8
 8001dc4:	20000070 	.word	0x20000070
 8001dc8:	20000028 	.word	0x20000028
 8001dcc:	20000100 	.word	0x20000100

08001dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b094      	sub	sp, #80	; 0x50
 8001dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd6:	f107 0320 	add.w	r3, r7, #32
 8001dda:	2230      	movs	r2, #48	; 0x30
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f002 fcc6 	bl	8004770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <SystemClock_Config+0xb4>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <SystemClock_Config+0xb4>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <SystemClock_Config+0xb4>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <SystemClock_Config+0xb8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <SystemClock_Config+0xb8>)
 8001e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <SystemClock_Config+0xb8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e30:	2301      	movs	r3, #1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e34:	2310      	movs	r3, #16
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 f893 	bl	8002f6c <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001e4c:	f000 f9ec 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e50:	230f      	movs	r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 faf6 	bl	800345c <HAL_RCC_ClockConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e76:	f000 f9d7 	bl	8002228 <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3750      	adds	r7, #80	; 0x50
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40007000 	.word	0x40007000

08001e8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]
 8001eac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001eb8:	229f      	movs	r2, #159	; 0x9f
 8001eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ec4:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ed6:	4818      	ldr	r0, [pc, #96]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ed8:	f001 fc6c 	bl	80037b4 <HAL_TIM_PWM_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ee2:	f000 f9a1 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eee:	f107 0320 	add.w	r3, r7, #32
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4810      	ldr	r0, [pc, #64]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001ef6:	f002 fb95 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f00:	f000 f992 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f04:	2360      	movs	r3, #96	; 0x60
 8001f06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001f1c:	f001 ff3e 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f26:	f000 f97f 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM2_Init+0xac>)
 8001f2c:	f000 fb0a 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000028 	.word	0x20000028

08001f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f42:	f107 0320 	add.w	r3, r7, #32
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <MX_TIM3_Init+0xb0>)
 8001f62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f84:	4818      	ldr	r0, [pc, #96]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001f86:	f001 fc15 	bl	80037b4 <HAL_TIM_PWM_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001f90:	f000 f94a 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001fa4:	f002 fb3e 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001fae:	f000 f93b 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb2:	2360      	movs	r3, #96	; 0x60
 8001fb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001fca:	f001 fee7 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001fd4:	f000 f928 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <MX_TIM3_Init+0xac>)
 8001fda:	f000 fab3 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000070 	.word	0x20000070
 8001fec:	40000400 	.word	0x40000400

08001ff0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	615a      	str	r2, [r3, #20]
 8002010:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <MX_TIM4_Init+0xac>)
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <MX_TIM4_Init+0xb0>)
 8002016:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <MX_TIM4_Init+0xac>)
 800201a:	224f      	movs	r2, #79	; 0x4f
 800201c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_TIM4_Init+0xac>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <MX_TIM4_Init+0xac>)
 8002026:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800202a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <MX_TIM4_Init+0xac>)
 800202e:	2200      	movs	r2, #0
 8002030:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_TIM4_Init+0xac>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002038:	4818      	ldr	r0, [pc, #96]	; (800209c <MX_TIM4_Init+0xac>)
 800203a:	f001 fbbb 	bl	80037b4 <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002044:	f000 f8f0 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002050:	f107 0320 	add.w	r3, r7, #32
 8002054:	4619      	mov	r1, r3
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <MX_TIM4_Init+0xac>)
 8002058:	f002 fae4 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002062:	f000 f8e1 	bl	8002228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
 8002068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM4_Init+0xac>)
 800207e:	f001 fe8d 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002088:	f000 f8ce 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM4_Init+0xac>)
 800208e:	f000 fa59 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200000b8 	.word	0x200000b8
 80020a0:	40000800 	.word	0x40000800

080020a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <MX_TIM5_Init+0xa4>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3;
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020c8:	2203      	movs	r2, #3
 80020ca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80020d2:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295
 80020d8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80020e6:	4817      	ldr	r0, [pc, #92]	; (8002144 <MX_TIM5_Init+0xa0>)
 80020e8:	f001 fc64 	bl	80039b4 <HAL_TIM_IC_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020f2:	f000 f899 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	4619      	mov	r1, r3
 8002104:	480f      	ldr	r0, [pc, #60]	; (8002144 <MX_TIM5_Init+0xa0>)
 8002106:	f002 fa8d 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002110:	f000 f88a 	bl	8002228 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002118:	2301      	movs	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	2204      	movs	r2, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_TIM5_Init+0xa0>)
 800212c:	f001 fd99 	bl	8003c62 <HAL_TIM_IC_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8002136:	f000 f877 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000100 	.word	0x20000100
 8002148:	40000c00 	.word	0x40000c00

0800214c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <MX_GPIO_Init+0xd0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a2c      	ldr	r2, [pc, #176]	; (800221c <MX_GPIO_Init+0xd0>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <MX_GPIO_Init+0xd0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <MX_GPIO_Init+0xd0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <MX_GPIO_Init+0xd0>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <MX_GPIO_Init+0xd0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4b1f      	ldr	r3, [pc, #124]	; (800221c <MX_GPIO_Init+0xd0>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a1e      	ldr	r2, [pc, #120]	; (800221c <MX_GPIO_Init+0xd0>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <MX_GPIO_Init+0xd0>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80021bc:	4818      	ldr	r0, [pc, #96]	; (8002220 <MX_GPIO_Init+0xd4>)
 80021be:	f000 febb 	bl	8002f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : YELLOW_LED_Pin RIGHT_DIR_Pin LEFT_DIR_Pin */
  GPIO_InitStruct.Pin = YELLOW_LED_Pin|RIGHT_DIR_Pin|LEFT_DIR_Pin;
 80021c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80021c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <MX_GPIO_Init+0xd4>)
 80021dc:	f000 fd28 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80021e0:	2340      	movs	r3, #64	; 0x40
 80021e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	480b      	ldr	r0, [pc, #44]	; (8002220 <MX_GPIO_Init+0xd4>)
 80021f4:	f000 fd1c 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = SONIC_TRIGGER_Pin;
 80021f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_GPIO_Init+0xd8>)
 800220e:	f000 fd0f 	bl	8002c30 <HAL_GPIO_Init>

}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <set_motor_speed>:
#include "motors.h"

void set_motor_speed(motor_side side, int16_t speed400)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	80bb      	strh	r3, [r7, #4]
	// speed400 is a number in [-400, 400]
	switch(side)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <set_motor_speed+0x1c>
 800224a:	2b01      	cmp	r3, #1
 800224c:	d016      	beq.n	800227c <set_motor_speed+0x48>
 800224e:	e02b      	b.n	80022a8 <set_motor_speed+0x74>
	{
	case Left_Motor:
		// Low is forward
		HAL_GPIO_WritePin(LEFT_DIR_GPIO_Port, LEFT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002250:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	bfd4      	ite	le
 8002258:	2301      	movle	r3, #1
 800225a:	2300      	movgt	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002264:	4812      	ldr	r0, [pc, #72]	; (80022b0 <set_motor_speed+0x7c>)
 8002266:	f000 fe67 	bl	8002f38 <HAL_GPIO_WritePin>
		TIM4->CCR1 = speed400 > 0 ? speed400 : -speed400;
 800226a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	bfb8      	it	lt
 8002272:	425b      	neglt	r3, r3
 8002274:	b29a      	uxth	r2, r3
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <set_motor_speed+0x80>)
 8002278:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800227a:	e015      	b.n	80022a8 <set_motor_speed+0x74>
	case Right_Motor:
		HAL_GPIO_WritePin(RIGHT_DIR_GPIO_Port, RIGHT_DIR_Pin, speed400 > 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800227c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	bfd4      	ite	le
 8002284:	2301      	movle	r3, #1
 8002286:	2300      	movgt	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <set_motor_speed+0x7c>)
 8002292:	f000 fe51 	bl	8002f38 <HAL_GPIO_WritePin>
		TIM3->CCR2 = speed400 > 0 ? speed400 : -speed400;
 8002296:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	bfb8      	it	lt
 800229e:	425b      	neglt	r3, r3
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <set_motor_speed+0x84>)
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38
		return;
 80022a6:	bf00      	nop
	}  // switch(side)
}  // set_motor_speed(motor_side side, int16_t speed400)
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40000400 	.word	0x40000400

080022bc <stop_all_motors>:
{
	set_motor_speed(side, 0);
}  // stop_motors(motor_side side)

void stop_all_motors()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	set_motor_speed(Left_Motor, 0);
 80022c0:	2100      	movs	r1, #0
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff ffb6 	bl	8002234 <set_motor_speed>
	set_motor_speed(Right_Motor, 0);
 80022c8:	2100      	movs	r1, #0
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff ffb2 	bl	8002234 <set_motor_speed>
}  // stop_all_motors()
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <rotate_direction>:
#include "mouse.h"

void rotate_direction(direction d)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
	// TODO - make sure numbers are precise enough. need to tune
	switch(d)
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d015      	beq.n	8002310 <rotate_direction+0x3c>
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	dc23      	bgt.n	8002330 <rotate_direction+0x5c>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <rotate_direction+0x1c>
 80022ec:	2b01      	cmp	r3, #1
		set_motor_speed(Right_Motor, 200);
		HAL_Delay(445);
		stop_all_motors();
		return;
	case Front:
		return;
 80022ee:	e01f      	b.n	8002330 <rotate_direction+0x5c>
		set_motor_speed(Left_Motor, -200);
 80022f0:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff ff9d 	bl	8002234 <set_motor_speed>
		set_motor_speed(Right_Motor, 200);
 80022fa:	21c8      	movs	r1, #200	; 0xc8
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff ff99 	bl	8002234 <set_motor_speed>
		HAL_Delay(445);
 8002302:	f240 10bd 	movw	r0, #445	; 0x1bd
 8002306:	f000 fb5d 	bl	80029c4 <HAL_Delay>
		stop_all_motors();
 800230a:	f7ff ffd7 	bl	80022bc <stop_all_motors>
		return;
 800230e:	e00f      	b.n	8002330 <rotate_direction+0x5c>
	case Right:
		set_motor_speed(Left_Motor, 200);
 8002310:	21c8      	movs	r1, #200	; 0xc8
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ff8e 	bl	8002234 <set_motor_speed>
		set_motor_speed(Right_Motor, -200);
 8002318:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 800231c:	2001      	movs	r0, #1
 800231e:	f7ff ff89 	bl	8002234 <set_motor_speed>
		HAL_Delay(445);
 8002322:	f240 10bd 	movw	r0, #445	; 0x1bd
 8002326:	f000 fb4d 	bl	80029c4 <HAL_Delay>
		stop_all_motors();
 800232a:	f7ff ffc7 	bl	80022bc <stop_all_motors>
		return;
 800232e:	bf00      	nop
	}  // switch(d)
}  // rotate_direction(direction d)
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <rotate_180_degrees>:

void rotate_180_degrees()
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
	rotate_direction(Left);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff ffca 	bl	80022d4 <rotate_direction>
	HAL_Delay(200);
 8002340:	20c8      	movs	r0, #200	; 0xc8
 8002342:	f000 fb3f 	bl	80029c4 <HAL_Delay>
	rotate_direction(Left);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ffc4 	bl	80022d4 <rotate_direction>

}  // rotate_180_degrees()
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <go_forward_one_unit>:
	}  // switch(d)

}  // rotate_360_degrees(direction d)

void go_forward_one_unit()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	// TODO - make sure numbers are precise enough. need to tune
	set_motor_speed(Left_Motor, 200);
 8002354:	21c8      	movs	r1, #200	; 0xc8
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff ff6c 	bl	8002234 <set_motor_speed>
	set_motor_speed(Right_Motor, 200);
 800235c:	21c8      	movs	r1, #200	; 0xc8
 800235e:	2001      	movs	r0, #1
 8002360:	f7ff ff68 	bl	8002234 <set_motor_speed>
	HAL_Delay(1000);
 8002364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002368:	f000 fb2c 	bl	80029c4 <HAL_Delay>
	stop_all_motors();
 800236c:	f7ff ffa6 	bl	80022bc <stop_all_motors>
}  // go_forward()
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <set_servo_angle>:
#include "servo.h"

void set_servo_angle(direction d)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
	// TODO - confirm that these angles are what we want
	switch(d)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d010      	beq.n	80023a6 <set_servo_angle+0x32>
 8002384:	2b02      	cmp	r3, #2
 8002386:	dc13      	bgt.n	80023b0 <set_servo_angle+0x3c>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <set_servo_angle+0x1e>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <set_servo_angle+0x28>
 8002390:	e00e      	b.n	80023b0 <set_servo_angle+0x3c>
	{
	case Left:
		TIM2->CCR1 = 225;
 8002392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002396:	22e1      	movs	r2, #225	; 0xe1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 800239a:	e009      	b.n	80023b0 <set_servo_angle+0x3c>
	case Front:
		TIM2->CCR1 = 150;
 800239c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a0:	2296      	movs	r2, #150	; 0x96
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80023a4:	e004      	b.n	80023b0 <set_servo_angle+0x3c>
	case Right:
		TIM2->CCR1 = 75;
 80023a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023aa:	224b      	movs	r2, #75	; 0x4b
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
		return;
 80023ae:	bf00      	nop
	}  // switch(d)
}  // set_servo_angle(direction d)
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d10e      	bne.n	800243c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800243a:	e026      	b.n	800248a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <HAL_TIM_PWM_MspInit+0x90>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
}
 8002462:	e012      	b.n	800248a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_TIM_PWM_MspInit+0x94>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_TIM_PWM_MspInit+0x8c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800

080024a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_TIM_IC_MspInit+0x94>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d133      	bne.n	800252e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_TIM_IC_MspInit+0x98>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = SONIC_ECHO_Pin;
 80024fe:	2302      	movs	r3, #2
 8002500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800250e:	2302      	movs	r3, #2
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SONIC_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_TIM_IC_MspInit+0x9c>)
 800251a:	f000 fb89 	bl	8002c30 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2032      	movs	r0, #50	; 0x32
 8002524:	f000 fb4d 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002528:	2032      	movs	r0, #50	; 0x32
 800252a:	f000 fb66 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002564:	d11f      	bne.n	80025a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	4b34      	ldr	r3, [pc, #208]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a33      	ldr	r2, [pc, #204]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002594:	2301      	movs	r3, #1
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002598:	f107 0314 	add.w	r3, r7, #20
 800259c:	4619      	mov	r1, r3
 800259e:	4828      	ldr	r0, [pc, #160]	; (8002640 <HAL_TIM_MspPostInit+0xfc>)
 80025a0:	f000 fb46 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025a4:	e046      	b.n	8002634 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_TIM_MspPostInit+0x100>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d11e      	bne.n	80025ee <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6313      	str	r3, [r2, #48]	; 0x30
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RIGHT_PWM_Pin;
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025dc:	2302      	movs	r3, #2
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	4818      	ldr	r0, [pc, #96]	; (8002648 <HAL_TIM_MspPostInit+0x104>)
 80025e8:	f000 fb22 	bl	8002c30 <HAL_GPIO_Init>
}
 80025ec:	e022      	b.n	8002634 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIM_MspPostInit+0x108>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d11d      	bne.n	8002634 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a0e      	ldr	r2, [pc, #56]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <HAL_TIM_MspPostInit+0xf8>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LEFT_PWM_Pin;
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002624:	2302      	movs	r3, #2
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LEFT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	4808      	ldr	r0, [pc, #32]	; (8002650 <HAL_TIM_MspPostInit+0x10c>)
 8002630:	f000 fafe 	bl	8002c30 <HAL_GPIO_Init>
}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000
 8002644:	40000400 	.word	0x40000400
 8002648:	40020800 	.word	0x40020800
 800264c:	40000800 	.word	0x40000800
 8002650:	40020400 	.word	0x40020400

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a0:	f000 f970 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026ae:	482c      	ldr	r0, [pc, #176]	; (8002760 <TIM5_IRQHandler+0xb8>)
 80026b0:	f001 f9cf 	bl	8003a52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  if (risingEdgeInterrupt == 1)
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <TIM5_IRQHandler+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10e      	bne.n	80026da <TIM5_IRQHandler+0x32>
  {
	  TIM5->CNT = 0;
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24
	  TIM5->CCER = (TIM5->CCER & ~(0b1010)) | 0b0010;
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 030a 	bic.w	r3, r3, #10
 80026ca:	4a27      	ldr	r2, [pc, #156]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	6213      	str	r3, [r2, #32]
	  risingEdgeInterrupt = 0;
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <TIM5_IRQHandler+0xbc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
	  risingEdgeInterrupt = 1;
	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
  }

  /* USER CODE END TIM5_IRQn 1 */
}
 80026d8:	e038      	b.n	800274c <TIM5_IRQHandler+0xa4>
	  counter = TIM5->CNT;
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	461a      	mov	r2, r3
 80026e0:	4b22      	ldr	r3, [pc, #136]	; (800276c <TIM5_IRQHandler+0xc4>)
 80026e2:	601a      	str	r2, [r3, #0]
	  TIM5->CCER = (TIM5->CCER & ~(0b1010)) | 0b0000;
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <TIM5_IRQHandler+0xc0>)
 80026ea:	f023 030a 	bic.w	r3, r3, #10
 80026ee:	6213      	str	r3, [r2, #32]
	  float inches = counter / 144.0;
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <TIM5_IRQHandler+0xc4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fec1 	bl	800047c <__aeabi_i2d>
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <TIM5_IRQHandler+0xc8>)
 8002700:	f7fe f850 	bl	80007a4 <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe f932 	bl	8000974 <__aeabi_d2f>
 8002710:	4603      	mov	r3, r0
 8002712:	607b      	str	r3, [r7, #4]
	  centimeters = inches * 2.54;
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fd fec3 	bl	80004a0 <__aeabi_f2d>
 800271a:	a30f      	add	r3, pc, #60	; (adr r3, 8002758 <TIM5_IRQHandler+0xb0>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd ff16 	bl	8000550 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe f922 	bl	8000974 <__aeabi_d2f>
 8002730:	4603      	mov	r3, r0
 8002732:	4a10      	ldr	r2, [pc, #64]	; (8002774 <TIM5_IRQHandler+0xcc>)
 8002734:	6013      	str	r3, [r2, #0]
	  risingEdgeInterrupt = 1;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <TIM5_IRQHandler+0xbc>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC2);
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <TIM5_IRQHandler+0xb8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <TIM5_IRQHandler+0xb8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0204 	bic.w	r2, r2, #4
 800274a:	60da      	str	r2, [r3, #12]
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	f3af 8000 	nop.w
 8002758:	851eb852 	.word	0x851eb852
 800275c:	400451eb 	.word	0x400451eb
 8002760:	20000100 	.word	0x20000100
 8002764:	20000148 	.word	0x20000148
 8002768:	40000c00 	.word	0x40000c00
 800276c:	2000014c 	.word	0x2000014c
 8002770:	40620000 	.word	0x40620000
 8002774:	20000150 	.word	0x20000150

08002778 <is_switch_on>:
#include "switch.h"

uint8_t is_switch_on()
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	// TODO - find way to get switch data
	return 0;
 800277c:	2300      	movs	r3, #0
}   // is_switch_on()
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <test_wall_sensor>:
	rotate_360_degrees(Right);
	HAL_Delay(1000);
}  // void test_alternate_360()

void test_wall_sensor()
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
	uint8_t left = is_there_wall_on_direction(Left);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f000 f852 	bl	800285c <is_there_wall_on_direction>
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
	uint8_t right = is_there_wall_on_direction(Right);
 80027bc:	2002      	movs	r0, #2
 80027be:	f000 f84d 	bl	800285c <is_there_wall_on_direction>
 80027c2:	4603      	mov	r3, r0
 80027c4:	71bb      	strb	r3, [r7, #6]
	uint8_t front = is_there_wall_on_direction(Front);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 f848 	bl	800285c <is_there_wall_on_direction>
 80027cc:	4603      	mov	r3, r0
 80027ce:	717b      	strb	r3, [r7, #5]
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <do_test_algorithm>:
	TIM2->CCR1 = 200;
	TIM2->CCR1 = 225;// left
}

void do_test_algorithm()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0

//	test_alternate_left_right();
//	test_zig_zag();
//	test_turn_left();
	test_wall_sensor();
 80027dc:	f7ff ffe6 	bl	80027ac <test_wall_sensor>
//	test_servo_angles();


	return do_test_algorithm();
 80027e0:	f7ff fffa 	bl	80027d8 <do_test_algorithm>
}  // do_test_algorithm()
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <distance_of_object_in_cm>:
int risingEdgeInterrupt;
int counter;
float centimeters;

int16_t distance_of_object_in_cm()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
	risingEdgeInterrupt = 1;
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <distance_of_object_in_cm+0x60>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
	counter = 0;
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <distance_of_object_in_cm+0x64>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
	centimeters = 0;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <distance_of_object_in_cm+0x68>)
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(SONIC_TRIGGER_GPIO_Port, SONIC_TRIGGER_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002800:	2201      	movs	r2, #1
 8002802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002806:	4813      	ldr	r0, [pc, #76]	; (8002854 <distance_of_object_in_cm+0x6c>)
 8002808:	f000 fb96 	bl	8002f38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800280c:	200a      	movs	r0, #10
 800280e:	f000 f8d9 	bl	80029c4 <HAL_Delay>
	HAL_GPIO_WritePin(SONIC_TRIGGER_GPIO_Port, SONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002818:	480e      	ldr	r0, [pc, #56]	; (8002854 <distance_of_object_in_cm+0x6c>)
 800281a:	f000 fb8d 	bl	8002f38 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <distance_of_object_in_cm+0x70>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <distance_of_object_in_cm+0x70>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0204 	orr.w	r2, r2, #4
 800282c:	60da      	str	r2, [r3, #12]
	HAL_Delay(100);
 800282e:	2064      	movs	r0, #100	; 0x64
 8002830:	f000 f8c8 	bl	80029c4 <HAL_Delay>
	return centimeters;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <distance_of_object_in_cm+0x68>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	b21b      	sxth	r3, r3
}  // int16_t distance_of_object_in_cm()
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000148 	.word	0x20000148
 800284c:	2000014c 	.word	0x2000014c
 8002850:	20000150 	.word	0x20000150
 8002854:	40020400 	.word	0x40020400
 8002858:	20000100 	.word	0x20000100

0800285c <is_there_wall_on_direction>:
#include <wall_sensor.h>

uint8_t is_there_wall_on_direction(direction d)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
	set_servo_angle(d);
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fd83 	bl	8002374 <set_servo_angle>
	HAL_Delay(100);
 800286e:	2064      	movs	r0, #100	; 0x64
 8002870:	f000 f8a8 	bl	80029c4 <HAL_Delay>
	return distance_of_object_in_cm() < 18;
 8002874:	f7ff ffb8 	bl	80027e8 <distance_of_object_in_cm>
 8002878:	4603      	mov	r3, r0
 800287a:	2b11      	cmp	r3, #17
 800287c:	bfd4      	ite	le
 800287e:	2301      	movle	r3, #1
 8002880:	2300      	movgt	r3, #0
 8002882:	b2db      	uxtb	r3, r3
}  // is_there_wall_on_direction(direction d)
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002892:	490e      	ldr	r1, [pc, #56]	; (80028cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002898:	e002      	b.n	80028a0 <LoopCopyDataInit>

0800289a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800289c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289e:	3304      	adds	r3, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a4:	d3f9      	bcc.n	800289a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028a8:	4c0b      	ldr	r4, [pc, #44]	; (80028d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ac:	e001      	b.n	80028b2 <LoopFillZerobss>

080028ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b0:	3204      	adds	r2, #4

080028b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b4:	d3fb      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028b6:	f7ff ff67 	bl	8002788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ba:	f001 ff35 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7ff fa47 	bl	8001d50 <main>
  bx  lr    
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80028d0:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 80028d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80028d8:	20000158 	.word	0x20000158

080028dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <HAL_Init+0x40>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_Init+0x40>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_Init+0x40>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f94f 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fd52 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f967 	bl	8002c16 <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 f92f 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000000 	.word	0x20000000
 800297c:	20000008 	.word	0x20000008
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000008 	.word	0x20000008
 80029a8:	20000154 	.word	0x20000154

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000154 	.word	0x20000154

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000008 	.word	0x20000008

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff29 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff3e 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e159      	b.n	8002f00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8148 	bne.w	8002efa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a2 	beq.w	8002efa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <HAL_GPIO_Init+0x2e8>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd2:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_GPIO_Init+0x2ec>)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a49      	ldr	r2, [pc, #292]	; (8002f20 <HAL_GPIO_Init+0x2f0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x202>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a48      	ldr	r2, [pc, #288]	; (8002f24 <HAL_GPIO_Init+0x2f4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x1fe>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a47      	ldr	r2, [pc, #284]	; (8002f28 <HAL_GPIO_Init+0x2f8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x1fa>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a46      	ldr	r2, [pc, #280]	; (8002f2c <HAL_GPIO_Init+0x2fc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x1f6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a45      	ldr	r2, [pc, #276]	; (8002f30 <HAL_GPIO_Init+0x300>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x1f2>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e008      	b.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e22:	2307      	movs	r3, #7
 8002e24:	e006      	b.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e26:	2303      	movs	r3, #3
 8002e28:	e004      	b.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e002      	b.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_GPIO_Init+0x204>
 8002e32:	2300      	movs	r3, #0
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f002 0203 	and.w	r2, r2, #3
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	4093      	lsls	r3, r2
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e44:	4935      	ldr	r1, [pc, #212]	; (8002f1c <HAL_GPIO_Init+0x2ec>)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e52:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e76:	4a2f      	ldr	r2, [pc, #188]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea0:	4a24      	ldr	r2, [pc, #144]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eca:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed0:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x304>)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	f67f aea2 	bls.w	8002c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40013800 	.word	0x40013800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
 8002f44:	4613      	mov	r3, r2
 8002f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f48:	787b      	ldrb	r3, [r7, #1]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f54:	e003      	b.n	8002f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f56:	887b      	ldrh	r3, [r7, #2]
 8002f58:	041a      	lsls	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e267      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d075      	beq.n	8003076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	4b88      	ldr	r3, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d00c      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f96:	4b85      	ldr	r3, [pc, #532]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d112      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa2:	4b82      	ldr	r3, [pc, #520]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	4b7e      	ldr	r3, [pc, #504]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d05b      	beq.n	8003074 <HAL_RCC_OscConfig+0x108>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d157      	bne.n	8003074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e242      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d106      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x74>
 8002fd2:	4b76      	ldr	r3, [pc, #472]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a75      	ldr	r2, [pc, #468]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e01d      	b.n	800301c <HAL_RCC_OscConfig+0xb0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x98>
 8002fea:	4b70      	ldr	r3, [pc, #448]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6f      	ldr	r2, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a6c      	ldr	r2, [pc, #432]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0xb0>
 8003004:	4b69      	ldr	r3, [pc, #420]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a68      	ldr	r2, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 800300a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b66      	ldr	r3, [pc, #408]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d013      	beq.n	800304c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7ff fcc2 	bl	80029ac <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800302c:	f7ff fcbe 	bl	80029ac <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e207      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303e:	4b5b      	ldr	r3, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0xc0>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7ff fcae 	bl	80029ac <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003054:	f7ff fcaa 	bl	80029ac <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e1f3      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003066:	4b51      	ldr	r3, [pc, #324]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0xe8>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d063      	beq.n	800314a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003082:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003096:	2b08      	cmp	r3, #8
 8003098:	d11c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309a:	4b44      	ldr	r3, [pc, #272]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d116      	bne.n	80030d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a6:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_RCC_OscConfig+0x152>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e1c7      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4937      	ldr	r1, [pc, #220]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d2:	e03a      	b.n	800314a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d020      	beq.n	800311e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_OscConfig+0x244>)
 80030de:	2201      	movs	r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7ff fc63 	bl	80029ac <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ea:	f7ff fc5f 	bl	80029ac <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e1a8      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4925      	ldr	r1, [pc, #148]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
 800311c:	e015      	b.n	800314a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x244>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7ff fc42 	bl	80029ac <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312c:	f7ff fc3e 	bl	80029ac <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e187      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d036      	beq.n	80031c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_RCC_OscConfig+0x248>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7ff fc22 	bl	80029ac <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316c:	f7ff fc1e 	bl	80029ac <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e167      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_OscConfig+0x240>)
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x200>
 800318a:	e01b      	b.n	80031c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_OscConfig+0x248>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7ff fc0b 	bl	80029ac <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	e00e      	b.n	80031b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319a:	f7ff fc07 	bl	80029ac <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d907      	bls.n	80031b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e150      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
 80031ac:	40023800 	.word	0x40023800
 80031b0:	42470000 	.word	0x42470000
 80031b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ea      	bne.n	800319a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8097 	beq.w	8003300 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	4b7d      	ldr	r3, [pc, #500]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	4a7c      	ldr	r2, [pc, #496]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80031ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f0:	6413      	str	r3, [r2, #64]	; 0x40
 80031f2:	4b7a      	ldr	r3, [pc, #488]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b77      	ldr	r3, [pc, #476]	; (80033e0 <HAL_RCC_OscConfig+0x474>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320e:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <HAL_RCC_OscConfig+0x474>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a73      	ldr	r2, [pc, #460]	; (80033e0 <HAL_RCC_OscConfig+0x474>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321a:	f7ff fbc7 	bl	80029ac <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003222:	f7ff fbc3 	bl	80029ac <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e10c      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_OscConfig+0x474>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x2ea>
 8003248:	4b64      	ldr	r3, [pc, #400]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a63      	ldr	r2, [pc, #396]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e01c      	b.n	8003290 <HAL_RCC_OscConfig+0x324>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b05      	cmp	r3, #5
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x30c>
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	4b5c      	ldr	r3, [pc, #368]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a5b      	ldr	r2, [pc, #364]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0x324>
 8003278:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	4a57      	ldr	r2, [pc, #348]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6713      	str	r3, [r2, #112]	; 0x70
 8003284:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a54      	ldr	r2, [pc, #336]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7ff fb88 	bl	80029ac <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7ff fb84 	bl	80029ac <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0cb      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0ee      	beq.n	80032a0 <HAL_RCC_OscConfig+0x334>
 80032c2:	e014      	b.n	80032ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c4:	f7ff fb72 	bl	80029ac <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7ff fb6e 	bl	80029ac <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0b5      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e2:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1ee      	bne.n	80032cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	4a38      	ldr	r2, [pc, #224]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a1 	beq.w	800344c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330a:	4b34      	ldr	r3, [pc, #208]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b08      	cmp	r3, #8
 8003314:	d05c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d141      	bne.n	80033a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <HAL_RCC_OscConfig+0x478>)
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7ff fb42 	bl	80029ac <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7ff fb3e 	bl	80029ac <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e087      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69da      	ldr	r2, [r3, #28]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	019b      	lsls	r3, r3, #6
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	3b01      	subs	r3, #1
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	491b      	ldr	r1, [pc, #108]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x478>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7ff fb17 	bl	80029ac <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003382:	f7ff fb13 	bl	80029ac <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e05c      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x416>
 80033a0:	e054      	b.n	800344c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_RCC_OscConfig+0x478>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7ff fb00 	bl	80029ac <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7ff fafc 	bl	80029ac <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e045      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_OscConfig+0x470>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x444>
 80033ce:	e03d      	b.n	800344c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e038      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCC_OscConfig+0x4ec>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d028      	beq.n	8003448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d121      	bne.n	8003448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d11a      	bne.n	8003448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003418:	4013      	ands	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	3b01      	subs	r3, #1
 8003432:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cc      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90c      	bls.n	8003498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d044      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	2b03      	cmp	r3, #3
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e067      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4934      	ldr	r1, [pc, #208]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7ff fa2e 	bl	80029ac <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7ff fa2a 	bl	80029ac <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20c      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4602      	mov	r2, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	490a      	ldr	r1, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	5ccb      	ldrb	r3, [r1, r3]
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f98e 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	08004798 	.word	0x08004798
 8003620:	20000000 	.word	0x20000000
 8003624:	20000004 	.word	0x20000004

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b090      	sub	sp, #64	; 0x40
 800362e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
 8003634:	2300      	movs	r3, #0
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003638:	2300      	movs	r3, #0
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003640:	4b59      	ldr	r3, [pc, #356]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d00d      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x40>
 800364c:	2b08      	cmp	r3, #8
 800364e:	f200 80a1 	bhi.w	8003794 <HAL_RCC_GetSysClockFreq+0x16c>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x34>
 8003656:	2b04      	cmp	r3, #4
 8003658:	d003      	beq.n	8003662 <HAL_RCC_GetSysClockFreq+0x3a>
 800365a:	e09b      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_GetSysClockFreq+0x184>)
 800365e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003660:	e09b      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003666:	e098      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	2200      	movs	r2, #0
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	627a      	str	r2, [r7, #36]	; 0x24
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003690:	2100      	movs	r1, #0
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003694:	fb03 f201 	mul.w	r2, r3, r1
 8003698:	2300      	movs	r3, #0
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	4413      	add	r3, r2
 80036a0:	4a43      	ldr	r2, [pc, #268]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a2:	fba0 1202 	umull	r1, r2, r0, r2
 80036a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a8:	460a      	mov	r2, r1
 80036aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80036ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ae:	4413      	add	r3, r2
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b4:	2200      	movs	r2, #0
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	61fa      	str	r2, [r7, #28]
 80036ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036c2:	f7fd f9a7 	bl	8000a14 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4613      	mov	r3, r2
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	e053      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	2200      	movs	r2, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	617a      	str	r2, [r7, #20]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036e2:	f04f 0b00 	mov.w	fp, #0
 80036e6:	4652      	mov	r2, sl
 80036e8:	465b      	mov	r3, fp
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003702:	eb63 090b 	sbc.w	r9, r3, fp
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003712:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003716:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800371a:	ebb2 0408 	subs.w	r4, r2, r8
 800371e:	eb63 0509 	sbc.w	r5, r3, r9
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	00eb      	lsls	r3, r5, #3
 800372c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003730:	00e2      	lsls	r2, r4, #3
 8003732:	4614      	mov	r4, r2
 8003734:	461d      	mov	r5, r3
 8003736:	eb14 030a 	adds.w	r3, r4, sl
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	eb45 030b 	adc.w	r3, r5, fp
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800374e:	4629      	mov	r1, r5
 8003750:	028b      	lsls	r3, r1, #10
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003758:	4621      	mov	r1, r4
 800375a:	028a      	lsls	r2, r1, #10
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003762:	2200      	movs	r2, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	60fa      	str	r2, [r7, #12]
 8003768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800376c:	f7fd f952 	bl	8000a14 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4613      	mov	r3, r2
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003792:	e002      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800379c:	4618      	mov	r0, r3
 800379e:	3740      	adds	r7, #64	; 0x40
 80037a0:	46bd      	mov	sp, r7
 80037a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	017d7840 	.word	0x017d7840

080037b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe fe16 	bl	800240c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fbc6 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_TIM_PWM_Start+0x24>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e022      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d109      	bne.n	8003892 <HAL_TIM_PWM_Start+0x3e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	e015      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d109      	bne.n	80038ac <HAL_TIM_PWM_Start+0x58>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e008      	b.n	80038be <HAL_TIM_PWM_Start+0x6a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e068      	b.n	8003998 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x82>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038d4:	e013      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x92>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e4:	e00b      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	e003      	b.n	80038fe <HAL_TIM_PWM_Start+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe66 	bl	80045d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <HAL_TIM_PWM_Start+0x14c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d107      	bne.n	8003926 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_TIM_PWM_Start+0x14c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_TIM_PWM_Start+0x10e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d013      	beq.n	8003962 <HAL_TIM_PWM_Start+0x10e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_TIM_PWM_Start+0x150>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_TIM_PWM_Start+0x10e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_TIM_PWM_Start+0x154>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_TIM_PWM_Start+0x10e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_TIM_PWM_Start+0x158>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIM_PWM_Start+0x10e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <HAL_TIM_PWM_Start+0x15c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d111      	bne.n	8003986 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b06      	cmp	r3, #6
 8003972:	d010      	beq.n	8003996 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	e007      	b.n	8003996 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40014000 	.word	0x40014000

080039b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fd62 	bl	80024a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fac6 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d122      	bne.n	8003aae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d11b      	bne.n	8003aae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0202 	mvn.w	r2, #2
 8003a7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa57 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003a9a:	e005      	b.n	8003aa8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fa49 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa5a 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d122      	bne.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d11b      	bne.n	8003b02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0204 	mvn.w	r2, #4
 8003ad2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa2d 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003aee:	e005      	b.n	8003afc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa1f 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa30 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d122      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d11b      	bne.n	8003b56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0208 	mvn.w	r2, #8
 8003b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa03 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003b42:	e005      	b.n	8003b50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f9f5 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa06 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d122      	bne.n	8003baa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d11b      	bne.n	8003baa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0210 	mvn.w	r2, #16
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f9d9 	bl	8003f48 <HAL_TIM_IC_CaptureCallback>
 8003b96:	e005      	b.n	8003ba4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f9cb 	bl	8003f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9dc 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10e      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f06f 0201 	mvn.w	r2, #1
 8003bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f9a5 	bl	8003f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be0:	2b80      	cmp	r3, #128	; 0x80
 8003be2:	d10e      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d107      	bne.n	8003c02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fd89 	bl	8004714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d10e      	bne.n	8003c2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d107      	bne.n	8003c2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f9a1 	bl	8003f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d10e      	bne.n	8003c5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d107      	bne.n	8003c5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0220 	mvn.w	r2, #32
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fd53 	bl	8004700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e088      	b.n	8003d92 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f000 fb7d 	bl	800439c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020c 	bic.w	r2, r2, #12
 8003cb0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6999      	ldr	r1, [r3, #24]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	e060      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d11c      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 fbc6 	bl	800446c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e040      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 fbe3 	bl	80044e6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020c 	bic.w	r2, r2, #12
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69d9      	ldr	r1, [r3, #28]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	61da      	str	r2, [r3, #28]
 8003d42:	e021      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d11c      	bne.n	8003d84 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 fc00 	bl	800455e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
 8003d82:	e001      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e0ae      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	f200 809f 	bhi.w	8003f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003f09 	.word	0x08003f09
 8003dd8:	08003f09 	.word	0x08003f09
 8003ddc:	08003f09 	.word	0x08003f09
 8003de0:	08003e45 	.word	0x08003e45
 8003de4:	08003f09 	.word	0x08003f09
 8003de8:	08003f09 	.word	0x08003f09
 8003dec:	08003f09 	.word	0x08003f09
 8003df0:	08003e87 	.word	0x08003e87
 8003df4:	08003f09 	.word	0x08003f09
 8003df8:	08003f09 	.word	0x08003f09
 8003dfc:	08003f09 	.word	0x08003f09
 8003e00:	08003ec7 	.word	0x08003ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f93a 	bl	8004084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0208 	orr.w	r2, r2, #8
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
      break;
 8003e42:	e064      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f980 	bl	8004150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
      break;
 8003e84:	e043      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f9cb 	bl	8004228 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0208 	orr.w	r2, r2, #8
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0204 	bic.w	r2, r2, #4
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	61da      	str	r2, [r3, #28]
      break;
 8003ec4:	e023      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fa15 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	021a      	lsls	r2, r3, #8
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	61da      	str	r2, [r3, #28]
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a34      	ldr	r2, [pc, #208]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00f      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d00b      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a31      	ldr	r2, [pc, #196]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a30      	ldr	r2, [pc, #192]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_Base_SetConfig+0x38>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <TIM_Base_SetConfig+0xf0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a25      	ldr	r2, [pc, #148]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01b      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d017      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	; (800406c <TIM_Base_SetConfig+0xe8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <TIM_Base_SetConfig+0xec>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00f      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a20      	ldr	r2, [pc, #128]	; (8004074 <TIM_Base_SetConfig+0xf0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00b      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <TIM_Base_SetConfig+0xf4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <TIM_Base_SetConfig+0xf8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_Base_SetConfig+0x8a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <TIM_Base_SetConfig+0xfc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a08      	ldr	r2, [pc, #32]	; (8004068 <TIM_Base_SetConfig+0xe4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d103      	bne.n	8004054 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	615a      	str	r2, [r3, #20]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40014000 	.word	0x40014000
 800407c:	40014400 	.word	0x40014400
 8004080:	40014800 	.word	0x40014800

08004084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d10c      	bne.n	80040fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0308 	bic.w	r3, r3, #8
 80040e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a13      	ldr	r2, [pc, #76]	; (800414c <TIM_OC1_SetConfig+0xc8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d111      	bne.n	8004126 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	621a      	str	r2, [r3, #32]
}
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40010000 	.word	0x40010000

08004150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0210 	bic.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4313      	orrs	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0320 	bic.w	r3, r3, #32
 800419a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a1e      	ldr	r2, [pc, #120]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10d      	bne.n	80041cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <TIM_OC2_SetConfig+0xd4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d113      	bne.n	80041fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000

08004228 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1d      	ldr	r2, [pc, #116]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10d      	bne.n	80042a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800428c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC3_SetConfig+0xd0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d113      	bne.n	80042d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40010000 	.word	0x40010000

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a10      	ldr	r2, [pc, #64]	; (8004398 <TIM_OC4_SetConfig+0x9c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d109      	bne.n	8004370 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000

0800439c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0201 	bic.w	r2, r3, #1
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <TIM_TI1_SetConfig+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <TIM_TI1_SetConfig+0x56>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d0:	d00f      	beq.n	80043f2 <TIM_TI1_SetConfig+0x56>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a21      	ldr	r2, [pc, #132]	; (800445c <TIM_TI1_SetConfig+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_TI1_SetConfig+0x56>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a20      	ldr	r2, [pc, #128]	; (8004460 <TIM_TI1_SetConfig+0xc4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_TI1_SetConfig+0x56>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a1f      	ldr	r2, [pc, #124]	; (8004464 <TIM_TI1_SetConfig+0xc8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_TI1_SetConfig+0x56>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <TIM_TI1_SetConfig+0xcc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <TIM_TI1_SetConfig+0x5a>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <TIM_TI1_SetConfig+0x5c>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e003      	b.n	8004416 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800441c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	b2db      	uxtb	r3, r3
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f023 030a 	bic.w	r3, r3, #10
 8004430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f003 030a 	and.w	r3, r3, #10
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000

0800446c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 0210 	bic.w	r2, r3, #16
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b087      	sub	sp, #28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004522:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	b2db      	uxtb	r3, r3
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004536:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	621a      	str	r2, [r3, #32]
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800455e:	b480      	push	{r7}
 8004560:	b087      	sub	sp, #28
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	607a      	str	r2, [r7, #4]
 800456a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800459c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	031b      	lsls	r3, r3, #12
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80045b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e050      	b.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d013      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a16      	ldr	r2, [pc, #88]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a15      	ldr	r2, [pc, #84]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d10c      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
 80046fc:	40014000 	.word	0x40014000

08004700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4d0d      	ldr	r5, [pc, #52]	; (8004760 <__libc_init_array+0x38>)
 800472c:	4c0d      	ldr	r4, [pc, #52]	; (8004764 <__libc_init_array+0x3c>)
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	10a4      	asrs	r4, r4, #2
 8004732:	2600      	movs	r6, #0
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	4d0b      	ldr	r5, [pc, #44]	; (8004768 <__libc_init_array+0x40>)
 800473a:	4c0c      	ldr	r4, [pc, #48]	; (800476c <__libc_init_array+0x44>)
 800473c:	f000 f820 	bl	8004780 <_init>
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	2600      	movs	r6, #0
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	080047b0 	.word	0x080047b0
 8004764:	080047b0 	.word	0x080047b0
 8004768:	080047b0 	.word	0x080047b0
 800476c:	080047b4 	.word	0x080047b4

08004770 <memset>:
 8004770:	4402      	add	r2, r0
 8004772:	4603      	mov	r3, r0
 8004774:	4293      	cmp	r3, r2
 8004776:	d100      	bne.n	800477a <memset+0xa>
 8004778:	4770      	bx	lr
 800477a:	f803 1b01 	strb.w	r1, [r3], #1
 800477e:	e7f9      	b.n	8004774 <memset+0x4>

08004780 <_init>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	bf00      	nop
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr

0800478c <_fini>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr
